/*! For license information please see xabber.main.js.LICENSE.txt */
(()=>{var __webpack_modules__={"./node_modules/raw-loader/dist/cjs.js!./templates/accounts/emojis.txt":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("module.exports = \\"[\\\\n    {\\\\n        \\\\\\"emojis\\\\\\": [\\\\n            [\\\\n                \\\\\\"😀\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😁\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😂\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤣\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😃\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😄\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😅\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😆\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😉\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😊\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😋\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😎\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😍\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😘\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😗\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😙\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😚\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"☺️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🙂\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤗\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤩\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤔\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤨\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😐\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😑\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😶\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🙄\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😏\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😣\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😥\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😮\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤐\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😯\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😪\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😫\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😴\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😌\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😛\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😜\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😝\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤤\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😒\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😓\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😔\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😕\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🙃\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤑\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😲\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"☹️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🙁\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😖\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😞\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😟\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😤\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😢\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😭\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😦\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😧\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😨\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😩\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤯\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😬\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😰\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😱\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😳\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤪\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😵\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😡\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😠\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤬\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😷\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤒\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤕\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤢\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤮\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤧\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😇\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤠\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤡\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤥\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤫\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤭\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🧐\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤓\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😈\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👹\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👺\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💀\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👻\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👽\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤖\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💩\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😺\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😸\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😹\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😻\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😼\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😽\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🙀\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"😾\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤲\\\\\\",\\\\n                \\\\\\"🤲🏻\\\\\\",\\\\n                \\\\\\"🤲🏼\\\\\\",\\\\n                \\\\\\"🤲🏽\\\\\\",\\\\n                \\\\\\"🤲🏾\\\\\\",\\\\n                \\\\\\"🤲🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👐\\\\\\",\\\\n                \\\\\\"👐🏻\\\\\\",\\\\n                \\\\\\"👐🏼\\\\\\",\\\\n                \\\\\\"👐🏽\\\\\\",\\\\n                \\\\\\"👐🏾\\\\\\",\\\\n                \\\\\\"👐🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🙌\\\\\\",\\\\n                \\\\\\"🙌🏻\\\\\\",\\\\n                \\\\\\"🙌🏼\\\\\\",\\\\n                \\\\\\"🙌🏽\\\\\\",\\\\n                \\\\\\"🙌🏾\\\\\\",\\\\n                \\\\\\"🙌🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👏\\\\\\",\\\\n                \\\\\\"👏🏻\\\\\\",\\\\n                \\\\\\"👏🏼\\\\\\",\\\\n                \\\\\\"👏🏽\\\\\\",\\\\n                \\\\\\"👏🏾\\\\\\",\\\\n                \\\\\\"👏🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👍\\\\\\",\\\\n                \\\\\\"👍🏻\\\\\\",\\\\n                \\\\\\"👍🏼\\\\\\",\\\\n                \\\\\\"👍🏽\\\\\\",\\\\n                \\\\\\"👍🏾\\\\\\",\\\\n                \\\\\\"👍🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👎\\\\\\",\\\\n                \\\\\\"👎🏻\\\\\\",\\\\n                \\\\\\"👎🏼\\\\\\",\\\\n                \\\\\\"👎🏽\\\\\\",\\\\n                \\\\\\"👎🏾\\\\\\",\\\\n                \\\\\\"👎🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👊\\\\\\",\\\\n                \\\\\\"👊🏻\\\\\\",\\\\n                \\\\\\"👊🏼\\\\\\",\\\\n                \\\\\\"👊🏽\\\\\\",\\\\n                \\\\\\"👊🏾\\\\\\",\\\\n                \\\\\\"👊🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"✊\\\\\\",\\\\n                \\\\\\"✊🏻\\\\\\",\\\\n                \\\\\\"✊🏼\\\\\\",\\\\n                \\\\\\"✊🏽\\\\\\",\\\\n                \\\\\\"✊🏾\\\\\\",\\\\n                \\\\\\"✊🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤛\\\\\\",\\\\n                \\\\\\"🤛🏻\\\\\\",\\\\n                \\\\\\"🤛🏼\\\\\\",\\\\n                \\\\\\"🤛🏽\\\\\\",\\\\n                \\\\\\"🤛🏾\\\\\\",\\\\n                \\\\\\"🤛🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤜\\\\\\",\\\\n                \\\\\\"🤜🏻\\\\\\",\\\\n                \\\\\\"🤜🏼\\\\\\",\\\\n                \\\\\\"🤜🏽\\\\\\",\\\\n                \\\\\\"🤜🏾\\\\\\",\\\\n                \\\\\\"🤜🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤞\\\\\\",\\\\n                \\\\\\"🤞🏻\\\\\\",\\\\n                \\\\\\"🤞🏼\\\\\\",\\\\n                \\\\\\"🤞🏽\\\\\\",\\\\n                \\\\\\"🤞🏾\\\\\\",\\\\n                \\\\\\"🤞🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"✌\\\\\\",\\\\n                \\\\\\"✌🏻\\\\\\",\\\\n                \\\\\\"✌🏼\\\\\\",\\\\n                \\\\\\"✌🏽\\\\\\",\\\\n                \\\\\\"✌🏾\\\\\\",\\\\n                \\\\\\"✌🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤟\\\\\\",\\\\n                \\\\\\"🤟🏻\\\\\\",\\\\n                \\\\\\"🤟🏼\\\\\\",\\\\n                \\\\\\"🤟🏽\\\\\\",\\\\n                \\\\\\"🤟🏾\\\\\\",\\\\n                \\\\\\"🤟🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤘\\\\\\",\\\\n                \\\\\\"🤘🏻\\\\\\",\\\\n                \\\\\\"🤘🏼\\\\\\",\\\\n                \\\\\\"🤘🏽\\\\\\",\\\\n                \\\\\\"🤘🏾\\\\\\",\\\\n                \\\\\\"🤘🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👌\\\\\\",\\\\n                \\\\\\"👌🏻\\\\\\",\\\\n                \\\\\\"👌🏼\\\\\\",\\\\n                \\\\\\"👌🏽\\\\\\",\\\\n                \\\\\\"👌🏾\\\\\\",\\\\n                \\\\\\"👌🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👈\\\\\\",\\\\n                \\\\\\"👈🏻\\\\\\",\\\\n                \\\\\\"👈🏼\\\\\\",\\\\n                \\\\\\"👈🏽\\\\\\",\\\\n                \\\\\\"👈🏾\\\\\\",\\\\n                \\\\\\"👈🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👉\\\\\\",\\\\n                \\\\\\"👉🏻\\\\\\",\\\\n                \\\\\\"👉🏼\\\\\\",\\\\n                \\\\\\"👉🏽\\\\\\",\\\\n                \\\\\\"👉🏾\\\\\\",\\\\n                \\\\\\"👉🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👆\\\\\\",\\\\n                \\\\\\"👆🏻\\\\\\",\\\\n                \\\\\\"👆🏼\\\\\\",\\\\n                \\\\\\"👆🏽\\\\\\",\\\\n                \\\\\\"👆🏾\\\\\\",\\\\n                \\\\\\"👆🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👇\\\\\\",\\\\n                \\\\\\"👇🏻\\\\\\",\\\\n                \\\\\\"👇🏼\\\\\\",\\\\n                \\\\\\"👇🏽\\\\\\",\\\\n                \\\\\\"👇🏾\\\\\\",\\\\n                \\\\\\"👇🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"☝\\\\\\",\\\\n                \\\\\\"☝🏻\\\\\\",\\\\n                \\\\\\"☝🏼\\\\\\",\\\\n                \\\\\\"☝🏽\\\\\\",\\\\n                \\\\\\"☝🏾\\\\\\",\\\\n                \\\\\\"☝🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"✋\\\\\\",\\\\n                \\\\\\"✋🏻\\\\\\",\\\\n                \\\\\\"✋🏼\\\\\\",\\\\n                \\\\\\"✋🏽\\\\\\",\\\\n                \\\\\\"✋🏾\\\\\\",\\\\n                \\\\\\"✋🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤚\\\\\\",\\\\n                \\\\\\"🤚🏻\\\\\\",\\\\n                \\\\\\"🤚🏼\\\\\\",\\\\n                \\\\\\"🤚🏽\\\\\\",\\\\n                \\\\\\"🤚🏾\\\\\\",\\\\n                \\\\\\"🤚🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🖐\\\\\\",\\\\n                \\\\\\"🖐🏻\\\\\\",\\\\n                \\\\\\"🖐🏼\\\\\\",\\\\n                \\\\\\"🖐🏽\\\\\\",\\\\n                \\\\\\"🖐🏾\\\\\\",\\\\n                \\\\\\"🖐🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🖖\\\\\\",\\\\n                \\\\\\"🖖🏻\\\\\\",\\\\n                \\\\\\"🖖🏼\\\\\\",\\\\n                \\\\\\"🖖🏽\\\\\\",\\\\n                \\\\\\"🖖🏾\\\\\\",\\\\n                \\\\\\"🖖🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👋\\\\\\",\\\\n                \\\\\\"👋🏻\\\\\\",\\\\n                \\\\\\"👋🏼\\\\\\",\\\\n                \\\\\\"👋🏽\\\\\\",\\\\n                \\\\\\"👋🏾\\\\\\",\\\\n                \\\\\\"👋🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤙\\\\\\",\\\\n                \\\\\\"🤙🏻\\\\\\",\\\\n                \\\\\\"🤙🏼\\\\\\",\\\\n                \\\\\\"🤙🏽\\\\\\",\\\\n                \\\\\\"🤙🏾\\\\\\",\\\\n                \\\\\\"🤙🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💪\\\\\\",\\\\n                \\\\\\"💪🏻\\\\\\",\\\\n                \\\\\\"💪🏼\\\\\\",\\\\n                \\\\\\"💪🏽\\\\\\",\\\\n                \\\\\\"💪🏾\\\\\\",\\\\n                \\\\\\"💪🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🖕\\\\\\",\\\\n                \\\\\\"🖕🏻\\\\\\",\\\\n                \\\\\\"🖕🏼\\\\\\",\\\\n                \\\\\\"🖕🏽\\\\\\",\\\\n                \\\\\\"🖕🏾\\\\\\",\\\\n                \\\\\\"🖕🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"✍\\\\\\",\\\\n                \\\\\\"✍🏻\\\\\\",\\\\n                \\\\\\"✍🏼\\\\\\",\\\\n                \\\\\\"✍🏽\\\\\\",\\\\n                \\\\\\"✍🏾\\\\\\",\\\\n                \\\\\\"✍🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🙏\\\\\\",\\\\n                \\\\\\"🙏🏻\\\\\\",\\\\n                \\\\\\"🙏🏼\\\\\\",\\\\n                \\\\\\"🙏🏽\\\\\\",\\\\n                \\\\\\"🙏🏾\\\\\\",\\\\n                \\\\\\"🙏🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💍\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💄\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💋\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👄\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👅\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👂\\\\\\",\\\\n                \\\\\\"👂🏻\\\\\\",\\\\n                \\\\\\"👂🏼\\\\\\",\\\\n                \\\\\\"👂🏽\\\\\\",\\\\n                \\\\\\"👂🏾\\\\\\",\\\\n                \\\\\\"👂🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👃\\\\\\",\\\\n                \\\\\\"👃🏻\\\\\\",\\\\n                \\\\\\"👃🏼\\\\\\",\\\\n                \\\\\\"👃🏽\\\\\\",\\\\n                \\\\\\"👃🏾\\\\\\",\\\\n                \\\\\\"👃🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👣\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👁\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👀\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🧠\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🗣\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👤\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👥\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👶\\\\\\",\\\\n                \\\\\\"👶🏻\\\\\\",\\\\n                \\\\\\"👶🏼\\\\\\",\\\\n                \\\\\\"👶🏽\\\\\\",\\\\n                \\\\\\"👶🏾\\\\\\",\\\\n                \\\\\\"👶🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👧\\\\\\",\\\\n                \\\\\\"👧🏻\\\\\\",\\\\n                \\\\\\"👧🏼\\\\\\",\\\\n                \\\\\\"👧🏽\\\\\\",\\\\n                \\\\\\"👧🏾\\\\\\",\\\\n                \\\\\\"👧🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🧒\\\\\\",\\\\n                \\\\\\"🧒🏻\\\\\\",\\\\n                \\\\\\"🧒🏼\\\\\\",\\\\n                \\\\\\"🧒🏽\\\\\\",\\\\n                \\\\\\"🧒🏾\\\\\\",\\\\n                \\\\\\"🧒🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👦\\\\\\",\\\\n                \\\\\\"👦🏻\\\\\\",\\\\n                \\\\\\"👦🏼\\\\\\",\\\\n                \\\\\\"👦🏽\\\\\\",\\\\n                \\\\\\"👦🏾\\\\\\",\\\\n                \\\\\\"👦🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👩\\\\\\",\\\\n                \\\\\\"👩🏻\\\\\\",\\\\n                \\\\\\"👩🏼\\\\\\",\\\\n                \\\\\\"👩🏽\\\\\\",\\\\n                \\\\\\"👩🏾\\\\\\",\\\\n                \\\\\\"👩🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🧑\\\\\\",\\\\n                \\\\\\"🧑🏻\\\\\\",\\\\n                \\\\\\"🧑🏼\\\\\\",\\\\n                \\\\\\"🧑🏽\\\\\\",\\\\n                \\\\\\"🧑🏾\\\\\\",\\\\n                \\\\\\"🧑🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👨\\\\\\",\\\\n                \\\\\\"👨🏻\\\\\\",\\\\n                \\\\\\"👨🏼\\\\\\",\\\\n                \\\\\\"👨🏽\\\\\\",\\\\n                \\\\\\"👨🏾\\\\\\",\\\\n                \\\\\\"👨🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👱‍♀️\\\\\\",\\\\n                \\\\\\"👱🏻‍♀️\\\\\\",\\\\n                \\\\\\"👱🏼‍♀️\\\\\\",\\\\n                \\\\\\"👱🏽‍♀️\\\\\\",\\\\n                \\\\\\"👱🏾‍♀️\\\\\\",\\\\n                \\\\\\"👱🏿‍♀️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👱\\\\\\",\\\\n                \\\\\\"👱🏻\\\\\\",\\\\n                \\\\\\"👱🏼\\\\\\",\\\\n                \\\\\\"👱🏽\\\\\\",\\\\n                \\\\\\"👱🏾\\\\\\",\\\\n                \\\\\\"👱🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🧔\\\\\\",\\\\n                \\\\\\"🧔🏻\\\\\\",\\\\n                \\\\\\"🧔🏼\\\\\\",\\\\n                \\\\\\"🧔🏽\\\\\\",\\\\n                \\\\\\"🧔🏾\\\\\\",\\\\n                \\\\\\"🧔🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👵\\\\\\",\\\\n                \\\\\\"👵🏻\\\\\\",\\\\n                \\\\\\"👵🏼\\\\\\",\\\\n                \\\\\\"👵🏽\\\\\\",\\\\n                \\\\\\"👵🏾\\\\\\",\\\\n                \\\\\\"👵🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🧓\\\\\\",\\\\n                \\\\\\"🧓🏻\\\\\\",\\\\n                \\\\\\"🧓🏼\\\\\\",\\\\n                \\\\\\"🧓🏽\\\\\\",\\\\n                \\\\\\"🧓🏾\\\\\\",\\\\n                \\\\\\"🧓🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👴\\\\\\",\\\\n                \\\\\\"👴🏻\\\\\\",\\\\n                \\\\\\"👴🏼\\\\\\",\\\\n                \\\\\\"👴🏽\\\\\\",\\\\n                \\\\\\"👴🏾\\\\\\",\\\\n                \\\\\\"👴🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👲\\\\\\",\\\\n                \\\\\\"👲🏻\\\\\\",\\\\n                \\\\\\"👲🏼\\\\\\",\\\\n                \\\\\\"👲🏽\\\\\\",\\\\n                \\\\\\"👲🏾\\\\\\",\\\\n                \\\\\\"👲🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👳‍♀️\\\\\\",\\\\n                \\\\\\"👳🏻‍♀️\\\\\\",\\\\n                \\\\\\"👳🏼‍♀️\\\\\\",\\\\n                \\\\\\"👳🏽‍♀️\\\\\\",\\\\n                \\\\\\"👳🏾‍♀️\\\\\\",\\\\n                \\\\\\"👳🏿‍♀️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👳️\\\\\\",\\\\n                \\\\\\"👳🏻\\\\\\",\\\\n                \\\\\\"👳🏼️\\\\\\",\\\\n                \\\\\\"👳🏽️\\\\\\",\\\\n                \\\\\\"👳🏾️\\\\\\",\\\\n                \\\\\\"👳🏿️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🧕\\\\\\",\\\\n                \\\\\\"🧕🏻\\\\\\",\\\\n                \\\\\\"🧕🏼\\\\\\",\\\\n                \\\\\\"🧕🏽\\\\\\",\\\\n                \\\\\\"🧕🏾\\\\\\",\\\\n                \\\\\\"🧕🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👮‍♀️\\\\\\",\\\\n                \\\\\\"👮🏻‍♀️\\\\\\",\\\\n                \\\\\\"👮🏼‍♀️\\\\\\",\\\\n                \\\\\\"👮🏽‍♀️\\\\\\",\\\\n                \\\\\\"👮🏾‍♀️\\\\\\",\\\\n                \\\\\\"👮🏿‍♀️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👮\\\\\\",\\\\n                \\\\\\"👮🏻\\\\\\",\\\\n                \\\\\\"👮🏼\\\\\\",\\\\n                \\\\\\"👮🏽\\\\\\",\\\\n                \\\\\\"👮🏾\\\\\\",\\\\n                \\\\\\"👮🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👷‍♀️\\\\\\",\\\\n                \\\\\\"👷🏻‍♀️\\\\\\",\\\\n                \\\\\\"👷🏼‍♀️\\\\\\",\\\\n                \\\\\\"👷🏽‍♀️\\\\\\",\\\\n                \\\\\\"👷🏾‍♀️\\\\\\",\\\\n                \\\\\\"👷🏿‍♀️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👷\\\\\\",\\\\n                \\\\\\"👷🏻\\\\\\",\\\\n                \\\\\\"👷🏼\\\\\\",\\\\n                \\\\\\"👷🏽\\\\\\",\\\\n                \\\\\\"👷🏾\\\\\\",\\\\n                \\\\\\"👷🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💂‍♀️\\\\\\",\\\\n                \\\\\\"💂🏻‍♀️\\\\\\",\\\\n                \\\\\\"💂🏼‍♀️\\\\\\",\\\\n                \\\\\\"💂🏽‍♀️\\\\\\",\\\\n                \\\\\\"💂🏾‍♀️\\\\\\",\\\\n                \\\\\\"💂🏿‍♀️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💂\\\\\\",\\\\n                \\\\\\"💂🏻\\\\\\",\\\\n                \\\\\\"💂🏼\\\\\\",\\\\n                \\\\\\"💂🏽\\\\\\",\\\\n                \\\\\\"💂🏾\\\\\\",\\\\n                \\\\\\"💂🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🕵️‍♀️\\\\\\",\\\\n                \\\\\\"🕵🏻‍♀️\\\\\\",\\\\n                \\\\\\"🕵🏼‍♀️\\\\\\",\\\\n                \\\\\\"🕵🏽‍♀️\\\\\\",\\\\n                \\\\\\"🕵🏾‍♀️\\\\\\",\\\\n                \\\\\\"🕵🏿‍♀️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🕵\\\\\\",\\\\n                \\\\\\"🕵🏻\\\\\\",\\\\n                \\\\\\"🕵🏼\\\\\\",\\\\n                \\\\\\"🕵🏽\\\\\\",\\\\n                \\\\\\"🕵🏾\\\\\\",\\\\n                \\\\\\"🕵🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👩‍⚕️\\\\\\",\\\\n                \\\\\\"👩🏻‍⚕️\\\\\\",\\\\n                \\\\\\"👩🏼‍⚕️\\\\\\",\\\\n                \\\\\\"👩🏽‍⚕️\\\\\\",\\\\n                \\\\\\"👩🏾‍⚕️\\\\\\",\\\\n                \\\\\\"👩🏿‍⚕️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👨‍⚕️\\\\\\",\\\\n                \\\\\\"👨🏻‍⚕️\\\\\\",\\\\n                \\\\\\"👨🏼‍⚕️\\\\\\",\\\\n                \\\\\\"👨🏽‍⚕️\\\\\\",\\\\n                \\\\\\"👨🏾‍⚕️\\\\\\",\\\\n                \\\\\\"👨🏿‍⚕️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👩‍🌾\\\\\\",\\\\n                \\\\\\"👩🏻‍🌾\\\\\\",\\\\n                \\\\\\"👩🏼‍🌾\\\\\\",\\\\n                \\\\\\"👩🏽‍🌾\\\\\\",\\\\n                \\\\\\"👩🏾‍🌾\\\\\\",\\\\n                \\\\\\"👩🏿‍🌾\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👨‍🌾\\\\\\",\\\\n                \\\\\\"👨🏻‍🌾\\\\\\",\\\\n                \\\\\\"👨🏼‍🌾\\\\\\",\\\\n                \\\\\\"👨🏽‍🌾\\\\\\",\\\\n                \\\\\\"👨🏾‍🌾\\\\\\",\\\\n                \\\\\\"👨🏿‍🌾\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👩‍🍳\\\\\\",\\\\n                \\\\\\"👩🏻‍🍳\\\\\\",\\\\n                \\\\\\"👩🏼‍🍳\\\\\\",\\\\n                \\\\\\"👩🏽‍🍳\\\\\\",\\\\n                \\\\\\"👩🏾‍🍳\\\\\\",\\\\n                \\\\\\"👩🏿‍🍳\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👨‍🍳\\\\\\",\\\\n                \\\\\\"👨🏻‍🍳\\\\\\",\\\\n                \\\\\\"👨🏼‍🍳\\\\\\",\\\\n                \\\\\\"👨🏽‍🍳\\\\\\",\\\\n                \\\\\\"👨🏾‍🍳\\\\\\",\\\\n                \\\\\\"👨🏿‍🍳\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👩‍🎓\\\\\\",\\\\n                \\\\\\"👩🏻‍🎓\\\\\\",\\\\n                \\\\\\"👩🏼‍🎓\\\\\\",\\\\n                \\\\\\"👩🏽‍🎓\\\\\\",\\\\n                \\\\\\"👩🏾‍🎓\\\\\\",\\\\n                \\\\\\"👩🏿‍🎓\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👨‍🎓\\\\\\",\\\\n                \\\\\\"👨🏻‍🎓\\\\\\",\\\\n                \\\\\\"👨🏼‍🎓\\\\\\",\\\\n                \\\\\\"👨🏽‍🎓\\\\\\",\\\\n                \\\\\\"👨🏾‍🎓\\\\\\",\\\\n                \\\\\\"👨🏿‍🎓\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👩‍🎤\\\\\\",\\\\n                \\\\\\"👩🏻‍🎤\\\\\\",\\\\n                \\\\\\"👩🏼‍🎤\\\\\\",\\\\n                \\\\\\"👩🏽‍🎤\\\\\\",\\\\n                \\\\\\"👩🏾‍🎤\\\\\\",\\\\n                \\\\\\"👩🏿‍🎤\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👨‍🎤\\\\\\",\\\\n                \\\\\\"👨🏻‍🎤\\\\\\",\\\\n                \\\\\\"👨🏼‍🎤\\\\\\",\\\\n                \\\\\\"👨🏽‍🎤\\\\\\",\\\\n                \\\\\\"👨🏾‍🎤\\\\\\",\\\\n                \\\\\\"👨🏿‍🎤\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👩‍🏫\\\\\\",\\\\n                \\\\\\"👩🏻‍🏫\\\\\\",\\\\n                \\\\\\"👩🏼‍🏫\\\\\\",\\\\n                \\\\\\"👩🏽‍🏫\\\\\\",\\\\n                \\\\\\"👩🏾‍🏫\\\\\\",\\\\n                \\\\\\"👩🏿‍🏫\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👨‍🏫\\\\\\",\\\\n                \\\\\\"👨🏻‍🏫\\\\\\",\\\\n                \\\\\\"👨🏼‍🏫\\\\\\",\\\\n                \\\\\\"👨🏽‍🏫\\\\\\",\\\\n                \\\\\\"👨🏾‍🏫\\\\\\",\\\\n                \\\\\\"👨🏿‍🏫\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👩‍🏭\\\\\\",\\\\n                \\\\\\"👩🏻‍🏭\\\\\\",\\\\n                \\\\\\"👩🏼‍🏭\\\\\\",\\\\n                \\\\\\"👩🏽‍🏭\\\\\\",\\\\n                \\\\\\"👩🏾‍🏭\\\\\\",\\\\n                \\\\\\"👩🏿‍🏭\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👨‍🏭\\\\\\",\\\\n                \\\\\\"👨🏻‍🏭\\\\\\",\\\\n                \\\\\\"👨🏼‍🏭\\\\\\",\\\\n                \\\\\\"👨🏽‍🏭\\\\\\",\\\\n                \\\\\\"👨🏾‍🏭\\\\\\",\\\\n                \\\\\\"👨🏿‍🏭\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👩‍💻\\\\\\",\\\\n                \\\\\\"👩🏻‍💻\\\\\\",\\\\n                \\\\\\"👩🏼‍💻\\\\\\",\\\\n                \\\\\\"👩🏽‍💻\\\\\\",\\\\n                \\\\\\"👩🏾‍💻\\\\\\",\\\\n                \\\\\\"👩🏿‍💻\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👨‍💻\\\\\\",\\\\n                \\\\\\"👨🏻‍💻\\\\\\",\\\\n                \\\\\\"👨🏼‍💻\\\\\\",\\\\n                \\\\\\"👨🏽‍💻\\\\\\",\\\\n                \\\\\\"👨🏾‍💻\\\\\\",\\\\n                \\\\\\"👨🏿‍💻\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👩‍💼\\\\\\",\\\\n                \\\\\\"👩🏻‍💼\\\\\\",\\\\n                \\\\\\"👩🏼‍💼\\\\\\",\\\\n                \\\\\\"👩🏽‍💼\\\\\\",\\\\n                \\\\\\"👩🏾‍💼\\\\\\",\\\\n                \\\\\\"👩🏿‍💼\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👨‍💼\\\\\\",\\\\n                \\\\\\"👨🏻‍💼\\\\\\",\\\\n                \\\\\\"👨🏼‍💼\\\\\\",\\\\n                \\\\\\"👨🏽‍💼\\\\\\",\\\\n                \\\\\\"👨🏾‍💼\\\\\\",\\\\n                \\\\\\"👨🏿‍💼\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👩‍🔧\\\\\\",\\\\n                \\\\\\"👩🏻‍🔧\\\\\\",\\\\n                \\\\\\"👩🏼‍🔧\\\\\\",\\\\n                \\\\\\"👩🏽‍🔧\\\\\\",\\\\n                \\\\\\"👩🏾‍🔧\\\\\\",\\\\n                \\\\\\"👩🏿‍🔧\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👨‍🔧\\\\\\",\\\\n                \\\\\\"👨🏻‍🔧\\\\\\",\\\\n                \\\\\\"👨🏼‍🔧\\\\\\",\\\\n                \\\\\\"👨🏽‍🔧\\\\\\",\\\\n                \\\\\\"👨🏾‍🔧\\\\\\",\\\\n                \\\\\\"👨🏿‍🔧\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👩‍🔬\\\\\\",\\\\n                \\\\\\"👩🏻‍🔬\\\\\\",\\\\n                \\\\\\"👩🏼‍🔬\\\\\\",\\\\n                \\\\\\"👩🏽‍🔬\\\\\\",\\\\n                \\\\\\"👩🏾‍🔬\\\\\\",\\\\n                \\\\\\"👩🏿‍🔬\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👨‍🔬\\\\\\",\\\\n                \\\\\\"👨🏻‍🔬\\\\\\",\\\\n                \\\\\\"👨🏼‍🔬\\\\\\",\\\\n                \\\\\\"👨🏽‍🔬\\\\\\",\\\\n                \\\\\\"👨🏾‍🔬\\\\\\",\\\\n                \\\\\\"👨🏿‍🔬\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👩‍🎨\\\\\\",\\\\n                \\\\\\"👩🏻‍🎨\\\\\\",\\\\n                \\\\\\"👩🏼‍🎨\\\\\\",\\\\n                \\\\\\"👩🏽‍🎨\\\\\\",\\\\n                \\\\\\"👩🏾‍🎨\\\\\\",\\\\n                \\\\\\"👩🏿‍🎨\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👨‍🎨\\\\\\",\\\\n                \\\\\\"👨🏻‍🎨\\\\\\",\\\\n                \\\\\\"👨🏼‍🎨\\\\\\",\\\\n                \\\\\\"👨🏽‍🎨\\\\\\",\\\\n                \\\\\\"👨🏾‍🎨\\\\\\",\\\\n                \\\\\\"👨🏿‍🎨\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👩‍🚒\\\\\\",\\\\n                \\\\\\"👩🏻‍🚒\\\\\\",\\\\n                \\\\\\"👩🏼‍🚒\\\\\\",\\\\n                \\\\\\"👩🏽‍🚒\\\\\\",\\\\n                \\\\\\"👩🏾‍🚒\\\\\\",\\\\n                \\\\\\"👩🏿‍🚒\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👨‍🚒\\\\\\",\\\\n                \\\\\\"👨🏻‍🚒\\\\\\",\\\\n                \\\\\\"👨🏼‍🚒\\\\\\",\\\\n                \\\\\\"👨🏽‍🚒\\\\\\",\\\\n                \\\\\\"👨🏾‍🚒\\\\\\",\\\\n                \\\\\\"👨🏿‍🚒\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👩‍✈️\\\\\\",\\\\n                \\\\\\"👩🏻‍✈️\\\\\\",\\\\n                \\\\\\"👩🏼‍✈️\\\\\\",\\\\n                \\\\\\"👩🏽‍✈️\\\\\\",\\\\n                \\\\\\"👩🏾‍✈️\\\\\\",\\\\n                \\\\\\"👩🏿‍✈️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👨‍✈️\\\\\\",\\\\n                \\\\\\"👨🏻‍✈️\\\\\\",\\\\n                \\\\\\"👨🏼‍✈️\\\\\\",\\\\n                \\\\\\"👨🏽‍✈️\\\\\\",\\\\n                \\\\\\"👨🏾‍✈️\\\\\\",\\\\n                \\\\\\"👨🏿‍✈️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👩‍🚀\\\\\\",\\\\n                \\\\\\"👩🏻‍🚀\\\\\\",\\\\n                \\\\\\"👩🏼‍🚀\\\\\\",\\\\n                \\\\\\"👩🏽‍🚀\\\\\\",\\\\n                \\\\\\"👩🏾‍🚀\\\\\\",\\\\n                \\\\\\"👩🏿‍🚀\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👨‍🚀\\\\\\",\\\\n                \\\\\\"👨🏻‍🚀\\\\\\",\\\\n                \\\\\\"👨🏼‍🚀\\\\\\",\\\\n                \\\\\\"👨🏽‍🚀\\\\\\",\\\\n                \\\\\\"👨🏾‍🚀\\\\\\",\\\\n                \\\\\\"👨🏿‍🚀\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👩‍⚖️\\\\\\",\\\\n                \\\\\\"👩🏻‍⚖️\\\\\\",\\\\n                \\\\\\"👩🏼‍⚖️\\\\\\",\\\\n                \\\\\\"👩🏽‍⚖️\\\\\\",\\\\n                \\\\\\"👩🏾‍⚖️\\\\\\",\\\\n                \\\\\\"👩🏿‍⚖️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👨‍⚖️\\\\\\",\\\\n                \\\\\\"👨🏻‍⚖️\\\\\\",\\\\n                \\\\\\"👨🏼‍⚖️\\\\\\",\\\\n                \\\\\\"👨🏽‍⚖️\\\\\\",\\\\n                \\\\\\"👨🏾‍⚖️\\\\\\",\\\\n                \\\\\\"👨🏿‍⚖️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👰\\\\\\",\\\\n                \\\\\\"👰🏻\\\\\\",\\\\n                \\\\\\"👰🏼\\\\\\",\\\\n                \\\\\\"👰🏽\\\\\\",\\\\n                \\\\\\"👰🏾\\\\\\",\\\\n                \\\\\\"👰🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤵\\\\\\",\\\\n                \\\\\\"🤵🏻\\\\\\",\\\\n                \\\\\\"🤵🏼\\\\\\",\\\\n                \\\\\\"🤵🏽\\\\\\",\\\\n                \\\\\\"🤵🏾\\\\\\",\\\\n                \\\\\\"🤵🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👸\\\\\\",\\\\n                \\\\\\"👸🏻\\\\\\",\\\\n                \\\\\\"👸🏼\\\\\\",\\\\n                \\\\\\"👸🏽\\\\\\",\\\\n                \\\\\\"👸🏾\\\\\\",\\\\n                \\\\\\"👸🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤴\\\\\\",\\\\n                \\\\\\"🤴🏻\\\\\\",\\\\n                \\\\\\"🤴🏼\\\\\\",\\\\n                \\\\\\"🤴🏽\\\\\\",\\\\n                \\\\\\"🤴🏾\\\\\\",\\\\n                \\\\\\"🤴🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤶\\\\\\",\\\\n                \\\\\\"🤶🏻\\\\\\",\\\\n                \\\\\\"🤶🏼\\\\\\",\\\\n                \\\\\\"🤶🏽\\\\\\",\\\\n                \\\\\\"🤶🏾\\\\\\",\\\\n                \\\\\\"🤶🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎅\\\\\\",\\\\n                \\\\\\"🎅🏻\\\\\\",\\\\n                \\\\\\"🎅🏼\\\\\\",\\\\n                \\\\\\"🎅🏽\\\\\\",\\\\n                \\\\\\"🎅🏾\\\\\\",\\\\n                \\\\\\"🎅🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🧙‍♀️\\\\\\",\\\\n                \\\\\\"🧙🏻‍♀️\\\\\\",\\\\n                \\\\\\"🧙🏼‍♀️\\\\\\",\\\\n                \\\\\\"🧙🏽‍♀️\\\\\\",\\\\n                \\\\\\"🧙🏾‍♀️\\\\\\",\\\\n                \\\\\\"🧙🏿‍♀️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🧙‍♂️\\\\\\",\\\\n                \\\\\\"🧙🏻‍♂️\\\\\\",\\\\n                \\\\\\"🧙🏼‍♂️\\\\\\",\\\\n                \\\\\\"🧙🏽‍♂️\\\\\\",\\\\n                \\\\\\"🧙🏾‍♂️\\\\\\",\\\\n                \\\\\\"🧙🏿‍♂️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🧝‍♀️\\\\\\",\\\\n                \\\\\\"🧝🏻‍♀️\\\\\\",\\\\n                \\\\\\"🧝🏼‍♀️\\\\\\",\\\\n                \\\\\\"🧝🏽‍♀️\\\\\\",\\\\n                \\\\\\"🧝🏾‍♀️\\\\\\",\\\\n                \\\\\\"🧝🏿‍♀️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🧝‍♂️\\\\\\",\\\\n                \\\\\\"🧝🏻‍♂️\\\\\\",\\\\n                \\\\\\"🧝🏼‍♂️\\\\\\",\\\\n                \\\\\\"🧝🏽‍♂️\\\\\\",\\\\n                \\\\\\"🧝🏾‍♂️\\\\\\",\\\\n                \\\\\\"🧝🏿‍♂️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🧛‍♀️\\\\\\",\\\\n                \\\\\\"🧛🏻‍♀️\\\\\\",\\\\n                \\\\\\"🧛🏼‍♀️\\\\\\",\\\\n                \\\\\\"🧛🏽‍♀️\\\\\\",\\\\n                \\\\\\"🧛🏾‍♀️\\\\\\",\\\\n                \\\\\\"🧛🏿‍♀️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🧛‍♂️\\\\\\",\\\\n                \\\\\\"🧛🏻‍♂️\\\\\\",\\\\n                \\\\\\"🧛🏼‍♂️\\\\\\",\\\\n                \\\\\\"🧛🏽‍♂️\\\\\\",\\\\n                \\\\\\"🧛🏾‍♂️\\\\\\",\\\\n                \\\\\\"🧛🏿‍♂️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🧟‍♀️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🧟‍♂️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🧞‍♀️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🧞‍♂️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🧜‍♀️\\\\\\",\\\\n                \\\\\\"🧜🏻‍♀️\\\\\\",\\\\n                \\\\\\"🧜🏼‍♀️\\\\\\",\\\\n                \\\\\\"🧜🏽‍♀️\\\\\\",\\\\n                \\\\\\"🧜🏾‍♀️\\\\\\",\\\\n                \\\\\\"🧜🏿‍♀️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🧜‍♂️\\\\\\",\\\\n                \\\\\\"🧜🏻‍♂️\\\\\\",\\\\n                \\\\\\"🧜🏼‍♂️\\\\\\",\\\\n                \\\\\\"🧜🏽‍♂️\\\\\\",\\\\n                \\\\\\"🧜🏾‍♂️\\\\\\",\\\\n                \\\\\\"🧜🏿‍♂️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🧚‍♀️\\\\\\",\\\\n                \\\\\\"🧚🏻‍♀️\\\\\\",\\\\n                \\\\\\"🧚🏼‍♀️\\\\\\",\\\\n                \\\\\\"🧚🏽‍♀️\\\\\\",\\\\n                \\\\\\"🧚🏾‍♀️\\\\\\",\\\\n                \\\\\\"🧚🏿‍♀️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🧚‍♂️\\\\\\",\\\\n                \\\\\\"🧚🏻‍♂️\\\\\\",\\\\n                \\\\\\"🧚🏼‍♂️\\\\\\",\\\\n                \\\\\\"🧚🏽‍♂️\\\\\\",\\\\n                \\\\\\"🧚🏾‍♂️\\\\\\",\\\\n                \\\\\\"🧚🏿‍♂️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👼\\\\\\",\\\\n                \\\\\\"👼🏻\\\\\\",\\\\n                \\\\\\"👼🏼\\\\\\",\\\\n                \\\\\\"👼🏽\\\\\\",\\\\n                \\\\\\"👼🏾\\\\\\",\\\\n                \\\\\\"👼🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤰\\\\\\",\\\\n                \\\\\\"🤰🏻\\\\\\",\\\\n                \\\\\\"🤰🏼\\\\\\",\\\\n                \\\\\\"🤰🏽\\\\\\",\\\\n                \\\\\\"🤰🏾\\\\\\",\\\\n                \\\\\\"🤰🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤱\\\\\\",\\\\n                \\\\\\"🤱🏻\\\\\\",\\\\n                \\\\\\"🤱🏼\\\\\\",\\\\n                \\\\\\"🤱🏽\\\\\\",\\\\n                \\\\\\"🤱🏾\\\\\\",\\\\n                \\\\\\"🤱🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🙇‍♀️\\\\\\",\\\\n                \\\\\\"🙇🏻‍♀️\\\\\\",\\\\n                \\\\\\"🙇🏼‍♀️\\\\\\",\\\\n                \\\\\\"🙇🏽‍♀️\\\\\\",\\\\n                \\\\\\"🙇🏾‍♀️\\\\\\",\\\\n                \\\\\\"🙇🏿‍♀️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🙇\\\\\\",\\\\n                \\\\\\"🙇🏻\\\\\\",\\\\n                \\\\\\"🙇🏼\\\\\\",\\\\n                \\\\\\"🙇🏽\\\\\\",\\\\n                \\\\\\"🙇🏾\\\\\\",\\\\n                \\\\\\"🙇🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💁\\\\\\",\\\\n                \\\\\\"💁🏻\\\\\\",\\\\n                \\\\\\"💁🏼\\\\\\",\\\\n                \\\\\\"💁🏽\\\\\\",\\\\n                \\\\\\"💁🏾\\\\\\",\\\\n                \\\\\\"💁🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💁‍♂️\\\\\\",\\\\n                \\\\\\"💁🏻‍♂️\\\\\\",\\\\n                \\\\\\"💁🏼‍♂️\\\\\\",\\\\n                \\\\\\"💁🏽‍♂️\\\\\\",\\\\n                \\\\\\"💁🏾‍♂️\\\\\\",\\\\n                \\\\\\"💁🏿‍♂️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🙅\\\\\\",\\\\n                \\\\\\"🙅🏻\\\\\\",\\\\n                \\\\\\"🙅🏼\\\\\\",\\\\n                \\\\\\"🙅🏽\\\\\\",\\\\n                \\\\\\"🙅🏾\\\\\\",\\\\n                \\\\\\"🙅🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🙅‍♂️\\\\\\",\\\\n                \\\\\\"🙅🏻‍♂️\\\\\\",\\\\n                \\\\\\"🙅🏼‍♂️\\\\\\",\\\\n                \\\\\\"🙅🏽‍♂️\\\\\\",\\\\n                \\\\\\"🙅🏾‍♂️\\\\\\",\\\\n                \\\\\\"🙅🏿‍♂️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🙆\\\\\\",\\\\n                \\\\\\"🙆🏻\\\\\\",\\\\n                \\\\\\"🙆🏼\\\\\\",\\\\n                \\\\\\"🙆🏽\\\\\\",\\\\n                \\\\\\"🙆🏾\\\\\\",\\\\n                \\\\\\"🙆🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🙆‍♂️\\\\\\",\\\\n                \\\\\\"🙆🏻‍♂️\\\\\\",\\\\n                \\\\\\"🙆🏼‍♂️\\\\\\",\\\\n                \\\\\\"🙆🏽‍♂️\\\\\\",\\\\n                \\\\\\"🙆🏾‍♂️\\\\\\",\\\\n                \\\\\\"🙆🏿‍♂️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🙋\\\\\\",\\\\n                \\\\\\"🙋🏻\\\\\\",\\\\n                \\\\\\"🙋🏼\\\\\\",\\\\n                \\\\\\"🙋🏽\\\\\\",\\\\n                \\\\\\"🙋🏾\\\\\\",\\\\n                \\\\\\"🙋🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🙋‍♂️\\\\\\",\\\\n                \\\\\\"🙋🏻‍♂️\\\\\\",\\\\n                \\\\\\"🙋🏼‍♂️\\\\\\",\\\\n                \\\\\\"🙋🏽‍♂️\\\\\\",\\\\n                \\\\\\"🙋🏾‍♂️\\\\\\",\\\\n                \\\\\\"🙋🏿‍♂️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤦‍♀️\\\\\\",\\\\n                \\\\\\"🤦🏻‍♀️\\\\\\",\\\\n                \\\\\\"🤦🏼‍♀️\\\\\\",\\\\n                \\\\\\"🤦🏽‍♀️\\\\\\",\\\\n                \\\\\\"🤦🏾‍♀️\\\\\\",\\\\n                \\\\\\"🤦🏿‍♀️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤦‍♂️\\\\\\",\\\\n                \\\\\\"🤦🏻‍♂️\\\\\\",\\\\n                \\\\\\"🤦🏼‍♂️\\\\\\",\\\\n                \\\\\\"🤦🏽‍♂️\\\\\\",\\\\n                \\\\\\"🤦🏾‍♂️\\\\\\",\\\\n                \\\\\\"🤦🏿‍♂️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤷\\\\\\",\\\\n                \\\\\\"🤷🏻‍♀️\\\\\\",\\\\n                \\\\\\"🤷🏼‍♀️\\\\\\",\\\\n                \\\\\\"🤷🏽‍♀️\\\\\\",\\\\n                \\\\\\"🤷🏾‍♀️\\\\\\",\\\\n                \\\\\\"🤷🏿‍♀️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤷‍♂️\\\\\\",\\\\n                \\\\\\"🤷🏻‍♂️\\\\\\",\\\\n                \\\\\\"🤷🏼‍♂️\\\\\\",\\\\n                \\\\\\"🤷🏽‍♂️\\\\\\",\\\\n                \\\\\\"🤷🏾‍♂️\\\\\\",\\\\n                \\\\\\"🤷🏿‍♂️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🙎\\\\\\",\\\\n                \\\\\\"🙎🏻\\\\\\",\\\\n                \\\\\\"🙎🏼\\\\\\",\\\\n                \\\\\\"🙎🏽\\\\\\",\\\\n                \\\\\\"🙎🏾\\\\\\",\\\\n                \\\\\\"🙎🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🙎‍♂️\\\\\\",\\\\n                \\\\\\"🙎🏻‍♂️\\\\\\",\\\\n                \\\\\\"🙎🏼‍♂️\\\\\\",\\\\n                \\\\\\"🙎🏽‍♂️\\\\\\",\\\\n                \\\\\\"🙎🏾‍♂️\\\\\\",\\\\n                \\\\\\"🙎🏿‍♂️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🙍\\\\\\",\\\\n                \\\\\\"🙍🏻\\\\\\",\\\\n                \\\\\\"🙍🏼\\\\\\",\\\\n                \\\\\\"🙍🏽\\\\\\",\\\\n                \\\\\\"🙍🏾\\\\\\",\\\\n                \\\\\\"🙍🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🙍‍♂️\\\\\\",\\\\n                \\\\\\"🙍🏻‍♂️\\\\\\",\\\\n                \\\\\\"🙍🏼‍♂️\\\\\\",\\\\n                \\\\\\"🙍🏽‍♂️\\\\\\",\\\\n                \\\\\\"🙍🏾‍♂️\\\\\\",\\\\n                \\\\\\"🙍🏿‍♂️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💇\\\\\\",\\\\n                \\\\\\"💇🏻\\\\\\",\\\\n                \\\\\\"💇🏼\\\\\\",\\\\n                \\\\\\"💇🏽\\\\\\",\\\\n                \\\\\\"💇🏾\\\\\\",\\\\n                \\\\\\"💇🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💇‍♂️\\\\\\",\\\\n                \\\\\\"💇🏻‍♂️\\\\\\",\\\\n                \\\\\\"💇🏼‍♂️\\\\\\",\\\\n                \\\\\\"💇🏽‍♂️\\\\\\",\\\\n                \\\\\\"💇🏾‍♂️\\\\\\",\\\\n                \\\\\\"💇🏿‍♂️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💆\\\\\\",\\\\n                \\\\\\"💆🏻\\\\\\",\\\\n                \\\\\\"💆🏼\\\\\\",\\\\n                \\\\\\"💆🏽\\\\\\",\\\\n                \\\\\\"💆🏾\\\\\\",\\\\n                \\\\\\"💆🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💆‍♂️\\\\\\",\\\\n                \\\\\\"💆🏻‍♂️\\\\\\",\\\\n                \\\\\\"💆🏼‍♂️\\\\\\",\\\\n                \\\\\\"💆🏽‍♂️\\\\\\",\\\\n                \\\\\\"💆🏾‍♂️\\\\\\",\\\\n                \\\\\\"💆🏿‍♂️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🧖‍♀\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🧖‍♂\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💅\\\\\\",\\\\n                \\\\\\"💅🏻\\\\\\",\\\\n                \\\\\\"💅🏼\\\\\\",\\\\n                \\\\\\"💅🏽\\\\\\",\\\\n                \\\\\\"💅🏾\\\\\\",\\\\n                \\\\\\"💅🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤳\\\\\\",\\\\n                \\\\\\"🤳🏻\\\\\\",\\\\n                \\\\\\"🤳🏼\\\\\\",\\\\n                \\\\\\"🤳🏽\\\\\\",\\\\n                \\\\\\"🤳🏾\\\\\\",\\\\n                \\\\\\"🤳🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🕴\\\\\\",\\\\n                \\\\\\"🕴🏻\\\\\\",\\\\n                \\\\\\"🕴🏼\\\\\\",\\\\n                \\\\\\"🕴🏼\\\\\\",\\\\n                \\\\\\"🕴🏾\\\\\\",\\\\n                \\\\\\"🕴🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💃\\\\\\",\\\\n                \\\\\\"💃🏻\\\\\\",\\\\n                \\\\\\"💃🏼\\\\\\",\\\\n                \\\\\\"💃🏽\\\\\\",\\\\n                \\\\\\"💃🏾\\\\\\",\\\\n                \\\\\\"💃🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🕺\\\\\\",\\\\n                \\\\\\"🕺🏻\\\\\\",\\\\n                \\\\\\"🕺🏼\\\\\\",\\\\n                \\\\\\"🕺🏽\\\\\\",\\\\n                \\\\\\"🕺🏾\\\\\\",\\\\n                \\\\\\"🕺🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👯‍♀\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👯‍♂\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚶‍♀️\\\\\\",\\\\n                \\\\\\"🚶🏻‍♀️\\\\\\",\\\\n                \\\\\\"🚶🏼‍♀️\\\\\\",\\\\n                \\\\\\"🚶🏽‍♀️\\\\\\",\\\\n                \\\\\\"🚶🏾‍♀️\\\\\\",\\\\n                \\\\\\"🚶🏿‍♀️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚶\\\\\\",\\\\n                \\\\\\"🚶🏻\\\\\\",\\\\n                \\\\\\"🚶🏼\\\\\\",\\\\n                \\\\\\"🚶🏽\\\\\\",\\\\n                \\\\\\"🚶🏾\\\\\\",\\\\n                \\\\\\"🚶🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏃‍♀️\\\\\\",\\\\n                \\\\\\"🏃🏻‍♀️\\\\\\",\\\\n                \\\\\\"🏃🏼‍♀️\\\\\\",\\\\n                \\\\\\"🏃🏽‍♀️\\\\\\",\\\\n                \\\\\\"🏃🏾‍♀️\\\\\\",\\\\n                \\\\\\"🏃🏿‍♀️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏃\\\\\\",\\\\n                \\\\\\"🏃🏻\\\\\\",\\\\n                \\\\\\"🏃🏼\\\\\\",\\\\n                \\\\\\"🏃🏽\\\\\\",\\\\n                \\\\\\"🏃🏾\\\\\\",\\\\n                \\\\\\"🏃🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👫\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👭\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👬\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💑\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👩‍❤️‍👩\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👨‍❤️‍👨\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💏\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👩‍❤️‍💋‍👩\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👨‍❤️‍💋‍👨\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👪\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👨‍👩‍👧\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👨‍👩‍👧‍👦\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👨‍👩‍👦‍👦\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👨‍👩‍👧‍👧\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👩‍👩‍👦\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👩‍👩‍👧\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👩‍👩‍👧‍👦\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👩‍👩‍👦‍👦\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👩‍👩‍👧‍👧\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👨‍👨‍👦\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👨‍👨‍👧\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👨‍👨‍👧‍👦\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👨‍👨‍👦‍👦\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👨‍👨‍👧‍👧\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👩‍👦\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👩‍👧\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👩‍👧‍👦\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👩‍👦‍👦\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👩‍👧‍👧\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👨‍👦\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👨‍👧\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👨‍👧‍👦\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👨‍👦‍👦\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👨‍👧‍👧\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🧥\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👚\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👕\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👖\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👔\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👗\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👙\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👘\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👠\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👡\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👢\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👞\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👟\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🧦\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🧤\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🧣\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎩\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🧢\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👒\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎓\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⛑\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👑\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👝\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👛\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👜\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💼\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎒\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👓\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🕶\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌂\\\\\\"\\\\n            ]\\\\n        ],\\\\n        \\\\\\"type\\\\\\": \\\\\\"smileysAndPeople\\\\\\"\\\\n    },\\\\n    {\\\\n        \\\\\\"emojis\\\\\\": [\\\\n            [\\\\n                \\\\\\"🐶\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐱\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐭\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐹\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐰\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🦊\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐻\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐼\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐨\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐯\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🦁\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐮\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐷\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐽\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐸\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐵\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🙈\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🙉\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🙊\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐒\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐔\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐧\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐦\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐤\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐣\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐥\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🦆\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🦅\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🦉\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🦇\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐺\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐗\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐴\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🦄\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐝\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐛\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🦋\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐌\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐚\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐞\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐜\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🦗\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🕷\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🕸\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🦂\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐢\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐍\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🦎\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🦖\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🦕\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐙\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🦑\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🦐\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🦀\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐡\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐠\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐟\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐬\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐳\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐋\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🦈\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐊\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐅\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐆\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🦓\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🦍\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐘\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🦏\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐪\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐫\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🦒\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐃\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐂\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐄\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐎\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐖\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐏\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐑\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐐\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🦌\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐕\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐩\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐈\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐓\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🦃\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🕊\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐇\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐁\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐀\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🦔\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐾\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐉\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🐲\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌵\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎄\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌲\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌳\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌴\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌱\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"☘️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍀\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎍\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎋\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍃\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍂\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍁\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍄\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌾\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💐\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌷\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌹\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🥀\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌺\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌸\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌼\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌻\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌞\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌝\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌛\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌜\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌚\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌕\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌖\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌗\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌘\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌑\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌒\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌓\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌔\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌙\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌎\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌍\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌏\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💫\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⭐️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌟\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"✨\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⚡️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"☄️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💥\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔥\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌪\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌈\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"☀️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌤\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⛅️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌥\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"☁️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌦\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌧\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⛈\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌩\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌨\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"❄️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"☃️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⛄️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌬\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💨\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💧\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💦\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"☔️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"☂️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌊\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌫\\\\\\"\\\\n            ]\\\\n        ],\\\\n        \\\\\\"type\\\\\\": \\\\\\"animalsAndNature\\\\\\"\\\\n    },\\\\n    {\\\\n        \\\\\\"emojis\\\\\\": [\\\\n            [\\\\n                \\\\\\"🍏\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍎\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍐\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍊\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍋\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍌\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍉\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍇\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍓\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍈\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍒\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍑\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍍\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🥥\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🥝\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍅\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍆\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🥑\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🥦\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🥒\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌶\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌽\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🥕\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🥔\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍠\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🥐\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍞\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🥖\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🥨\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🧀\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🥚\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍳\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🥞\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🥓\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🥩\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍗\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍖\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌭\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍔\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍟\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍕\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🥪\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🥙\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌮\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌯\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🥗\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🥘\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🥫\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍝\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍜\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍲\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍛\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍣\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍱\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🥟\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍤\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍙\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍚\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍘\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍥\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🥠\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍢\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍡\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍧\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍨\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍦\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🥧\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍰\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎂\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍮\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍭\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍬\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍫\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍩\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍪\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌰\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🥜\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍯\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🥛\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍼\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"☕️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍵\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🥤\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍶\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍺\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍻\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🥂\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍷\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🥃\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍸\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍹\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍾\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🥄\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍴\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🍽\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🥣\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🥡\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🥢\\\\\\"\\\\n            ]\\\\n        ],\\\\n        \\\\\\"type\\\\\\": \\\\\\"foodAndDrink\\\\\\"\\\\n    },\\\\n    {\\\\n        \\\\\\"emojis\\\\\\": [\\\\n            [\\\\n                \\\\\\"⚽️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏀\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏈\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⚾️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎾\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏐\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏉\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎱\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏓\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏸\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🥅\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏒\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏑\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏏\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⛳️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏹\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎣\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🥊\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🥋\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎽\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⛸\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🥌\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🛷\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⛷\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏂\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏋️‍♀️\\\\\\",\\\\n                \\\\\\"🏋🏻‍♀️\\\\\\",\\\\n                \\\\\\"🏋🏼‍♀️\\\\\\",\\\\n                \\\\\\"🏋🏽‍♀️\\\\\\",\\\\n                \\\\\\"🏋🏾‍♀️\\\\\\",\\\\n                \\\\\\"🏋🏿‍♀️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏋️‍♂️\\\\\\",\\\\n                \\\\\\"🏋🏻‍♂️\\\\\\",\\\\n                \\\\\\"🏋🏼‍♂️\\\\\\",\\\\n                \\\\\\"🏋🏽‍♂️\\\\\\",\\\\n                \\\\\\"🏋🏾‍♂️\\\\\\",\\\\n                \\\\\\"🏋🏿‍♂️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤼‍♀️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤼‍♂️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤸‍♀️\\\\\\",\\\\n                \\\\\\"🤸🏻‍♀️\\\\\\",\\\\n                \\\\\\"🤸🏼‍♀️\\\\\\",\\\\n                \\\\\\"🤸🏽‍♀️\\\\\\",\\\\n                \\\\\\"🤸🏾‍♀️\\\\\\",\\\\n                \\\\\\"🤸🏿‍♀️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤸‍♂️\\\\\\",\\\\n                \\\\\\"🤸🏻‍♂️\\\\\\",\\\\n                \\\\\\"🤸🏼‍♂️\\\\\\",\\\\n                \\\\\\"🤸🏽‍♂️\\\\\\",\\\\n                \\\\\\"🤸🏾‍♂️\\\\\\",\\\\n                \\\\\\"🤸🏿‍♂️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⛹️‍♀️\\\\\\",\\\\n                \\\\\\"⛹🏻‍♀️\\\\\\",\\\\n                \\\\\\"⛹🏼‍♀️\\\\\\",\\\\n                \\\\\\"⛹🏽‍♀️\\\\\\",\\\\n                \\\\\\"⛹🏾‍♀️\\\\\\",\\\\n                \\\\\\"⛹🏿‍♀️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⛹️‍♂️\\\\\\",\\\\n                \\\\\\"⛹🏻‍♂️\\\\\\",\\\\n                \\\\\\"⛹🏼‍♂️\\\\\\",\\\\n                \\\\\\"⛹🏽‍♂️\\\\\\",\\\\n                \\\\\\"⛹🏾‍♂️\\\\\\",\\\\n                \\\\\\"⛹🏿‍♂️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤺️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤾‍♀️\\\\\\",\\\\n                \\\\\\"🤾🏻‍♀️\\\\\\",\\\\n                \\\\\\"🤾🏼‍♀️\\\\\\",\\\\n                \\\\\\"🤾🏾‍♀️\\\\\\",\\\\n                \\\\\\"🤾🏾‍♀️\\\\\\",\\\\n                \\\\\\"🤾🏿‍♀️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤾‍♂️\\\\\\",\\\\n                \\\\\\"🤾🏻‍♂️\\\\\\",\\\\n                \\\\\\"🤾🏼‍♂️\\\\\\",\\\\n                \\\\\\"🤾🏽‍♂️\\\\\\",\\\\n                \\\\\\"🤾🏾‍♂️\\\\\\",\\\\n                \\\\\\"🤾🏿‍♂️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏌️‍♀️\\\\\\",\\\\n                \\\\\\"🏌🏻‍♀️\\\\\\",\\\\n                \\\\\\"🏌🏼‍♀️\\\\\\",\\\\n                \\\\\\"🏌🏽‍♀️\\\\\\",\\\\n                \\\\\\"🏌🏾‍♀️\\\\\\",\\\\n                \\\\\\"🏌🏿‍♀️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏌️‍♂️\\\\\\",\\\\n                \\\\\\"🏌🏻‍♂️\\\\\\",\\\\n                \\\\\\"🏌🏼‍♂️\\\\\\",\\\\n                \\\\\\"🏌🏽‍♂️\\\\\\",\\\\n                \\\\\\"🏌🏾‍♂️\\\\\\",\\\\n                \\\\\\"🏌🏿‍♂️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏇\\\\\\",\\\\n                \\\\\\"🏇🏻\\\\\\",\\\\n                \\\\\\"🏇🏼\\\\\\",\\\\n                \\\\\\"🏇🏽\\\\\\",\\\\n                \\\\\\"🏇🏾\\\\\\",\\\\n                \\\\\\"🏇🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🧘‍♀️\\\\\\",\\\\n                \\\\\\"🧘🏻‍♀️\\\\\\",\\\\n                \\\\\\"🧘🏼‍♀️\\\\\\",\\\\n                \\\\\\"🧘🏽‍♀️\\\\\\",\\\\n                \\\\\\"🧘🏾‍♀️\\\\\\",\\\\n                \\\\\\"🧘🏿‍♀️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🧘‍♂️\\\\\\",\\\\n                \\\\\\"🧘🏻‍♂️\\\\\\",\\\\n                \\\\\\"🧘🏼‍♂️\\\\\\",\\\\n                \\\\\\"🧘🏽‍♂️\\\\\\",\\\\n                \\\\\\"🧘🏾‍♂️\\\\\\",\\\\n                \\\\\\"🧘🏿‍♂️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏄‍♀️\\\\\\",\\\\n                \\\\\\"🏄🏻‍♀️\\\\\\",\\\\n                \\\\\\"🏄🏼‍♀️\\\\\\",\\\\n                \\\\\\"🏄🏽‍♀️\\\\\\",\\\\n                \\\\\\"🏄🏾‍♀️\\\\\\",\\\\n                \\\\\\"🏄🏿‍♀️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏄‍♂️\\\\\\",\\\\n                \\\\\\"🏄🏻‍♂️\\\\\\",\\\\n                \\\\\\"🏄🏼‍♂️\\\\\\",\\\\n                \\\\\\"🏄🏽‍♂️\\\\\\",\\\\n                \\\\\\"🏄🏾‍♂️\\\\\\",\\\\n                \\\\\\"🏄🏿‍♂️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏊‍♀️\\\\\\",\\\\n                \\\\\\"🏊🏻‍♀️\\\\\\",\\\\n                \\\\\\"🏊🏼‍♀️\\\\\\",\\\\n                \\\\\\"🏊🏽‍♀️\\\\\\",\\\\n                \\\\\\"🏊🏾‍♀️\\\\\\",\\\\n                \\\\\\"🏊🏿‍♀️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏊‍♂️\\\\\\",\\\\n                \\\\\\"🏊🏻‍♂️\\\\\\",\\\\n                \\\\\\"🏊🏼‍♂️\\\\\\",\\\\n                \\\\\\"🏊🏽‍♂️\\\\\\",\\\\n                \\\\\\"🏊🏾‍♂️\\\\\\",\\\\n                \\\\\\"🏊🏿‍♂️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤽‍♀️\\\\\\",\\\\n                \\\\\\"🤽🏻‍♀️\\\\\\",\\\\n                \\\\\\"🤽🏼‍♀️\\\\\\",\\\\n                \\\\\\"🤽🏽‍♀️\\\\\\",\\\\n                \\\\\\"🤽🏾‍♀️\\\\\\",\\\\n                \\\\\\"🤽🏿‍♀️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤽‍♂️\\\\\\",\\\\n                \\\\\\"🤽🏻‍♂️\\\\\\",\\\\n                \\\\\\"🤽🏼‍♂️\\\\\\",\\\\n                \\\\\\"🤽🏽‍♂️\\\\\\",\\\\n                \\\\\\"🤽🏾‍♂️\\\\\\",\\\\n                \\\\\\"🤽🏿‍♂️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚣‍♀️\\\\\\",\\\\n                \\\\\\"🚣🏻‍♀️\\\\\\",\\\\n                \\\\\\"🚣🏼‍♀️\\\\\\",\\\\n                \\\\\\"🚣🏽‍♀️\\\\\\",\\\\n                \\\\\\"🚣🏾‍♀️\\\\\\",\\\\n                \\\\\\"🚣🏿‍♀️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚣‍♂️\\\\\\",\\\\n                \\\\\\"🚣🏻‍♂️\\\\\\",\\\\n                \\\\\\"🚣🏼‍♂️\\\\\\",\\\\n                \\\\\\"🚣🏽‍♂️\\\\\\",\\\\n                \\\\\\"🚣🏾‍♂️\\\\\\",\\\\n                \\\\\\"🚣🏿‍♂️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🧗‍♀️\\\\\\",\\\\n                \\\\\\"🧗🏻‍♀️\\\\\\",\\\\n                \\\\\\"🧗🏼‍♀️\\\\\\",\\\\n                \\\\\\"🧗🏽‍♀️\\\\\\",\\\\n                \\\\\\"🧗🏾‍♀️\\\\\\",\\\\n                \\\\\\"🧗🏿‍♀️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🧗‍♂️\\\\\\",\\\\n                \\\\\\"🧗🏻‍♂️\\\\\\",\\\\n                \\\\\\"🧗🏼‍♂️\\\\\\",\\\\n                \\\\\\"🧗🏽‍♂️\\\\\\",\\\\n                \\\\\\"🧗🏾‍♂️\\\\\\",\\\\n                \\\\\\"🧗🏿‍♂️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚵‍♀️\\\\\\",\\\\n                \\\\\\"🚵🏻‍♀️\\\\\\",\\\\n                \\\\\\"🚵🏼‍♀️\\\\\\",\\\\n                \\\\\\"🚵🏽‍♀️\\\\\\",\\\\n                \\\\\\"🚵🏾‍♀️\\\\\\",\\\\n                \\\\\\"🚵🏿‍♀️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚵‍♂️\\\\\\",\\\\n                \\\\\\"🚵🏻‍♂️\\\\\\",\\\\n                \\\\\\"🚵🏼‍♂️\\\\\\",\\\\n                \\\\\\"🚵🏽‍♂️\\\\\\",\\\\n                \\\\\\"🚵🏾‍♂️\\\\\\",\\\\n                \\\\\\"🚵🏿‍♂️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚴‍♀️\\\\\\",\\\\n                \\\\\\"🚴🏻‍♀️\\\\\\",\\\\n                \\\\\\"🚴🏼‍♀️\\\\\\",\\\\n                \\\\\\"🚴🏽‍♀️\\\\\\",\\\\n                \\\\\\"🚴🏾‍♀️\\\\\\",\\\\n                \\\\\\"🚴🏿‍♀️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚴‍♂️\\\\\\",\\\\n                \\\\\\"🚴🏻‍♂️\\\\\\",\\\\n                \\\\\\"🚴🏼‍♂️\\\\\\",\\\\n                \\\\\\"🚴🏽‍♂️\\\\\\",\\\\n                \\\\\\"🚴🏾‍♂️\\\\\\",\\\\n                \\\\\\"🚴🏿‍♂️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏆\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🥇\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🥈\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🥉\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏅\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎖\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏵\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎗\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎫\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎟\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎪\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤹‍♀️\\\\\\",\\\\n                \\\\\\"🤹🏻‍♀️\\\\\\",\\\\n                \\\\\\"🤹🏼‍♀️\\\\\\",\\\\n                \\\\\\"🤹🏽‍♀️\\\\\\",\\\\n                \\\\\\"🤹🏾‍♀️\\\\\\",\\\\n                \\\\\\"🤹🏿‍♀️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🤹‍♂️\\\\\\",\\\\n                \\\\\\"🤹🏻‍♂️\\\\\\",\\\\n                \\\\\\"🤹🏼‍♂️\\\\\\",\\\\n                \\\\\\"🤹🏽‍♂️\\\\\\",\\\\n                \\\\\\"🤹🏾‍♂️\\\\\\",\\\\n                \\\\\\"🤹🏿‍♂️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎭\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎨\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎬\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎤\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎧\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎼\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎹\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🥁\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎷\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎺\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎸\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎻\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎲\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎯\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎳\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎮\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎰\\\\\\"\\\\n            ]\\\\n        ],\\\\n        \\\\\\"type\\\\\\": \\\\\\"activity\\\\\\"\\\\n    },\\\\n    {\\\\n        \\\\\\"emojis\\\\\\": [\\\\n            [\\\\n                \\\\\\"🚗\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚕\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚙\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚌\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚎\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏎\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚓\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚑\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚒\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚐\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚚\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚛\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚜\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🛴\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚲\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🛵\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏍\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚨\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚔\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚍\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚘\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚖\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚡\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚠\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚟\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚃\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚋\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚞\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚝\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚄\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚅\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚈\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚂\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚆\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚇\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚊\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚉\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"✈️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🛫\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🛬\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🛩\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💺\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🛰\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚀\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🛸\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚁\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🛶\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⛵️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚤\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🛥\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🛳\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⛴\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚢\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⚓️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⛽️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚧\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚦\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚥\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚏\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🗺\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🗿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🗽\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🗼\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏰\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏯\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏟\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎡\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎢\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎠\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⛲️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⛱\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏖\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏝\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏜\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌋\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⛰\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏔\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🗻\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏕\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⛺️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏠\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏡\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏘\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏚\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏗\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏭\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏢\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏬\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏣\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏤\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏥\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏦\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏨\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏪\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏫\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏩\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💒\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏛\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⛪️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🕌\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🕍\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🕋\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⛩\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🛤\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🛣\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🗾\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎑\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏞\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌅\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌄\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌠\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎇\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎆\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌇\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌆\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏙\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌃\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌌\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌉\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌁\\\\\\"\\\\n            ]\\\\n        ],\\\\n        \\\\\\"type\\\\\\": \\\\\\"travelAndPlaces\\\\\\"\\\\n    },\\\\n    {\\\\n        \\\\\\"emojis\\\\\\": [\\\\n            [\\\\n                \\\\\\"⌚️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📱\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📲\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💻\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⌨️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🖥\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🖨\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🖱\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🖲\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🕹\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🗜\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💽\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💾\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📀\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📼\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📷\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📸\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📹\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎥\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📽\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎞\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📞\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"☎️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📟\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📠\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📺\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📻\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎙\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎚\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎛\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⏱\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⏲\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⏰\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🕰\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⌛️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⏳\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📡\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔋\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔌\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💡\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔦\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🕯\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🗑\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🛢\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💸\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💵\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💴\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💶\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💷\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💰\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💳\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💎\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⚖️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔧\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔨\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⚒\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🛠\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⛏\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔩\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⚙️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⛓\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔫\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💣\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔪\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🗡\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⚔️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🛡\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚬\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⚰️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⚱️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏺\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔮\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💈\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⚗️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔭\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔬\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🕳\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💊\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💉\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌡\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚽\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚰\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🛁\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🛀\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🛀🏻\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🛀🏼\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🛀🏽\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🛀🏾\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🛀🏿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🛎\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔑\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🗝\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚪\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🛋\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🛏\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🛌\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🖼\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🛍\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🛒\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎁\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎈\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎏\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎀\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎊\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎉\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎎\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏮\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎐\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"✉️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📩\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📨\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📧\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💌\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📥\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📤\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📦\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏷\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📪\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📫\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📬\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📭\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📮\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📯\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📜\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📃\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📄\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📑\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📊\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📈\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📉\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🗒\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🗓\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📆\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📅\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📇\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🗃\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🗳\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🗄\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📋\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📁\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📂\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🗂\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🗞\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📰\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📓\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📔\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📒\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📕\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📗\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📘\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📙\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📚\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📖\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔖\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔗\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📎\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🖇\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📐\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📏\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📌\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📍\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"✂️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🖊\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🖋\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"✒️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🖌\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🖍\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📝\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"✏️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔍\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔎\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔏\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔐\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔒\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔓\\\\\\"\\\\n            ]\\\\n        ],\\\\n        \\\\\\"type\\\\\\": \\\\\\"objects\\\\\\"\\\\n    },\\\\n    {\\\\n        \\\\\\"emojis\\\\\\": [\\\\n            [\\\\n                \\\\\\"❤️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🧡\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💛\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💚\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💙\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💜\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🖤\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💔\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"❣️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💕\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💞\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💓\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💗\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💖\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💘\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💝\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💟\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"☮️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"✝️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"☪️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🕉\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"☸️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"✡️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔯\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🕎\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"☯️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"☦️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🛐\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⛎\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"♈️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"♉️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"♊️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"♋️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"♌️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"♍️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"♎️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"♏️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"♐️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"♑️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"♒️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"♓️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🆔\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⚛️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🉑\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"☢️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"☣️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📴\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📳\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🈶\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🈚️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🈸\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🈺\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🈷️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"✴️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🆚\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💮\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🉐\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"㊙️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"㊗️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🈴\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🈵\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🈹\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🈲\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🅰️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🅱️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🆎\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🆑\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🅾️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🆘\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"❌\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⭕️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🛑\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⛔️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📛\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚫\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💯\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💢\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"♨️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚷\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚯\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚳\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚱\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔞\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📵\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚭\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"❗️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"❕\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"❓\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"❔\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"‼️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⁉️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔅\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔆\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"〽️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⚠️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚸\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔱\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⚜️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔰\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"♻️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"✅\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🈯️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💹\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"❇️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"✳️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"❎\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌐\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💠\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"Ⓜ️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🌀\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💤\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏧\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚾\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"♿️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🅿️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🈳\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🈂️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🛂\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🛃\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🛄\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🛅\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚹\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚺\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚼\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚻\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚮\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎦\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📶\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🈁\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔣\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"ℹ️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔤\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔡\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔠\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🆖\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🆗\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🆙\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🆒\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🆕\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🆓\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"0️⃣\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"1️⃣\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"2️⃣\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"3️⃣\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"4️⃣\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"5️⃣\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"6️⃣\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"7️⃣\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"8️⃣\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"9️⃣\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔟\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔢\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"#️⃣\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"*️⃣\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⏏️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"▶️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⏸\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⏯\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⏹\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⏺\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⏭\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⏮\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⏩\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⏪\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⏫\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⏬\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"◀️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔼\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔽\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"➡️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⬅️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⬆️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⬇️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"↗️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"↘️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"↙️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"↖️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"↕️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"↔️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"↪️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"↩️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⤴️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⤵️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔀\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔁\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔂\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔄\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔃\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎵\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎶\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"➕\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"➖\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"➗\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"✖️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💲\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💱\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"™️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"©️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"®️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"〰️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"➰\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"➿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔚\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔙\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔛\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔝\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔜\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"✔️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"☑️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔘\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⚪️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⚫️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔴\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔵\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔺\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔻\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔸\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔹\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔶\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔷\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔳\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔲\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"▪️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"▫️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"◾️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"◽️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"◼️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"◻️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⬛️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"⬜️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔈\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔇\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔉\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔊\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔔\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🔕\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📣\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"📢\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"👁‍🗨\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💬\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"💭\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🗯\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"♠️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"♣️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"♥️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"♦️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🃏\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎴\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🀄️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🕐\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🕑\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🕒\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🕓\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🕔\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🕕\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🕖\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🕗\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🕘\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🕙\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🕚\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🕛\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🕜\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🕝\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🕞\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🕟\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🕠\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🕡\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🕢\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🕣\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🕤\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🕥\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🕦\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🕧\\\\\\"\\\\n            ]\\\\n        ],\\\\n        \\\\\\"type\\\\\\": \\\\\\"symbols\\\\\\"\\\\n    },\\\\n    {\\\\n        \\\\\\"emojis\\\\\\": [\\\\n            [\\\\n                \\\\\\"🏳️\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏴\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏁\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🚩\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏳️‍🌈\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇦🇫\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇦🇽\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇦🇱\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇩🇿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇦🇸\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇦🇩\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇦🇴\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇦🇮\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇦🇶\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇦🇬\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇦🇷\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇦🇲\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇦🇼\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇦🇺\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇦🇹\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇦🇿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇧🇸\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇧🇭\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇧🇩\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇧🇧\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇧🇾\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇧🇪\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇧🇿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇧🇯\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇧🇲\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇧🇹\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇧🇴\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇧🇦\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇧🇼\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇧🇷\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇮🇴\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇻🇬\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇧🇳\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇧🇬\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇧🇫\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇧🇮\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇰🇭\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇨🇲\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇨🇦\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇮🇨\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇨🇻\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇧🇶\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇰🇾\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇨🇫\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇹🇩\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇨🇱\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇨🇳\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇨🇽\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇨🇨\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇨🇴\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇰🇲\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇨🇬\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇨🇩\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇨🇰\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇨🇷\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇨🇮\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇭🇷\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇨🇺\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇨🇼\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇨🇾\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇨🇿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇩🇰\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇩🇯\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇩🇲\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇩🇴\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇪🇨\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇪🇬\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇸🇻\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇬🇶\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇪🇷\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇪🇪\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇪🇹\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇪🇺\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇫🇰\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇫🇴\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇫🇯\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇫🇮\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇫🇷\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇬🇫\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇵🇫\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇹🇫\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇬🇦\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇬🇲\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇬🇪\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇩🇪\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇬🇭\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇬🇮\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇬🇷\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇬🇱\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇬🇩\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇬🇵\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇬🇺\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇬🇹\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇬🇬\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇬🇳\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇬🇼\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇬🇾\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇭🇹\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇭🇳\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇭🇰\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇭🇺\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇮🇸\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇮🇳\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇮🇩\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇮🇷\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇮🇶\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇮🇪\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇮🇲\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇮🇱\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇮🇹\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇯🇲\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇯🇵\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🎌\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇯🇪\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇯🇴\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇰🇿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇰🇪\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇰🇮\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇽🇰\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇰🇼\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇰🇬\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇱🇦\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇱🇻\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇱🇧\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇱🇸\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇱🇷\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇱🇾\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇱🇮\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇱🇹\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇱🇺\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇲🇴\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇲🇰\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇲🇬\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇲🇼\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇲🇾\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇲🇻\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇲🇱\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇲🇹\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇲🇭\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇲🇶\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇲🇷\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇲🇺\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇾🇹\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇲🇽\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇫🇲\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇲🇩\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇲🇨\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇲🇳\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇲🇪\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇲🇸\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇲🇦\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇲🇿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇲🇲\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇳🇦\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇳🇷\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇳🇵\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇳🇱\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇳🇨\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇳🇿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇳🇮\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇳🇪\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇳🇬\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇳🇺\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇳🇫\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇰🇵\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇲🇵\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇳🇴\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇴🇲\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇵🇰\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇵🇼\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇵🇸\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇵🇦\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇵🇬\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇵🇾\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇵🇪\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇵🇭\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇵🇳\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇵🇱\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇵🇹\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇵🇷\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇶🇦\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇷🇪\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇷🇴\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇷🇺\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇷🇼\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇼🇸\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇸🇲\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇸🇦\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇸🇳\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇷🇸\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇸🇨\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇸🇱\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇸🇬\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇸🇽\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇸🇰\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇸🇮\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇬🇸\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇸🇧\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇸🇴\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇿🇦\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇰🇷\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇸🇸\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇪🇸\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇱🇰\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇧🇱\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇸🇭\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇰🇳\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇱🇨\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇵🇲\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇻🇨\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇸🇩\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇸🇷\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇸🇿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇸🇪\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇨🇭\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇸🇾\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇹🇼\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇹🇯\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇹🇿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇹🇭\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇹🇱\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇹🇬\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇹🇰\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇹🇴\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇹🇹\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇹🇳\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇹🇷\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇹🇲\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇹🇨\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇹🇻\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇻🇮\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇺🇬\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇺🇦\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇦🇪\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇬🇧\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏴󠁧󠁢󠁥󠁮󠁧󠁿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏴󠁧󠁢󠁳󠁣󠁴󠁿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🏴󠁧󠁢󠁷󠁬󠁳󠁿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇺🇸\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇺🇾\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇺🇿\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇻🇺\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇻🇦\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇻🇪\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇻🇳\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇼🇫\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇪🇭\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇾🇪\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇿🇲\\\\\\"\\\\n            ],\\\\n            [\\\\n                \\\\\\"🇿🇼\\\\\\"\\\\n            ]\\\\n        ],\\\\n        \\\\\\"type\\\\\\": \\\\\\"flags\\\\\\"\\\\n    }\\\\n]\\\\n\\";");\n\n//# sourceURL=webpack://xabber.web/./templates/accounts/emojis.txt?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/accounts/add_account.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"modal-content-wrap\\">\\n    <div class=\\"modal-header\\">\\n        <span>{[print(xabber.getString(\\"account_add\\"))]}</span>\\n    </div>\\n    <div class=\\"modal-content login-panel-form\\">\\n\\n        <div class=\\"login-form-jid\\">\\n            <div class=\\"login-form-step-wrap\\">\\n                <div class=\\"input-field-wrap\\">\\n                    <div class=\\"input-field input-field-jid\\">\\n                        <input id=\\"jid\\" placeholder=\'{[print(xabber.getString(\\"hint_xmpp_id\\"))]}\' type=\\"text\\" name=\\"jid\\">\\n                        <div class=\\"property-field xmpp-server-dropdown-wrap\\">\\n                            <div class=\\"select-auth-xmpp-server\\">\\n                                <div data-activates=\\"select-auth-xmpp-server\\" class=\\"xmpp-server-item-wrap property-wrap\\"><div class=\\"jid-at\\">@</div><div class=\\"field-jid one-line property-value\\"></div></div>\\n                                <div class=\\"input-field input-group-chat-domain hidden\\">\\n                                    <input id=\\"sign_in_domain\\" type=\\"text\\" placeholder=\'{[print(xabber.getString(\\"groupchat__hint_domain\\"))]}\' name=\\"sign_in_domain\\">\\n                                </div>\\n                                <div data-activates=\\"select-auth-xmpp-server\\" class=\\"caret\\">\\n                                    <i class=\\"mdi mdi-20px mdi-menu-up\\"></i>\\n                                    <i class=\\"mdi mdi-20px mdi-menu-down\\"></i>\\n                                </div>\\n                            </div>\\n                            <div id=\\"select-auth-xmpp-server\\" class=\\"dropdown-content noselect\\">\\n                                <div class=\\"property-variant set-custom-domain\\">{[print(xabber.getString(\\"groupchat_custom_server\\"))]}</div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\"input-field\\">\\n                        <input id=\\"password\\" placeholder=\'{[print(xabber.getString(\\"hint_pass\\"))]}\' type=\\"password\\" name=\\"password\\">\\n                    </div>\\n                </div>\\n                <div class=\\"login-form-step-error login-jid-error hidden\\"></div>\\n                <div class=\\"login-form-step-error login-password-error hidden\\"></div>\\n                <div class=\\"login-form-step-description\\"></div>\\n                <div class=\\"login-step-wrap hidden\\">\\n                    <div class=\\"login-step connecting-step\\">\\n                        <div class=\\"login-step-text\\">\\n                            {[print(xabber.getString(\\"dialog_jingle_message__status_communicating\\"))]}\\n                        </div>\\n                        <div class=\\"preloader-wrapper preloader-17px active visible\\">\\n                            <div class=\\"spinner-layer\\">\\n                                <div class=\\"circle-clipper left\\">\\n                                    <div class=\\"circle\\"></div>\\n                                </div>\\n                                <div class=\\"gap-patch\\">\\n                                    <div class=\\"circle\\"></div>\\n                                </div>\\n                                <div class=\\"circle-clipper right\\">\\n                                    <div class=\\"circle\\"></div>\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <i class=\\"mdi mdi-24px mdi-alert-circle hidden\\"></i>\\n                    </div>\\n                    <div class=\\"login-step credentials-step\\">\\n                        <div class=\\"login-step-text\\">\\n                            {[print(xabber.getString(\\"dialog_jingle_message__status_checking_credentials\\"))]}\\n                        </div>\\n                        <div class=\\"preloader-wrapper preloader-17px active visible\\">\\n                            <div class=\\"spinner-layer\\">\\n                                <div class=\\"circle-clipper left\\">\\n                                    <div class=\\"circle\\"></div>\\n                                </div>\\n                                <div class=\\"gap-patch\\">\\n                                    <div class=\\"circle\\"></div>\\n                                </div>\\n                                <div class=\\"circle-clipper right\\">\\n                                    <div class=\\"circle\\"></div>\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <i class=\\"mdi mdi-24px mdi-alert-circle hidden\\"></i>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\"login-form-server-features hidden\\">\\n            <div class=\\"register-form-step-wrap\\">\\n                <div class=\\"register-form-step-header\\"></div>\\n            </div>\\n            <div class=\\"login-server-features-wrap\\">\\n                <div class=\\"server-feature\\" data-xmlns=\\"{[print(Strophe.NS.MAM)]}\\" >\\n                    <div class=\\"server-feature-text\\">\\n                        {[print(xabber.getString(\\"signin_message_archive\\"))]}\\n                    </div>\\n                    <div class=\\"preloader-wrapper preloader-17px active visible\\">\\n                        <div class=\\"spinner-layer\\">\\n                            <div class=\\"circle-clipper left\\">\\n                                <div class=\\"circle\\"></div>\\n                            </div>\\n                            <div class=\\"gap-patch\\">\\n                                <div class=\\"circle\\"></div>\\n                            </div>\\n                            <div class=\\"circle-clipper right\\">\\n                                <div class=\\"circle\\"></div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <i class=\\"mdi mdi-24px mdi-alert hidden\\"></i>\\n                    <div class=\\"feature-error-tooltip-triangle\\">\\n                        <div class=\\"triangle-inside\\"></div>\\n                    </div>\\n                    <div class=\\"feature-error-tooltip\\">{[print(xabber.getString(\'signin_message_archive_error\'))]}</div>\\n                </div>\\n                <div class=\\"server-feature\\" data-xmlns=\\"{[print(Strophe.NS.SYNCHRONIZATION)]}\\">\\n                    <div class=\\"server-feature-text\\">\\n                        {[print(xabber.getString(\\"signin_synchronization\\"))]}\\n                    </div>\\n                    <div class=\\"preloader-wrapper preloader-17px active visible\\">\\n                        <div class=\\"spinner-layer\\">\\n                            <div class=\\"circle-clipper left\\">\\n                                <div class=\\"circle\\"></div>\\n                            </div>\\n                            <div class=\\"gap-patch\\">\\n                                <div class=\\"circle\\"></div>\\n                            </div>\\n                            <div class=\\"circle-clipper right\\">\\n                                <div class=\\"circle\\"></div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <i class=\\"mdi mdi-24px mdi-alert hidden\\"></i>\\n                    <div class=\\"feature-error-tooltip-triangle\\">\\n                        <div class=\\"triangle-inside\\"></div>\\n                    </div>\\n                    <div class=\\"feature-error-tooltip\\">{[print(xabber.getString(\'signin_quick_synchronization_error\'))]}</div>\\n                </div>\\n                <div class=\\"server-feature\\" data-xmlns=\\"{[print(Strophe.NS.REWRITE)]}\\">\\n                    <div class=\\"server-feature-text\\">\\n                        {[print(xabber.getString(\\"signin_message_editing\\"))]}\\n                    </div>\\n                    <div class=\\"preloader-wrapper preloader-17px active visible\\">\\n                        <div class=\\"spinner-layer\\">\\n                            <div class=\\"circle-clipper left\\">\\n                                <div class=\\"circle\\"></div>\\n                            </div>\\n                            <div class=\\"gap-patch\\">\\n                                <div class=\\"circle\\"></div>\\n                            </div>\\n                            <div class=\\"circle-clipper right\\">\\n                                <div class=\\"circle\\"></div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <i class=\\"mdi mdi-24px mdi-alert hidden\\"></i>\\n                    <div class=\\"feature-error-tooltip-triangle\\">\\n                        <div class=\\"triangle-inside\\"></div>\\n                    </div>\\n                    <div class=\\"feature-error-tooltip\\">{[print(xabber.getString(\'signin_message_editing_error\'))]}</div>\\n                </div>\\n                <div class=\\"server-feature\\" data-xmlns=\\"{[print(Strophe.NS.AUTH_DEVICES)]}\\">\\n                    <div class=\\"server-feature-text\\">\\n                        {[print(xabber.getString(\\"signin_device_management\\"))]}\\n                    </div>\\n                    <div class=\\"preloader-wrapper preloader-17px active visible\\">\\n                        <div class=\\"spinner-layer\\">\\n                            <div class=\\"circle-clipper left\\">\\n                                <div class=\\"circle\\"></div>\\n                            </div>\\n                            <div class=\\"gap-patch\\">\\n                                <div class=\\"circle\\"></div>\\n                            </div>\\n                            <div class=\\"circle-clipper right\\">\\n                                <div class=\\"circle\\"></div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <i class=\\"mdi mdi-24px mdi-alert hidden\\"></i>\\n                    <div class=\\"feature-error-tooltip-triangle\\">\\n                        <div class=\\"triangle-inside\\"></div>\\n                    </div>\\n                    <div class=\\"feature-error-tooltip\\">{[print(xabber.getString(\'signin_tokens_error\'))]}</div>\\n                </div>\\n                <div class=\\"server-feature\\" data-xmlns=\\"{[print(Strophe.NS.PUBSUB)]}\\">\\n                    <div class=\\"server-feature-text\\">\\n                        {[print(xabber.getString(\\"signin_publish_subscribe\\"))]}\\n                    </div>\\n                    <div class=\\"preloader-wrapper preloader-17px active visible\\">\\n                        <div class=\\"spinner-layer\\">\\n                            <div class=\\"circle-clipper left\\">\\n                                <div class=\\"circle\\"></div>\\n                            </div>\\n                            <div class=\\"gap-patch\\">\\n                                <div class=\\"circle\\"></div>\\n                            </div>\\n                            <div class=\\"circle-clipper right\\">\\n                                <div class=\\"circle\\"></div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <i class=\\"mdi mdi-24px mdi-alert hidden\\"></i>\\n                    <div class=\\"feature-error-tooltip-triangle\\">\\n                        <div class=\\"triangle-inside\\"></div>\\n                    </div>\\n                    <div class=\\"feature-error-tooltip\\">{[print(xabber.getString(\'signin_pubsub_error\'))]}</div>\\n                </div>\\n                <div class=\\"server-feature\\" data-xmlns=\\"{[print(Strophe.NS.HTTP_UPLOAD)]}\\">\\n                    <div class=\\"server-feature-text\\">\\n                        {[print(xabber.getString(\\"signin_file_upload\\"))]}\\n                    </div>\\n                    <div class=\\"preloader-wrapper preloader-17px active visible\\">\\n                        <div class=\\"spinner-layer\\">\\n                            <div class=\\"circle-clipper left\\">\\n                                <div class=\\"circle\\"></div>\\n                            </div>\\n                            <div class=\\"gap-patch\\">\\n                                <div class=\\"circle\\"></div>\\n                            </div>\\n                            <div class=\\"circle-clipper right\\">\\n                                <div class=\\"circle\\"></div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <i class=\\"mdi mdi-24px mdi-alert hidden\\"></i>\\n                    <div class=\\"feature-error-tooltip-triangle\\">\\n                        <div class=\\"triangle-inside\\"></div>\\n                    </div>\\n                    <div class=\\"feature-error-tooltip\\">{[print(xabber.getString(\'signin_file_upload_error\'))]}</div>\\n                </div>\\n            </div>\\n            <div class=\\"server-features-error\\"></div>\\n        </div>\\n    </div>\\n    <div class=\\"modal-footer\\">\\n        <button disabled class=\\"btn-flat btn-main btn-log-in\\">{[print(xabber.getString(\\"title_login_xabber_account\\"))]}</button>\\n        <button class=\\"btn-flat btn-main one-line hidden btn-finish-log-in\\"></button>\\n        <button class=\\"btn-flat btn-main btn-dark btn-cancel hidden\\">{[print(xabber.getString(\\"cancel\\"))]}</button>\\n    </div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/accounts/add_account.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/accounts/audio_file_waveform.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"waveform\\" id=\\"{{waveform_id}}\\"></div>\\n<div class=\\"audio-control-panel\\">\\n    <span class=\\"voice-msg-current-time\\">0:00</span> /\\n    <span class=\\"voice-msg-total-time\\">0:00</span>\\n    <input value=\\"50\\" type=\\"range\\" class=\\"voice-message-volume\\">\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/accounts/audio_file_waveform.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/accounts/avatars_gallery.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"modal-header\\">\\n    <span></span>\\n    <div class=\\"menu-wrap\\">\\n        <div data-screen-name=\\"library\\" class=\\"menu-btn btn-library\\">{[print(xabber.getString(\\"settings__dialog_background__menu_item_library\\"))]}</div>\\n        <div data-screen-name=\\"upload\\" class=\\"menu-btn btn-upload\\">{[print(xabber.getString(\\"settings__dialog_background__menu_item_upload\\"))]}</div>\\n        <div data-screen-name=\\"web-address\\" class=\\"menu-btn btn-web-address\\">{[print(xabber.getString(\\"settings__dialog_background__menu_item_url\\"))]}</div>\\n    </div>\\n</div>\\n<div class=\\"modal-content\\">\\n    <div data-screen=\\"library\\" class=\\"screen-wrap library-wrap\\"></div>\\n    <div data-screen=\\"upload\\" class=\\"hidden screen-wrap\\">\\n        <div class=\\"upload-wrap\\">\\n            <div class=\\"upload-text\\">{[print(xabber.getString(\\"settings__dialog_background__section_upload__text\\"))]}</div>\\n            <div class=\\"upload-button\\">\\n                <button type=\\"file\\">{[print(xabber.getString(\\"settings__dialog_background__section_upload__button_upload\\"))]}</button>\\n                <input type=\\"file\\">\\n            </div></div>\\n    </div>\\n    <div data-screen=\\"web-address\\" class=\\"hidden screen-wrap web-address-wrap\\">\\n        <div class=\\"web-address\\">\\n            <div class=\\"label\\">{[print(xabber.getString(\\"settings__dialog_background__section_url__label\\"))]}</div>\\n            <input class=\\"url\\"/>\\n        </div>\\n        <div class=\\"image-preview\\">\\n            <img class=\\"hidden\\">\\n            <p>{[print(xabber.getString(\\"settings__dialog_background__section_url__placeholder_preview\\"))]}</p>\\n        </div>\\n    </div>\\n</div>\\n<div class=\\"modal-footer\\">\\n    <button class=\\"btn-flat btn-main text-color-700 non-active btn-add\\">{[print(xabber.getString(\\"set\\"))]}</button>\\n    <button class=\\"btn-flat btn-main btn-dark btn-cancel\\">{[print(xabber.getString(\\"cancel\\"))]}</button>\\n    <div class=\\"modal-preloader-wrap\\"></div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/accounts/avatars_gallery.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/accounts/change_password.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"modal-content-wrap\\">\\n    <div class=\\"modal-header\\">\\n        <span>{[print(xabber.getString(\\"settings_account__dialog_change_password__header\\"))]}</span>\\n    </div>\\n    <div class=\\"modal-content\\">\\n        <div class=\\"row login-form-field\\">\\n            <div class=\\"input-field\\">\\n                <input id=\\"jid\\" type=\\"text\\" class=\\"input-glow\\" name=\\"jid\\" disabled readonly>\\n                <span class=\\"errors fixed\\"></span>\\n            </div>\\n            <div class=\\"input-field\\">\\n                <input id=\\"password\\" type=\\"password\\" class=\\"input-glow\\" placeholder=\\"{[print(xabber.getString(\'account_password\'))]}\\" name=\\"password\\">\\n                <span class=\\"errors fixed\\"></span>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\"modal-footer\\">\\n        <button class=\\"btn-flat btn-main btn-change\\">{[print(xabber.getString(\\"set\\"))]}</button>\\n        <button class=\\"btn-flat btn-main btn-dark btn-cancel\\">{[print(xabber.getString(\\"cancel\\"))]}</button>\\n    </div>\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/accounts/change_password.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/accounts/change_status.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"modal-content-wrap\\">\\n    <div class=\\"modal-header\\">\\n        <span>{[print(xabber.getString(\\"status_editor\\"))]}</span>\\n    </div>\\n    <ul class=\\"status-values noselect\\">\\n        <li data-value=\\"chat\\">\\n            <span class=\\"status-value one-line\\">{[print(xabber.getString(\\"chat\\"))]}</span>\\n            <span class=\\"status-bulb\\" data-status=\\"chat\\"></span>\\n        </li>\\n        <li data-value=\\"online\\">\\n            <span class=\\"status-value one-line\\">{[print(xabber.getString(\\"online\\"))]}</span>\\n            <span class=\\"status-bulb\\" data-status=\\"online\\"></span>\\n        </li>\\n        <li data-value=\\"away\\">\\n            <span class=\\"status-value one-line\\">{[print(xabber.getString(\\"away\\"))]}</span>\\n            <span class=\\"status-bulb\\" data-status=\\"away\\"></span>\\n        </li>\\n        <li data-value=\\"xa\\">\\n            <span class=\\"status-value one-line\\">{[print(xabber.getString(\\"xa\\"))]}</span>\\n            <span class=\\"status-bulb\\" data-status=\\"xa\\"></span>\\n        </li>\\n        <li data-value=\\"dnd\\">\\n            <span class=\\"status-value one-line\\">{[print(xabber.getString(\\"dnd\\"))]}</span>\\n            <span class=\\"status-bulb\\" data-status=\\"dnd\\"></span>\\n        </li>\\n        <li data-value=\\"offline\\">\\n            <span class=\\"status-value one-line\\">{[print(xabber.getString(\\"unavailable\\"))]}</span>\\n            <span class=\\"status-bulb\\" data-status=\\"offline\\"></span>\\n        </li>\\n    </ul>\\n    <div class=\\"modal-content\\">\\n        <div class=\\"row\\">\\n            <div class=\\"input-field status-message-wrap\\">\\n                <span class=\\"static-label\\">{[print(xabber.getString(\\"dialog_status_editor__label_custom_status\\"))]}</span>\\n                <input type=\\"text\\" class=\\"status-message\\">\\n                <i class=\\"clear-input mdi mdi-20px mdi-close\\"></i>\\n            </div>\\n            <div class=\\"input-field checkbox-field no-padding\\">\\n                <input type=\\"checkbox\\" class=\\"filled-in apply-to-all\\" id=\\"{{view.cid}}_apply_to_all\\"/>\\n                <label for=\\"{{view.cid}}_apply_to_all\\">{[print(xabber.getString(\\"dialog_status_editor__label_apply_to_all\\"))]}</label>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/accounts/change_status.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/accounts/current_token_item.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"token-wrap\\" data-token-uid=\\"{{token_uid}}\\">\\n    <div class=\\"client one-line\\">{{client}}</div>\\n    <div class=\\"device one-line\\">{{device}}</div>\\n    <div class=\\"ip-address\\">{{ip}}</div>\\n    <div class=\\"last-auth resource text-color-700\\" {[ if (resource_obj) {]}data-resource-id=\\"{{resource_obj.resource}}\\"{[}]}>{[print(xabber.getString(\\"account_state_connected\\"))]}</div>\\n    {[ if (resource_obj) {]}\\n        <table class=\\"token-resource-wrap hidden\\" {[ if (resource_obj) {]}data-resource-id=\\"{{resource_obj.resource}}\\"{[}]}>\\n            <tbody>\\n            <tr class=\\"info status-info\\">\\n                <td class=\\"label\\">{[print(xabber.getString(\\"settings_account__label_status\\"))]}:</td>\\n                <td>\\n                    <div class=\\"value status-message one-line\\">{{resource_obj.status}}</div>\\n                    <div class=\\"status\\" data-status=\\"{{resource_obj.status}}\\"></div>\\n                </td>\\n            </tr>\\n            <tr class=\\"info resource-info\\">\\n                <td class=\\"label\\">{[print(xabber.getString(\\"account_resource\\"))]}:</td>\\n                <td class=\\"value resource one-line\\">{{resource_obj.resource}}</td>\\n            </tr>\\n            <tr class=\\"info priority-info\\">\\n                <td class=\\"label\\">{[print(xabber.getString(\\"account_priority\\"))]}:</td>\\n                <td class=\\"value priority\\">{{resource_obj.priority}}</td>\\n            </tr>\\n            </tbody>\\n        </table>\\n    {[}]}\\n    <div class=\\"token-indicator\\">{[print(xabber.getString(\\"settings_account__label_this_device\\"))]}</div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/accounts/current_token_item.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/accounts/emoji_panel.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"modal-content-wrap\\">\\n    <div class=\\"modal-header\\">\\n        <span>{[print(xabber.getString(\\"account_emoji_profile_image_header\\"))]}</span>\\n    </div>\\n    <div class=\\"modal-content\\">\\n        <div class=\\"dialog-text\\">{[print(xabber.getString(\\"account_emoji_profile_image_description\\"))]}</div>\\n    </div>\\n    <div class=\\"emoji-profile-image\\">\\n        <div class=\\"avatar-wrap\\">\\n            <div class=\\"circle-avatar ground-color-green-100\\" data-value=\\"green\\">\\n                <div class=\\"chosen-emoji\\" data-value=\\"🐈\\">🐈</div>\\n            </div>\\n            <div class=\\"circle-icon\\">\\n                <svg class=\\"mdi mdi-24px mdi-svg-template\\" data-svgname=\\"edit-outline\\"></svg>\\n            </div>\\n        </div>\\n\\n    </div>\\n    <div class=\\"emoji-profile-colors\\">\\n        <div class=\\"colors-line\\">\\n            <div class=\\"profile-image-background-color ground-color-green-500 outline-color-green-500 chosen-background-color\\" data-value=\\"green\\">\\n            </div>\\n            <div class=\\"profile-image-background-color ground-color-deep-orange-500 outline-color-deep-orange-500\\" data-value=\\"deep-orange\\">\\n            </div>\\n            <div class=\\"profile-image-background-color ground-color-red-500 outline-color-red-500\\" data-value=\\"red\\">\\n            </div>\\n        </div>\\n        <div class=\\"colors-line\\">\\n            <div class=\\"profile-image-background-color ground-color-light-blue-500 outline-color-light-blue-500\\" data-value=\\"light-blue\\">\\n            </div>\\n            <div class=\\"profile-image-background-color ground-color-blue-500 outline-color-blue-500\\" data-value=\\"blue\\">\\n            </div>\\n            <div class=\\"profile-image-background-color ground-color-purple-500 outline-color-purple-500\\" data-value=\\"purple\\">\\n            </div>\\n        </div>\\n        <div class=\\"colors-line\\">\\n            <div class=\\"profile-image-background-color ground-color-lime-500 outline-color-lime-500\\" data-value=\\"lime\\">\\n            </div>\\n            <div class=\\"profile-image-background-color ground-color-pink-500 outline-color-pink-500\\" data-value=\\"pink\\">\\n            </div>\\n            <div class=\\"profile-image-background-color ground-color-orange-500 outline-color-orange-500\\" data-value=\\"orange\\">\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\"modal-footer\\">\\n        <button class=\\"btn-flat btn-main btn-save\\">{[print(xabber.getString(\\"save\\"))]}</button>\\n        <button class=\\"btn-flat btn-main btn-dark btn-cancel\\">{[print(xabber.getString(\\"cancel\\"))]}</button>\\n        <div class=\\"modal-preloader-wrap\\"></div>\\n    </div>\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/accounts/emoji_panel.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/accounts/emoji_picker.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"modal-content-wrap\\">\\n    <div class=\\"modal-header\\">\\n        <span>{[print(xabber.getString(\\"account_emoji_profile_image_header\\"))]}</span>\\n        <i class=\\"close-modal mdi mdi-close mdi-24px\\"></i>\\n    </div>\\n    <div class=\\"emoji-picker-wrap no-select\\">\\n\\n    </div>\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/accounts/emoji_picker.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/accounts/emoji_picker_tabs.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("\\n{[ for (var i = 0; i < emojis.length; i++) { var tab = emojis[i] ]}\\n    <div class=\\"emojis-tab{[if (i === 0){]} chosen-emoji-tab{[} else {]} hidden{[}]}\\" data-value=\\"{{tab.type}}\\">\\n        {[ for (var y = 0; y < tab.emojis.length; y++) { var emoji = tab.emojis[y] ]}\\n            <div class=\\"emoji-picker-emoji\\" data-value=\\"{{emoji[0]}}\\">\\n                <div>{{emoji[0]}}</div>\\n            </div>\\n        {[ } ]}\\n    </div>\\n{[ } ]}\\n<div class=\\"emoji-picker-tabs\\">\\n    {[ for (var i = 0; i < emojis.length; i++) { var tab = emojis[i] ]}\\n    <div class=\\"emojis-bottom-tab-selector{[if (i === 0){]} chosen-emoji-selector{[}]}\\" data-value=\\"{{tab.type}}\\">\\n        {{tab.emojis[0][0]}}\\n    </div>\\n    {[ } ]}\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/accounts/emoji_picker_tabs.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/accounts/existing_groupchat_item.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"existing-chat-wrap\\" data-name=\\"{{name}}\\" data-jid=\\"{{jid}}\\">\\n    <div class=\\"circle-avatar\\">\\n        <img>\\n    </div>\\n    <div class=\\"existing-chat-item\\">\\n        <div class=\\"name one-line\\">{{name}}</div>\\n        <div class=\\"jid one-line\\">{{jid}}</div>\\n    </div>\\n    <button class=\\"btn-join-existing-chat btn-flat btn-dark btn-main\\">join</button>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/accounts/existing_groupchat_item.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/accounts/global_settings_item.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"move-account-to-this droppable\\"></div>\\n<div class=\\"account-info-wrap\\">\\n    <i class=\\"drag-item drag-handle mdi mdi-28px mdi-drag-vertical\\"></i>\\n    <div class=\\"circle-avatar noselect\\">\\n        <img>\\n    </div>\\n    <div class=\\"text-info-wrap\\">\\n        <div class=\\"jid-wrap\\">\\n            <div class=\\"jid text-color-700 one-line\\"></div>\\n        </div>\\n        <div class=\\"conn-status one-line\\"></div>\\n    </div>\\n</div>\\n<div class=\\"sync-marker-wrap hidden\\">\\n    <i class=\\"sync-marker mdi mdi-20px mdi-cloud-check\\"></i>\\n</div>\\n<div class=\\"field clickable-field enabled-state switch normal\\">\\n    <label class=\\"field-value\\">\\n        <input type=\\"checkbox\\">\\n        <span class=\\"lever\\"></span>\\n    </label>\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/accounts/global_settings_item.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/accounts/media_gallery_account.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"gallery-wrap\\">\\n    \x3c!--<svg class=\\"details-icon btn-go-back mdi mdi-24px mdi-svg-template\\" data-svgname=\\"chevron-left-variant\\"></svg>--\x3e\\n    <div class=\\"gallery-storage-wrap\\">\\n        <div class=\\"storage-usage\\"></div>\\n        <div class=\\"storage-progress-bar\\">\\n            <div class=\\"storage-progress-images\\"></div>\\n            <div class=\\"storage-progress-videos\\"></div>\\n            <div class=\\"storage-progress-voices\\"></div>\\n            <div class=\\"storage-progress-files\\"></div>\\n        </div>\\n        <div class=\\"storage-labels\\">\\n            <div class=\\"storage-label storage-label-images\\"><div class=\\"storage-label-icon\\"></div><div class=\\"storage-label-text\\">{[print(xabber.getString(\\"images\\"))]}</div></div>\\n            <div class=\\"storage-label storage-label-videos\\"><div class=\\"storage-label-icon\\"></div><div class=\\"storage-label-text\\">{[print(xabber.getString(\\"videos\\"))]}</div></div>\\n            <div class=\\"storage-label storage-label-voices\\"><div class=\\"storage-label-icon\\"></div><div class=\\"storage-label-text\\">{[print(xabber.getString(\\"vcard_type_voice\\"))]}</div></div>\\n            <div class=\\"storage-label storage-label-files\\"><div class=\\"storage-label-icon\\"></div><div class=\\"storage-label-text\\">{[print(xabber.getString(\\"files\\"))]}</div></div>\\n        </div>\\n        <div class=\\"storage-usages\\">\\n            <div class=\\"storage-category-usage storage-usage-images\\">\\n                {[print(xabber.getString(\\"images\\"))]}<span class=\\"storage-usage-amount\\"></span>\\n            </div>\\n            <div class=\\"storage-category-usage storage-usage-videos\\">\\n                {[print(xabber.getString(\\"videos\\"))]}<span class=\\"storage-usage-amount\\"></span>\\n            </div>\\n            <div class=\\"storage-category-usage storage-usage-voices\\">\\n                {[print(xabber.getString(\\"vcard_type_voice\\"))]}<span class=\\"storage-usage-amount\\"></span>\\n            </div>\\n            <div class=\\"storage-category-usage storage-usage-files\\">\\n                {[print(xabber.getString(\\"files\\"))]}<span class=\\"storage-usage-amount\\"></span>\\n            </div>\\n        </div>\\n    </div>\\n    <ul class=\\"tabs\\">\\n        <li data-value=\\"image\\" class=\\"list-variant tab\\"><a class=\\"text-color-700\\">{[print(xabber.getString(\\"images\\"))]}</a></li>\\n        <li data-value=\\"video\\" class=\\"list-variant tab\\"><a class=\\"text-color-700\\">{[print(xabber.getString(\\"videos\\"))]}</a></li>\\n        <li data-value=\\"files\\" class=\\"list-variant tab\\"><a class=\\"text-color-700\\">{[print(xabber.getString(\\"files\\"))]}</a></li>\\n        <li data-value=\\"voice\\" class=\\"list-variant tab\\"><a class=\\"text-color-700\\">{[print(xabber.getString(\\"vcard_type_voice\\"))]}</a></li>\\n        <li data-value=\\"avatars\\" class=\\"list-variant tab\\"><a class=\\"text-color-700\\">{[print(xabber.getString(\\"avatars\\"))]}</a></li>\\n    </ul>\\n    <div class=\\"list-managment-wrap\\">\\n        <button class=\\"btn-sorting dropdown-button btn-flat btn-main text-color-700 hover-ground-color-300\\" data-activates=\\"storage-file-sorting\\">\\n            {[print(xabber.getString(\\"searching__search_panel__label_sort_by\\"))]}\\n        </button>\\n    </div>\\n    <ul id=\\"storage-file-sorting\\" class=\\"dropdown-content bootstrap-dropdown noselect\\">\\n        <div class=\\"property-variant btn-gallery-sorting\\" data-value=\\"-id\\">\\n            <span class=\\"one-line\\">{[print(xabber.getString(\\"account_media_gallery_sorting_new\\"))]}</span>\\n        </div>\\n        <div class=\\"property-variant btn-gallery-sorting\\" data-value=\\"-size\\">\\n            <span class=\\"one-line\\">{[print(xabber.getString(\\"account_media_gallery_sorting_size\\"))]}</span>\\n        </div>\\n    </ul>\\n    <div class=\\"gallery-files zoom-gallery\\">\\n    </div>\\n</div>\\n\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/accounts/media_gallery_account.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/accounts/media_gallery_account_file.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"gallery-file{[if (file.is_avatar === \'True\'){]} gallery-avatar{[}]}\\" title=\\"{{file.name}}\\" data-id=\\"{{file.id}}\\" data-file=\\"{{file.file}}\\" data-name=\\"{{file.name}}\\" data-size=\\"{{file.size}}\\" data-width=\\"{{file.width}}\\" data-height=\\"{{file.height}}\\" data-media-type=\\"{{file.media_type}}\\" >\\n    {[if (file.media_type && (file.media_type.includes(\'image\') || file.media_type.includes(\'video\'))){]}\\n        <img class=\\"{[if (file.media_type.includes(\'video\')){]}uploaded-video{[} else {]}uploaded-img popup-img{[}]}\\" data-mfp-src=\\"{{file.file}}\\" src=\\"{{file.thumbnail}}\\" {[if (file.media_type && file.media_type.includes(\'image\')){]}onerror=\\"this.src = \'{{file.file}}\'\\" {[}]}>\\n    {[} else {]}\\n        {[if (svg_icon == \'file-audio\' && file.media_type.includes(\'+voice\')){]}\\n            <div class=\\"gallery-file-placeholder-background gallery-audio-file-not-uploaded\\">\\n                <i class=\\"details-icon mdi mdi-play no-uploaded\\"></i>\\n            </div>\\n            <div class=\\"gallery-file-audio-container\\">\\n            </div>\\n        {[} else {]}\\n            <div class=\\"gallery-file-placeholder-background\\">\\n                <svg class=\\"details-icon mdi mdi-24px mdi-svg-template\\" data-svgname=\\"{{svg_icon}}\\"></svg>\\n                <div class=\\"gallery-file-title-grid\\">{{filesize}}</div>\\n            </div>\\n        {[}]}\\n        <div class=\\"gallery-file-title one-line\\">\\n            {{file.name}},  <span class=\\"gallery-file-size\\">{{filesize}}</span> <span class=\\"gallery-file-date\\">{{file.created_at}}</span>\\n        </div>\\n        {[if (duration && file.media_type.includes(\'+voice\')){]}\\n            <div class=\\"gallery-voice-file-duration\\">\\n                0:00 / <span class=\\"gallery-voice-file-total-duration\\">{{duration}}</span>\\n            </div>\\n        {[}]}\\n    {[}]}\\n    <div class=\\"btn-more dropdown-button\\" data-activates=\\"{{file.id}}-more\\">\\n        <i class=\\"mdi mdi-24px mdi-dots-vertical\\"></i>\\n    </div>\\n    <ul id=\\"{{file.id}}-more\\" class=\\"dropdown-content bootstrap-dropdown noselect\\">\\n        <a class=\\"one-line\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"{{file.file}}\\" download>\\n            <div class=\\"property-variant btn-download\\">\\n                {[print(xabber.getString(\\"action_download\\"))]}\\n            </div>\\n        </a>\\n        <div class=\\"property-variant btn-delete\\">\\n            <span class=\\"one-line\\">{[print(xabber.getString(\\"delete\\"))]}</span>\\n        </div>\\n    </ul>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/accounts/media_gallery_account_file.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/accounts/resource.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg class=\\"details-icon mdi mdi-24px mdi-svg-template\\" data-svgname=\\"ic-jabber\\"></svg>\\n<table>\\n    <tbody>\\n    <tr class=\\"info status-info\\">\\n        <td class=\\"label\\">{[print(xabber.getString(\\"settings_account__label_status\\"))]}:</td>\\n        <td>\\n            <div class=\\"value status-message\\"></div>\\n            <div class=\\"status\\"></div>\\n        </td>\\n    </tr>\\n    <tr class=\\"info client-info\\">\\n        <td class=\\"label\\">{[print(xabber.getString(\\"settings_account__label_client\\"))]}:</td>\\n        <td class=\\"value client\\"></td>\\n    </tr>\\n    <tr class=\\"info resource-info\\">\\n        <td class=\\"label\\">{[print(xabber.getString(\\"account_resource\\"))]}:</td>\\n        <td class=\\"value resource\\"></td>\\n    </tr>\\n    <tr class=\\"info priority-info\\">\\n        <td class=\\"label\\">{[print(xabber.getString(\\"account_priority\\"))]}:</td>\\n        <td class=\\"value priority\\"></td>\\n    </tr>\\n    </tbody>\\n</table>");\n\n//# sourceURL=webpack://xabber.web/./templates/accounts/resource.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/accounts/resource_right.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<table>\\n    <tbody>\\n    <tr class=\\"info status-info\\">\\n        <td class=\\"label\\">{[print(xabber.getString(\\"settings_account__label_status\\"))]}:</td>\\n        <td>\\n            <div class=\\"value status-message one-line\\"></div>\\n            <div class=\\"status\\"></div>\\n        </td>\\n    </tr>\\n    <tr class=\\"info client-info\\">\\n        <td class=\\"label\\">{[print(xabber.getString(\\"settings_account__label_client\\"))]}:</td>\\n        <td class=\\"value client one-line\\"></td>\\n    </tr>\\n    <tr class=\\"info resource-info\\">\\n        <td class=\\"label\\">{[print(xabber.getString(\\"account_resource\\"))]}:</td>\\n        <td class=\\"value resource one-line\\"></td>\\n    </tr>\\n    <tr class=\\"info priority-info\\">\\n        <td class=\\"label\\">{[print(xabber.getString(\\"account_priority\\"))]}:</td>\\n        <td class=\\"value priority\\"></td>\\n    </tr>\\n    </tbody>\\n</table>");\n\n//# sourceURL=webpack://xabber.web/./templates/accounts/resource_right.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/accounts/settings_left.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("    <div class=\\"left-column ground-color-900 noselect\\">\\n        <div class=\\"main-info-wrap account-main-info-wrap\\">\\n            \x3c!--<i title=\\"Back to settings\\" class=\\"mdi mdi-arrow-left mdi-28px back-to-settings\\"></i>--\x3e\\n            <div class=\\"picture-wrap\\">\\n                <div class=\\"avatar-wrap\\">\\n                    <div class=\\"circle-avatar dropdown-button\\" data-activates=\\"{{view.cid}}-profile-image\\">\\n                        <img/>\\n                        <input type=\\"file\\"/>\\n                        <ul id=\\"{{view.cid}}-profile-image\\" class=\\"profile-image-dropdown dropdown-content noselect\\">\\n                            <div class=\\"btn-emoji-panel property-variant\\">\\n                                {[print(xabber.getString(\\"account_emoji_profile_image_button\\"))]}\\n                            </div>\\n                            <div class=\\"btn-selfie property-variant\\">\\n                                {[print(xabber.getString(\\"account_webcam_profile_image_button\\"))]}\\n                            </div>\\n                            <div class=\\"btn-choose-image property-variant\\">\\n                                {[print(xabber.getString(\\"account_profile_image_button\\"))]}\\n                            </div>\\n                        </ul>\\n                        <svg class=\\"set-groupchat-avatar\\" viewBox=\\"0 0 24 24\\">\\n                            <path d=\\"M4,4H7L9,2H15L17,4H20A2,2 0 0,1 22,6V18A2,2 0 0,1 20,20H4A2,2 0 0,1 2,18V6A2,2 0 0,1 4,4M12,7A5,5 0 0,0 7,12A5,5 0 0,0 12,17A5,5 0 0,0 17,12A5,5 0 0,0 12,7M12,9A3,3 0 0,1 15,12A3,3 0 0,1 12,15A3,3 0 0,1 9,12A3,3 0 0,1 12,9Z\\" />\\n                        </svg>\\n                        <div class=\\"preloader-wrap\\"><div class=\\"preloader-wrapper preloader-32px visible\\">\\n                            <div class=\\"spinner-layer\\">\\n                                <div class=\\"circle-clipper left\\">\\n                                    <div class=\\"circle\\"></div>\\n                                </div>\\n                                <div class=\\"gap-patch\\">\\n                                    <div class=\\"circle\\"></div>\\n                                </div>\\n                                <div class=\\"circle-clipper right\\">\\n                                    <div class=\\"circle\\"></div>\\n                                </div>\\n                            </div>\\n                        </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\"status\\"></div>\\n                </div>\\n            </div>\\n            <div class=\\"name-wrap\\">\\n                <div class=\\"name\\"></div>\\n            </div>\\n            <div class=\\"status-wrap\\"></div>\\n        </div>\\n        <div class=\\"settings-tabs-wrap\\">\\n            <div class=\\"settings-tab\\" data-block-name=\\"connection\\">\\n                <i class=\\"mdi mdi-24px mdi-settings\\"></i>\\n                <div class=\\"settings-block-name one-line\\">{[print(xabber.getString(\\"account_connection_settings\\"))]}</div>\\n            </div>\\n            <div class=\\"settings-tab\\" data-block-name=\\"vcard_edit\\">\\n                <i class=\\"mdi mdi-24px mdi-account-box\\"></i>\\n                <div class=\\"settings-block-name one-line\\">{[print(xabber.getString(\\"settings_account__section_header_profile\\"))]}</div>\\n            </div>\\n            <div class=\\"settings-tab\\" data-block-name=\\"color-scheme\\">\\n                <i class=\\"mdi mdi-24px mdi-palette\\"></i>\\n                <div class=\\"settings-block-name one-line\\">{[print(xabber.getString(\\"color\\"))]}</div>\\n            </div>\\n            <div class=\\"settings-tab\\" data-block-name=\\"media-gallery\\">\\n                <i class=\\"mdi mdi-24px mdi-chart-arc\\"></i>\\n                <div class=\\"settings-block-name one-line\\">{[print(xabber.getString(\\"account_cloud_storage\\"))]}</div>\\n            </div>\\n            <div class=\\"settings-tab\\" data-block-name=\\"blocklist-info\\">\\n                <i class=\\"mdi mdi-24px mdi-block-helper\\"></i>\\n                <div class=\\"settings-block-name one-line\\">{[print(xabber.getString(\\"blocked_contacts\\"))]}</div>\\n            </div>\\n            <div class=\\"settings-tab\\" data-block-name=\\"groups-info\\">\\n                <svg class=\\"mdi mdi-24px mdi-svg-template\\" data-svgname=\\"circles\\"></svg>\\n                <div class=\\"settings-block-name one-line\\">{[print(xabber.getString(\\"settings_account__section_header_circles\\"))]}</div>\\n            </div>\\n            <div class=\\"settings-tab\\" data-block-name=\\"server-info\\">\\n                <i class=\\"mdi mdi-24px mdi-information\\"></i>\\n                <div class=\\"settings-block-name one-line\\">{[print(xabber.getString(\\"settings_account__section_header_server_info\\"))]}</div>\\n            </div>\\n            <div class=\\"settings-tab omemo-info\\" data-block-name=\\"omemo-info\\">\\n                <i class=\\"mdi mdi-24px mdi-security\\"></i>\\n                <div class=\\"settings-block-name one-line\\">{[print(xabber.getString(\\"account_settings_encryption\\"))]}</div>\\n            </div>\\n            <div class=\\"settings-tab\\" data-block-name=\\"tokens\\">\\n                <svg class=\\"mdi mdi-24px mdi-svg-template\\" data-svgname=\\"devices\\"></svg>\\n                <div class=\\"settings-block-name one-line\\">{[print(xabber.getString(\\"account_settings_devices\\"))]}</div>\\n            </div>\\n        </div>\\n        <div class=\\"settings-tabs-bottom-wrap ground-color-900\\">\\n            <div class=\\"settings-tab delete-account\\">\\n                <i class=\\"mdi mdi-24px mdi-logout-variant\\"></i>\\n                <div class=\\"settings-block-name\\">{[print(xabber.getString(\\"settings_account__button_quit_account\\"))]}</div>\\n            </div>\\n        </div>\\n    </div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/accounts/settings_left.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/accounts/settings_right.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"right-column noselect\\">\\n    <div class=\\"settings-panel-head\\">\\n        <span class=\\"settings-panel-head-title\\">{[print(xabber.getString(\\"account_editor\\"))]}</span>\\n        <div class=\\"buttons-wrap\\">\\n            <button class=\\"btn-block btn-flat btn-main text-color-500 ground-color-grey-100 hover-ground-color-grey-300 hidden\\">{[print(xabber.getString(\\"settings_account__blocklist__button_block\\"))]}</button>\\n            <button class=\\"btn-deselect-blocked btn-flat btn-main btn-dark ground-color-grey-100 hover-ground-color-grey-300 hidden\\">{[print(xabber.getString(\\"cancel\\"))]}</button>\\n            <button class=\\"btn-unblock-selected btn-flat btn-main text-color-500 ground-color-grey-100 hover-ground-color-grey-300 hidden\\">{[print(xabber.getString(\\"unblock_selected\\"))]}</button>\\n        </div>\\n        <div class=\\"btn-more media-gallery-button dropdown-button\\" data-activates=\\"storage-actions\\">\\n            <i class=\\"mdi mdi-24px mdi-dots-vertical\\"></i>\\n        </div>\\n        <ul id=\\"storage-actions\\" class=\\"dropdown-content noselect\\">\\n            <div class=\\"property-variant btn-delete-files-variants\\" data-activates=\\"storage-delete-files\\">\\n                <span class=\\"one-line\\">{[print(xabber.getString(\\"account_delete_files\\"))]}</span>\\n            </div>\\n        </ul>\\n        <ul id=\\"storage-delete-files\\" class=\\"dropdown-content bootstrap-dropdown noselect\\">\\n            <div class=\\"property-variant btn-delete-files\\" data-date=\\"15\\">\\n                <span class=\\"one-line\\">{[print(xabber.getString(\\"delete_files_older_than_15_days\\"))]}</span>\\n            </div>\\n            <div class=\\"property-variant btn-delete-files\\" data-date=\\"30\\">\\n                <span class=\\"one-line\\">{[print(xabber.getString(\\"delete_files_older_than_30_days\\"))]}</span>\\n            </div>\\n            <div class=\\"property-variant btn-delete-files\\" data-date=\\"60\\">\\n                <span class=\\"one-line\\">{[print(xabber.getString(\\"delete_files_older_than_60_days\\"))]}</span>\\n            </div>\\n        </ul>\\n    </div>\\n\\n    <div class=\\"panel-content-wrap\\">\\n        <div class=\\"panel-content details-panel\\">\\n\\n            <div data-header=\'{[print(xabber.getString(\\"account_connection_settings\\"))]}\' class=\\"settings-block-wrap connection\\">\\n                <div class=\\"connection-wrap\\">\\n                    <div class=\\"readonly-setting\\">\\n                        <i class=\\"details-icon mdi mdi-24px mdi-account\\"></i>\\n                        <div class=\\"setting-wrap account-name\\">\\n                            <div class=\\"value one-line\\"></div>\\n                            <div class=\\"label conn-status\\"></div>\\n                        </div>\\n                    </div>\\n                    <div class=\\"change-password-container\\">\\n                        <div class=\\"change-password-fields\\">\\n                            <div class=\\"input-field\\">\\n                                <input class=\\"input-glow\\" placeholder=\'{[print(xabber.getString(\\"hint_old_pass\\"))]}\' id=\\"old_password\\" type=\\"password\\" name=\\"old_password\\">\\n                                <span class=\\"errors fixed\\"></span>\\n                            </div>\\n                            <div class=\\"input-field\\">\\n                                <input class=\\"input-glow\\" placeholder=\'{[print(xabber.getString(\\"hint_new_pass\\"))]}\' id=\\"password\\" type=\\"password\\" name=\\"password\\">\\n                                <span class=\\"errors fixed\\"></span>\\n                            </div>\\n                            <div class=\\"input-field\\">\\n                                <input class=\\"input-glow\\" placeholder=\'{[print(xabber.getString(\\"hint_confirm_pass\\"))]}\' id=\\"password_confirm\\" type=\\"password\\" name=\\"password_confirm\\">\\n                                <span class=\\"errors fixed\\"></span>\\n                            </div>\\n                        </div>\\n                        <div class=\\"buttons-wrap\\">\\n                            <button class=\\"btn-change btn-flat btn-main btn-dark ground-color-100 hover-ground-color-300\\">{[print(xabber.getString(\\"button_change_pass\\"))]}</button>\\n                            <button class=\\"btn-change-password btn-flat btn-main btn-dark ground-color-100 hover-ground-color-300\\">{[print(xabber.getString(\\"button_set_pass\\"))]}</button>\\n                            <button class=\\"btn-reconnect btn-flat btn-main btn-dark ground-color-100 hover-ground-color-300\\">{[print(xabber.getString(\\"settings_account__button_reconnect\\"))]}</button>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n\\n            <div data-header=\'{[print(xabber.getString(\\"color\\"))]}\' class=\\"settings-block-wrap color-scheme\\">\\n                <div class=\\"color-scheme-wrap\\">\\n                    <div class=\\"account-color\\">\\n                        <div class=\\"field radio-field clickable-field\\">\\n                            <form action=\\"#\\">\\n                                <p>\\n                                    <input class=\\"with-gap\\" name=\\"account_color\\" value=\\"red\\" type=\\"radio\\" id=\\"color-red\\" />\\n                                    <label class=\\"text-color-red-700\\" for=\\"color-red\\">{[print(xabber.getString(\\"account_color_name_red\\"))]}</label>\\n                                </p>\\n                                <p>\\n                                    <input class=\\"with-gap\\" name=\\"account_color\\" value=\\"pink\\" type=\\"radio\\" id=\\"color-pink\\" />\\n                                    <label class=\\"text-color-pink-700\\" for=\\"color-pink\\">{[print(xabber.getString(\\"account_color_name_pink\\"))]}</label>\\n                                </p>\\n                                <p>\\n                                    <input class=\\"with-gap\\" name=\\"account_color\\" value=\\"purple\\" type=\\"radio\\" id=\\"color-purple\\" />\\n                                    <label class=\\"text-color-purple-700\\" for=\\"color-purple\\">{[print(xabber.getString(\\"account_color_name_purple\\"))]}</label>\\n                                </p>\\n                                <p>\\n                                    <input class=\\"with-gap\\" name=\\"account_color\\" value=\\"deep-purple\\" type=\\"radio\\" id=\\"color-deep-purple\\" />\\n                                    <label class=\\"text-color-deep-purple-700\\" for=\\"color-deep-purple\\">{[print(xabber.getString(\\"account_color_name_deep_purple\\").replace(/-/g, \\" \\"))]}</label>\\n                                </p>\\n                                <p>\\n                                    <input class=\\"with-gap\\" name=\\"account_color\\" value=\\"indigo\\" type=\\"radio\\" id=\\"color-indigo\\" />\\n                                    <label class=\\"text-color-indigo-700\\" for=\\"color-indigo\\">{[print(xabber.getString(\\"account_color_name_indigo\\"))]}</label>\\n                                </p>\\n                                <p>\\n                                    <input class=\\"with-gap\\" name=\\"account_color\\" value=\\"blue\\" type=\\"radio\\" id=\\"color-blue\\" />\\n                                    <label class=\\"text-color-blue-700\\" for=\\"color-blue\\">{[print(xabber.getString(\\"account_color_name_blue\\"))]}</label>\\n                                </p>\\n                                <p>\\n                                    <input class=\\"with-gap\\" name=\\"account_color\\" value=\\"light-blue\\" type=\\"radio\\" id=\\"color-light-blue\\" />\\n                                    <label class=\\"text-color-light-blue-700\\" for=\\"color-light-blue\\">{[print(xabber.getString(\\"account_color_name_light_blue\\").replace(/-/g, \\" \\"))]}</label>\\n                                </p>\\n                                <p>\\n                                    <input class=\\"with-gap\\" name=\\"account_color\\" value=\\"cyan\\" type=\\"radio\\" id=\\"color-cyan\\" />\\n                                    <label class=\\"text-color-cyan-700\\" for=\\"color-cyan\\">{[print(xabber.getString(\\"account_color_name_cyan\\"))]}</label>\\n                                </p>\\n                                <p>\\n                                    <input class=\\"with-gap\\" name=\\"account_color\\" value=\\"teal\\" type=\\"radio\\" id=\\"color-teal\\" />\\n                                    <label class=\\"text-color-teal-700\\" for=\\"color-teal\\">{[print(xabber.getString(\\"account_color_name_teal\\"))]}</label>\\n                                </p>\\n                                <p>\\n                                    <input class=\\"with-gap\\" name=\\"account_color\\" value=\\"green\\" type=\\"radio\\" id=\\"color-green\\" />\\n                                    <label class=\\"text-color-green-700\\" for=\\"color-green\\">{[print(xabber.getString(\\"account_color_name_green\\"))]}</label>\\n                                </p>\\n                                <p>\\n                                    <input class=\\"with-gap\\" name=\\"account_color\\" value=\\"light-green\\" type=\\"radio\\" id=\\"color-light-green\\" />\\n                                    <label class=\\"text-color-light-green-700\\" for=\\"color-light-green\\">{[print(xabber.getString(\\"account_color_name_light_green\\").replace(/-/g, \\" \\"))]}</label>\\n                                </p>\\n                                <p>\\n                                    <input class=\\"with-gap\\" name=\\"account_color\\" value=\\"lime\\" type=\\"radio\\" id=\\"color-lime\\" />\\n                                    <label class=\\"text-color-lime-700\\" for=\\"color-lime\\">{[print(xabber.getString(\\"account_color_name_lime\\"))]}</label>\\n                                </p>\\n                                <p>\\n                                    <input class=\\"with-gap\\" name=\\"account_color\\" value=\\"amber\\" type=\\"radio\\" id=\\"color-amber\\" />\\n                                    <label class=\\"text-color-amber-700\\" for=\\"color-amber\\">{[print(xabber.getString(\\"account_color_name_amber\\"))]}</label>\\n                                </p>\\n                                <p>\\n                                    <input class=\\"with-gap\\" name=\\"account_color\\" value=\\"orange\\" type=\\"radio\\" id=\\"color-orange\\" />\\n                                    <label class=\\"text-color-orange-700\\" for=\\"color-orange\\">{[print(xabber.getString(\\"account_color_name_orange\\"))]}</label>\\n                                </p>\\n                                <p>\\n                                    <input class=\\"with-gap\\" name=\\"account_color\\" value=\\"deep-orange\\" type=\\"radio\\" id=\\"color-deep-orange\\" />\\n                                    <label class=\\"text-color-deep-orange-700\\" for=\\"color-deep-orange\\">{[print(xabber.getString(\\"account_color_name_deep_orange\\").replace(/-/g, \\" \\"))]}</label>\\n                                </p>\\n                                <p>\\n                                    <input class=\\"with-gap\\" name=\\"account_color\\" value=\\"brown\\" type=\\"radio\\" id=\\"color-brown\\" />\\n                                    <label class=\\"text-color-brown-700\\" for=\\"color-brown\\">{[print(xabber.getString(\\"account_color_name_brown\\"))]}</label>\\n                                </p>\\n                                <p>\\n                                    <input class=\\"with-gap\\" name=\\"account_color\\" value=\\"blue-grey\\" type=\\"radio\\" id=\\"color-blue-grey\\" />\\n                                    <label class=\\"text-color-blue-grey-700\\" for=\\"color-blue-grey\\">{[print(xabber.getString(\\"account_color_name_blue_grey\\").replace(/-/g, \\" \\"))]}</label>\\n                                </p>\\n                            </form>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n\\n            <div data-header=\'{[print(xabber.getString(\\"settings_account__section_header_profile\\"))]}\' class=\\"settings-block-wrap vcard\\">\\n            </div>\\n\\n            <div data-header=\'{[print(xabber.getString(\\"account_server_info_description\\"))]}\' class=\\"settings-block-wrap server-info\\">\\n                <div class=\\"capabilities-wrap\\">\\n                    <div class=\\"capabilities\\">\\n                    </div>\\n                </div>\\n            </div>\\n\\n            <div data-header=\'{[print(xabber.getString(\\"blocked_contacts\\"))]}\' class=\\"settings-block-wrap blocklist-info\\">\\n                <div class=\\"blocklist-wrap\\">\\n                    <div class=\\"blocked-items\\">\\n                        <div class=\\"placeholder\\">{[print(xabber.getString(\\"blocked_contacts_empty\\"))]}</div>\\n                        <div class=\\"blocklist-tabs-wrap\\">\\n                            <ul class=\\"tabs\\">\\n                                <li class=\\"blocked-item contacts-item hidden\\" data-tab-name=\\"blocked-contacts-wrap\\">\\n                                    <a class=\\"text-color-700\\">{[print(xabber.getString(\\"blocked_tabs_name__contacts\\"))]}</a>\\n                                </li>\\n                                <li class=\\"blocked-item domains-item hidden\\" data-tab-name=\\"blocked-domains-wrap\\">\\n                                    <a class=\\"text-color-700\\">{[print(xabber.getString(\\"blocked_tabs_name__domains\\"))]}</a>\\n                                </li>\\n                                <li class=\\"blocked-item invitations-item hidden\\" data-tab-name=\\"blocked-invitations-wrap\\">\\n                                    <a class=\\"text-color-700\\">{[print(xabber.getString(\\"blocked_tabs_name__invitations\\"))]}</a>\\n                                </li>\\n                            </ul>\\n                        </div>\\n                        <div class=\\"blocked-items-container blocked-contacts-wrap hidden\\" data-tab-name=\\"contacts-item\\">\\n                            <div class=\\"blocked-contacts blocked-list\\"/>\\n                        </div>\\n                        <div class=\\"blocked-items-container blocked-domains-wrap hidden\\" data-tab-name=\\"domains-item\\">\\n                            <div class=\\"blocked-domains blocked-list\\"/>\\n                        </div>\\n                        <div class=\\"blocked-items-container blocked-invitations-wrap hidden\\" data-tab-name=\\"invitations-item\\">\\n                            <div class=\\"blocked-invitations blocked-list\\"/>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n\\n            <div data-header=\'{[print(xabber.getString(\\"account_cloud_storage\\"))]}\' class=\\"settings-block-wrap media-gallery\\">\\n            </div>\\n\\n            <div data-header=\'{[print(xabber.getString(\\"settings_account__section_header_circles\\"))]}\' class=\\"settings-block-wrap groups-info\\">\\n                <div class=\\"groups-wrap\\">\\n                    <div class=\\"groups\\">\\n                    </div>\\n                </div>\\n            </div>\\n\\n            <div data-header=\'{[print(xabber.getString(\\"account_settings_devices\\"))]}\' class=\\"settings-block-wrap tokens\\">\\n                <div class=\\"tokens-wrap\\">\\n                    <div class=\\"current-token-wrap\\">\\n                        <div class=\\"sessions-wrap current-session selectable-text\\"></div>\\n                        <div class=\\"buttons-wrap\\">\\n                            <p class=\\"btn-revoke-all-tokens hover-text-color-500 text-color-700\\">{[print(xabber.getString(\\"account_terminate_all_sessions\\"))]}</p>\\n                        </div>\\n                    </div>\\n                    <div class=\\"all-sessions-wrap\\">\\n                        <div class=\\"sessions-wrap all-sessions selectable-text\\"></div>\\n                    </div>\\n                </div>\\n            </div>\\n\\n\\n            <div data-header=\'{[print(xabber.getString(\\"account_settings_encryption\\"))]}\' class=\\"settings-block-wrap omemo-info\\">\\n                <div class=\\"omemo-settings-wrap\\">\\n                    <div class=\\"settings\\">\\n                        <div class=\\"setting-wrap omemo-enable\\">\\n                            <span>{[print(xabber.getString(\\"omemo__settings__toggle_enable_encryption\\"))]}</span>\\n                            <div class=\\"field setting-use-omemo switch normal\\">\\n                                <label class=\\"field-value\\">\\n                                    <input type=\\"checkbox\\">\\n                                    <span class=\\"lever\\"></span>\\n                                </label>\\n                            </div>\\n                        </div>\\n                        <div class=\\"setting-wrap send-chat-states\\">\\n                            <span>{[print(xabber.getString(\\"omemo__settings__toggle_send_typing_notifications\\"))]}</span>\\n                            <div class=\\"field setting-send-chat-states switch normal\\">\\n                                <label class=\\"field-value\\">\\n                                    <input type=\\"checkbox\\">\\n                                    <span class=\\"lever\\"></span>\\n                                </label>\\n                            </div>\\n                        </div>\\n                        <div class=\\"setting-wrap manage-devices\\">\\n                            <button class=\\"btn-manage-devices btn-flat btn-main btn-dark ground-color-grey-100 hover-ground-color-grey-300\\">{[print(xabber.getString(\\"omemo__settings__button_manage_devices\\"))]}</button>\\n                        </div>\\n                        <div class=\\"setting-wrap purge-keys\\">\\n                            <button class=\\"btn-purge-keys btn-flat btn-main btn-dark ground-color-grey-100 hover-ground-color-grey-300\\">{[print(xabber.getString(\\"omemo__settings__button_purge_keys\\"))]}</button>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/accounts/settings_right.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/accounts/token_item.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"token-wrap\\" data-token-uid=\\"{{token_uid}}\\">\\n    <div class=\\"client one-line\\">{{client}}</div>\\n    <div class=\\"device one-line\\">{{device}}</div>\\n    <div class=\\"ip-address\\">{{ip}}</div>\\n    {[ if (resource_obj) {]}\\n    <div class=\\"last-auth resource\\" {[ if (resource_obj) {]}data-resource-id=\\"{{resource_obj.resource}}\\"{[}]}>{[print(xabber.getString(\\"account_state_connected\\"))]}</div>\\n        <table class=\\"token-resource-wrap hidden\\" {[ if (resource_obj) {]}data-resource-id=\\"{{resource_obj.resource}}\\"{[}]}>\\n            <tbody>\\n            <tr class=\\"info status-info\\">\\n                <td class=\\"label\\">{[print(xabber.getString(\\"settings_account__label_status\\"))]}:</td>\\n                <td>\\n                    <div class=\\"value status-message one-line\\">{{resource_obj.status}}</div>\\n                    <div class=\\"status\\" data-status=\\"{{resource_obj.status}}\\"></div>\\n                </td>\\n            </tr>\\n            <tr class=\\"info resource-info\\">\\n                <td class=\\"label\\">{[print(xabber.getString(\\"account_resource\\"))]}:</td>\\n                <td class=\\"value resource one-line\\">{{resource_obj.resource}}</td>\\n            </tr>\\n            <tr class=\\"info priority-info\\">\\n                <td class=\\"label\\">{[print(xabber.getString(\\"account_priority\\"))]}:</td>\\n                <td class=\\"value priority\\">{{resource_obj.priority}}</td>\\n            </tr>\\n            </tbody>\\n        </table>\\n    {[} else {]}\\n    <div class=\\"last-auth\\">{{last_auth}}</div>\\n    {[}]}\\n    <i class=\\"btn-revoke-token mdi mdi-24px mdi-close\\"></i>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/accounts/token_item.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/accounts/toolbar_item.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"border\\"/>\\n<div class=\\"circle-avatar-wrap ground-color-500\\">\\n    <div class=\\"dropdown-button circle-avatar border-color ground-color-700 noselect\\"/>\\n</div>\\n<div class=\\"status\\"/>\\n<i class=\\"auth-failed mdi mdi-16px mdi-close\\"></i>\\n<div class=\\"account-actions-panel\\">\\n    <div class=\\"filter-chats\\">\\n        <i class=\\"mdi mdi-filter mdi-20px\\"></i>\\n        <div class=\\"text\\">{[print(xabber.getString(\\"account__toolbar_item__button_filter_chats\\"))]}</div>\\n    </div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/accounts/toolbar_item.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/accounts/webcam_panel.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"modal-content-wrap\\">\\n    <div class=\\"modal-header\\">\\n        <span>{[print(xabber.getString(\\"take_photo\\"))]}</span>\\n    </div>\\n    <div class=\\"webcam-profile-image-wrap\\">\\n        <div class=\\"camera\\">\\n            <video class=\\"webcam-video\\">Video stream not available.</video>\\n        </div>\\n        <canvas id=\\"canvas\\" style=\\"display: none;\\">\\n        </canvas>\\n        <div class=\\"output hidden\\">\\n            <div class=\\"webcam-photo-wrap\\">\\n                <img class=\\"webcam-photo\\" alt=\\"The screen capture will appear in this box.\\">\\n            </div>\\n            <div class=\\"circle-icon\\">\\n                <svg class=\\"mdi mdi-24px mdi-svg-template\\" data-svgname=\\"camera-retake\\"></svg>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\"modal-footer\\">\\n        <button class=\\"btn-flat btn-main btn-take-photo\\">{[print(xabber.getString(\\"capture\\"))]}</button>\\n        <button class=\\"btn-flat btn-main btn-save hidden\\">{[print(xabber.getString(\\"account_webcam_profile_image_btn_save\\"))]}</button>\\n        <button class=\\"btn-flat btn-main btn-dark btn-cancel\\">{[print(xabber.getString(\\"cancel\\"))]}</button>\\n        <div class=\\"modal-preloader-wrap\\"></div>\\n    </div>\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/accounts/webcam_panel.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/accounts/xmpp_login.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"login-panel-intro\\">\\n    <div class=\\"login-panel-head noselect\\">\\n        <img src=\\"{{CLIENT_LOGO}}\\" class=\\"client-logo\\">\\n        <span class=\\"client-name\\">{{SHORT_CLIENT_NAME}}</span>\\n        <span class=\\"client-description\\">{{SHORT_CLIENT_DESCRIPTION}}</span>\\n    </div>\\n    <div class=\\"login-buttons\\">\\n        <div class=\\"btn-flat btn-main btn-register-form one-line\\">{[print(xabber.getString(\\"xmpp_login__button_sign_up\\"))]}</div>\\n        <div class=\\"btn-flat btn-main btn-login-form one-line\\">{[print(xabber.getString(\\"xmpp_login__button_sign_in\\"))]}</div>\\n    </div>\\n</div>\\n<div class=\\"login-panel-form xmpp-login-form noselect hidden\\">\\n    <svg class=\\"details-icon btn-go-back-menu mdi mdi-24px mdi-svg-template\\" data-svgname=\\"chevron-left-variant\\"></svg>\\n    <div class=\\"login-form-header\\">{[print(xabber.getString(\\"title_login_xabber_account\\"))]}</div>\\n    <div class=\\"login-form-jid\\">\\n        <div class=\\"register-form-step-wrap\\">\\n            <div class=\\"register-form-step-header\\">{[print(xabber.getString(\\"dialog_jingle_message__message_connect\\"))]}</div>\\n            <div class=\\"input-field-wrap\\">\\n                <div class=\\"input-field input-field-jid\\">\\n                    <input id=\\"jid\\" placeholder=\'{[print(xabber.getString(\\"hint_xmpp_id\\"))]}\' type=\\"text\\" name=\\"jid\\">\\n                    <div class=\\"property-field xmpp-server-dropdown-wrap\\">\\n                        <div class=\\"select-auth-xmpp-server\\">\\n                            <div data-activates=\\"select-auth-xmpp-server\\" class=\\"xmpp-server-item-wrap property-wrap\\"><div class=\\"jid-at\\">@</div><div class=\\"field-jid one-line property-value\\"></div></div>\\n                            <div class=\\"input-field input-group-chat-domain hidden\\">\\n                                <input id=\\"sign_in_domain\\" type=\\"text\\" placeholder=\'{[print(xabber.getString(\\"groupchat__hint_domain\\"))]}\' value=\\"111111\\" name=\\"sign_in_domain\\">\\n                            </div>\\n                            <div data-activates=\\"select-auth-xmpp-server\\" class=\\"caret\\">\\n                                <i class=\\"mdi mdi-20px mdi-menu-up\\"></i>\\n                                <i class=\\"mdi mdi-20px mdi-menu-down\\"></i>\\n                            </div>\\n                        </div>\\n                        <div id=\\"select-auth-xmpp-server\\" class=\\"dropdown-content noselect\\">\\n                            <div class=\\"property-variant set-custom-domain\\">{[print(xabber.getString(\\"groupchat_custom_server\\"))]}</div>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\"input-field\\">\\n                    <input id=\\"password\\" placeholder=\'{[print(xabber.getString(\\"hint_pass\\"))]}\' type=\\"password\\" name=\\"password\\">\\n                </div>\\n            </div>\\n            <div class=\\"register-form-step-error login-jid-error hidden\\"></div>\\n            <div class=\\"register-form-step-error login-password-error hidden\\"></div>\\n            <div class=\\"register-form-step-description\\"></div>\\n            <div class=\\"login-step-wrap hidden\\">\\n                <div class=\\"login-step connecting-step\\">\\n                    <div class=\\"login-step-text\\">\\n                        {[print(xabber.getString(\\"dialog_jingle_message__status_communicating\\"))]}\\n                    </div>\\n                    <div class=\\"preloader-wrapper preloader-17px active visible\\">\\n                        <div class=\\"spinner-layer\\">\\n                            <div class=\\"circle-clipper left\\">\\n                                <div class=\\"circle\\"></div>\\n                            </div>\\n                            <div class=\\"gap-patch\\">\\n                                <div class=\\"circle\\"></div>\\n                            </div>\\n                            <div class=\\"circle-clipper right\\">\\n                                <div class=\\"circle\\"></div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <i class=\\"mdi mdi-24px mdi-alert-circle hidden\\"></i>\\n                </div>\\n                <div class=\\"login-step credentials-step\\">\\n                    <div class=\\"login-step-text\\">\\n                        {[print(xabber.getString(\\"dialog_jingle_message__status_checking_credentials\\"))]}\\n                    </div>\\n                    <div class=\\"preloader-wrapper preloader-17px active visible\\">\\n                        <div class=\\"spinner-layer\\">\\n                            <div class=\\"circle-clipper left\\">\\n                                <div class=\\"circle\\"></div>\\n                            </div>\\n                            <div class=\\"gap-patch\\">\\n                                <div class=\\"circle\\"></div>\\n                            </div>\\n                            <div class=\\"circle-clipper right\\">\\n                                <div class=\\"circle\\"></div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <i class=\\"mdi mdi-24px mdi-alert-circle hidden\\"></i>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\"login-form-server-features hidden\\">\\n        <div class=\\"register-form-step-wrap\\">\\n            <div class=\\"register-form-step-header\\"></div>\\n        </div>\\n        <div class=\\"login-server-features-wrap\\">\\n            <div class=\\"server-feature\\" data-xmlns=\\"{[print(Strophe.NS.MAM)]}\\" >\\n                <div class=\\"server-feature-text\\">\\n                    {[print(xabber.getString(\\"signin_message_archive\\"))]}\\n                </div>\\n                <div class=\\"preloader-wrapper preloader-17px active visible\\">\\n                    <div class=\\"spinner-layer\\">\\n                        <div class=\\"circle-clipper left\\">\\n                            <div class=\\"circle\\"></div>\\n                        </div>\\n                        <div class=\\"gap-patch\\">\\n                            <div class=\\"circle\\"></div>\\n                        </div>\\n                        <div class=\\"circle-clipper right\\">\\n                            <div class=\\"circle\\"></div>\\n                        </div>\\n                    </div>\\n                </div>\\n                <i class=\\"mdi mdi-24px mdi-alert hidden\\"></i>\\n                <div class=\\"feature-error-tooltip-triangle\\">\\n                    <div class=\\"triangle-inside\\"></div>\\n                </div>\\n                <div class=\\"feature-error-tooltip\\">{[print(xabber.getString(\'signin_message_archive_error\'))]}</div>\\n            </div>\\n            <div class=\\"server-feature\\" data-xmlns=\\"{[print(Strophe.NS.SYNCHRONIZATION)]}\\">\\n                <div class=\\"server-feature-text\\">\\n                    {[print(xabber.getString(\\"signin_synchronization\\"))]}\\n                </div>\\n                <div class=\\"preloader-wrapper preloader-17px active visible\\">\\n                    <div class=\\"spinner-layer\\">\\n                        <div class=\\"circle-clipper left\\">\\n                            <div class=\\"circle\\"></div>\\n                        </div>\\n                        <div class=\\"gap-patch\\">\\n                            <div class=\\"circle\\"></div>\\n                        </div>\\n                        <div class=\\"circle-clipper right\\">\\n                            <div class=\\"circle\\"></div>\\n                        </div>\\n                    </div>\\n                </div>\\n                <i class=\\"mdi mdi-24px mdi-alert hidden\\"></i>\\n                <div class=\\"feature-error-tooltip-triangle\\">\\n                    <div class=\\"triangle-inside\\"></div>\\n                </div>\\n                <div class=\\"feature-error-tooltip\\">{[print(xabber.getString(\'signin_quick_synchronization_error\'))]}</div>\\n            </div>\\n            <div class=\\"server-feature\\" data-xmlns=\\"{[print(Strophe.NS.REWRITE)]}\\">\\n                <div class=\\"server-feature-text\\">\\n                    {[print(xabber.getString(\\"signin_message_editing\\"))]}\\n                </div>\\n                <div class=\\"preloader-wrapper preloader-17px active visible\\">\\n                    <div class=\\"spinner-layer\\">\\n                        <div class=\\"circle-clipper left\\">\\n                            <div class=\\"circle\\"></div>\\n                        </div>\\n                        <div class=\\"gap-patch\\">\\n                            <div class=\\"circle\\"></div>\\n                        </div>\\n                        <div class=\\"circle-clipper right\\">\\n                            <div class=\\"circle\\"></div>\\n                        </div>\\n                    </div>\\n                </div>\\n                <i class=\\"mdi mdi-24px mdi-alert hidden\\"></i>\\n                <div class=\\"feature-error-tooltip-triangle\\">\\n                    <div class=\\"triangle-inside\\"></div>\\n                </div>\\n                <div class=\\"feature-error-tooltip\\">{[print(xabber.getString(\'signin_message_editing_error\'))]}</div>\\n            </div>\\n            <div class=\\"server-feature\\" data-xmlns=\\"{[print(Strophe.NS.AUTH_DEVICES)]}\\">\\n                <div class=\\"server-feature-text\\">\\n                    {[print(xabber.getString(\\"signin_device_management\\"))]}\\n                </div>\\n                <div class=\\"preloader-wrapper preloader-17px active visible\\">\\n                    <div class=\\"spinner-layer\\">\\n                        <div class=\\"circle-clipper left\\">\\n                            <div class=\\"circle\\"></div>\\n                        </div>\\n                        <div class=\\"gap-patch\\">\\n                            <div class=\\"circle\\"></div>\\n                        </div>\\n                        <div class=\\"circle-clipper right\\">\\n                            <div class=\\"circle\\"></div>\\n                        </div>\\n                    </div>\\n                </div>\\n                <i class=\\"mdi mdi-24px mdi-alert hidden\\"></i>\\n                <div class=\\"feature-error-tooltip-triangle\\">\\n                    <div class=\\"triangle-inside\\"></div>\\n                </div>\\n                <div class=\\"feature-error-tooltip\\">{[print(xabber.getString(\'signin_tokens_error\'))]}</div>\\n            </div>\\n            <div class=\\"server-feature\\" data-xmlns=\\"{[print(Strophe.NS.PUBSUB)]}\\">\\n                <div class=\\"server-feature-text\\">\\n                    {[print(xabber.getString(\\"signin_publish_subscribe\\"))]}\\n                </div>\\n                <div class=\\"preloader-wrapper preloader-17px active visible\\">\\n                    <div class=\\"spinner-layer\\">\\n                        <div class=\\"circle-clipper left\\">\\n                            <div class=\\"circle\\"></div>\\n                        </div>\\n                        <div class=\\"gap-patch\\">\\n                            <div class=\\"circle\\"></div>\\n                        </div>\\n                        <div class=\\"circle-clipper right\\">\\n                            <div class=\\"circle\\"></div>\\n                        </div>\\n                    </div>\\n                </div>\\n                <i class=\\"mdi mdi-24px mdi-alert hidden\\"></i>\\n                <div class=\\"feature-error-tooltip-triangle\\">\\n                    <div class=\\"triangle-inside\\"></div>\\n                </div>\\n                <div class=\\"feature-error-tooltip\\">{[print(xabber.getString(\'signin_pubsub_error\'))]}</div>\\n            </div>\\n            <div class=\\"server-feature\\" data-xmlns=\\"{[print(Strophe.NS.HTTP_UPLOAD)]}\\">\\n                <div class=\\"server-feature-text\\">\\n                    {[print(xabber.getString(\\"signin_file_upload\\"))]}\\n                </div>\\n                <div class=\\"preloader-wrapper preloader-17px active visible\\">\\n                    <div class=\\"spinner-layer\\">\\n                        <div class=\\"circle-clipper left\\">\\n                            <div class=\\"circle\\"></div>\\n                        </div>\\n                        <div class=\\"gap-patch\\">\\n                            <div class=\\"circle\\"></div>\\n                        </div>\\n                        <div class=\\"circle-clipper right\\">\\n                            <div class=\\"circle\\"></div>\\n                        </div>\\n                    </div>\\n                </div>\\n                <i class=\\"mdi mdi-24px mdi-alert hidden\\"></i>\\n                <div class=\\"feature-error-tooltip-triangle\\">\\n                    <div class=\\"triangle-inside\\"></div>\\n                </div>\\n                <div class=\\"feature-error-tooltip\\">{[print(xabber.getString(\'signin_file_upload_error\'))]}</div>\\n            </div>\\n        </div>\\n        <div class=\\"server-features-error\\"></div>\\n    </div>\\n    <div class=\\"input-field buttons-wrap\\">\\n        <button class=\\"btn btn-flat btn-main-filled btn-log-in\\">{[print(xabber.getString(\\"title_login_xabber_account\\"))]}</button>\\n        <button class=\\"btn btn-flat btn-main-filled one-line hidden btn-sign-up-instead\\">{[print(xabber.getString(\\"xmpp_login__button_sign_up\\"))]}</button>\\n        <button class=\\"btn btn-flat btn-main-filled one-line hidden btn-finish-log-in\\"></button>\\n    </div>\\n    <div class=\\"clearfix\\"></div>\\n</div>\\n<div class=\\"login-panel-form register-form noselect hidden\\">\\n    <svg class=\\"details-icon btn-go-back mdi mdi-24px mdi-svg-template\\" data-svgname=\\"chevron-left-variant\\"></svg>\\n    <div class=\\"login-form-header\\">{[print(xabber.getString(\\"title_register_xabber_account\\"))]}</div>\\n    <div class=\\"login-form-skip hidden\\">{[print(xabber.getString(\\"skip\\"))]}</div>\\n    <div class=\\"register-form-nickname\\">\\n        <div class=\\"register-form-step-wrap\\">\\n            <div class=\\"register-form-step-header\\">{[print(xabber.getString(\\"xmpp_login__registration_title_nickname\\"))]}</div>\\n            <div class=\\"input-field-wrap\\">\\n                <div class=\\"input-field\\">\\n                    <input id=\\"register_nickname\\" placeholder=\'{[print(xabber.getString(\\"vcard_nick_name\\"))]}\' type=\\"text\\" name=\\"register_nickname\\">\\n                </div>\\n            </div>\\n            <div class=\\"register-form-step-description\\">{[print(xabber.getString(\\"xmpp_login__registration_description_nickname\\"))]}</div>\\n            <div class=\\"register-form-step-error hidden\\"></div>\\n        </div>\\n    </div>\\n    <div class=\\"register-form-jid hidden\\">\\n        <div class=\\"register-form-step-wrap\\">\\n            <div class=\\"register-form-step-header\\">{[print(xabber.getString(\\"xmpp_login__registration_title_jid\\"))]}</div>\\n            <div class=\\"input-field-wrap\\">\\n                <div class=\\"input-field\\">\\n                    <input id=\\"register_jid\\" placeholder=\'{[print(xabber.getString(\\"hint_username\\"))]}\' type=\\"text\\" name=\\"register_jid\\">\\n                </div>\\n                <div class=\\"property-field xmpp-server-dropdown-wrap\\">\\n                    <div class=\\"select-xmpp-server\\">\\n                        <div data-activates=\\"select-xmpp-server\\" class=\\"xmpp-server-item-wrap property-wrap\\"><div class=\\"jid-at\\">@</div><div class=\\"field-jid one-line property-value\\"></div></div>\\n                        <div class=\\"input-field input-group-chat-domain hidden\\">\\n                            <input id=\\"new_account_domain\\" type=\\"text\\" placeholder=\'{[print(xabber.getString(\\"groupchat__hint_domain\\"))]}\' name=\\"register_domain\\">\\n                        </div>\\n                        <div data-activates=\\"select-xmpp-server\\" class=\\"caret\\">\\n                            <i class=\\"mdi mdi-20px mdi-menu-up\\"></i>\\n                            <i class=\\"mdi mdi-20px mdi-menu-down\\"></i>\\n                        </div>\\n                    </div>\\n                    <div id=\\"select-xmpp-server\\" class=\\"dropdown-content noselect\\">\\n                        <div class=\\"property-variant set-custom-domain\\">{[print(xabber.getString(\\"groupchat_custom_server\\"))]}</div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\"register-form-step-description\\">{[print(xabber.getString(\\"xmpp_login__registration_description_jid\\"))]}</div>\\n            <div class=\\"register-form-step-error hidden\\"></div>\\n        </div>\\n    </div>\\n    <div class=\\"register-form-password hidden\\">\\n        <div class=\\"register-form-step-wrap\\">\\n            <div class=\\"register-form-step-header\\">{[print(xabber.getString(\\"xmpp_login__registration_title_password\\"))]}</div>\\n            <div class=\\"input-field-wrap\\">\\n                <div class=\\"input-field\\">\\n                    <input id=\\"register_password\\" placeholder=\'{[print(xabber.getString(\\"hint_pass\\"))]}\' type=\\"password\\" name=\\"register_password\\">\\n                </div>\\n            </div>\\n            <div class=\\"register-form-step-description\\">{[print(xabber.getString(\\"xmpp_login__registration_description_password\\"))]}</div>\\n            <div class=\\"register-form-step-error hidden\\"></div>\\n        </div>\\n    </div>\\n    <div class=\\"register-form-picture hidden\\">\\n        <div class=\\"register-form-step-wrap\\">\\n            <div class=\\"register-form-step-header\\">{[print(xabber.getString(\\"xmpp_login__registration_title_avatar\\"))]}</div>\\n            <div class=\\"input-field-wrap\\">\\n                <div class=\\"avatar-wrap dropdown-button\\" data-activates=\\"{{view.cid}}-profile-image\\">\\n                    <div class=\\"circle-avatar\\">\\n                        <input id=\\"register_picture\\"  title=\'{[print(xabber.getString(\\"groupchat_member_edit_change_avatar\\"))]}\' type=\\"file\\"/>\\n                        <ul id=\\"{{view.cid}}-profile-image\\" class=\\"profile-image-dropdown dropdown-content noselect\\">\\n                            <div class=\\"btn-emoji-panel property-variant\\">\\n                                {[print(xabber.getString(\\"account_emoji_profile_image_button\\"))]}\\n                            </div>\\n                            <div class=\\"btn-selfie property-variant\\">\\n                                {[print(xabber.getString(\\"account_webcam_profile_image_button\\"))]}\\n                            </div>\\n                            <div class=\\"btn-choose-image property-variant\\">\\n                                {[print(xabber.getString(\\"account_profile_image_button\\"))]}\\n                            </div>\\n                        </ul>\\n                    </div>\\n                    <div class=\\"circle-icon\\">\\n                        <svg class=\\"set-groupchat-avatar\\" viewBox=\\"0 0 24 24\\">\\n                            <path d=\\"M4,4H7L9,2H15L17,4H20A2,2 0 0,1 22,6V18A2,2 0 0,1 20,20H4A2,2 0 0,1 2,18V6A2,2 0 0,1 4,4M12,7A5,5 0 0,0 7,12A5,5 0 0,0 12,17A5,5 0 0,0 17,12A5,5 0 0,0 12,7M12,9A3,3 0 0,1 15,12A3,3 0 0,1 12,15A3,3 0 0,1 9,12A3,3 0 0,1 12,9Z\\" />\\n                        </svg>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    {[if (xabber.url_params && xabber.url_params.rkey){]}\\n        <div class=\\"login-form-url\\">\\n            <i class=\\"mdi login-form-url-icon mdi-link-variant\\"></i>\\n            <div class=\\"login-form-url-text\\">\\n                {[print(xabber.getString(\\"xmpp_login__registration_via_link\\"))]}\\n            </div>\\n        </div>\\n    {[}]}\\n    <div class=\\"input-field buttons-wrap\\">\\n        <button class=\\"btn btn-flat btn-main-filled btn-next\\">{[print(xabber.getString(\\"xaccount_next\\"))]}</button>\\n        <button class=\\"btn btn-flat btn-main btn-skip\\">{[print(xabber.getString(\\"xmpp_login__registration_skip\\"))]}</button>\\n    </div>\\n    <div class=\\"clearfix\\"></div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/accounts/xmpp_login.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/api_service/add_xabber_account.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"modal main-modal add-xabber-account-modal\\">\\n    <div class=\\"modal-content-wrap\\">\\n        <div class=\\"modal-header\\">\\n            <span>{[print(xabber.getString(\\"dialog_add_xabber_account__header\\"))]}</span>\\n        </div>\\n        <div class=\\"modal-content\\">\\n            <div class=\\"row account-field\\">\\n                <div class=\\"multiple-acc\\">\\n                    <div class=\\"account-dropdown-wrap\\">\\n                        <div class=\\"dropdown-button\\" data-activates=\\"select-account-for-add-contact\\">\\n                            <div class=\\"account-item-wrap\\">\\n                            </div>\\n                            <div class=\\"caret\\">\\n                                <i class=\\"mdi mdi-20px mdi-menu-down\\"></i>\\n                            </div>\\n                        </div>\\n                        <div id=\\"select-account-for-add-contact\\" class=\\"dropdown-content noselect\\">\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\"single-acc\\">\\n                    <div class=\\"dropdown-button\\">\\n                        <div class=\\"account-item-wrap\\">\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n            {[if (constants.USE_SOCIAL_AUTH){]}\\n            <div class=\\"row social-auth-wrap\\">\\n                <div class=\\"social-header\\">\\n                    <div class=\\"divider\\"></div>\\n                    <div class=\\"social-header-tip\\">{[print(xabber.getString(\\"social_sign_in\\"))]}</div>\\n                </div>\\n                <div class=\\"social-buttons\\">\\n                    <div class=\\"btn-social google-color\\" data-provider=\\"google\\">\\n                        <i class=\\"mdi mdi-28px mdi-google-plus\\"></i>\\n                    </div>\\n                    <div class=\\"btn-social facebook-color\\" data-provider=\\"facebook\\">\\n                        <i class=\\"mdi mdi-28px mdi-facebook\\"></i>\\n                    </div>\\n                    <div class=\\"btn-social twitter-color\\" data-provider=\\"twitter\\">\\n                        <i class=\\"mdi mdi-28px mdi-twitter\\"></i>\\n                    </div>\\n                    <div class=\\"btn-social xabber-color\\" data-provider=\\"email\\">\\n                        <i class=\\"mdi mdi-28px mdi-at\\"></i>\\n                    </div>\\n                </div>\\n            </div>\\n            {[}]}\\n        </div>\\n        <div class=\\"modal-footer\\">\\n            <button class=\\"btn-flat btn-main btn-dark btn-cancel\\">{[print(xabber.getString(\\"cancel\\"))]}</button>\\n        </div>\\n    </div>\\n</div>\\n<div class=\\"login-panel-footer\\">\\n    <div class=\\"registration-footer\\">\\n        <div class=\\"registration-tip-wrap\\">\\n            <span class=\\"registration-tip\\">{[print(xabber.getString(\\"dialog_add_xabber_account__text_no_account\\"))]}</span>\\n            <a href=\\"{{XABBER_ACCOUNT_URL}}/auth/signup/\\" target=\\"_blank\\" class=\\"btn-flat btn-main btn-registration\\">{[print(xabber.getString(\\"dialog_add_xabber_account__button_registration\\"))]}</a>\\n        </div>\\n    </div>\\n    <div class=\\"footer-text clearfix\\">{[print(xabber.getString(\\"tutorial_description_6\\"))]}</div>\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/api_service/add_xabber_account.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/api_service/linked_email_item.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div data-id=\\"{{email_id}}\\" data-email=\\"{{email}}\\" class=\\"{[if (!verified){]}not-linked {[}]}social-linked-item-wrap email-linked\\"><div style=\\"background-color:{{color}}\\" class=\\"social-icon\\">{[if (verified){]}<svg style=\\"width:24px;height:24px\\" viewBox=\\"0 0 24 24\\">\\n    <path fill=\\"#FFF\\" d=\\"M21,13.34C20.37,13.12 19.7,13 19,13A6,6 0 0,0 13,19C13,19.34 13.03,19.67 13.08,20H3A2,2 0 0,1 1,18V6C1,4.89 1.89,4 3,4H19A2,2 0 0,1 21,6V13.34M23.5,17L18.5,22L15,18.5L16.5,17L18.5,19L22,15.5L23.5,17M3,6V8L11,13L19,8V6L11,11L3,6Z\\" />\\n</svg>{[} else {]}<i class=\\"mdi mdi-24px mdi-email\\"></i>{[}]}</div><div class=\\"synced-info\\"><div class=\\"name one-line\\">{{email}}</div><div class=\\"verified-status one-line\\">{[if (verified){print(xabber.getString(\\"title_verified_email\\"));}else{print(xabber.getString(\\"title_unverified_email\\"));}]}</div></div>{[if (!verified){]}<div class=\\"btn-main btn-flat btn-verify-email\\">{[print(xabber.getString(\\"button_confirm\\"))]}</div>{[}]}<div class=\\"btn-main btn-flat btn-link btn-unlink\\">{[print(xabber.getString(\\"action_disconnect\\"))]}</div></div>");\n\n//# sourceURL=webpack://xabber.web/./templates/api_service/linked_email_item.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/api_service/sync_settings.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"modal-content-wrap settings-panel\\">\\n    <div class=\\"modal-header\\">\\n        <span>{[print(xabber.getString(\\"xabber_account__dialog_sync__header\\"))]}</span>\\n    </div>\\n    <div class=\\"modal-content\\">\\n        <div class=\\"row\\">\\n            <div class=\\"setting sync-all-wrap field-wrap\\">\\n                <div class=\\"field clickable-field switch normal\\">\\n                    <span class=\\"field-name\\">{[print(xabber.getString(\\"sync_all\\"))]}</span>\\n                    <label class=\\"field-value\\">\\n                       <input type=\\"checkbox\\" class=\\"sync-all\\">\\n                       <span class=\\"lever\\"></span>\\n                    </label>\\n                </div>\\n            </div>\\n            <div class=\\"accounts-wrap\\">\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\"modal-footer\\">\\n        <button class=\\"btn-flat btn-main btn-sync\\">{[print(xabber.getString(\\"xabber_account__dialog_sync__button_sync\\"))]}</button>\\n        <button class=\\"btn-flat btn-main btn-dark btn-cancel\\">{[print(xabber.getString(\\"cancel\\"))]}</button>\\n    </div>\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/api_service/sync_settings.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/api_service/sync_settings_account_item.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"account-wrap\\" data-jid=\\"{{jid}}\\">\\n    <div class=\\"account-info-wrap\\">\\n        <i class=\\"sync-icon mdi mdi-24px\\" data-mdiclass=\\"\\"></i>\\n        <div class=\\"text-info-wrap\\">\\n            <div class=\\"name text-color-grey-900 one-line\\">{{jid}}</div>\\n            <div class=\\"sync-tip text-color-grey-500 one-line\\"></div>\\n        </div>\\n    </div>\\n    <div class=\\"input-field checkbox-field sync-one-wrap no-padding\\">\\n        <input type=\\"checkbox\\" class=\\"filled-in sync-one\\" id=\\"{{view.cid}}_sync_{{jid}}\\"/>\\n        <label for=\\"{{view.cid}}_sync_{{jid}}\\"></label>\\n    </div>\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/api_service/sync_settings_account_item.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/api_service/xabber_account.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"xabber-account-content-wrap\\">\\n    <div class=\\"account-info-wrap\\">\\n        <div class=\\"circle-avatar noselect\\"></div>\\n        <div class=\\"text-info-wrap\\">\\n            <div class=\\"name-wrap\\">\\n                <div class=\\"name text-color-red-700 one-line\\"></div>\\n            </div>\\n            <div class=\\"last-sync-info\\"></div>\\n        </div>\\n    </div>\\n    <div class=\\"sync-wrap\\">\\n        <div class=\\"btn-sync\\">\\n            <div class=\\"preloader-wrapper preloader-20px active\\">\\n                <div class=\\"spinner-layer\\">\\n                    <div class=\\"circle-clipper left\\">\\n                        <div class=\\"circle\\"></div>\\n                    </div>\\n                    <div class=\\"gap-patch\\">\\n                        <div class=\\"circle\\"></div>\\n                    </div>\\n                    <div class=\\"circle-clipper right\\">\\n                        <div class=\\"circle\\"></div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\"buttons-wrap\\">\\n        <button class=\\"btn-flat btn-main btn-login\\">{[print(xabber.getString(\\"xabber_account__social_links__button_log_in\\"))]}</button>\\n        <div class=\\"chat-tool btn-more dropdown-button\\" data-activates=\\"account-action-more\\">\\n            <i class=\\"mdi mdi-20px mdi-dots-vertical\\"></i>\\n        </div>\\n        <ul id=\\"account-action-more\\" class=\\"xabber-account-menu dropdown-content noselect\\">\\n            <li class=\\"btn-sync btn-sync-settings\\">\\n                <span class=\\"one-line\\">{[print(xabber.getString(\\"xabber_account__dialog_sync__button_sync\\"))]}</span>\\n            </li>\\n            <li class=\\"btn-set-password\\">\\n                <span class=\\"one-line\\">{[print(xabber.getString(\\"button_set_pass\\"))]}</span>\\n            </li>\\n            <li class=\\"btn-logout\\">\\n                <span class=\\"one-line\\">{[print(xabber.getString(\\"button_quit\\"))]}</span>\\n            </li>\\n        </ul>\\n    </div>\\n</div>\\n<div class=\\"xabber-account-tip\\">{[print(xabber.getString(\\"tutorial_description_6\\"))]}</div>\\n<div class=\\"linked-social-accounts-and-emails\\">\\n    <div class=\\"social-linked-header\\"><div class=\\"chevron-icon\\"><i class=\\"arrow mdi mdi-20px\\"></i></div><div class=\\"social-linked-header-text\\">{[print(xabber.getString(\\"title_linked_accounts\\"))]}</div></div>\\n    <div class=\\"social-linked-wrap\\">\\n        <div id=\'google\' class=\\"not-linked social-account social-linked-item-wrap google-linked\\"><div class=\\"google-color social-icon\\"><i class=\\"mdi mdi-24px mdi-google-plus\\"></i></div><div class=\\"synced-info\\">{[print(xabber.getString(\\"title_not_linked_account\\"))]}</div><div class=\\"btn-main btn-flat btn-link\\">{[print(xabber.getString(\\"action_connect\\"))]}</div></div>\\n        <div id=\'facebook\' class=\\"not-linked social-account social-linked-item-wrap facebook-linked\\"><div class=\\"facebook-color social-icon\\"><i class=\\"mdi mdi-24px mdi-facebook\\"></i></div><div class=\\"synced-info\\">{[print(xabber.getString(\\"title_not_linked_account\\"))]}</div><div class=\\"btn-main btn-flat btn-link\\">{[print(xabber.getString(\\"action_connect\\"))]}</div></div>\\n        <div id=\'twitter\' class=\\"not-linked social-account social-linked-item-wrap twitter-linked\\"><div class=\\"twitter-color social-icon\\"><i class=\\"mdi mdi-24px mdi-twitter\\"></i></div><div class=\\"synced-info\\">{[print(xabber.getString(\\"title_not_linked_account\\"))]}</div><div class=\\"btn-main btn-flat btn-link\\">{[print(xabber.getString(\\"action_connect\\"))]}</div></div>\\n        <div id=\'email\' class=\\"not-linked social-linked-item-wrap\\"><div class=\\"email-color social-icon\\"><svg style=\\"width:24px;height:24px\\" viewBox=\\"0 0 24 24\\">\\n            <path fill=\\"#FFF\\" d=\\"M3,4C1.89,4 1,4.89 1,6V18A2,2 0 0,0 3,20H14.09C14.03,19.67 14,19.34 14,19A6,6 0 0,1 20,13C20.34,13 20.67,13.03 21,13.09V6C21,4.89 20.1,4 19,4H3M3,6L11,11L19,6V8L11,13L3,8V6M19,15V18H16V20H19V23H21V20H24V18H21V15H19Z\\" />\\n        </svg></div><div class=\\"synced-info\\">{[print(xabber.getString(\\"title_add_email\\"))]}</div><div class=\\"btn-main btn-flat btn-link\\">{[print(xabber.getString(\\"action_connect\\"))]}</div></div>\\n    </div>\\n    <span class=\\"errors\\"></span>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/api_service/xabber_account.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/api_service/xabber_login.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"login-panel\\">\\n    <div class=\\"login-panel-head noselect\\">\\n        <img src=\\"{{CLIENT_LOGO}}\\" class=\\"client-logo\\">\\n        <span class=\\"client-name\\">{{SHORT_CLIENT_NAME}}</span>\\n    </div>\\n    <div class=\\"login-panel-form xmpp-login-form noselect\\">\\n        <div class=\\"btn-escape\\">\\n            <i class=\\"mdi mdi-24px mdi-close\\"></i>\\n        </div>\\n        <div class=\\"login-form-header\\">{[print(xabber.getString(\\"dialog_add_xabber_account__header\\"))]}</div>\\n        <div class=\\"input-field email-name\\">\\n            <input id=\\"username\\" type=\\"text\\" name=\\"username\\">\\n            <label for=\\"username\\">{[print(xabber.getString(\\"email_hint\\"))]}</label>\\n            <span class=\\"errors fixed one-line\\"></span>\\n        </div>\\n        <div class=\\"input-field\\">\\n            <input id=\\"password\\" type=\\"password\\" name=\\"password\\">\\n            <label for=\\"password\\">{[print(xabber.getString(\\"hint_pass\\"))]}</label>\\n            <span class=\\"errors fixed one-line\\"></span>\\n        </div>\\n        <div class=\\"input-field buttons-wrap\\">\\n            <a href=\\"{{XABBER_ACCOUNT_URL}}/auth/forgot-password/\\" target=\\"_blank\\" class=\\"btn-flat btn-main btn-forgot-password\\">{[print(xabber.getString(\\"forgot_pass\\"))]}</a>\\n            <button class=\\"btn btn-flat btn-main-filled btn-log-in\\">{[print(xabber.getString(\\"xabber_account__social_links__button_log_in\\"))]}</button>\\n        </div>\\n        <div class=\\"social-auth-wrap\\"><div class=\\"social-header\\">\\n            <div class=\\"divider\\"></div>\\n            <div class=\\"social-header-tip\\">{[print(xabber.getString(\\"xabber_login__new_account\\"))]}</div>\\n        </div></div>\\n        <div class=\\"registration-footer\\">\\n            <div class=\\"registration-tip-wrap\\">\\n                <span class=\\"registration-tip\\">{[print(xabber.getString(\\"xabber_account__login__text_no_xmpp_acc\\"))]}</span>\\n                <a href=\\"{{XABBER_ACCOUNT_URL}}/auth/signup/?source=Xabber Web\\" target=\\"_blank\\" class=\\"btn-flat btn-main btn-registration\\">{[print(xabber.getString(\\"dialog_add_xabber_account__button_registration\\"))]}</a>\\n            </div>\\n        </div>\\n        <div class=\\"clearfix\\"></div>\\n    </div>\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/api_service/xabber_login.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/api_service/xabber_login_by_email.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"login-panel-form xmpp-login-form noselect\\">\\n    <div class=\\"login-form-header\\">{[print(xabber.getString(\\"title_login_email\\"))]}</div>\\n    <div class=\\"input-field email-name\\">\\n        <input id=\\"username\\" type=\\"text\\" name=\\"username\\">\\n        <label for=\\"username\\">{[print(xabber.getString(\\"email_hint\\"))]}</label>\\n        <span class=\\"errors fixed one-line\\"></span>\\n    </div>\\n    <div class=\\"input-field\\">\\n        <input id=\\"password\\" type=\\"password\\" name=\\"password\\">\\n        <label for=\\"password\\">{[print(xabber.getString(\\"hint_pass\\"))]}</label>\\n        <span class=\\"errors fixed one-line\\"></span>\\n    </div>\\n    <div class=\\"login-panel-footer buttons-wrap\\"><button class=\\"btn btn-flat btn-main-filled btn-log-in\\">{[print(xabber.getString(\\"xabber_account__social_links__button_log_in\\"))]}</button><button class=\\"btn-flat btn-main btn-dark btn-cancel\\">{[print(xabber.getString(\\"cancel\\"))]}</button></div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/api_service/xabber_login_by_email.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/base/about.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"left-column noselect\\">\\n    <div class=\\"main-info-wrap xabber-info-wrap\\">\\n        <div class=\\"picture-wrap\\">\\n            <img class=\\"logo\\" src=\\"{{CLIENT_LOGO}}\\"/>\\n        </div>\\n        <div class=\\"name\\">{{CLIENT_NAME}}</div>\\n        <div class=\\"version\\"></div>\\n    </div>\\n</div>\\n</div>\\n\\n<div class=\\"right-column noselect\\">\\n    <div class=\\"settings-panel-head\\">\\n        <span>{[print(xabber.getString(\\"category_about\\"))]}</span>\\n    </div>\\n\\n    <div class=\\"panel-content-wrap\\">\\n        <div class=\\"panel-content\\">\\n            <div class=\\"settings-block-wrap about\\">\\n                <div class=\\"block-content\\">{[print(xabber.getString(\\"web_client__screen_about__preamble_1\\", [constants.SHORT_CLIENT_NAME, constants.SHORT_CLIENT_NAME]))]}</div>\\n                <div class=\\"block-content\\">{[print(xabber.getString(\\"web_client__screen_about__preamble_2\\", [`<a href=\\"${CLIENT_URL}\\" target=\\"_blank\\">${CLIENT_URL}</a>`]))]}</div>\\n                <div class=\\"block-header\\">\\n                    <span class=\\"block-name\\">{[print(xabber.getString(\\"web_client__screen_about__block_1__header\\"))]}</span>\\n                </div>\\n                <div class=\\"block-content\\">{[print(xabber.getString(\\"web_client__screen_about__block_1__text\\"))]}</div>\\n\\n                <div class=\\"block-header\\">\\n                    <span class=\\"block-name\\">{[print(xabber.getString(\\"web_client__screen_about__block_2__header\\"))]}</span>\\n                </div>\\n                <div class=\\"block-content\\">{[print(xabber.getString(\\"web_client__screen_about__block_2__text\\", [constants.SHORT_CLIENT_NAME]))]}</div>\\n\\n                <div class=\\"block-header\\">\\n                    <span class=\\"block-name\\">{[print(xabber.getString(\\"web_client__screen_about__block_3__header\\"))]}</span>\\n                </div>\\n                <div class=\\"block-content\\">{[print(xabber.getString(\\"web_client__screen_about__block_3__text_1\\", [constants.CLIENT_NAME, `<a href=\\"${DEVELOPER_URL}\\" target=\\"_blank\\">${xabber.getString(\\"client_developer_company_name\\")}</a>`, constants.SHORT_CLIENT_NAME]))]}</div>\\n                <div class=\\"block-content\\">{[print(xabber.getString(\\"web_client__screen_about__block_3__text_2\\", [constants.SHORT_CLIENT_NAME]))]}</div>\\n                <div class=\\"block-content\\">{[print(xabber.getString(\\"web_client__screen_about__block_3__text_3\\"))]}</div>\\n                <div class=\\"block-content flex-content\\">\\n                    <img class=\\"logo\\" src=\\"images/redsolution-logo.png\\"/>\\n                    <a href=\\"https://twitter.com/Xabber_XMPP\\" target=\\"_blank\\"><div class=\\"btn-social twitter-color\\">\\n                        <i class=\\"mdi mdi-28px mdi-twitter\\"></i>\\n                    </div></a>\\n                    <a href=\\"${CLIENT_GITHUB_URL}\\" target=\\"_blank\\"><img class=\\"btn-social github-logo\\" src=\\"images/ic_github.png\\"/></a>\\n                </div>\\n\\n                <div class=\\"block-header\\">\\n                    <span class=\\"block-name\\">{[print(xabber.getString(\\"web_client__screen_about__block_4__header\\"))]}</span>\\n                </div>\\n                <div class=\\"block-content\\">{[print(xabber.getString(\\"web_client__screen_about__block_4__text_1\\", [constants.SHORT_CLIENT_NAME]))]}</div>\\n                <div class=\\"block-content\\">{[print(xabber.getString(\\"web_client__screen_about__block_4__text_2\\", [`<a href=\\"${PROJECT_CROWDIN_URL}\\" target=\\"_blank\\">${xabber.getString(\\"web_client__screen_about__block_4__text_2__link__text\\", [constants.SHORT_CLIENT_NAME])}</a>`]))]}</div>\\n\\n                <div class=\\"block-header\\">\\n                    <span class=\\"block-name\\">{[print(xabber.getString(\\"web_client__screen_about__block_5__header\\"))]}</span>\\n                </div>\\n                <div class=\\"block-content\\">{[print(xabber.getString(\\"web_client__screen_about__block_5__text_1\\", [constants.CLIENT_NAME, `<a href=\\"${CLIENT_GITHUB_URL}\\" target=\\"_blank\\">${xabber.getString(\\"web_client__screen_about__block_5__text_1__link__text\\")}</a>`]))]}</div>\\n                <div class=\\"block-content\\">{[print(xabber.getString(\\"web_client__screen_about__block_5__text_2\\"))]}</div>\\n                <div class=\\"block-content\\">{[print(xabber.getString(\\"web_client__screen_about__block_5__text_3\\", [constants.SHORT_CLIENT_NAME, xabber.getString(\\"client_developer_company_name\\"), `<a href=\\"${DEVELOPER_URL}\\" target=\\"_blank\\">${xabber.getString(\\"client_developer_company_full_name\\")}</a>`]))]}</div>\\n                <div class=\\"block-content\\">{[print(xabber.getString(\\"web_client__screen_about__block_5__text_4\\", [constants.CLIENT_NAME, `<a href=\\"${CLIENT_LICENSE_GITHUB_URL}\\" target=\\"_blank\\">${xabber.getString(\\"web_client__screen_about__block_5__text_4__link__text\\")}</a>`]))]}</div>\\n            </div>\\n        </div>\\n    </div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/base/about.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/base/backgrounds_gallery.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"modal-header\\">\\n    <span></span>\\n    <div class=\\"menu-wrap\\">\\n        <div data-screen-name=\\"library\\" class=\\"menu-btn btn-library\\">{[print(xabber.getString(\\"settings__dialog_background__menu_item_library\\"))]}</div>\\n        <div data-screen-name=\\"upload\\" class=\\"menu-btn btn-upload\\">{[print(xabber.getString(\\"settings__dialog_background__menu_item_upload\\"))]}</div>\\n        <div data-screen-name=\\"web-address\\" class=\\"menu-btn btn-web-address\\">{[print(xabber.getString(\\"settings__dialog_background__menu_item_url\\"))]}</div>\\n    </div>\\n</div>\\n<div class=\\"modal-content\\">\\n    <div data-screen=\\"library\\" class=\\"screen-wrap library-wrap\\"></div>\\n    <div data-screen=\\"upload\\" class=\\"hidden screen-wrap\\">\\n        <div class=\\"upload-wrap\\">\\n            <div class=\\"upload-text\\">{[print(xabber.getString(\\"settings__dialog_background__section_upload__text\\"))]}</div>\\n            <div class=\\"upload-button\\">\\n                <button type=\\"file\\">{[print(xabber.getString(\\"settings__dialog_background__section_upload__button_upload\\"))]}</button>\\n                <input type=\\"file\\">\\n            </div></div>\\n    </div>\\n    <div data-screen=\\"web-address\\" class=\\"hidden screen-wrap web-address-wrap\\">\\n        <div class=\\"web-address\\">\\n            <div class=\\"label\\">{[print(xabber.getString(\\"settings__dialog_background__section_url__label\\"))]}</div>\\n            <input class=\\"url\\"/>\\n        </div>\\n        <div class=\\"image-preview\\">\\n            <img class=\\"hidden\\">\\n            <p>{[print(xabber.getString(\\"settings__dialog_background__section_url__placeholder_preview\\"))]}</p>\\n        </div>\\n    </div>\\n</div>\\n<div class=\\"modal-footer\\">\\n    <button class=\\"btn-flat btn-main text-color-700 non-active btn-add\\">{[print(xabber.getString(\\"set\\"))]}</button>\\n    <button class=\\"btn-flat btn-main btn-dark btn-cancel\\">{[print(xabber.getString(\\"cancel\\"))]}</button>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/base/backgrounds_gallery.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/base/color_picker.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"modal-header\\">{[print(xabber.getString(\\"settings__section_appearance__header_toolbar_icons_color\\"))]}</div>\\n<div class=\\"material-color-picker-wrap\\">\\n    <div class=\\"material-color-picker\\">\\n        {[materialColors.forEach(function (color) {]}\\n        <div data-color-name=\\"{{color.color}}\\" class=\\"color-palette-wrapper\\">\\n            {[var default_color = color.variations.find(v => v.weight == 500);]}\\n            <div data-weight=\\"500\\" data-hex=\\"{{default_color.hex}}\\" style=\\"background-color: {{default_color.hex}}\\" class=\\"color-palette-item\\">\\n            </div>\\n            {[color.variations.forEach(function (variation) {]}\\n            <div data-weight=\\"{{variation.weight}}\\" data-hex=\\"{{variation.hex}}\\" style=\\"background-color: {{variation.hex}}\\" class=\\"color-palette-item\\">\\n            </div>\\n            {[})]}\\n        </div>\\n        {[})]}\\n    </div>\\n</div>\\n<div class=\\"modal-footer\\">\\n    <div class=\\"hidden selected-color-wrap\\">\\n        <div class=\\"selected-color-item\\"></div>\\n        <div class=\\"selected-color-info\\">\\n            <div class=\\"selected-color-name\\"></div>\\n            <div class=\\"selected-color-hex\\"></div>\\n            <input class=\\"selected-color-hex-input hidden\\"/>\\n        </div>\\n        <button class=\\"btn-flat btn-main btn-dark btn-set\\">{[print(xabber.getString(\\"set\\"))]}</button>\\n    </div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/base/color_picker.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/base/color_scheme.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<ul class=\\"color-values noselect\\">\\n    <li class=\\"color-value\\" data-value=\\"red\\">\\n        <div class=\\"color-name text-color-red-700\\">{[print(xabber.getString(\\"account_color_name_red\\"))]}</div>\\n        <div class=\\"color-pattern ground-color-red-700\\"></div>\\n    </li>\\n    <li class=\\"color-value\\" data-value=\\"pink\\">\\n        <div class=\\"color-name text-color-pink-700\\">{[print(xabber.getString(\\"account_color_name_pink\\"))]}</div>\\n        <div class=\\"color-pattern ground-color-pink-700\\"></div>\\n    </li>\\n    <li class=\\"color-value\\" data-value=\\"purple\\">\\n        <div class=\\"color-name text-color-purple-700\\">{[print(xabber.getString(\\"account_color_name_purple\\"))]}</div>\\n        <div class=\\"color-pattern ground-color-purple-700\\"></div>\\n    </li>\\n    <li class=\\"color-value\\" data-value=\\"deep-purple\\">\\n        <div class=\\"color-name text-color-deep-purple-700\\">{[print(xabber.getString(\\"account_color_name_deep_purple\\").replace(/-/g, \\" \\"))]}</div>\\n        <div class=\\"color-pattern ground-color-deep-purple-700\\"></div>\\n    </li>\\n    <li class=\\"color-value\\" data-value=\\"indigo\\">\\n        <div class=\\"color-name text-color-indigo-700\\">{[print(xabber.getString(\\"account_color_name_indigo\\"))]}</div>\\n        <div class=\\"color-pattern ground-color-indigo-700\\"></div>\\n    </li>\\n    <li class=\\"color-value\\" data-value=\\"blue\\">\\n        <div class=\\"color-name text-color-blue-700\\">{[print(xabber.getString(\\"account_color_name_blue\\"))]}</div>\\n        <div class=\\"color-pattern ground-color-blue-700\\"></div>\\n    </li>\\n    <li class=\\"color-value\\" data-value=\\"light-blue\\">\\n        <div class=\\"color-name text-color-light-blue-700\\">{[print(xabber.getString(\\"account_color_name_light_blue\\").replace(/-/g, \\" \\"))]}</div>\\n        <div class=\\"color-pattern ground-color-light-blue-700\\"></div>\\n    </li>\\n    <li class=\\"color-value\\" data-value=\\"cyan\\">\\n        <div class=\\"color-name text-color-cyan-700\\">{[print(xabber.getString(\\"account_color_name_cyan\\"))]}</div>\\n        <div class=\\"color-pattern ground-color-cyan-700\\"></div>\\n    </li>\\n    <li class=\\"color-value\\" data-value=\\"teal\\">\\n        <div class=\\"color-name text-color-teal-700\\">{[print(xabber.getString(\\"account_color_name_teal\\"))]}</div>\\n        <div class=\\"color-pattern ground-color-teal-700\\"></div>\\n    </li>\\n    <li class=\\"color-value\\" data-value=\\"green\\">\\n        <div class=\\"color-name text-color-green-700\\">{[print(xabber.getString(\\"account_color_name_green\\"))]}</div>\\n        <div class=\\"color-pattern ground-color-green-700\\"></div>\\n    </li>\\n    <li class=\\"color-value\\" data-value=\\"light-green\\">\\n        <div class=\\"color-name text-color-light-green-700\\">{[print(xabber.getString(\\"account_color_name_light_green\\").replace(/-/g, \\" \\"))]}</div>\\n        <div class=\\"color-pattern ground-color-light-green-700\\"></div>\\n    </li>\\n    <li class=\\"color-value\\" data-value=\\"lime\\">\\n        <div class=\\"color-name text-color-lime-700\\">{[print(xabber.getString(\\"account_color_name_lime\\"))]}</div>\\n        <div class=\\"color-pattern ground-color-lime-700\\"></div>\\n    </li>\\n    <li class=\\"color-value\\" data-value=\\"amber\\">\\n        <div class=\\"color-name text-color-amber-700\\">{[print(xabber.getString(\\"account_color_name_amber\\"))]}</div>\\n        <div class=\\"color-pattern ground-color-amber-700\\"></div>\\n    </li>\\n    <li class=\\"color-value\\" data-value=\\"orange\\">\\n        <div class=\\"color-name text-color-orange-700\\">{[print(xabber.getString(\\"account_color_name_orange\\"))]}</div>\\n        <div class=\\"color-pattern ground-color-orange-700\\"></div>\\n    </li>\\n    <li class=\\"color-value\\" data-value=\\"deep-orange\\">\\n        <div class=\\"color-name text-color-deep-orange-700\\">{[print(xabber.getString(\\"account_color_name_deep_orange\\").replace(/-/g, \\" \\"))]}</div>\\n        <div class=\\"color-pattern ground-color-deep-orange-700\\"></div>\\n    </li>\\n    <li class=\\"color-value\\" data-value=\\"brown\\">\\n        <div class=\\"color-name text-color-brown-700\\">{[print(xabber.getString(\\"account_color_name_brown\\"))]}</div>\\n        <div class=\\"color-pattern ground-color-brown-700\\"></div>\\n    </li>\\n    <li class=\\"color-value\\" data-value=\\"blue-grey\\">\\n        <div class=\\"color-name text-color-blue-grey-700\\">{[print(xabber.getString(\\"account_color_name_blue_grey\\").replace(/-/g, \\" \\"))]}</div>\\n        <div class=\\"color-pattern ground-color-blue-grey-700\\"></div>\\n    </li>\\n</ul>");\n\n//# sourceURL=webpack://xabber.web/./templates/base/color_scheme.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/base/dialog.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"modal dialog-modal {{modal_class}}\\">\\n    <div class=\\"modal-header\\">\\n        <div class=\\"panel-header black-text\\">{{header}}</div>\\n    </div>\\n    <div class=\\"modal-content\\">\\n        <div class=\\"dialog-text\\">{{text}}</div>\\n        <div class=\\"dialog-options-wrap\\">\\n        {[ for (var idx in dialog_options) { var option = dialog_options[idx]; ]}\\n            <div class=\\"dialog-option\\" data-name=\\"{{option.name}}\\">\\n                <input type=\\"checkbox\\" class=\\"filled-in\\" id=\\"dialog_option_{{option.name}}\\" {[ if (option.checked) { ]}checked=\\"checked\\"{[ } ]}/>\\n                <label for=\\"dialog_option_{{option.name}}\\">{{option.text}}</label>\\n            </div>\\n        {[ } ]}\\n        </div>\\n        <div class=\\"container-for-img hidden\\"><img class=\\"img-from-clipboard\\"></div>\\n    </div>\\n    <div class=\\"modal-footer {{flag}}\\">\\n        {[ for (var idx in optional_buttons) { var button = optional_buttons[idx]; ]}\\n        <button class=\\"optional-button btn-flat btn-main\\" data-option=\\"{{button.value}}\\">{{button.name}}</button>\\n        {[ } ]}\\n        {[ if (ok_button) { ]}\\n        <button class=\\"ok-button btn-flat btn-main\\" data-option=true>{{ok_button.text}}</button>\\n        {[ } ]}\\n        {[ if (cancel_button) { ]}\\n        <button class=\\"cancel-button btn-flat btn-main btn-dark btn-cancel\\" data-option=false>{{cancel_button.text}}</button>\\n        {[ } ]}\\n    </div>\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/base/dialog.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/base/fingerprint_item.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"row\\">\\n    <div title=\\"{[print(xabber.getString(\'omemo__dialog_fingerprints__textfield_device_id_tooltip\', [id, (label ? label : \'none\')]))]}\\" class=\\"device-wrap\\">\\n        {[if (edit_setting) {]}\\n        <input class=\\"hidden set-label one-line\\" {[if (label) {]}value=\\"{{label}}\\"{[}]}>{[}]}\\n        {[if (label) {]}<div class=\\"one-line label\\">{{label}}</div>{[}]}\\n        <div class=\\"device-id one-line\\">{{id}}</div>\\n        {[if (!label) {]}<div class=\\"device-id-label\\">{[print(xabber.getString(\\"omemo__dialog_fingerprints__label_device_id\\"))]}</div>{[}]}\\n        {[if (edit_setting) {]}<div class=\\"set-label-label hidden\\">{[print(xabber.getString(\\"omemo__dialog_fingerprints__label_set_label\\"))]}</div>{[}]}\\n    </div>\\n    <div class=\\"fingerprint-wrap\\">\\n        <div title=\\"Device fingerprint\\" class=\\"fingerprint\\">{{fingerprint}}</div>\\n        {[if (error) {]}\\n        <div class=\\"fingerprint-error\\">{{error}}</div>\\n        {[}]}\\n        {[if (old_fingerprint){]}<div title=\\"Old device fingerprint\\" class=\\"old-fingerprint\\">{{old_fingerprint}}</div>{[}]}\\n    </div>\\n    <div data-trust=\\"{{trust}}\\" class=\\"buttons\\">\\n        {[if (trust !== null && !error) {]}\\n        <div class=\\"dropdown-button\\" data-activates=\\"select-status-{{id}}\\">\\n            <div class=\\"trust-item-wrap btn-main btn-flat\\">\\n                <div data-value=\\"{{trust}}\\">{[print(xabber.getString(`omemo__dialog_fingerprints__button_${trust}`))]}</div>\\n            </div>\\n        </div>\\n        <div id=\\"select-status-{{id}}\\" class=\\"dropdown-content noselect fingerprint-dropdown\\">\\n            <div data-value=\\"ignore\\" class=\\"btn-main text-color-grey-500 btn-ignore btn-flat\\">{[print(xabber.getString(\\"omemo__dialog_fingerprints__button_ignore\\"))]}</div>\\n            <div data-value=\\"trust\\" class=\\"btn-main btn-flat btn-trust text-color-green-500\\">{[print(xabber.getString(\\"omemo__dialog_fingerprints__button_trust\\"))]}</div>\\n            {[if (delete_button){]}\\n            <div class=\\"btn-main btn-flat btn-delete text-color-red-500\\">{[print(xabber.getString(\\"omemo__dialog_fingerprints__button_delete\\"))]}</div>\\n            {[}]}\\n        </div>\\n        {[}]}\\n    </div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/base/fingerprint_item.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/base/fingerprints.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"modal-header fingerprints-header\\">\\n    <div class=\\"header\\"></div>\\n    <div class=\\"additional-info\\"></div>\\n</div>\\n<div class=\\"fingerprints-content\\">\\n</div>\\n<div class=\\"fingerprints-bottom\\">\\n    <div class=\\"this-device-wrap\\">\\n        <div class=\\"this-device-header-wrap\\">\\n            <div class=\\"divider\\"></div>\\n            <div class=\\"this-device-header\\">{[print(xabber.getString(\\"omemo__dialog_fingerprints__text_this_device\\"))]}</div>\\n        </div>\\n        <div class=\\"this-device-content\\">\\n        </div>\\n    </div>\\n    <div class=\\"fingerprints-description-wrap\\">\\n        <div class=\\"fingerprints-description\\">{[print(xabber.getString(\\"omemo__dialog_fingerprints__text_description\\"))]}</div>\\n        <div class=\\"link-about-encryption\\"><a href=\\"{[print(xabber.getString(\'omemo__dialog_fingerprints__link_learn_more\'))]}\\" target=\\"_blank\\">{[print(xabber.getString(\\"omemo__dialog_fingerprints__text_learn_more\\"))]}</a></div>\\n    </div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/base/fingerprints.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/base/input_widget.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"input-widget-wrap {{field_name}}-wrap\\">\\n    <div class=\\"{{field_name}} field-text one-line\\"></div>\\n    <div class=\\"btn-rename\\">\\n        <span>{[print(xabber.getString(\\"input_widget__button_rename\\"))]}</span>\\n    </div>\\n    <div class=\\"{{field_name}}-input-wrap\\">\\n        <input class=\\"{{field_name}}-input field-input hidden\\" type=\\"{{field_type}}\\" placeholder=\\"{{placeholder}}\\">\\n    </div>\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/base/input_widget.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/base/jingle_message_calling.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"collapsed-movable\\"></div>\\n<i class=\\"mdi mdi-phone btn-collapse\\"></i>\\n<div class=\\"call-header\\">\\n    {[print(xabber.getString(\\"dialog_jingle_message__header\\", [SHORT_CLIENT_NAME]))]}\\n    <div class=\\"calling-status\\"/>\\n</div>\\n<div class=\\"blur-background\\"></div>\\n<div class=\\"contact-info\\">\\n    <div class=\\"name one-line\\"/>\\n    <div class=\\"calling-status\\"/>\\n</div>\\n<div class=\\"video-wrap\\">\\n    <video autoplay loop class=\\"blank-video hidden\\">\\n        <source src=\\"{{BLANK_VIDEO.MP4}}\\">\\n        <source src=\\"{{BLANK_VIDEO.OGG}}\\" type=\\"video/ogg\\">\\n        <source src=\\"{{BLANK_VIDEO.WEBM}}\\" type=\\"video/webm\\">\\n    </video>\\n    <audio autoplay class=\\"webrtc-remote-audio hidden\\"/>\\n    <video autoplay muted class=\\"webrtc-local-video collapsed hidden\\"/>\\n    <div class=\\"default-screen\\">\\n        <div class=\\"circle-avatar\\"/>\\n        <div class=\\"name one-line\\"/>\\n    </div>\\n</div>\\n<div class=\\"buttons-panel\\">\\n    <div class=\\"buttons-wrap\\">\\n        <div class=\\"btn-wrap\\" title=\\"Collapse window\\"><svg class=\\"btn-collapse mdi-24px\\" viewBox=\\"0 0 24 24\\">\\n            <path d=\\"M19.5,3.09L15,7.59V4H13V11H20V9H16.41L20.91,4.5L19.5,3.09M4,13V15H7.59L3.09,19.5L4.5,20.91L9,16.41V20H11V13H4Z\\"/>\\n        </svg></div>\\n        <div class=\\"btn-wrap\\" title=\\"Fullscreen mode\\"><svg class=\\"btn-full-screen mdi-24px\\" viewBox=\\"0 0 24 24\\">\\n            <path d=\\"M11,21H3V13H5V17.59L17.59,5H13V3H21V11H19V6.41L6.41,19H11V21Z\\" />\\n        </svg></div>\\n        <i title=\'{[print(xabber.getString(\\"dialog_jingle_message__button_mute_microphone__tooltip\\"))]}\' class=\\"btn-microphone mdi mdi-24px mdi-microphone\\"/>\\n        <i title=\'{[print(xabber.getString(\\"dialog_jingle_message__button_switch_video__tooltip\\"))]}\' class=\\"btn-video mdi mdi-24px mdi-video\\"/>\\n        <i title=\'{[print(xabber.getString(\\"dialog_jingle_message__button_mute__tooltip\\"))]}\' class=\\"btn-volume mdi mdi-24px mdi-volume-high\\"/>\\n        <i title=\'{[print(xabber.getString(\\"dialog_jingle_message__button_share_screen__tooltip\\"))]}\' class=\\"btn-share-screen mdi mdi-24px mdi-monitor\\"/>\\n        <i title=\'{[print(xabber.getString(\\"dialog_jingle_message__button_accept_call__tooltip\\"))]}\' class=\\"btn-accept mdi mdi-24px mdi-phone\\"/>\\n        <i title=\'{[print(xabber.getString(\\"dialog_jingle_message__button_decline_call__tooltip\\"))]}\' class=\\"btn-cancel mdi mdi-24px mdi-phone-hangup\\"/>\\n    </div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/base/jingle_message_calling.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/base/omemo_enable.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"msg-text ground-color-300\\">\\n    <span title=\\"{[print(xabber.getString(\'omemo__alert_enable__tooltip\'))]}\\" class=\\"btn-enable\\">{[print(xabber.getString(\\"omemo__alert_enable__link_text\\"))]}</span> {[print(xabber.getString(\\"omemo__alert_enable__text\\", [jid]))]}</div>\\n<i class=\\"mdi mdi-22px mdi-close btn-escape\\"></i>\\n<button class=\\"btn-enable btn-flat hover-ground-color-500 btn-dark btn-main\\">{[print(xabber.getString(\\"omemo__alert_enable__link_text\\"))]}</button>");\n\n//# sourceURL=webpack://xabber.web/./templates/base/omemo_enable.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/base/plyr_player_popup.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"plyr-player-popup-container\\">\\n    <div class=\\"plyr-player-popup-draggable\\">\\n        <video class=\\"plyr-player-popup\\"></video>\\n        <div class=\\"plyr-player-min-controls-tab\\">\\n            <div class=\\"plyr-player-min-controls-buttons\\">\\n                <svg class=\\"mdi mdi-24px mdi-plyr-button-minimized mdi-minimize-full mdi-svg-template\\" data-svgname=\\"player-full\\"></svg>\\n                <svg class=\\"mdi mdi-24px mdi-plyr-button-minimized mdi-toggle-play mdi-plyr-play mdi-svg-template\\" data-svgname=\\"play\\"></svg>\\n                <svg class=\\"mdi mdi-24px mdi-plyr-button-minimized mdi-toggle-play mdi-plyr-pause mdi-svg-template\\" data-svgname=\\"pause\\"></svg>\\n                <svg class=\\"mdi mdi-24px mdi-plyr-button-minimized mdi-toggle-mute mdi-mute-plyr mdi-svg-template\\" data-svgname=\\"volume-off\\"></svg>\\n                <svg class=\\"mdi mdi-24px mdi-plyr-button-minimized mdi-toggle-mute mdi-unmute-plyr mdi-svg-template\\" data-svgname=\\"volume-high\\"></svg>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n<div class=\\"plyr-player-control-tab\\">\\n    <i class=\\"mdi mdi-24px mdi-close\\"></i>\\n    <svg class=\\"mdi mdi-24px mdi-plyr-toolbar-item mdi-plyr-hide mdi-svg-template\\" data-svgname=\\"player-mini\\"></svg>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/base/plyr_player_popup.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/base/settings.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("    <div class=\\"left-column noselect\\">\\n        <div class=\\"main-info-wrap xabber-info-wrap\\">\\n            <div class=\\"picture-wrap\\">\\n                <img class=\\"logo\\" src=\\"{{CLIENT_LOGO}}\\"/>\\n            </div>\\n            <div class=\\"name\\">{{CLIENT_NAME}}</div>\\n            <div class=\\"version\\"></div>\\n        </div>\\n        <div class=\\"settings-tabs-wrap\\">\\n            {[if (ENABLE_XABBER_ACCOUNT) {]}\\n            <div class=\\"settings-tab xabber-account-tab offline\\" data-block-name=\\"xabber-account\\">\\n                <svg class=\\"mdi mdi-24px mdi-svg-template xabber-offline-icon\\" data-svgname=\\"xabber-offline\\"></svg>\\n                <svg class=\\"mdi mdi-24px mdi-svg-template xabber-online-icon\\" data-svgname=\\"xabber-online\\"></svg>\\n                <div class=\\"settings-block-name one-line\\">{[print(xabber.getString(\\"settings__menu_item__xabber_account\\"))]}</div>\\n            </div>\\n            {[}]}\\n            <div class=\\"settings-tab active\\" data-block-name=\\"xmpp-accounts\\">\\n                <i class=\\"mdi mdi-24px mdi-lightbulb\\"/>\\n                <div class=\\"settings-block-name one-line\\">{[print(xabber.getString(\\"settings__menu_item__xmpp_account\\"))]}</div>\\n            </div>\\n            <div class=\\"settings-tab\\" data-block-name=\\"background\\">\\n                <svg class=\\"mdi mdi-24px mdi-svg-template\\" data-svgname=\\"palette\\"></svg>\\n                <div class=\\"settings-block-name one-line\\">{[print(xabber.getString(\\"category_interface\\"))]}</div>\\n            </div>\\n            <div class=\\"settings-tab\\" data-block-name=\\"notifications\\">\\n                <i class=\\"mdi mdi-24px mdi-bell\\"></i>\\n                <div class=\\"settings-block-name one-line\\">{[print(xabber.getString(\\"settings__menu_item__notifications\\"))]}</div>\\n            </div>\\n            \x3c!--<div class=\\"settings-tab\\" data-block-name=\\"storage\\">--\x3e\\n                \x3c!--<i class=\\"mdi mdi-24px mdi-database\\"></i>--\x3e\\n                \x3c!--<div class=\\"settings-block-name one-line line-through\\">{[print(xabber.getString(\\"settings__menu_item__data_and_storage\\"))]}</div>--\x3e\\n            \x3c!--</div>--\x3e\\n            <div class=\\"settings-tab\\" data-block-name=\\"privacy\\">\\n                <i class=\\"mdi mdi-24px mdi-incognito\\"></i>\\n                <div class=\\"settings-block-name one-line\\">{[print(xabber.getString(\\"settings__menu_item__privacy\\"))]}</div>\\n            </div>\\n            \x3c!--<div class=\\"settings-tab\\" data-block-name=\\"connection\\">--\x3e\\n                \x3c!--<i class=\\"mdi mdi-24px mdi-wan\\"></i>--\x3e\\n                \x3c!--<div class=\\"settings-block-name one-line line-through\\">{[print(xabber.getString(\\"settings__menu_item__connection_settings\\"))]}</div>--\x3e\\n            \x3c!--</div>--\x3e\\n            \x3c!--<div class=\\"settings-tab\\" data-block-name=\\"developer\\">--\x3e\\n                \x3c!--<i class=\\"mdi mdi-24px mdi-bug\\"></i>--\x3e\\n                \x3c!--<div class=\\"settings-block-name one-line line-through\\">{[print(xabber.getString(\\"settings__menu_item__developer\\"))]}</div>--\x3e\\n            \x3c!--</div>--\x3e\\n            <div class=\\"settings-tab\\" data-block-name=\\"interface_language\\">\\n                <svg class=\\"mdi mdi-24px mdi-svg-template\\" data-svgname=\\"translate\\"></svg>\\n                <div class=\\"settings-block-name one-line\\">{[print(xabber.getString(\\"settings__menu_item__interface_language\\"))]}</div>\\n            </div>\\n            {[if (PERSONAL_AREA_URL && Object.keys(PERSONAL_AREA_URL).length) {]}\\n            <a href=\\"{{PERSONAL_AREA_URL.url}}\\" target=\\"_blank\\"><div class=\\"link-button settings-tab\\" data-block-name=\\"{{PERSONAL_AREA_URL.label}}\\">\\n                <i class=\\"mdi mdi-24px mdi-{{PERSONAL_AREA_URL.icon_name}}\\"></i>\\n                <div class=\\"settings-block-name one-line\\">{{PERSONAL_AREA_URL.label}}</div>\\n            </div>\\n            </a>\\n            {[}]}\\n        </div>\\n        <div class=\\"settings-tabs-bottom-wrap settings-tabs-wrap\\">\\n            \x3c!--<div class=\\"settings-tab\\" data-block-name=\\"security\\">--\x3e\\n                \x3c!--<i class=\\"mdi mdi-24px mdi-security\\"></i>--\x3e\\n                \x3c!--<div class=\\"settings-block-name one-line line-through\\">{[print(xabber.getString(\\"settings__menu_item__security\\"))]}</div>--\x3e\\n            \x3c!--</div>--\x3e\\n            \x3c!--<div class=\\"settings-tab\\" data-block-name=\\"about\\">--\x3e\\n                \x3c!--<i class=\\"mdi mdi-24px mdi-information\\"></i>--\x3e\\n                \x3c!--<div class=\\"settings-block-name one-line line-through\\">{[print(xabber.getString(\\"settings__menu_item__about\\"))]}</div>--\x3e\\n            \x3c!--</div>--\x3e\\n            <div class=\\"settings-tab delete-all-accounts\\">\\n                <i class=\\"mdi mdi-24px mdi-logout-variant\\"></i>\\n                <div class=\\"settings-block-name\\">{[print(xabber.getString(\\"button_quit\\"))]}</div>\\n            </div>\\n        </div>\\n    </div>\\n\\n    <div class=\\"right-column noselect\\">\\n        <div class=\\"settings-panel-head\\">\\n            <span>{[print(xabber.getString(\\"preference_editor\\"))]}</span>\\n            <button class=\\"btn-add-account btn-flat btn-main text-color-500 ground-color-grey-100 hover-ground-color-grey-300\\">{[print(xabber.getString(\\"dialog_add__label_add_account\\"))]}</button>\\n        </div>\\n\\n        <div class=\\"panel-content-wrap\\">\\n            <div class=\\"panel-content\\">\\n                {[if (ENABLE_XABBER_ACCOUNT) {]}\\n                <div data-block-name=\\"\\" class=\\"settings-block-wrap xabber-account\\">\\n                    <div class=\\"block-header\\">\\n                        <span class=\\"block-name\\">{[print(xabber.getString(\\"settings__menu_item__xabber_account\\"))]}</span>\\n                    </div>\\n                </div>\\n                {[}]}\\n                <div data-header=\'{[print(xabber.getString(\\"settings__menu_item__xmpp_account\\"))]}\' class=\\"settings-block-wrap xmpp-accounts\\">\\n                    <div class=\\"setting xmpp-account-list\\">\\n                        <div class=\\"accounts-head-wrap\\">\\n                            <div class=\\"accounts-head xmppid-head\\">{[print(xabber.getString(\\"settings__section_xmpp_accounts__table_header_xmpp_id\\"))]}</div>\\n                            <div class=\\"accounts-head sync-head\\">{[print(xabber.getString(\\"settings__section_xmpp_accounts__table_header_sync\\"))]}</div>\\n                            <div class=\\"accounts-head enabled-head\\">{[print(xabber.getString(\\"settings__section_xmpp_accounts__table_header_enabled\\"))]}</div>\\n                        </div>\\n                        <span class=\\"no-accounts-tip\\">{[print(xabber.getString(\\"settings__section_xmpp_accounts__text_no_accounts\\"))]}</span>\\n                        <div class=\\"move-account-to-bottom droppable\\"></div>\\n                    </div>\\n                </div>\\n\\n                <div data-header=\'{[print(xabber.getString(\\"category_interface\\"))]}\' class=\\"settings-block-wrap background hidden\\">\\n                    <div class=\\"settings-subblock-wrap\\">\\n                        <div class=\\"block-header\\">\\n                            <span class=\\"block-name\\">{[print(xabber.getString(\\"settings__menu_item__appearance\\"))]}</span>\\n                        </div>\\n                        <div class=\\"block-subheader\\">\\n                            <span class=\\"block-name\\">{[print(xabber.getString(\\"settings__section_appearance__palette\\"))]}</span>\\n                        </div>\\n                        <div class=\\"toolbar-main-color-setting-wrap\\">\\n                            <div class=\\"setting-name\\">{[print(xabber.getString(\\"settings__section_appearance__header_main_color\\"))]}</div>\\n                            <div class=\\"setting toolbar-main-color-setting field-wrap\\">\\n                                <div class=\\"current-main-color-wrap\\">\\n                                    <div class=\\"current-main-color ground-color-500\\"></div>\\n                                    <div class=\\"color-name\\"></div>\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <div class=\\"toolbar-color-setting-wrap\\">\\n                            <div class=\\"setting-name\\">{[print(xabber.getString(\\"settings__section_appearance__header_toolbar_icons_color\\"))]}</div>\\n                            <div class=\\"setting toolbar-color-setting field-wrap\\">\\n                                <div class=\\"selected-color-wrap\\">\\n                                    <div class=\\"selected-color-item\\"></div>\\n                                    <div class=\\"selected-color-info\\">\\n                                        <div class=\\"selected-color-name\\"></div>\\n                                        <div class=\\"selected-color-hex\\"></div>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <div class=\\"block-subheader\\">\\n                            <span class=\\"block-name\\">{[print(xabber.getString(\\"account_settings_background\\"))]}</span>\\n                        </div>\\n                        <div class=\\"background-setting-wrap\\">\\n                            <div class=\\"setting-name\\">{[print(xabber.getString(\\"settings__section_appearance__header_background\\"))]}</div>\\n                            <div class=\\"setting background radio-button field-wrap\\">\\n                                <div class=\\"field radio-field clickable-field\\">\\n                                    <form action=\\"#\\">\\n                                        <p>\\n                                            <input class=\\"with-gap\\" name=\\"background\\" value=\\"default\\" type=\\"radio\\" id=\\"{{view.cid}}-default-background\\" />\\n                                            <label for=\\"{{view.cid}}-default-background\\">{[print(xabber.getString(\\"settings__section_appearance__background__label_default\\"))]}</label>\\n                                        </p>\\n                                        <p>\\n                                            <input class=\\"with-gap\\" name=\\"background\\" value=\\"repeating-pattern\\" type=\\"radio\\" id=\\"{{view.cid}}-repeating-pattern-background\\" />\\n                                            <label for=\\"{{view.cid}}-repeating-pattern-background\\">{[print(xabber.getString(\\"settings__section_appearance__background__label_pattern\\"))]}</label>\\n                                        </p>\\n                                        <p>\\n                                            <input class=\\"with-gap\\" name=\\"background\\" value=\\"image\\" type=\\"radio\\" id=\\"{{view.cid}}-image-background\\" />\\n                                            <label for=\\"{{view.cid}}-image-background\\">{[print(xabber.getString(\\"settings__section_appearance__background__label_image\\"))]}</label>\\n                                        </p>\\n                                    </form>\\n                                </div>\\n                                <div class=\\"current-background-wrap\\">\\n                                    <div class=\\"dark-placeholder\\">{[print(xabber.getString(\\"settings__section_appearance__background__button_update\\"))]}</div>\\n                                    <div class=\\"current-background\\"></div>\\n                                </div>\\n                            </div>\\n                            <div class=\\"blur-setting-wrap\\">\\n                                <div class=\\"setting blur-setting field-wrap\\">\\n                                    <div class=\\"input-field checkbox-field\\">\\n                                        <input type=\\"checkbox\\" class=\\"filled-in\\" id=\\"blur_switch\\"/>\\n                                        <label for=\\"blur_switch\\">{[print(xabber.getString(\\"settings__section_appearance__background__checkbox_blur\\"))]}</label>\\n                                    </div>\\n                                    <form action=\\"#\\">\\n                                        <div class=\\"disabled hidden\\"></div>\\n                                        <p class=\\"range-field\\">\\n                                            <input type=\\"range\\" id=\\"blur\\" min=\\"0\\" max=\\"100\\" />\\n                                        </p>\\n                                    </form>\\n                                </div>\\n                            </div>\\n                            <div class=\\"vignetting-setting-wrap\\">\\n                                <div class=\\"setting vignetting-setting field-wrap\\">\\n                                    <div class=\\"input-field checkbox-field\\">\\n                                        <input type=\\"checkbox\\" class=\\"filled-in\\" id=\\"vignetting_switch\\"/>\\n                                        <label for=\\"vignetting_switch\\">{[print(xabber.getString(\\"settings__section_appearance__background__checkbox_vignette\\"))]}</label>\\n                                    </div>\\n                                    <form action=\\"#\\">\\n                                        <div class=\\"disabled hidden\\"></div>\\n                                        <p class=\\"range-field\\">\\n                                            <input type=\\"range\\" id=\\"vignetting\\" min=\\"0\\" max=\\"200\\" />\\n                                        </p>\\n                                    </form>\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <div class=\\"side-panel-setting-wrap\\">\\n                            <div class=\\"setting-name\\">{[print(xabber.getString(\\"settings__section_appearance__header_side_panel\\"))]}</div>\\n                            <div class=\\"setting side-panel-setting radio-button field-wrap\\">\\n                                <div class=\\"field radio-field clickable-field\\">\\n                                    <form action=\\"#\\">\\n                                        <p>\\n                                            <input class=\\"with-gap\\" name=\\"side-panel\\" value=\\"dark\\" type=\\"radio\\" id=\\"{{view.cid}}-dark-side-panel\\" />\\n                                            <label for=\\"{{view.cid}}-dark-side-panel\\">{[print(xabber.getString(\\"settings__section_appearance__side_panel__label_dark\\"))]}</label>\\n                                        </p>\\n                                        <p>\\n                                            <input class=\\"with-gap\\" name=\\"side-panel\\" value=\\"light\\" type=\\"radio\\" id=\\"{{view.cid}}-light-side-panel\\" />\\n                                            <label for=\\"{{view.cid}}-light-side-panel\\">{[print(xabber.getString(\\"settings__section_appearance__side_panel__label_light\\"))]}</label>\\n                                        </p>\\n                                    </form>\\n                                </div>\\n                            </div>\\n                            <div class=\\"setting side-panel-setting field-wrap\\">\\n                                <div class=\\"input-field checkbox-field\\">\\n                                    <input type=\\"checkbox\\" class=\\"filled-in\\" id=\\"side_panel_blur_switch\\"/>\\n                                    <label for=\\"side_panel_blur_switch\\">{[print(xabber.getString(\\"settings__section_appearance__background__checkbox_blur\\"))]}</label>\\n                                </div>\\n                                <div class=\\"transparency-setting\\">\\n                                    <div class=\\"input-field checkbox-field\\">\\n                                        <input type=\\"checkbox\\" class=\\"filled-in\\" id=\\"transparency_switch\\"/>\\n                                        <label for=\\"transparency_switch\\">{[print(xabber.getString(\\"settings__section_appearance__side_panel__checkbox_transparency\\"))]}</label>\\n                                    </div>\\n                                    <form action=\\"#\\">\\n                                        <div class=\\"disabled hidden\\"></div>\\n                                        <p class=\\"range-field\\">\\n                                            <input type=\\"range\\" id=\\"transparency\\" min=\\"0\\" max=\\"100\\" />\\n                                        </p>\\n                                    </form>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\"settings-subblock-wrap\\">\\n                        <div class=\\"block-header\\">\\n                            <span class=\\"block-name\\">{[print(xabber.getString(\\"chat_viewer\\"))]}</span>\\n                        </div>\\n                        <div class=\\"block-subheader\\">\\n                            <span class=\\"block-name\\">{[print(xabber.getString(\\"category_behavior\\"))]}</span>\\n                        </div>\\n                        <div class=\\"setting hotkeys radio-button field-wrap\\">\\n                            <div class=\\"field radio-field clickable-field\\">\\n                                <form action=\\"#\\">\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"hotkeys\\" value=\\"enter\\" type=\\"radio\\" id=\\"{{view.cid}}-enter\\" />\\n                                        <label for=\\"{{view.cid}}-enter\\">{[print(xabber.getString(\\"settings__section_keyboard__label_send_on_enter\\"))]}</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"hotkeys\\" value=\\"ctrlenter\\" type=\\"radio\\" id=\\"{{view.cid}}-ctrlenter\\" />\\n                                        <label for=\\"{{view.cid}}-ctrlenter\\">{[print(xabber.getString(\\"settings__section_keyboard__label_send_on_ctrlenter\\"))]}</label>\\n                                    </p>\\n                                </form>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\"settings-subblock-wrap contact-list\\">\\n                        <div class=\\"block-header\\">\\n                            <span class=\\"block-name\\">{[print(xabber.getString(\\"category_contact_list\\"))]}</span>\\n                        </div>\\n                        <div class=\\"circle-avatar noselect\\"/>\\n                        <div class=\\"setting-name\\">{[print(xabber.getString(\\"avatars\\"))]}</div>\\n                        <div class=\\"setting avatar-shape radio-button field-wrap\\">\\n                            <div class=\\"field radio-field clickable-field\\">\\n                                <form action=\\"#\\">\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"avatar_shape\\" value=\\"circle\\" type=\\"radio\\" id=\\"{{view.cid}}-circle\\" />\\n                                        <label for=\\"{{view.cid}}-circle\\">{[print(xabber.getString(\\"settings__section_appearance__avatars_circle\\"))]}</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"avatar_shape\\" value=\\"squircle\\" type=\\"radio\\" id=\\"{{view.cid}}-squircle\\" />\\n                                        <label for=\\"{{view.cid}}-squircle\\">{[print(xabber.getString(\\"settings__section_appearance__avatars_squircle\\"))]}</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"avatar_shape\\" value=\\"octagon\\" type=\\"radio\\" id=\\"{{view.cid}}-octagon\\" />\\n                                        <label for=\\"{{view.cid}}-octagon\\">{[print(xabber.getString(\\"settings__section_appearance__avatars_octagon\\"))]}</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"avatar_shape\\" value=\\"hexagon\\" type=\\"radio\\" id=\\"{{view.cid}}-hexagon\\" />\\n                                        <label for=\\"{{view.cid}}-hexagon\\">{[print(xabber.getString(\\"settings__section_appearance__avatars_hexagon\\"))]}</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"avatar_shape\\" value=\\"pentagon\\" type=\\"radio\\" id=\\"{{view.cid}}-pentagon\\" />\\n                                        <label for=\\"{{view.cid}}-pentagon\\">{[print(xabber.getString(\\"settings__section_appearance__avatars_pentagon\\"))]}</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"avatar_shape\\" value=\\"rounded\\" type=\\"radio\\" id=\\"{{view.cid}}-rounded\\" />\\n                                        <label for=\\"{{view.cid}}-rounded\\">{[print(xabber.getString(\\"settings__section_appearance__avatars_rounded\\"))]}</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"avatar_shape\\" value=\\"star\\" type=\\"radio\\" id=\\"{{view.cid}}-star\\" />\\n                                        <label for=\\"{{view.cid}}-star\\">{[print(xabber.getString(\\"settings__section_appearance__avatars_star\\"))]}</label>\\n                                    </p>\\n                                </form>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n\\n                <div data-header=\'{[print(xabber.getString(\\"settings__menu_item__notifications\\"))]}\'  class=\\"settings-block-wrap notifications hidden\\">\\n                    <div class=\\"settings-subblock-wrap\\">\\n                        <div class=\\"block-header\\">\\n                            <span class=\\"block-name\\">{[print(xabber.getString(\\"settings__section_notifications__web_notifications\\"))]}</span>\\n                        </div>\\n                        <div class=\\"setting notifications field-wrap\\">\\n                            <div class=\\"input-field checkbox-field\\">\\n                                <input type=\\"checkbox\\" class=\\"filled-in\\" id=\\"notifications\\"/>\\n                                <label for=\\"notifications\\">{[print(xabber.getString(\\"settings__section_notifications__toggle_desktop_notifications\\"))]}</label>\\n                            </div>\\n                        </div>\\n                        <div class=\\"setting-name\\">{[print(xabber.getString(\\"settings__section_notifications__volume\\"))]}</div>\\n                        <div class=\\"setting volume-setting\\">\\n                            <i class=\\"mdi mdi-24px mdi-volume-low\\"></i>\\n                            <form action=\\"#\\">\\n                                <div class=\\"disabled hidden\\"></div>\\n                                <p class=\\"range-field\\">\\n                                    <input type=\\"range\\" id=\\"notifications_volume\\" min=\\"0\\" max=\\"100\\" />\\n                                </p>\\n                            </form>\\n                            <i class=\\"mdi mdi-24px mdi-volume-high\\"></i>\\n                        </div>\\n                    </div>\\n                    <div class=\\"settings-subblock-wrap\\">\\n                        <div class=\\"block-header\\">\\n                            <span class=\\"block-name\\">{[print(xabber.getString(\\"settings__section_notifications__chats\\"))]}</span>\\n                        </div>\\n                        <div class=\\"block-subheader\\">\\n                            <span class=\\"block-name\\">{[print(xabber.getString(\\"settings__section_notifications__private_chats\\"))]}</span>\\n                        </div>\\n                        <div class=\\"setting private-notifications field-wrap\\">\\n                            <div class=\\"input-field checkbox-field\\">\\n                                <input type=\\"checkbox\\" class=\\"filled-in\\" id=\\"private-notifications\\"/>\\n                                <label for=\\"private-notifications\\">{[print(xabber.getString(\\"settings__section_notifications__private_chats_notifications\\"))]}</label>\\n                            </div>\\n                        </div>\\n                        <div class=\\"settings-shifted-block\\">\\n                            <div class=\\"setting message-preview private-preview field-wrap\\">\\n                                <div class=\\"input-field checkbox-field\\">\\n                                    <input type=\\"checkbox\\" class=\\"filled-in\\" id=\\"preview_private\\"/>\\n                                    <label for=\\"preview_private\\">{[print(xabber.getString(\\"settings__section_notifications__toggle_message_preview\\"))]}</label>\\n                                </div>\\n                            </div>\\n                            <div class=\\"setting-name\\">{[print(xabber.getString(\\"settings__menu_item__sounds\\"))]}</div>\\n                            <div class=\\"setting sound radio-button field-wrap\\">\\n                                <div class=\\"field radio-field clickable-field\\">\\n                                    <form action=\\"#\\">\\n                                        <p>\\n                                            <input class=\\"with-gap\\" name=\\"private_sound\\" value=\\"\\" type=\\"radio\\" id=\\"{{view.cid}}-private-sound-no\\" />\\n                                            <label for=\\"{{view.cid}}-private-sound-no\\">No sound</label>\\n                                        </p>\\n                                        <p>\\n                                            <input class=\\"with-gap\\" name=\\"private_sound\\" value=\\"beep_up\\" type=\\"radio\\" id=\\"{{view.cid}}-private-sound-beep-up\\" />\\n                                            <label for=\\"{{view.cid}}-private-sound-beep-up\\">Beep Up</label>\\n                                        </p>\\n                                        <p>\\n                                            <input class=\\"with-gap\\" name=\\"private_sound\\" value=\\"tiny_noize\\" type=\\"radio\\" id=\\"{{view.cid}}-private-sound-tiny-noize\\" />\\n                                            <label for=\\"{{view.cid}}-private-sound-tiny-noize\\">Tiny Noize</label>\\n                                        </p>\\n                                        <p>\\n                                            <input class=\\"with-gap\\" name=\\"private_sound\\" value=\\"retro_game\\" type=\\"radio\\" id=\\"{{view.cid}}-private-sound-retro-game\\" />\\n                                            <label for=\\"{{view.cid}}-private-sound-retro-game\\">Retro Game</label>\\n                                        </p>\\n                                        <p>\\n                                            <input class=\\"with-gap\\" name=\\"private_sound\\" value=\\"pixel_beep\\" type=\\"radio\\" id=\\"{{view.cid}}-private-sound-pixel-beep\\" />\\n                                            <label for=\\"{{view.cid}}-private-sound-pixel-beep\\">Pixel Beep</label>\\n                                        </p>\\n                                        <p>\\n                                            <input class=\\"with-gap\\" name=\\"private_sound\\" value=\\"beep_positive\\" type=\\"radio\\" id=\\"{{view.cid}}-private-sound-beep-positive\\" />\\n                                            <label for=\\"{{view.cid}}-private-sound-beep-positive\\">Beep Positive</label>\\n                                        </p>\\n                                        <p>\\n                                            <input class=\\"with-gap\\" name=\\"private_sound\\" value=\\"good_chime\\" type=\\"radio\\" id=\\"{{view.cid}}-private-sound-good-chime\\" />\\n                                            <label for=\\"{{view.cid}}-private-sound-good-chime\\">Good Chime</label>\\n                                        </p>\\n                                        <p>\\n                                            <input class=\\"with-gap\\" name=\\"private_sound\\" value=\\"cellular_click\\" type=\\"radio\\" id=\\"{{view.cid}}-private-sound-cellular-click\\" />\\n                                            <label for=\\"{{view.cid}}-private-sound-cellular-click\\">Cellular Click</label>\\n                                        </p>\\n                                        <p>\\n                                            <input class=\\"with-gap\\" name=\\"private_sound\\" value=\\"bleep\\" type=\\"radio\\" id=\\"{{view.cid}}-private-sound-bleep\\" />\\n                                            <label for=\\"{{view.cid}}-private-sound-bleep\\">Bleep</label>\\n                                        </p>\\n                                        <p>\\n                                            <input class=\\"with-gap\\" name=\\"private_sound\\" value=\\"mono_u\\" type=\\"radio\\" id=\\"{{view.cid}}-private-sound-mono-u\\" />\\n                                            <label for=\\"{{view.cid}}-private-sound-mono-u\\">Mono U</label>\\n                                        </p>\\n                                        <p>\\n                                            <input class=\\"with-gap\\" name=\\"private_sound\\" value=\\"plop\\" type=\\"radio\\" id=\\"{{view.cid}}-private-sound-plop\\" />\\n                                            <label for=\\"{{view.cid}}-private-sound-plop\\">Plop</label>\\n                                        </p>\\n                                        <p>\\n                                            <input class=\\"with-gap\\" name=\\"private_sound\\" value=\\"ether\\" type=\\"radio\\" id=\\"{{view.cid}}-private-sound-ether\\" />\\n                                            <label for=\\"{{view.cid}}-private-sound-ether\\">Ether</label>\\n                                        </p>\\n                                        <p>\\n                                            <input class=\\"with-gap\\" name=\\"private_sound\\" value=\\"pop\\" type=\\"radio\\" id=\\"{{view.cid}}-private-sound-pop\\" />\\n                                            <label for=\\"{{view.cid}}-private-sound-pop\\">Pop</label>\\n                                        </p>\\n                                        <p>\\n                                            <input class=\\"with-gap\\" name=\\"private_sound\\" value=\\"computer_chime\\" type=\\"radio\\" id=\\"{{view.cid}}-private-sound-computer-chime\\" />\\n                                            <label for=\\"{{view.cid}}-private-sound-computer-chime\\">Computer Chime</label>\\n                                        </p>\\n                                    </form>\\n                                </div>\\n                            </div>\\n\\n                        </div>\\n                        <div class=\\"block-subheader\\">\\n                            <span class=\\"block-name\\">{[print(xabber.getString(\\"settings__section_notifications__group_chats\\"))]}</span>\\n                        </div>\\n                        <div class=\\"setting group-notifications field-wrap\\">\\n                            <div class=\\"input-field checkbox-field\\">\\n                                <input type=\\"checkbox\\" class=\\"filled-in\\" id=\\"group-notifications\\"/>\\n                                <label for=\\"group-notifications\\">{[print(xabber.getString(\\"settings__section_notifications__group_chats_notifications\\"))]}</label>\\n                            </div>\\n                        </div>\\n                        <div class=\\"settings-shifted-block\\">\\n                            <div class=\\"setting message-preview group-preview field-wrap\\">\\n                                <div class=\\"input-field checkbox-field\\">\\n                                    <input type=\\"checkbox\\" class=\\"filled-in\\" id=\\"preview_group\\"/>\\n                                    <label for=\\"preview_group\\">{[print(xabber.getString(\\"settings__section_notifications__toggle_message_preview\\"))]}</label>\\n                                </div>\\n                            </div>\\n                            <div class=\\"setting-name\\">{[print(xabber.getString(\\"settings__menu_item__sounds\\"))]}</div>\\n                            <div class=\\"setting sound radio-button field-wrap\\">\\n                                <div class=\\"field radio-field clickable-field\\">\\n                                    <form action=\\"#\\">\\n                                        <p>\\n                                            <input class=\\"with-gap\\" name=\\"group_sound\\" value=\\"\\" type=\\"radio\\" id=\\"{{view.cid}}-group-sound-no\\" />\\n                                            <label for=\\"{{view.cid}}-group-sound-no\\">No sound</label>\\n                                        </p>\\n                                        <p>\\n                                            <input class=\\"with-gap\\" name=\\"group_sound\\" value=\\"beep_up\\" type=\\"radio\\" id=\\"{{view.cid}}-group-sound-beep-up\\" />\\n                                            <label for=\\"{{view.cid}}-group-sound-beep-up\\">Beep Up</label>\\n                                        </p>\\n                                        <p>\\n                                            <input class=\\"with-gap\\" name=\\"group_sound\\" value=\\"tiny_noize\\" type=\\"radio\\" id=\\"{{view.cid}}-group-sound-tiny-noize\\" />\\n                                            <label for=\\"{{view.cid}}-group-sound-tiny-noize\\">Tiny Noize</label>\\n                                        </p>\\n                                        <p>\\n                                            <input class=\\"with-gap\\" name=\\"group_sound\\" value=\\"retro_game\\" type=\\"radio\\" id=\\"{{view.cid}}-group-sound-retro-game\\" />\\n                                            <label for=\\"{{view.cid}}-group-sound-retro-game\\">Retro Game</label>\\n                                        </p>\\n                                        <p>\\n                                            <input class=\\"with-gap\\" name=\\"group_sound\\" value=\\"pixel_beep\\" type=\\"radio\\" id=\\"{{view.cid}}-group-sound-pixel-beep\\" />\\n                                            <label for=\\"{{view.cid}}-group-sound-pixel-beep\\">Pixel Beep</label>\\n                                        </p>\\n                                        <p>\\n                                            <input class=\\"with-gap\\" name=\\"group_sound\\" value=\\"beep_positive\\" type=\\"radio\\" id=\\"{{view.cid}}-group-sound-beep-positive\\" />\\n                                            <label for=\\"{{view.cid}}-group-sound-beep-positive\\">Beep Positive</label>\\n                                        </p>\\n                                        <p>\\n                                            <input class=\\"with-gap\\" name=\\"group_sound\\" value=\\"good_chime\\" type=\\"radio\\" id=\\"{{view.cid}}-group-sound-good-chime\\" />\\n                                            <label for=\\"{{view.cid}}-group-sound-good-chime\\">Good Chime</label>\\n                                        </p>\\n                                        <p>\\n                                            <input class=\\"with-gap\\" name=\\"group_sound\\" value=\\"cellular_click\\" type=\\"radio\\" id=\\"{{view.cid}}-group-sound-cellular-click\\" />\\n                                            <label for=\\"{{view.cid}}-group-sound-cellular-click\\">Cellular Click</label>\\n                                        </p>\\n                                        <p>\\n                                            <input class=\\"with-gap\\" name=\\"group_sound\\" value=\\"bleep\\" type=\\"radio\\" id=\\"{{view.cid}}-group-sound-bleep\\" />\\n                                            <label for=\\"{{view.cid}}-group-sound-bleep\\">Bleep</label>\\n                                        </p>\\n                                        <p>\\n                                            <input class=\\"with-gap\\" name=\\"group_sound\\" value=\\"mono_u\\" type=\\"radio\\" id=\\"{{view.cid}}-group-sound-mono-u\\" />\\n                                            <label for=\\"{{view.cid}}-group-sound-mono-u\\">Mono U</label>\\n                                        </p>\\n                                        <p>\\n                                            <input class=\\"with-gap\\" name=\\"group_sound\\" value=\\"plop\\" type=\\"radio\\" id=\\"{{view.cid}}-group-sound-plop\\" />\\n                                            <label for=\\"{{view.cid}}-group-sound-plop\\">Plop</label>\\n                                        </p>\\n                                        <p>\\n                                            <input class=\\"with-gap\\" name=\\"group_sound\\" value=\\"ether\\" type=\\"radio\\" id=\\"{{view.cid}}-group-sound-ether\\" />\\n                                            <label for=\\"{{view.cid}}-group-sound-ether\\">Ether</label>\\n                                        </p>\\n                                        <p>\\n                                            <input class=\\"with-gap\\" name=\\"group_sound\\" value=\\"pop\\" type=\\"radio\\" id=\\"{{view.cid}}-group-sound-pop\\" />\\n                                            <label for=\\"{{view.cid}}-group-sound-pop\\">Pop</label>\\n                                        </p>\\n                                        <p>\\n                                            <input class=\\"with-gap\\" name=\\"group_sound\\" value=\\"computer_chime\\" type=\\"radio\\" id=\\"{{view.cid}}-group-sound-computer-chime\\" />\\n                                            <label for=\\"{{view.cid}}-group-sound-computer-chime\\">Computer Chime</label>\\n                                        </p>\\n                                    </form>\\n                                </div>\\n                            </div>\\n                        </div>\\n\\n                    </div>\\n                    <div class=\\"settings-subblock-wrap\\">\\n                        <div class=\\"block-header\\">\\n                            <span class=\\"block-name\\">{[print(xabber.getString(\\"settings__section_notifications__calls\\"))]}</span>\\n                        </div>\\n                        <div class=\\"setting-name\\">{[print(xabber.getString(\\"settings__section_notifications__ringtone\\"))]}</div>\\n                        <div class=\\"setting sound radio-button field-wrap\\">\\n                            <div class=\\"field radio-field clickable-field\\">\\n                                <form action=\\"#\\">\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"call_sound\\" value=\\"call\\" type=\\"radio\\" id=\\"{{view.cid}}-call-sound-call\\" />\\n                                        <label for=\\"{{view.cid}}-call-sound-call\\">Call</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"call_sound\\" value=\\"beep_up\\" type=\\"radio\\" id=\\"{{view.cid}}-call-sound-beep-up\\" />\\n                                        <label for=\\"{{view.cid}}-call-sound-beep-up\\">Beep Up</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"call_sound\\" value=\\"tiny_noize\\" type=\\"radio\\" id=\\"{{view.cid}}-call-sound-tiny-noize\\" />\\n                                        <label for=\\"{{view.cid}}-call-sound-tiny-noize\\">Tiny Noize</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"call_sound\\" value=\\"retro_game\\" type=\\"radio\\" id=\\"{{view.cid}}-call-sound-retro-game\\" />\\n                                        <label for=\\"{{view.cid}}-call-sound-retro-game\\">Retro Game</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"call_sound\\" value=\\"pixel_beep\\" type=\\"radio\\" id=\\"{{view.cid}}-call-sound-pixel-beep\\" />\\n                                        <label for=\\"{{view.cid}}-call-sound-pixel-beep\\">Pixel Beep</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"call_sound\\" value=\\"beep_positive\\" type=\\"radio\\" id=\\"{{view.cid}}-call-sound-beep-positive\\" />\\n                                        <label for=\\"{{view.cid}}-call-sound-beep-positive\\">Beep Positive</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"call_sound\\" value=\\"good_chime\\" type=\\"radio\\" id=\\"{{view.cid}}-call-sound-good-chime\\" />\\n                                        <label for=\\"{{view.cid}}-call-sound-good-chime\\">Good Chime</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"call_sound\\" value=\\"cellular_click\\" type=\\"radio\\" id=\\"{{view.cid}}-call-sound-cellular-click\\" />\\n                                        <label for=\\"{{view.cid}}-call-sound-cellular-click\\">Cellular Click</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"call_sound\\" value=\\"bleep\\" type=\\"radio\\" id=\\"{{view.cid}}-call-sound-bleep\\" />\\n                                        <label for=\\"{{view.cid}}-call-sound-bleep\\">Bleep</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"call_sound\\" value=\\"mono_u\\" type=\\"radio\\" id=\\"{{view.cid}}-call-sound-mono-u\\" />\\n                                        <label for=\\"{{view.cid}}-call-sound-mono-u\\">Mono U</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"call_sound\\" value=\\"plop\\" type=\\"radio\\" id=\\"{{view.cid}}-call-sound-plop\\" />\\n                                        <label for=\\"{{view.cid}}-call-sound-plop\\">Plop</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"call_sound\\" value=\\"ether\\" type=\\"radio\\" id=\\"{{view.cid}}-call-sound-ether\\" />\\n                                        <label for=\\"{{view.cid}}-call-sound-ether\\">Ether</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"call_sound\\" value=\\"pop\\" type=\\"radio\\" id=\\"{{view.cid}}-call-sound-pop\\" />\\n                                        <label for=\\"{{view.cid}}-call-sound-pop\\">Pop</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"call_sound\\" value=\\"computer_chime\\" type=\\"radio\\" id=\\"{{view.cid}}-call-sound-computer-chime\\" />\\n                                        <label for=\\"{{view.cid}}-call-sound-computer-chime\\">Computer Chime</label>\\n                                    </p>\\n                                </form>\\n                            </div>\\n                        </div>\\n                        <div class=\\"setting-name\\">{[print(xabber.getString(\\"settings__section_notifications__dialtone\\"))]}</div>\\n                        <div class=\\"setting sound radio-button field-wrap\\">\\n                            <div class=\\"field radio-field clickable-field\\">\\n                                <form action=\\"#\\">\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"dialtone_sound\\" value=\\"call\\" type=\\"radio\\" id=\\"{{view.cid}}-dialtone-sound-connecting\\" />\\n                                        <label for=\\"{{view.cid}}-dialtone-sound-connecting\\">Call</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"dialtone_sound\\" value=\\"attention\\" type=\\"radio\\" id=\\"{{view.cid}}-dialtone-sound-attention\\" />\\n                                        <label for=\\"{{view.cid}}-dialtone-sound-attention\\">Attention</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"dialtone_sound\\" value=\\"beep_up\\" type=\\"radio\\" id=\\"{{view.cid}}-dialtone-sound-beep-up\\" />\\n                                        <label for=\\"{{view.cid}}-dialtone-sound-beep-up\\">Beep Up</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"dialtone_sound\\" value=\\"tiny_noize\\" type=\\"radio\\" id=\\"{{view.cid}}-dialtone-sound-tiny-noize\\" />\\n                                        <label for=\\"{{view.cid}}-dialtone-sound-tiny-noize\\">Tiny Noize</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"dialtone_sound\\" value=\\"retro_game\\" type=\\"radio\\" id=\\"{{view.cid}}-dialtone-sound-retro-game\\" />\\n                                        <label for=\\"{{view.cid}}-dialtone-sound-retro-game\\">Retro Game</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"dialtone_sound\\" value=\\"pixel_beep\\" type=\\"radio\\" id=\\"{{view.cid}}-dialtone-sound-pixel-beep\\" />\\n                                        <label for=\\"{{view.cid}}-dialtone-sound-pixel-beep\\">Pixel Beep</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"dialtone_sound\\" value=\\"beep_positive\\" type=\\"radio\\" id=\\"{{view.cid}}-dialtone-sound-beep-positive\\" />\\n                                        <label for=\\"{{view.cid}}-dialtone-sound-beep-positive\\">Beep Positive</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"dialtone_sound\\" value=\\"good_chime\\" type=\\"radio\\" id=\\"{{view.cid}}-dialtone-sound-good-chime\\" />\\n                                        <label for=\\"{{view.cid}}-dialtone-sound-good-chime\\">Good Chime</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"dialtone_sound\\" value=\\"cellular_click\\" type=\\"radio\\" id=\\"{{view.cid}}-dialtone-sound-cellular-click\\" />\\n                                        <label for=\\"{{view.cid}}-dialtone-sound-cellular-click\\">Cellular Click</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"dialtone_sound\\" value=\\"bleep\\" type=\\"radio\\" id=\\"{{view.cid}}-dialtone-sound-bleep\\" />\\n                                        <label for=\\"{{view.cid}}-dialtone-sound-bleep\\">Bleep</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"dialtone_sound\\" value=\\"mono_u\\" type=\\"radio\\" id=\\"{{view.cid}}-dialtone-sound-mono-u\\" />\\n                                        <label for=\\"{{view.cid}}-dialtone-sound-mono-u\\">Mono U</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"dialtone_sound\\" value=\\"plop\\" type=\\"radio\\" id=\\"{{view.cid}}-dialtone-sound-plop\\" />\\n                                        <label for=\\"{{view.cid}}-dialtone-sound-plop\\">Plop</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"dialtone_sound\\" value=\\"ether\\" type=\\"radio\\" id=\\"{{view.cid}}-dialtone-sound-ether\\" />\\n                                        <label for=\\"{{view.cid}}-dialtone-sound-ether\\">Ether</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"dialtone_sound\\" value=\\"pop\\" type=\\"radio\\" id=\\"{{view.cid}}-dialtone-sound-pop\\" />\\n                                        <label for=\\"{{view.cid}}-dialtone-sound-pop\\">Pop</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"dialtone_sound\\" value=\\"computer_chime\\" type=\\"radio\\" id=\\"{{view.cid}}-dialtone-sound-computer-chime\\" />\\n                                        <label for=\\"{{view.cid}}-dialtone-sound-computer-chime\\">Computer Chime</label>\\n                                    </p>\\n                                </form>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\"settings-subblock-wrap\\">\\n                        <div class=\\"block-header\\">\\n                            <span class=\\"block-name\\">{[print(xabber.getString(\\"settings__section_notifications__attention_calls\\"))]}</span>\\n                        </div>\\n                        <div class=\\"setting call-attention field-wrap\\">\\n                            <div class=\\"input-field checkbox-field\\">\\n                                <input type=\\"checkbox\\" class=\\"filled-in\\" id=\\"call_attention\\"/>\\n                                <label for=\\"call_attention\\">{[print(xabber.getString(\\"settings__section_notifications__toggle_call_attention\\"))]}</label>\\n                            </div>\\n                        </div>\\n                        <div class=\\"setting-name\\">{[print(xabber.getString(\\"settings__section_notifications__ringtone\\"))]}</div>\\n                        <div class=\\"setting sound radio-button field-wrap\\">\\n                            <div class=\\"field radio-field clickable-field\\">\\n                                <form action=\\"#\\">\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"attention_sound\\" value=\\"attention\\" type=\\"radio\\" id=\\"{{view.cid}}-attention-sound-attention\\" />\\n                                        <label for=\\"{{view.cid}}-attention-sound-attention\\">Attention</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"attention_sound\\" value=\\"beep_up\\" type=\\"radio\\" id=\\"{{view.cid}}-attention-sound-beep-up\\" />\\n                                        <label for=\\"{{view.cid}}-attention-sound-beep-up\\">Beep Up</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"attention_sound\\" value=\\"tiny_noize\\" type=\\"radio\\" id=\\"{{view.cid}}-attention-sound-tiny-noize\\" />\\n                                        <label for=\\"{{view.cid}}-attention-sound-tiny-noize\\">Tiny Noize</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"attention_sound\\" value=\\"retro_game\\" type=\\"radio\\" id=\\"{{view.cid}}-attention-sound-retro-game\\" />\\n                                        <label for=\\"{{view.cid}}-attention-sound-retro-game\\">Retro Game</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"attention_sound\\" value=\\"pixel_beep\\" type=\\"radio\\" id=\\"{{view.cid}}-attention-sound-pixel-beep\\" />\\n                                        <label for=\\"{{view.cid}}-attention-sound-pixel-beep\\">Pixel Beep</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"attention_sound\\" value=\\"beep_positive\\" type=\\"radio\\" id=\\"{{view.cid}}-attention-sound-beep-positive\\" />\\n                                        <label for=\\"{{view.cid}}-attention-sound-beep-positive\\">Beep Positive</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"attention_sound\\" value=\\"good_chime\\" type=\\"radio\\" id=\\"{{view.cid}}-attention-sound-good-chime\\" />\\n                                        <label for=\\"{{view.cid}}-attention-sound-good-chime\\">Good Chime</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"attention_sound\\" value=\\"cellular_click\\" type=\\"radio\\" id=\\"{{view.cid}}-attention-sound-cellular-click\\" />\\n                                        <label for=\\"{{view.cid}}-attention-sound-cellular-click\\">Cellular Click</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"attention_sound\\" value=\\"bleep\\" type=\\"radio\\" id=\\"{{view.cid}}-attention-sound-bleep\\" />\\n                                        <label for=\\"{{view.cid}}-attention-sound-bleep\\">Bleep</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"attention_sound\\" value=\\"mono_u\\" type=\\"radio\\" id=\\"{{view.cid}}-attention-sound-mono-u\\" />\\n                                        <label for=\\"{{view.cid}}-attention-sound-mono-u\\">Mono U</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"attention_sound\\" value=\\"plop\\" type=\\"radio\\" id=\\"{{view.cid}}-attention-sound-plop\\" />\\n                                        <label for=\\"{{view.cid}}-attention-sound-plop\\">Plop</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"attention_sound\\" value=\\"ether\\" type=\\"radio\\" id=\\"{{view.cid}}-attention-sound-ether\\" />\\n                                        <label for=\\"{{view.cid}}-attention-sound-ether\\">Ether</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"attention_sound\\" value=\\"pop\\" type=\\"radio\\" id=\\"{{view.cid}}-attention-sound-pop\\" />\\n                                        <label for=\\"{{view.cid}}-attention-sound-pop\\">Pop</label>\\n                                    </p>\\n                                    <p>\\n                                        <input class=\\"with-gap\\" name=\\"attention_sound\\" value=\\"computer_chime\\" type=\\"radio\\" id=\\"{{view.cid}}-attention-sound-computer-chime\\" />\\n                                        <label for=\\"{{view.cid}}-attention-sound-computer-chime\\">Computer Chime</label>\\n                                    </p>\\n                                </form>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n\\n                <div data-header=\'{[print(xabber.getString(\\"settings__menu_item__privacy\\"))]}\'  class=\\"settings-block-wrap privacy hidden\\">\\n                    <div class=\\"setting load-media field-wrap\\">\\n                        <div class=\\"input-field checkbox-field\\">\\n                            <input type=\\"checkbox\\" class=\\"filled-in\\" id=\\"load-media\\"/>\\n                            <label for=\\"load-media\\">{[print(xabber.getString(\\"settings__section_privacy__load_media\\"))]}</label>\\n                        </div>\\n                    </div>\\n                    <div class=\\"setting typing-notifications field-wrap\\">\\n                        <div class=\\"input-field checkbox-field\\">\\n                            <input type=\\"checkbox\\" class=\\"filled-in\\" id=\\"typing-notifications\\"/>\\n                            <label for=\\"typing-notifications\\">{[print(xabber.getString(\\"settings__section_privacy__typing_notifications\\"))]}</label>\\n                        </div>\\n                    </div>\\n                    <div class=\\"setting mapping-service field-wrap\\">\\n                        <div class=\\"input-field checkbox-field\\">\\n                            <input type=\\"checkbox\\" class=\\"filled-in\\" id=\\"mapping-service\\"/>\\n                            <label for=\\"mapping-service\\">{[print(xabber.getString(\\"settings__section_privacy__mapping_service\\"))]}</label>\\n                        </div>\\n                    </div>\\n                </div>\\n\\n                <div data-header=\'{[print(xabber.getString(\\"settings__menu_item__interface_language\\"))]}\'  class=\\"settings-block-wrap interface_language hidden\\">\\n                    <div class=\\"setting interface-language-setting\\">\\n                        <div class=\\"languages-list field radio-field clickable-field\\">\\n                            <form action=\\"#\\">\\n                                <div class=\\"language-item\\">\\n                                    <input class=\\"with-gap\\" name=\\"language\\" value=\\"default\\" type=\\"radio\\" id=\\"{{view.cid}}-default\\" />\\n                                    <label for=\\"{{view.cid}}-default\\">{[print(xabber.getString(\\"settings__languages_list___item_default\\", [languages[xabber.get(\\"default_language\\") || \'en\']]))]}</label>\\n                                </div>\\n                                {[if (window.navigator.language.indexOf(xabber.get(\\"default_language\\")) < 0) {]}\\n                                {[}]}\\n                                {[for (let lang in constants.languages) { if (!lang || lang == xabber.get(\\"default_language\\")) continue;]}\\n                                <div class=\\"language-item\\">\\n                                    <input class=\\"with-gap\\" name=\\"language\\" value=\\"{{lang}}\\" type=\\"radio\\" id=\\"{{view.cid}}-{{lang}}\\" />\\n                                    <label for=\\"{{view.cid}}-{{lang}}\\">{[print(constants.languages[lang]);]}</label>\\n                                    {[let locale = Object.keys(client_translation_progress).find(key => !lang.indexOf(key)) || constants.languages_another_locales[lang] && Object.keys(client_translation_progress).find(key => !constants.languages_another_locales[lang].indexOf(key));]}\\n                                    {[if (locale) { let progress = client_translation_progress[locale];]}<div class=\\"translation-progress\\">{[print((progress == 100) ? xabber.getString(\\"settings__section_interface_language__translation_progress_fully\\") : xabber.getString(\\"settings__section_interface_language__translation_progress\\", [`${progress}%`]))]}</div>{[}]}\\n                                </div>\\n                                {[}]}\\n                            </form>\\n                        </div>\\n                        <div class=\\"description\\"></div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/base/settings.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/base/toolbar.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"toolbar-item all-chats active\\" title=\'{[print(xabber.getString(\\"toolbar__menu_item__all_chats\\"))]}\'>\\n    <div class=\\"border\\"></div>\\n    <img class=\\"logo\\" src=\\"{{TOOLBAR_LOGO}}\\">\\n    <span class=\\"all-msg-indicator\\"></span>\\n</div>\\n\\n<div class=\\"toolbar-item chats\\" title=\'{[print(xabber.getString(\\"toolbar__menu_item__chats\\"))]}\'>\\n    <div class=\\"border\\"></div>\\n    <i class=\\"toolbar-icon mdi mdi-24px mdi-message-text\\"></i>\\n    <span class=\\"msg-indicator\\"></span>\\n</div>\\n\\n<div class=\\"toolbar-item group-chats\\" title=\'{[print(xabber.getString(\\"toolbar__menu_item__groups\\"))]}\'>\\n    <div class=\\"border\\"></div>\\n    <svg class=\\"toolbar-icon mdi mdi-24px mdi-svg-template\\" data-svgname=\\"message-group\\"></svg>\\n    <span class=\\"group-msg-indicator\\"></span>\\n</div>\\n\\n<div class=\\"toolbar-item mentions\\" title=\'{[print(xabber.getString(\\"toolbar__menu_item__mentions\\"))]}\'>\\n    <div class=\\"border\\"></div>\\n    <svg class=\\"toolbar-icon mdi mdi-24px mdi-svg-template\\" viewBox=\\"0 0 24 24\\" data-svgname=\\"ic-at\\"></svg>\\n    <span class=\\"mentions-indicator\\"></span>\\n</div>\\n\\n<div class=\\"toolbar-item archive-chats\\" title=\'{[print(xabber.getString(\\"toolbar__menu_item__archive_chats\\"))]}\'>\\n    <div class=\\"border\\"></div>\\n    <i class=\\"toolbar-icon mdi mdi-24px mdi-archive\\"></i>\\n    <span class=\\"archive-msg-indicator hidden\\"></span>\\n</div>\\n\\n<div class=\\"toolbar-item contacts\\" title=\'{[print(xabber.getString(\\"category_title_contacts\\"))]}\'>\\n    <div class=\\"border\\"></div>\\n    <i class=\\"toolbar-icon mdi mdi-24px mdi-account-multiple\\"></i>\\n</div>\\n\\n<div class=\\"toolbar-item search hidden\\" title=\'{[print(xabber.getString(\\"search\\"))]}\'>\\n    <div class=\\"border\\"></div>\\n    <svg class=\\"toolbar-icon mdi mdi-24px mdi-svg-template\\" viewBox=\\"0 0 24 24\\" data-svgname=\\"ic-searching\\"></svg>\\n</div>\\n\\n<div class=\\"add-something-wrap\\">\\n    <div class=\\"toolbar-item dropdown-button add-something\\" data-activates=\\"{{view.cid}}-add\\" title=\'{[print(xabber.getString(\\"toolbar__button_add_tooltip\\"))]}\'>\\n        <i class=\\"toolbar-icon mdi mdi-24px mdi-plus\\"></i>\\n    </div>\\n\\n    <div id=\\"{{view.cid}}-add\\" class=\\"add-variants dropdown-content noselect\\">\\n        <div class=\\"add-variant contact\\">\\n            <i class=\\"mdi mdi-20px mdi-account-plus\\"></i>\\n            <span class=\\"text one-line\\">{[print(xabber.getString(\\"add_contact\\"))]}</span>\\n        </div>\\n        <div class=\\"add-variant public-groupchat\\">\\n            <i class=\\"mdi mdi-20px mdi-account-multiple-plus\\"></i>\\n            <span class=\\"text one-line\\">{[print(xabber.getString(\\"create_group\\"))]}</span>\\n        </div>\\n        <div class=\\"add-variant incognito-groupchat\\">\\n            <svg class=\\"mdi mdi-20px\\" viewBox=\\"0 0 24 24\\">\\n                <path d=\\"M13 11A3 3 0 1 0 10 8A3 3 0 0 0 13 11M13 7A1 1 0 1 1 12 8A1 1 0 0 1 13 7M17.11 10.86A5 5 0 0 0 17.11 5.14A2.91 2.91 0 0 1 18 5A3 3 0 0 1 18 11A2.91 2.91 0 0 1 17.11 10.86M13 13C7 13 7 17 7 17V19H19V17S19 13 13 13M9 17C9 16.71 9.32 15 13 15C16.5 15 16.94 16.56 17 17M24 17V19H21V17A5.6 5.6 0 0 0 19.2 13.06C24 13.55 24 17 24 17M8 12H5V15H3V12H0V10H3V7H5V10H8Z\\" />\\n            </svg>\\n            <span class=\\"text one-line\\">{[print(xabber.getString(\\"create_incognito_group\\"))]}</span>\\n        </div>\\n        <div class=\\"add-variant account\\">\\n            <i class=\\"mdi mdi-20px mdi-account-circle\\"></i>\\n            <span class=\\"text one-line\\">{[print(xabber.getString(\\"dialog_add__label_add_account\\"))]}</span>\\n        </div>\\n    </div>\\n</div>\\n\\n<div class=\\"divider noselect\\"></div>\\n\\n<div class=\\"accounts-wrap\\">\\n    <div class=\\"accounts\\">\\n    </div>\\n</div>\\n\\n<div class=\\"toolbar-bottom\\">\\n    {[if (SCREEN_ABOUT) {]}\\n    <div class=\\"toolbar-item about\\" title=\'{[print(xabber.getString(\\"about\\"))]}\'>\\n        <div class=\\"border\\"></div>\\n        <i class=\\"toolbar-icon mdi mdi-24px mdi-information\\"></i>\\n    </div>\\n    {[}]}\\n    <div class=\\"toolbar-item settings\\" title=\'{[print(xabber.getString(\\"settings\\"))]}\'>\\n        <div class=\\"border\\"></div>\\n        <i class=\\"toolbar-icon mdi mdi-24px mdi-settings\\"></i>\\n    </div>\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/base/toolbar.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/add_chat_account_item.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"account-item-wrap property-variant\\" data-jid=\\"{{jid}}\\">\\n    <div class=\\"circle-avatar noselect\\">\\n        <img>\\n    </div>\\n    <div class=\\"name-wrap\\">\\n        <div class=\\"name one-line\\">{{name}}</div>\\n        <div class=\\"jid one-line\\">{{jid}}</div>\\n    </div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/add_chat_account_item.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/chat_bottom.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("    <div class=\\"message-input-panel noselect\\">\\n        <div class=\\"my-avatar circle-avatar circle-image-fix\\"></div>\\n        <div class=\\"message-form\\">\\n            <div class=\\"fwd-messages-preview noselect hidden\\">\\n                <div class=\\"msg-border ground-color-700\\">\\n                </div>\\n                <div class=\\"msg-content\\">\\n                    <p class=\\"msg-author text-color-700 one-line\\"></p>\\n                    <p class=\\"msg-text one-line\\"></p>\\n                </div>\\n                <div class=\\"close-forward\\">\\n                    <i class=\\"mdi mdi-20px mdi-close hover-text-color-500\\"></i>\\n                </div>\\n            </div>\\n            <div class=\\"message-reference-preview hidden\\">\\n                <div class=\\"message-reference-preview-container\\">\\n                </div>\\n                <div class=\\"close-attachments\\">\\n                    <i class=\\"mdi mdi-20px mdi-close hover-text-color-500\\"></i>\\n                </div>\\n            </div>\\n            <div class=\\"input-field input-message\\">\\n                <div class=\\"mentions-list\\"></div>\\n                <div class=\\"rich-textarea-wrap notranslate\\">\\n                </div>\\n                <div class=\\"scrollbar-cover\\"></div>\\n                <div class=\\"insert-emoticon\\">\\n                    <i class=\\"mdi mdi-24px mdi-emoticon hover-text-color-500\\"></i>\\n                </div>\\n                <div class=\\"preview-preloader-container hidden\\" title=\'{[print(xabber.getString(\\"chat_bottom__preview_preloader_cancel\\"))]}\'>\\n                    <svg class=\\"preview-cancel-preloader mdi mdi-24px mdi-svg-template\\" data-svgname=\\"link\\"></svg>\\n                </div>\\n                <div class=\\"emoticons-panel-wrap\\">\\n                    <div class=\\"emoticons-panel\\"></div>\\n                    <div class=\\"emoji-menu\\"></div>\\n                    <div class=\\"uploading-emoticons\\">\\n                    <div class=\\"preloader-wrapper preloader-20px active visible\\">\\n                        <div class=\\"spinner-layer\\">\\n                            <div class=\\"circle-clipper left\\">\\n                                <div class=\\"circle\\"></div>\\n                            </div>\\n                            <div class=\\"gap-patch\\">\\n                                <div class=\\"circle\\"></div>\\n                            </div>\\n                            <div class=\\"circle-clipper right\\">\\n                                <div class=\\"circle\\"></div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\"input-voice-message\\">\\n                <div class=\\"voice-visualizer\\"></div>\\n                <div class=\\"timer\\">0:00</div>\\n                <div class=\\"voice-msg-status\\">{[print(xabber.getString(\\"chat_bottom__placeholder__cancel_write_voice\\"))]}</div>\\n            </div>\\n            <div class=\\"input-toolbar\\">\\n                <div class=\\"attach attach-file\\">\\n                    <input type=\\"file\\" title=\'{[print(xabber.getString(\\"chat_bottom__tooltip_send_file\\"))]}\' multiple>\\n                    <i class=\\"mdi mdi-24px mdi-paperclip\\"></i>\\n                </div>\\n                <div class=\\"attach attach-media\\" title=\'{[print(xabber.getString(\\"chat_bottom__tooltip_send_media\\"))]}\'>\\n                    <i class=\\"mdi mdi-24px mdi-file-image\\"></i>\\n                </div>\\n                <div class=\\"attach attach-location\\" title=\'{[print(xabber.getString(\\"chat_bottom__tooltip_send_location\\"))]}\'>\\n                    <input type=\\"text\\" hidden title=\'{[print(xabber.getString(\\"chat_bottom__tooltip_send_location\\"))]}\'>\\n                    <i class=\\"mdi mdi-24px mdi-map-marker\\"></i>\\n                </div>\\n                <div title=\\"Format text\\" class=\\"format-text\\">\\n                    <i class=\\"mdi mdi-24px mdi-format-text\\"></i>\\n                </div>\\n                <div class=\\"last-emoticons\\">\\n                </div>\\n                <div class=\\"account-info-wrap\\">\\n                    <div class=\\"account-jid text-color-700\\"></div>\\n                    <div class=\\"account-nickname text-color-700\\"></div>\\n                    <div class=\\"account-badge\\"></div>\\n                    <div class=\\"account-role ground-color-700\\"></div>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\"send-area\\">\\n            <i class=\\"send-message mdi mdi-32px mdi-send text-color-700 hover-text-color-500 hidden\\"></i>\\n            <i class=\\"mdi mdi-32px mdi-microphone attach-voice-message text-color-700 hover-text-color-500\\"></i>\\n        </div>\\n    </div>\\n    <div class=\\"blocked-msg hidden\\">{[print(xabber.getString(\\"chat_bottom__placeholder__blocked\\"))]}</div>\\n    <div class=\\"message-actions-panel noselect hidden\\">\\n        <div class=\\"button-wrap reply-message-wrap\\">\\n            <i class=\\"action-button reply-message mdi ground-color-700 mdi-reply mdi-24px\\"></i>\\n            <div class=\\"button-name\\"><span class=\\"text-color-500\\">{[print(xabber.getString(\\"chat_reply\\").slice(0,1))]}</span>{[print(xabber.getString(\\"chat_reply\\").slice(1))]}</div>\\n        </div>\\n        <div class=\\"button-wrap forward-message-wrap\\">\\n            <i class=\\"action-button forward-message mdi ground-color-700 mdi-forward mdi-24px\\"></i>\\n            <div class=\\"button-name\\"><span class=\\"text-color-500\\">{[print(xabber.getString(\\"chat_froward\\").slice(0,1))]}</span>{[print(xabber.getString(\\"chat_froward\\").slice(1))]}</div>\\n        </div>\\n        <div class=\\"button-wrap copy-message-wrap\\">\\n            <i class=\\"action-button copy-message mdi ground-color-700 mdi-content-copy mdi-24px\\"></i>\\n            <div class=\\"button-name\\"><span class=\\"text-color-500\\">{[print(xabber.getString(\\"message_copy\\").slice(0,1))]}</span>{[print(xabber.getString(\\"message_copy\\").slice(1))]}</div>\\n        </div>\\n        <div class=\\"button-wrap delete-message-wrap\\">\\n            <i class=\\"action-button delete-message mdi ground-color-700 mdi-delete mdi-24px\\"></i>\\n            <div class=\\"button-name\\"><span class=\\"text-color-500\\">{[print(xabber.getString(\\"delete\\").slice(0,1))]}</span>{[print(xabber.getString(\\"delete\\").slice(1))]}</div>\\n        </div>\\n        <div class=\\"button-wrap edit-message-wrap\\">\\n            <i class=\\"action-button edit-message mdi ground-color-700 mdi-pencil mdi-24px\\"></i>\\n            <div class=\\"button-name\\"><span class=\\"text-color-500\\">{[print(xabber.getString(\\"message_edit\\").slice(0,1))]}</span>{[print(xabber.getString(\\"message_edit\\").slice(1))]}</div>\\n        </div>\\n        <div class=\\"button-wrap pin-message-wrap\\">\\n            <svg class=\\"action-button pin-message ground-color-700\\" viewBox=\\"0 0 24 24\\">\\n                <path fill=\\"#FFF\\" d=\\"M16,12V4H17V2H7V4H8V12L6,14V16H11.2V22H12.8V16H18V14L16,12Z\\"/>\\n            </svg>\\n            <div class=\\"button-name\\"><span class=\\"text-color-500\\">{[print(xabber.getString(\\"message_pin\\").slice(0,1))]}</span>{[print(xabber.getString(\\"message_pin\\").slice(1))]}</div>\\n        </div>\\n        <div class=\\"button-wrap cancel-message-wrap\\">\\n            <i class=\\"action-button close-message-panel mdi mdi-close mdi-24px\\"></i>\\n            <div class=\\"button-name\\">{[print(xabber.getString(\\"cancel\\"))]}</div>\\n        </div>\\n    </div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/chat_bottom.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/chat_content.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("  <div class=\\"search-form-header\\">\\n    <div class=\\"messages-search-form search-form\\">\\n        <i class=\\"search-icon mdi mdi-20px mdi-magnify\\"></i>\\n        <input type=\\"text\\" class=\\"search-input simple-input-field\\" tabindex=\\"1\\" placeholder=\'{[print(xabber.getString(\\"chat__search_messages_panel__placeholder\\"))]}\' autofocus>\\n    </div>\\n    <div class=\\"text-color-700 btn-cancel-searching\\">{[print(xabber.getString(\\"cancel\\"))]}</div>\\n</div>\\n<div class=\\"pinned-message\\"></div>\\n<div class=\\"elements-in-top\\">\\n    <div class=\\"subscription-buttons-wrap hidden\\"/>\\n    <div class=\\"chat-day-indicator fixed-day-indicator-wrap hidden\\"><div class=\\"fixed-day-indicator\\"></div></div>\\n</div>\\n<div class=\\"load-history-feedback hidden\\"></div>\\n<div class=\\"participant-messages-header hidden\\"><div class=\\"messages-by-header\\">{[print(xabber.getString(\\"chat__placeholder_participant_messages__messages_by\\"))]} <div class=\\"participant-nickname text-color-700\\"></div></div><div class=\\"btn-cancel-selection\\">{[print(xabber.getString(\\"cancel\\"))]}</div><div class=\\"text-color-700 btn-retract-messages\\">{[print(xabber.getString(\\"chat_settings__button_delete_all\\"))]}</div></div>\\n<div class=\\"chat-content\\">\\n</div>\\n<div class=\\"chat-notification hidden one-line\\"></div>\\n<i class=\\"mdi mdi-36px back-to-bottom mdi-chevron-down\\"></i>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/chat_content.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/chat_content_contact.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"search-wrap\\">\\n    <div class=\\"search-content\\">\\n        <div class=\\"search-form-header block-header\\">\\n            <i class=\\"details-icon btn-back mdi mdi-24px mdi-arrow-left\\"></i>\\n            <div class=\\"messages-search-form search-form \\">\\n                <input type=\\"text\\" class=\\"search-input simple-input-field\\" tabindex=\\"1\\" placeholder=\'{[print(xabber.getString(\\"chat__search_messages_panel__placeholder\\"))]}\' autofocus>\\n            </div>\\n            <i class=\\"close-search-icon mdi mdi-24px mdi-close\\"></i>\\n        </div>\\n        <div class=\\"search-messages-content-wrap\\">\\n            <div class=\\"search-results\\">\\n                {[print(xabber.getString(\\"nothing_was_searched\\"))]}\\n            </div>\\n            <div class=\\"preloader-wrap\\">\\n                <div class=\\"preloader-wrapper preloader-20px active\\">\\n                    <div class=\\"spinner-layer\\">\\n                        <div class=\\"circle-clipper left\\">\\n                            <div class=\\"circle\\"></div>\\n                        </div>\\n                        <div class=\\"gap-patch\\">\\n                            <div class=\\"circle\\"></div>\\n                        </div>\\n                        <div class=\\"circle-clipper right\\">\\n                            <div class=\\"circle\\"></div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\"messages-count\\">\\n            </div>\\n            <div class=\\"chat-content\\">\\n            </div>\\n        </div>\\n    </div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/chat_content_contact.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/chat_head.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"chat-head-details\\"></div>\\n<div class=\\"circle-avatar\\"/>\\n<div class=\\"contact-status hide-offline\\"/>\\n<div class=\\"chat-icon hidden\\"></div>\\n<div class=\\"chat-head-info-buttons-container\\">\\n    <div class=\\"contact-info\\">\\n        <div class=\\"contact-name-wrap\\">\\n            <i class=\\"mdi encrypted-icon mdi-14px mdi-lock\\"></i>\\n            <p class=\\"contact-name one-line\\"></p>\\n        </div>\\n        <p class=\\"contact-status-message one-line\\"></p>\\n    </div>\\n    <div class=\\"chat-tools-wrap\\">\\n        <div class=\\"chat-tool chat-tool-player\\">\\n            <div class=\\"chat-tool-player-containter\\">\\n                <div class=\\"chat-tool chat-tool-plyr-controls btn-previous-plyr\\">\\n                    <i class=\\"mdi mdi-skip-previous mdi-24px\\"></i>\\n                </div>\\n                <div class=\\"chat-tool chat-tool-plyr-controls btn-play-pause-plyr\\">\\n                    <i class=\\"mdi mdi-play mdi-24px\\"></i>\\n                    <i class=\\"mdi mdi-pause mdi-24px\\"></i>\\n                </div>\\n                <div class=\\"chat-tool chat-tool-plyr-controls btn-next-plyr\\">\\n                    <i class=\\"mdi mdi-skip-next mdi-24px\\"></i>\\n                </div>\\n                <div class=\\"chat-tool chat-tool-plyr-controls btn-popup-plyr\\">\\n                    <img class=\\"player-poster hidden\\">\\n                    <svg class=\\"mdi mdi-32px mdi-player-type-icon mdi-svg-template\\" data-svgname=\\"video\\"></svg>\\n                    <div class=\\"voice-message-player-avatar circle-avatar hidden\\"/>\\n                </div>\\n                <div class=\\"chat-tool chat-player-duration chat-tool-plyr-controls\\">\\n                    <div class=\\"chat-head-player-title one-line\\"><div class=\\"chat-head-player-title-text\\">{[print(xabber.getString(\\"chat_message_video\\"))]}</div></div>\\n                    <div class=\\"chat-head-player-title-bottom-container\\">\\n                        <span class=\\"chat-head-player-type one-line\\">{[print(xabber.getString(\\"chat_message_video\\"))]}</span><span class=\\"chat-head-player-type-dot\\"> •</span>\\n                        <span class=\\"chat-head-player-current-time\\">0:00</span> /\\n                        <span class=\\"chat-head-player-total-time\\">0:00</span>\\n                    </div>\\n                </div>\\n                <div class=\\"chat-tool chat-tool-plyr-controls btn-stop-plyr\\">\\n                    <i class=\\"mdi mdi-close mdi-16px\\"></i>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\"chat-tool btn-show-fingerprints\\">\\n            <i class=\\"mdi mdi-lock mdi-24px\\"></i>\\n        </div>\\n        <div class=\\"chat-tool btn-jingle-message\\">\\n            <i class=\\"mdi mdi-phone mdi-24px\\"></i>\\n        </div>\\n        \x3c!--<div class=\\"chat-tool btn-set-status\\">\\n            <svg class=\\"mdi mdi-24px\\" viewBox=\\"0 0 24 24\\">\\n                <g stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\">\\n                    <rect x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"/>\\n                    <path d=\\"M20,4 C21.1045695,4 22,4.8954305 22,6 L22,16 C22,17.1045695 21.1045695,18 20,18 L16,18 L12,22 L8,18 L4,18 C2.8954305,18 2,17.1045695 2,16 L2,6 C2,4.8954305 2.8954305,4 4,4 L20,4 Z M16,12 L6,12 L6,14 L16,14 L16,12 Z M18,8 L6,8 L6,10 L18,10 L18,8 Z\\" id=\\"tooltip-variant\\" fill=\\"#9E9E9E\\" fill-rule=\\"nonzero\\"/>\\n                </g>\\n            </svg>\\n        </div>--\x3e\\n        <div class=\\"chat-tool btn-search-messages\\">\\n            <i class=\\"search-icon mdi mdi-24px mdi-magnify\\"></i>\\n        </div>\\n        <div class=\\"chat-tool btn-more dropdown-button\\" data-activates=\\"{{view.cid}}-more\\">\\n            <i class=\\"mdi mdi-24px mdi-dots-vertical\\"></i>\\n        </div>\\n        <ul id=\\"{{view.cid}}-more\\" class=\\"chat-head-menu dropdown-content noselect\\">\\n            <li class=\\"btn-chat-pin\\">\\n                <span class=\\"one-line\\"></span>\\n            </li>\\n            <li class=\\"btn-archive-chat\\">\\n                <span class=\\"one-line\\"></span>\\n            </li>\\n            <li class=\\"btn-notifications active-hover\\" data-activates=\\"{{view.cid}}-mute-more\\">\\n                <span class=\\"one-line\\"></span>\\n            </li>\\n            \x3c!--<li class=\\"btn-contact-details\\">--\x3e\\n            \x3c!--<span class=\\"one-line\\">{[print(xabber.getString(\\"contact_viewer\\"))]}</span>--\x3e\\n            \x3c!--</li>--\x3e\\n            <li class=\\"btn-call-attention\\">\\n                <span class=\\"one-line\\">{[print(xabber.getString(\\"call_attention\\"))]}</span>\\n            </li>\\n            \x3c!--<li class=\\"btn-export-history\\">\\n                <span class=\\"one-line\\">{[print(xabber.getString(\\"export_chat\\"))]}</span>\\n            </li>--\x3e\\n            <li class=\\"btn-invite-users\\">\\n                <span class=\\"one-line\\">{[print(xabber.getString(\\"groupchat_invite\\"))]}</span>\\n            </li>\\n            <li class=\\"btn-start-encryption\\">\\n                <span class=\\"one-line\\">{[print(xabber.getString(\\"omemo__chat_settings__button_start_encrypted_chat\\"))]}</span>\\n            </li>\\n            <li class=\\"btn-open-encrypted-chat\\">\\n                <span class=\\"one-line\\">{[print(xabber.getString(\\"omemo__chat_settings__button_open_encrypted_chat\\"))]}</span>\\n            </li>\\n            <li class=\\"btn-open-regular-chat\\">\\n                <span class=\\"one-line\\">{[print(xabber.getString(\\"omemo__chat_settings__button_open_regular_chat\\"))]}</span>\\n            </li>\\n            <li class=\\"btn-delete-chat\\">\\n                <span class=\\"one-line text-color-500\\">{[print(xabber.getString(\\"delete_chat\\"))]}</span>\\n            </li>\\n            <li class=\\"btn-clear-history\\">\\n                <span class=\\"one-line text-color-500\\">{[print(xabber.getString(\\"clear_history\\"))]}</span>\\n            </li>\\n            \x3c!--<li class=\\"btn-delete-contact\\">--\x3e\\n            \x3c!--<span class=\\"one-line\\">{[print(xabber.getString(\\"chat_settings__button_delete_contact\\"))]}</span>--\x3e\\n            \x3c!--</li>--\x3e\\n            \x3c!--<li class=\\"btn-block-contact\\">--\x3e\\n            \x3c!--<span class=\\"one-line\\">{[print(xabber.getString(\\"contact_block\\"))]}</span>--\x3e\\n            \x3c!--</li>--\x3e\\n            \x3c!--<li class=\\"btn-unblock-contact\\">--\x3e\\n            \x3c!--<span class=\\"one-line\\">{[print(xabber.getString(\\"chat_settings__button_unblock_contact\\"))]}</span>--\x3e\\n            \x3c!--</li>--\x3e\\n        </ul>\\n        <ul id=\\"{{view.cid}}-mute-more\\" class=\\"contact-mute-dropdown dropdown-content noselect\\">\\n            <li class=\\"btn-mute-dropdown\\" data-mute=\\"minutes15\\">\\n                <span class=\\"one-line\\">{[print(xabber.getString(\\"mute_15_min\\"))]}</span>\\n            </li>\\n            <li class=\\"btn-mute-dropdown\\" data-mute=\\"hours1\\">\\n                <span class=\\"one-line\\">{[print(xabber.getString(\\"mute_1_hour\\"))]}</span>\\n            </li>\\n            <li class=\\"btn-mute-dropdown\\" data-mute=\\"hours2\\">\\n                <span class=\\"one-line\\">{[print(xabber.getString(\\"mute_2_hours\\"))]}</span>\\n            </li>\\n            <li class=\\"btn-mute-dropdown\\" data-mute=\\"day\\">\\n                <span class=\\"one-line\\">{[print(xabber.getString(\\"mute_1_day\\"))]}</span>\\n            </li>\\n            <li class=\\"btn-mute-dropdown\\" data-mute=\\"forever\\">\\n                <span class=\\"one-line\\">{[print(xabber.getString(\\"mute_forever\\"))]}</span>\\n            </li>\\n        </ul>\\n    </div>\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/chat_head.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/chat_item.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"account-indicator ground-color-700\\"></div>\\n<div class=\\"circle-avatar\\"></div>\\n<div class=\\"status hide-offline\\"></div>\\n<div class=\\"chat-icon hidden\\"></div>\\n<div class=\\"recent-chat-info\\">\\n    <div class=\\"chat-title-wrap\\">\\n        <i class=\\"mdi encrypted-icon mdi-14px mdi-lock\\"></i>\\n        <p class=\\"chat-title one-line\\"></p>\\n        <i class=\\"mdi muted-icon mdi-14px mdi-bell-off\\"></i>\\n        <p class=\\"last-msg-date\\"></p>\\n    </div>\\n    <p class=\\"last-msg one-line\\"></p>\\n</div>\\n<div class=\\"chat-states\\">\\n    <div class=\\"chat-item-notifications-wrap\\">\\n        <span class=\\"msg-chat-error hidden\\">!</span>\\n        <span class=\\"msg-incoming-subscription hidden\\">\\n            <svg class=\\"mdi mdi-12px mdi-svg-template\\" data-svgname=\\"plus\\"></svg>\\n        </span>\\n        <span class=\\"msg-counter hidden\\"></span>\\n        <i class=\\"msg-delivering-state mdi mdi-16px hidden\\"></i>\\n        <i class=\\"pinned-icon\\">\\n            <svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n                <g id=\\"icon/material/pinned-circle-small\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n                    <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n                    <path d=\\"M12,3 C16.9705627,3 21,7.02943725 21,12 C21,16.9705627 16.9705627,21 12,21 C7.02943725,21 3,16.9705627 3,12 C3,7.02943725 7.02943725,3 12,3 Z M12,4 C7.581722,4 4,7.581722 4,12 C4,16.418278 7.581722,20 12,20 C16.418278,20 20,16.418278 20,12 C20,7.581722 16.418278,4 12,4 Z M14,6.5 L17.5,9.5 L16.5,10.5 L16,10 L14.25,13.25 L15.25,14.75 L14,16 L11.5,13.5 L8.75,16.25 L7.75,16.25 L7.75,15.25 L10.5,12.5 L8,10 L9.25,8.75 L10.75,9.75 L13.5,8 L13,7.5 L14,6.5 Z\\" id=\\"xabber:pinned-small\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n                </g>\\n            </svg>\\n        </i>\\n    </div>\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/chat_item.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/chat_placeholder.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"text\\">{[print(xabber.getString(\\"chat_list__placeholder\\"))]}</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/chat_placeholder.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/chats_panel.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"recent-chats-panel noselect\\">\\n    <div class=\\"chats-search-form search-form panel-head\\">\\n        <div class=\\"account-indicator\\"></div>\\n        <i class=\\"search-icon mdi mdi-24px mdi-magnify\\"></i>\\n        <input type=\\"text\\" class=\\"search-input simple-input-field\\" tabindex=\\"1\\" placeholder=\'{[print(xabber.getString(\\"search\\"))]}\'>\\n        <i class=\\"close-search-icon mdi mdi-24px mdi-close\\"></i>\\n    </div>\\n    <div class=\\"chat-list-wrap left-panel-list-wrap\\">\\n        <div class=\\"pinned-chat-list item-list\\">\\n        </div>\\n        <div class=\\"chat-list item-list\\">\\n        </div>\\n        <div class=\\"searched-lists-wrap\\">\\n            <div class=\\"chats-list-wrap hidden\\">\\n                <div class=\\"account-indicator\\"></div>\\n                <div class=\\"chats-title\\">{[print(xabber.getString(\\"search__header_chats\\"))]}</div>\\n                <div class=\\"chats-list roster-left-container\\"></div>\\n            </div>\\n            <div class=\\"contacts-list-wrap hidden\\">\\n                <div class=\\"account-indicator\\"></div>\\n                <div class=\\"contacts-title\\">{[print(xabber.getString(\\"category_title_contacts\\"))]}</div>\\n                <div class=\\"contacts-list roster-left-container\\"></div>\\n            </div>\\n            <div class=\\"messages-list-wrap hidden\\">\\n                <div class=\\"account-indicator\\"></div>\\n                <div class=\\"messages-title\\">{[print(xabber.getString(\\"search__header_messages\\"))]}</div>\\n                <div class=\\"messages-list roster-left-container\\"></div>\\n            </div>\\n        </div>\\n        <div class=\\"load-chats-feedback hidden\\">{[print(xabber.getString(\\"placeholder_loading\\"))]}</div>\\n    </div>\\n    <div class=\\"read-all-button hidden\\">{[print(xabber.getString(\\"mark_all_as_read_button\\"))]}</div>\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/chats_panel.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/checkbox.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"field clickable-field {{className}} switch normal\\">\\n    <input type=\\"checkbox\\" class=\\"filled-in\\" id=\\"{{id}}\\">\\n    <label for=\\"{{id}}\\"></label>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/checkbox.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/content_encryption_warning.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div>\\n    <i class=\\"mdi mdi-36px mdi-alert-circle\\"></i>\\n</div>\\n<div class=\\"warning-message\\">{{message}}</div>\\n<button class=\\"btn-manage-devices btn-flat btn-main btn-dark hover-ground-color-amber-300\\">{[print(xabber.getString(\\"omemo__alert_new_device__button_manage_devices\\"))]}</button>");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/content_encryption_warning.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/encryption_warning.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"warning-wrap\\">\\n    <p class=\\"warning-message\\">{{message}}</p>\\n    <button class=\\"btn-manage-devices btn-flat btn-main btn-dark ground-color-{{color}}-100 hover-ground-color-{{color}}-300\\">{[print(xabber.getString(\\"omemo__alert_new_device__button_manage_devices\\"))]}</button>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/encryption_warning.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/forward_panel.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"modal-header noselect\\">\\n    <div class=\\"panel-header\\">\\n        <span class=\\"header\\">{[print(xabber.getString(\\"dialog_forward_message__header\\"))]}</span>\\n    </div>\\n</div>\\n<div class=\\"modal-content noselect\\">\\n    <div class=\\"chats-search-form search-form\\">\\n        <i class=\\"search-icon mdi mdi-20px mdi-magnify\\"></i>\\n        <input type=\\"text\\" class=\\"search-input simple-input-field\\" placeholder=\'{[print(xabber.getString(\\"search\\"))]}\'>\\n        <i class=\\"close-search-icon mdi mdi-20px mdi-close\\"></i>\\n    </div>\\n    <div class=\\"chat-list-wrap\\">\\n    </div>\\n    <div class=\\"error hidden\\">{[print(xabber.getString(\\"placeholder_no_matches\\"))]}</div>\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/forward_panel.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/group_chats/add_group_chat.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"modal-header\\">\\n    <span>{[print(xabber.getString(\\"create_groupchat\\"))]}</span>\\n    <div class=\\"account-dropdown-wrap\\" data-activates=\\"select-account-for-creating-groupchat\\">\\n        <div class=\\"dropdown-button\\">\\n            <div class=\\"account-item-wrap\\">\\n                <div class=\\"circle-avatar noselect\\">\\n                    <img>\\n                </div>\\n            </div>\\n        </div>\\n        <div id=\\"select-account-for-creating-groupchat\\" class=\\"dropdown-content noselect\\">\\n        </div>\\n    </div>\\n</div>\\n<div class=\\"modal-content\\">\\n    <div class=\\"row name-field\\">\\n        <div class=\\"input-field input-group-chat-name\\">\\n            <label for=\\"new_chat_name\\">{[print(xabber.getString(\\"groupchat_name\\"))]}</label>\\n            <input id=\\"new_chat_name\\" type=\\"text\\" name=\\"chat_name\\" placeholder=\'{[print(xabber.getString(\\"group_is_empty\\"))]}\' required>\\n        </div>\\n    </div>\\n    <div class=\\"row jid-field\\">\\n        <label for=\\"new_chat_jid\\">{[print(xabber.getString(\\"groupchat_xmpp_jid\\"))]}</label>\\n        <div class=\\"input-field input-group-chat-jid\\">\\n            <input id=\\"new_chat_jid\\" type=\\"text\\" placeholder=\'{[print(xabber.getString(\\"groupchat_xmpp_jid\\"))]}\' name=\\"chat_jid\\">\\n            <div class=\\"property-field xmpp-server-dropdown-wrap\\">\\n                <div class=\\"select-xmpp-server\\">\\n                    <div data-activates=\\"select-xmpp-server\\" class=\\"xmpp-server-item-wrap property-wrap\\"><div class=\\"jid-at\\">@</div><div class=\\"field-jid one-line property-value\\"></div></div>\\n                    <div class=\\"input-field input-group-chat-domain hidden\\">\\n                        <input id=\\"new_chat_domain\\" type=\\"text\\" placeholder=\'{[print(xabber.getString(\\"groupchat__hint_domain\\"))]}\' name=\\"chat_domain\\">\\n                    </div>\\n                    <div data-activates=\\"select-xmpp-server\\" class=\\"caret\\">\\n                        <i class=\\"mdi mdi-20px mdi-menu-up\\"></i>\\n                        <i class=\\"mdi mdi-20px mdi-menu-down\\"></i>\\n                    </div>\\n                </div>\\n                <div id=\\"select-xmpp-server\\" class=\\"dropdown-content noselect\\">\\n                    <div class=\\"property-variant set-custom-domain\\">{[print(xabber.getString(\\"groupchat_custom_server\\"))]}</div>\\n                </div>\\n            </div>\\n        </div>\\n        <span class=\\"errors\\"></span>\\n    </div>\\n    <div class=\\"row incognito-field hidden\\">\\n        <i class=\\"field-icon mdi mdi-24px mdi-incognito\\"></i>\\n        <div class=\\"property-field incognito-dropdown-wrap\\">\\n           <div class=\\"public-item-wrap property-wrap\\"><div data-value=\\"public\\" class=\\"property-value\\">{[print(xabber.getString(\\"groupchat_privacy_type_public\\"))]}</div></div>\\n           <div class=\\"incognito-item-wrap property-wrap\\"><div data-value=\\"incognito\\" class=\\"property-value\\">{[print(xabber.getString(\\"groupchat_privacy_type_incognito\\"))]}</div></div>\\n        </div>\\n    </div>\\n    <div class=\\"row group-radio-fields\\">\\n        <div class=\\"property-radio-field membership-dropdown-wrap\\">\\n            <div class=\\"membership-item-wrap property-wrap\\">\\n                <div class=\\"property-radio-label\\">{[print(xabber.getString(\\"groupchat_membership\\"))]}</div>\\n            </div>\\n            <div class=\\"property-radio-wrap\\">\\n                <div class=\\"property-radio\\">\\n                    <input checked id=\\"membership_open\\" data-value=\\"open\\" name=\\"group_membership\\" type=\\"radio\\" class=\\"with-gap\\" required=\\"\\">\\n                    <label class=\\"membership-label\\" for=\\"membership_open\\">{[print(xabber.getString(\\"groupchat_membership_type_open\\"))]}</label>\\n                </div>\\n                <div class=\\"property-radio\\">\\n                    <input id=\\"membership_member_only\\" data-value=\\"member-only\\" name=\\"group_membership\\" type=\\"radio\\" class=\\"with-gap\\" required=\\"\\">\\n                    <label class=\\"membership-label\\" for=\\"membership_member_only\\">{[print(xabber.getString(\\"groupchat_membership_type_members_only\\"))]}</label>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\"property-radio-field global-dropdown-wrap\\">\\n            <div class=\\"global-item-wrap property-wrap\\">\\n                <div class=\\"property-radio-label\\">{[print(xabber.getString(\\"groupchat_index\\"))]}</div>\\n            </div>\\n            <div class=\\"property-radio-wrap\\">\\n                <div class=\\"property-radio\\">\\n                    <input checked id=\\"index_none\\" data-value=\\"none\\" name=\\"group_index\\" type=\\"radio\\" class=\\"with-gap\\" required=\\"\\">\\n                    <label class=\\"index-label\\" for=\\"index_none\\">{[print(xabber.getString(\\"groupchat_index_type_none\\"))]}</label>\\n                </div>\\n                <div class=\\"property-radio\\">\\n                    <input id=\\"index_local\\" data-value=\\"local\\" name=\\"group_index\\" type=\\"radio\\" class=\\"with-gap\\" required=\\"\\">\\n                    <label class=\\"index-label\\" for=\\"index_local\\">{[print(xabber.getString(\\"groupchat_index_type_local\\"))]}</label>\\n                </div>\\n                <div class=\\"property-radio\\">\\n                    <input id=\\"index_global\\" data-value=\\"global\\" name=\\"group_index\\" type=\\"radio\\" class=\\"with-gap\\" required=\\"\\">\\n                    <label class=\\"index-label\\" for=\\"index_global\\">{[print(xabber.getString(\\"groupchat_index_type_global\\"))]}</label>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\"row description-field\\">\\n        <div class=\\"input-field input-message\\">\\n            <label class=\\"description-label\\">{[print(xabber.getString(\\"groupchat_description\\"))]}</label>\\n            <div class=\\"rich-textarea-wrap notranslate\\">\\n                <div class=\\"rich-textarea\\" tabindex=\\"2\\" contenteditable=\\"\\"></div>\\n                <div class=\\"placeholder\\">{[print(xabber.getString(\\"groupchat_example_description\\"))]}</div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n</div>\\n<div class=\\"modal-footer\\">\\n    <button class=\\"btn-flat btn-main text-color-700 non-active btn-add\\">{[print(xabber.getString(\\"create\\"))]}</button>\\n    <button class=\\"btn-flat btn-main btn-dark btn-cancel\\">{[print(xabber.getString(\\"cancel\\"))]}</button>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/group_chats/add_group_chat.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/group_chats/invitation_panel_view.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"modal-header noselect\\">\\n    <div class=\\"panel-header\\">\\n        <span class=\\"header\\">{[print(xabber.getString(\\"groupchat_invite_users\\"))]}</span>\\n    </div>\\n</div>\\n<div class=\\"modal-content noselect\\">\\n    <div class=\\"chats-search-form search-form\\">\\n        <i class=\\"search-icon mdi mdi-20px mdi-magnify\\"></i>\\n        <input type=\\"text\\" class=\\"search-input simple-input-field\\" placeholder=\'{[print(xabber.getString(\\"search\\"))]}\'>\\n        <i class=\\"close-search-icon mdi mdi-20px mdi-close\\"></i>\\n    </div>\\n    <div class=\\"contacts-list-wrap\\">\\n    </div>\\n    <div class=\\"error hidden\\">{[print(xabber.getString(\\"placeholder_no_matches\\"))]}</div>\\n</div>\\n<div class=\\"modal-footer\\">\\n    <button class=\\"btn-flat btn-main btn-add\\"><span class=\\"counter hidden\\"></span>{[print(xabber.getString(\\"groupchat_invite\\"))]}</button>\\n    <button class=\\"btn-flat btn-dark btn-main btn-cancel\\">{[print(xabber.getString(\\"cancel\\"))]}</button>\\n    <span class=\\"errors\\"></span>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/group_chats/invitation_panel_view.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/group_chats/mention_item.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"list-item mention-item\\" data-jid=\\"{{jid}}\\" data-id=\\"{{id}}\\" data-nickname=\\"{{nickname}}\\">\\n    <div class=\\"circle-avatar\\"></div>\\n    <div class=\\"participant-info\\">\\n        <span class=\\"one-line nickname\\">{{nickname}}</span>\\n        <span class=\\"one-line jid\\">{{jid}}</span>\\n    </div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/group_chats/mention_item.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/group_chats/pinned_message_panel.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"modal-content full-pinned-message\\"></div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/group_chats/pinned_message_panel.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/location_popup.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("\\n<div class=\\"modal-content-wrap\\">\\n    <div class=\\"modal-content{[ if (!popup_coordinates) { ]}popup{[ } ]}\\">\\n        <div id=\\"map\\" class=\\"text-color-700\\" style=\\"width:800px; height:490px;\\" data-type=\'map\'></div>\\n        <div class=\\"form-group\\">\\n                <textarea id=\\"output\\" class=\\"form-control\\" disabled rows=\\"20\\"></textarea>\\n                <textarea id=\\"lat\\" class=\\"form-control\\" disabled rows=\\"20\\"></textarea>\\n                <textarea id=\\"lon\\" class=\\"form-control\\" disabled rows=\\"20\\"></textarea>\\n        </div>\\n\\n        <script type=\\"text/javascript\\">\\n            var layers = [ new ol.layer.Tile({ source: new ol.source.OSM() }) ];\\n            var coordinates = popup_coordinates ? ol.proj.transform(popup_coordinates, \'EPSG:4326\', \'EPSG:3857\') : [-9639318.435625363, 1667475.03690917];\\n            var zoom = popup_coordinates ? 15 : 0;\\n\\n            var placemark = new ol.Overlay.Placemark ({\\n                // backgroundColor : \'yellow\',\\n                contentColor: \'#000\',\\n                autoPan: true,\\n                html: \'<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?><svg width=\\"48px\\" height=\\"48px\\" viewBox=\\"0 0 24 30\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\"><g id=\\"icon/material/map-marker\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\"><rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"36\\" height=\\"36\\"></rect><path d=\\"M12,11.5 C10.6192881,11.5 9.5,10.3807119 9.5,9 C9.5,8.33695878 9.7633921,7.70107399 10.232233,7.23223305 C10.701074,6.7633921 11.3369588,6.5 12,6.5 C13.3807119,6.5 14.5,7.61928813 14.5,9 C14.5,9.66304122 14.2366079,10.298926 13.767767,10.767767 C13.298926,11.2366079 12.6630412,11.5 12,11.5 M12,2 C8.13400675,2 5,5.13400675 5,9 C5,14.25 12,22 12,22 C12,22 19,14.25 19,9 C19,5.13400675 15.8659932,2 12,2 Z\\" id=\\"mdi:map-marker\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path></g></svg>\',\\n                anchor: false,\\n                autoPanAnimation: { duration: 250 }\\n              });\\n\\n            var placemark_my_location = new ol.Overlay.Placemark ({\\n                // backgroundColor : \'yellow\',\\n                contentColor: \'#000\',\\n                autoPan: true,\\n                html: \'<svg xmlns=\\"http://www.w3.org/2000/svg\\" version=\\"1.1\\" width=\\"36px\\" height=\\"36px\\"><circle class=\\"outer\\" cx=\\"20\\" cy=\\"20\\" r=\\"16\\" stroke=\\"none\\" stroke-width=\\"1.5\\" fill=\\"none\\" style=\\"opacity: 0.6;\\"></circle><circle class=\\"inner\\" cx=\\"20\\" cy=\\"20\\" r=\\"8\\" stroke=\\"white\\" stroke-width=\\"1.5\\" fill=\\"none\\"></circle></svg>\',\\n                anchor: false,\\n                autoPanAnimation: { duration: 250 }\\n              });\\n\\n            var map = new ol.Map\\n            ({\\ttarget: \'map\',\\n                view: new ol.View\\n                ({\\tzoom: zoom,\\n                    center: coordinates\\n                }),\\n                interactions: ol.interaction.defaults({ altShiftDragRotate:false, pinchRotate:false }),\\n                layers: layers,\\n                overlays: [placemark, placemark_my_location]\\n            });\\n\\n            var getCurrentPositionControl = function (e) {\\n                navigator.geolocation.getCurrentPosition(success, error, options);\\n            };\\n\\n            var options = {\\n              enableHighAccuracy: true,\\n              timeout: 5000,\\n              maximumAge: 0\\n            };\\n\\n            function success(pos) {\\n              var crd = pos.coords;\\n              map.getView().setCenter(ol.proj.transform([crd.longitude, crd.latitude], \'EPSG:4326\', \'EPSG:3857\'));\\n              placemark_my_location.show(ol.proj.transform([crd.longitude, crd.latitude], \'EPSG:4326\', \'EPSG:3857\'));\\n              map.getView().setZoom(17);\\n              button_geoposition.innerHTML = \'<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?><svg width=\\"22px\\" height=\\"22px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\"><g id=\\"icon/material/crosshairs-gps\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\"><rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"22\\" height=\\"22\\"></rect><path d=\\"M12,8 C14.209139,8 16,9.790861 16,12 C16,14.209139 14.209139,16 12,16 C9.790861,16 8,14.209139 8,12 C8,9.790861 9.790861,8 12,8 M3.05,13 L1,13 L1,11 L3.05,11 C3.5,6.83 6.83,3.5 11,3.05 L11,1 L13,1 L13,3.05 C17.17,3.5 20.5,6.83 20.95,11 L23,11 L23,13 L20.95,13 C20.5,17.17 17.17,20.5 13,20.95 L13,23 L11,23 L11,20.95 C6.83,20.5 3.5,17.17 3.05,13 M12,5 C8.13400675,5 5,8.13400675 5,12 C5,15.8659932 8.13400675,19 12,19 C15.8659932,19 19,15.8659932 19,12 C19,8.13400675 15.8659932,5 12,5 L12,5 Z\\" id=\\"mdi:crosshairs-gps\\" fill=\\"#9E9E9E\\" fill-rule=\\"nonzero\\"></path></g></svg>\';\\n            };\\n\\n            function error(err) {\\n              console.warn(`ERROR(${err.code}): ${err.message}`);\\n            };\\n\\n            var button_geoposition = document.createElement(\'button\');\\n            button_geoposition.innerHTML = \'<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?><svg width=\\"22px\\" height=\\"22px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\"><g id=\\"icon/material/crosshairs-question\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\"><rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"22\\" height=\\"22\\"></rect><path d=\\"M3.05,13 L1,13 L1,11 L3.05,11 C3.5,6.83 6.83,3.5 11,3.05 L11,1 L13,1 L13,3.05 C17.17,3.5 20.5,6.83 20.95,11 L23,11 L23,13 L20.95,13 C20.5,17.17 17.17,20.5 13,20.95 L13,23 L11,23 L11,20.95 C6.83,20.5 3.5,17.17 3.05,13 M12,5 C8.13,5 5,8.13 5,12 C5,15.87 8.13,19 12,19 C15.87,19 19,15.87 19,12 C19,8.13 15.87,5 12,5 M11.13,17.25 L12.88,17.25 L12.88,15.5 L11.13,15.5 L11.13,17.25 M12,6.75 C10.07,6.75 8.5,8.32 8.5,10.25 L10.25,10.25 C10.25,9.28 11.03,8.5 12,8.5 C12.97,8.5 13.75,9.28 13.75,10.25 C13.75,12 11.13,11.78 11.13,14.63 L12.88,14.63 C12.88,12.66 15.5,12.44 15.5,10.25 C15.5,8.32 13.93,6.75 12,6.75 Z\\" id=\\"mdi:crosshairs-question\\" fill=\\"#9E9E9E\\" fill-rule=\\"nonzero\\"></path></g></svg>\';\\n\\n\\n            button_geoposition.addEventListener(\'click\', getCurrentPositionControl, false);\\n\\n            var custom_element_position = document.createElement(\'div\');\\n\\n            if (popup_coordinates) {\\n                custom_element_position.className = \'geoposition placemark-exist ol-control ol-unselectable\';\\n            }\\n            else {\\n                custom_element_position.className = \'geoposition ol-control ol-unselectable\';\\n            }\\n            custom_element_position.appendChild(button_geoposition);\\n\\n            geoposition = new ol.control.Control({\\n                className: \'myControl\',\\n                element: custom_element_position,\\n                target: document.getElementById(\\"myCustomControl\\")\\n            });\\n\\n            map.addControl(geoposition);\\n\\n            if (popup_coordinates) {\\n                placemark.show(ol.proj.transform(popup_coordinates, \'EPSG:4326\', \'EPSG:3857\'));\\n                $(\'.ol-zoom.ol-unselectable.ol-control\').addClass(\'placemark-exist\');\\n                var getPlacemarkPositionControl = function (e) {\\n                    map.getView().setCenter(ol.proj.transform(popup_coordinates, \'EPSG:4326\', \'EPSG:3857\'));\\n                    map.getView().setZoom(15);\\n                    $(\'.ol-location\').show()\\n\\n                };\\n\\n                var button_placemark_position = document.createElement(\'button\');\\n                button_placemark_position.innerHTML = \'<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?><svg width=\\"22px\\" height=\\"22px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\"><g id=\\"icon/material/map-marker\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\"><rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"36\\" height=\\"36\\"></rect><path d=\\"M12,11.5 C10.6192881,11.5 9.5,10.3807119 9.5,9 C9.5,8.33695878 9.7633921,7.70107399 10.232233,7.23223305 C10.701074,6.7633921 11.3369588,6.5 12,6.5 C13.3807119,6.5 14.5,7.61928813 14.5,9 C14.5,9.66304122 14.2366079,10.298926 13.767767,10.767767 C13.298926,11.2366079 12.6630412,11.5 12,11.5 M12,2 C8.13400675,2 5,5.13400675 5,9 C5,14.25 12,22 12,22 C12,22 19,14.25 19,9 C19,5.13400675 15.8659932,2 12,2 Z\\" id=\\"mdi:map-marker\\" fill=\\"#9E9E9E\\" fill-rule=\\"nonzero\\"></path></g></svg>\';\\n\\n\\n                button_placemark_position.addEventListener(\'click\', getPlacemarkPositionControl, false);\\n\\n                var custom_element_placemark_position = document.createElement(\'div\');\\n                custom_element_placemark_position.className = \'placemark-position ol-control ol-unselectable\';\\n                custom_element_placemark_position.appendChild(button_placemark_position);\\n\\n                placemark_position = new ol.control.Control({\\n                    className: \'myControl\',\\n                    element: custom_element_placemark_position,\\n                    target: document.getElementById(\\"myCustomControl\\")\\n                });\\n\\n                map.addControl(placemark_position);\\n\\n                var custom_element_show_location_name = document.createElement(\'div\');\\n                custom_element_show_location_name.innerHTML = \'{{location_name}}\';\\n\\n\\n                custom_element_show_location_name.className = \'ol-location ol-control ol-unselectable\';\\n\\n                show_location_name = new ol.control.Control({\\n                    className: \'myControl\',\\n                    element: custom_element_show_location_name,\\n                    target: document.getElementById(\\"myCustomControl\\")\\n                });\\n\\n                map.addControl(show_location_name);\\n\\n            }\\n\\n            if (!popup_coordinates) {\\n\\n                var send_buttom = document.createElement(\'button\');\\n                send_buttom.className = \'btn-apply mdi mdi-28px mdi-send\';\\n\\n                var send_address_div = document.createElement(\'div\');\\n                send_address_div.setAttribute(\\"id\\", \\"send_address\\");\\n                send_address_div.className = \'ol-send-address\';\\n\\n                var send_div = document.createElement(\'div\');\\n                send_div.setAttribute(\\"id\\", \\"send_text\\");\\n                send_div.className = \'ol-send-text\';\\n\\n                var custom_element_send = document.createElement(\'div\');\\n                custom_element_send.className = \'ol-send ol-control ol-unselectable\';\\n                custom_element_send.appendChild(send_address_div);\\n                custom_element_send.appendChild(send_div);\\n                custom_element_send.appendChild(send_buttom);\\n\\n                send = new ol.control.Control({\\n                    className: \'myControl\',\\n                    element: custom_element_send,\\n                    target: document.getElementById(\\"myCustomControl\\")\\n                });\\n\\n                map.addControl(send);\\n\\n                var sLayer = new ol.layer.Vector({\\n                    source: new ol.source.Vector(),\\n                    style: new ol.style.Style({\\n                        image: new ol.style.Circle({\\n                            radius: 5,\\n                            stroke: new ol.style.Stroke ({\\n                                color: \'rgb(255,165,0)\',\\n                                width: 3\\n                            }),\\n                            fill: new ol.style.Fill({\\n                                color: \'rgba(255,165,0,.3)\'\\n                            })\\n                        }),\\n                        stroke: new ol.style.Stroke ({\\n                            color: \'rgb(255,165,0)\',\\n                            width: 3\\n                        }),\\n                        fill: new ol.style.Fill({\\n                            color: \'rgba(255,165,0,.3)\'\\n                        })\\n                    })\\n                });\\n\\n                map.addLayer(sLayer);\\n\\n                var search = new ol.control.SearchNominatim (\\n                    {\\t//target: $(\\".options\\").get(0),\\n                        polygon: $(\\"#polygon\\").prop(\\"checked\\"),\\n                        reverse: true,\\n                        position: true\\t// Search, with priority to geo position\\n                    });\\n\\n                map.addControl (search);\\n\\n                search.on(\'select\', function(e){\\n                    sLayer.getSource().clear();\\n                    // Check if we get a geojson to describe the search\\n                    if (e.search.geojson) {\\n                        var format = new ol.format.GeoJSON();\\n                        var f = format.readFeature(e.search.geojson, { dataProjection: \\"EPSG:4326\\", featureProjection: map.getView().getProjection() });\\n                        sLayer.getSource().addFeature(f);\\n                        var view = map.getView();\\n                        var resolution = view.getResolutionForExtent(f.getGeometry().getExtent(), map.getSize());\\n                        var zoom = view.getZoomForResolution(resolution);\\n                        var center = ol.extent.getCenter(f.getGeometry().getExtent());\\n                        // redraw before zoom\\n                        setTimeout(function(){\\n                                view.animate({\\n                                center: center,\\n                                zoom: Math.min (zoom, 16)\\n                            });\\n                        }, 100);\\n                    }\\n                    else {\\n                        map.getView().animate({\\n                            center:e.coordinate,\\n                            zoom: Math.max (map.getView().getZoom(),16)\\n                        });\\n                    }\\n                });\\n\\n                function reverseGeocode(json) {\\n                    if (!json[0].error) {\\n                        let house_number = json[0].address.house_number ? \' \' + json[0].address.house_number : \'\',\\n                            road = json[0].address.road ? json[0].address.road + house_number + \', \' : \'\',\\n                            state = json[0].address.state ? json[0].address.state + \', \' : \'\',\\n                            neighbourhood = json[0].address.neighbourhood ? json[0].address.neighbourhood + \', \' : \'\',\\n                            allotments = json[0].address.allotments ? json[0].address.allotments + \', \' : \'\',\\n                            village = json[0].address.village ? json[0].address.village + \', \' : \'\',\\n                            city = json[0].address.city ? json[0].address.city + \', \' : \'\',\\n                            country = json[0].address.country ? state + json[0].address.country : \'\',\\n                            final_text = \'\'\\n                        if ( !road ){\\n                            final_text = neighbourhood + allotments + village + city + country\\n                        }\\n                        else {\\n                            final_text = road + neighbourhood + allotments + village + city + state.replace(\', \',\'\')\\n                        }\\n                        $(\'#send_address\').text(final_text);\\n                    }\\n                    else {\\n                        $(\'#send_address\').text(xabber.getString(\\"location_fragment__address_error__title\\"));\\n                    }\\n                }\\n\\n                map.on(\'click\', function(e) {\\n                    placemark.show(e.coordinate);\\n                    search.reverseGeocode(e.coordinate, reverseGeocode);\\n                    let coordinates = ol.proj.transform(e.coordinate, map.getView().getProjection(), \'EPSG:4326\');\\n                    $(\'.ol-control.ol-send\').show();\\n                    $(\'#send_text\').text(coordinates[1].toFixed(6) + \':\' + coordinates[0].toFixed(6));\\n                    $(\'#output\').text(\'geo:\' + coordinates[1] + \',\' + coordinates[0]);\\n                    $(\'#lat\').text(coordinates[1]);\\n                    $(\'#lon\').text(coordinates[0]);\\n                  });\\n            }\\n            window.setTimeout(function () { map.updateSize(); }, 200)\\n        <\/script>\\n    </div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/location_popup.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/message_item.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"account-indicator ground-color-700\\"></div>\\n<div class=\\"circle-avatar\\"></div>\\n<div class=\\"chat-icon hidden\\"></div>\\n<div class=\\"recent-chat-info\\">\\n    <div class=\\"chat-title-wrap\\">\\n        <p class=\\"chat-title one-line\\"></p>\\n        <p class=\\"last-msg-date\\"></p>\\n    </div>\\n    <p class=\\"last-msg one-line\\"></p>\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/message_item.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/attached_file.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("{[ if (blob) {]}\\n<div class=\\"attached-image-preview message-reference-preview-attached message-reference-preview-item-file{[ if (file.is_errored) {]} attached-errored{[}]}\\" title=\'{[ if (file.is_errored) {]}{[print(xabber.getString(\\"chat_bottom__attached_file_error_hint\\"))]}{[}]}\' data-id=\\"{{uid}}\\">\\n    <div class=\\"attached-file-size one-line\\">{{filesize}}</div>\\n    <svg class=\\"details-icon mdi mdi-18px mdi-close mdi-svg-template\\" data-svgname=\\"close\\"></svg>\\n    {[ if (blob) {]}\\n    <img class=\\"attached-image\\" data-mfp-src=\\"{{blob}}\\" src=\\"{{blob}}\\">\\n    {[}]}\\n</div>\\n{[} else {]}\\n<div class=\\"attached-file-preview message-reference-preview-attached message-reference-preview-item-file{[ if (file.is_errored) {]} attached-errored{[}]}\\" title=\'{[ if (file.is_errored) {]}{[print(xabber.getString(\\"chat_bottom__attached_file_error_hint\\"))]}{[}]}\' data-id=\\"{{uid}}\\">\\n    <div class=\\"attached-file-text\\">\\n        <div class=\\"attached-file-name one-line\\">{{file.name}}</div>\\n        <div class=\\"attached-file-size one-line\\">{{filetype}}, {{filesize}}</div>\\n    </div>\\n    <i class=\\"mdi attached-file-icon {{typeicon}}\\"></i>\\n    <svg class=\\"details-icon mdi mdi-18px mdi-close mdi-svg-template\\" data-svgname=\\"close\\"></svg>\\n</div>\\n{[}]}");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/messages/attached_file.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/audio_file.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"one-file-wrap link-file\\">\\n    <i class=\\"mdi mdi-play no-uploaded\\"></i>\\n    <i class=\\"mdi mdi-pause\\"></i>\\n    <div class=\\"file-container\\">\\n        <div class=\\"file-info one-line\\">\\n            <span class=\\"file-name\\">{{name}}</span>{[ if (duration) { ]}, {{duration}}{[ } ]},  <span class=\\"file-size\\">{{size}}</span>\\n        </div>\\n        <a href=\\"{{sources[0]}}\\" class=\\"file-link-download\\">{[print(xabber.getString(\\"action_download\\"))]}</a>\\n        <a class=\\"voice-message-play\\">Play</a>\\n    </div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/messages/audio_file.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/audio_file_waveform.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"waveform\\" id=\\"{{waveform_id}}\\"></div>\\n<div class=\\"audio-control-panel\\">\\n    <span class=\\"voice-msg-current-time\\">0:00</span> /\\n    <span class=\\"voice-msg-total-time\\">0:00</span>\\n    <input value=\\"50\\" type=\\"range\\" class=\\"voice-message-volume\\">\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/messages/audio_file_waveform.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/auth_request.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"chat-message system auth-request\\" data-time=\\"{{timestamp}}\\" data-uniqueid=\\"{{unique_id}}\\" data-from=\\"{{from_jid}}\\">\\n    <div class=\\"left-side noselect\\">\\n        <div class=\\"circle-avatar\\"><img></div>\\n    </div>\\n\\n    <div class=\\"msg-wrap\\">\\n        <div class=\\"chat-msg-author-wrap\\">\\n            <div class=\\"chat-msg-author text-color-700 one-line\\">{{username}}</div>\\n        </div>\\n        <div class=\\"chat-msg-content chat-text-content\\">{{message}}<span class=\\"accept-request\\">Accept</span><span class=\\"decline-request\\">Decline</span><span class=\\"block-request\\">Block</span></div>\\n    </div>\\n\\n    <div class=\\"right-side noselect\\">\\n        <div class=\\"msg-time selectable-text\\" title=\\"{{time}}\\">{{short_time}}</div>\\n    </div>\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/messages/auth_request.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/file.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"one-file-wrap link-file\\">\\n    <i class=\\"mdi {{mdi_icon}}\\"></i>\\n    <div class=\\"file-container\\">\\n        <div class=\\"file-info one-line\\">\\n            <span class=\\"file-name\\">{{name}}</span>{[ if (is_audio && duration) { ]}, {{duration}}{[ } ]},  <span class=\\"file-size\\">{{size}}</span>\\n        </div>\\n        <a href=\\"{{sources[0]}}\\" class=\\"file-link-download\\">{[print(xabber.getString(\\"action_download\\"))]}</a>\\n    </div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/messages/file.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/file_loading.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"one-file-wrap link-file unuploaded-file\\" data-upload-file-id=\\"{{upload_id}}\\">\\n    <div class=\\"file-loading-container\\"></div>\\n    <div class=\\"file-container\\">\\n        <div class=\\"file-info one-line\\">\\n            <span class=\\"file-name\\">{{name}}</span>, <span class=\\"file-size\\">{{size}}</span>\\n        </div>\\n        <div class=\\"circle-percent-text\\">0%</div>\\n    </div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/messages/file_loading.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/file_upload.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"chat-message main {{classlist}} file-upload noselect\\"  {[if (avatar_id) {]} data-avatar=\\"{{avatar_id}}\\" {[}]} {[if (avatar_url) {]} data-avatar-url=\\"{{avatar_url}}\\" {[}]} data-time=\\"{{timestamp}}\\" data-uniqueid=\\"{{unique_id}}\\" {[if (from_id) {]} data-from-id=\\"{{from_id}}\\" {[}]} data-from=\\"{{from_jid}}\\">\\n    <div class=\\"left-side noselect\\">\\n        <div class=\\"circle-avatar\\"></div>\\n    </div>\\n\\n    <div class=\\"msg-wrap\\">\\n        <div class=\\"chat-msg-author-wrap\\">\\n            <div class=\\"chat-msg-author text-color-700 one-line\\">{{username}}</div>\\n            {[if (badge) {]} <div class=\\"chat-msg-author-badge one-line\\">{{badge}}</div>\\n            {[ } if (role && (role.toLowerCase() != \'member\')) {]} <div class=\\"chat-msg-author-role ground-color-700 one-line\\">{{role}}</div> {[}]}\\n        </div>\\n        <div class=\\"fwd-msgs-block\\"></div>\\n        <div class=\\"chat-msg-content chat-text-content\\">{{message}}</div>\\n        <div class=\\"chat-msg-link-reference-content\\"></div>\\n        <div class=\\"chat-msg-media-content chat-main-upload-media\\">\\n        </div>\\n        <div class=\\"chat-msg-location-content no-title\\" title=\\"{[print(xabber.getString(\'location_fragment__address_error__title\'))]}\\"></div>\\n    </div>\\n\\n    <div class=\\"right-side noselect\\">\\n        <div class=\\"msg-time selectable-text\\" title=\\"{{time}}\\">{{short_time}}</div>\\n        <div class=\\"edited-info one-line hidden\\"></div>\\n        {[ if (is_sender) { ]}\\n        <i class=\\"msg-delivering-state mdi mdi-14px\\" data-state=\\"{{state}}\\" title=\\"{{verbose_state}}\\" data-activates=\\"retry-send-msg-{{msgid}}\\"></i>\\n        <div id=\\"retry-send-msg-{{msgid}}\\" class=\\"dropdown-content retry-send-message noselect\\">\\n            <div class=\\"msg-retry-dropdown-btn active-ground-color-600 repeat-upload\\">{[print(xabber.getString(\\"resend\\"))]}</div>\\n            <div class=\\"msg-retry-dropdown-btn active-ground-color-600 edit-upload\\">{[print(xabber.getString(\\"edit\\"))]}</div>\\n            <div class=\\"msg-retry-dropdown-btn active-ground-color-600 btn-delete-message\\">{[print(xabber.getString(\\"delete\\"))]}</div>\\n        </div>\\n        {[ } ]}\\n        <div class=\\"msg-copy-link\\" title=\'{[print(xabber.getString(\\"action_copy_link\\"))]}\'><i class=\\"mdi mdi-link-variant\\" data-image=\\"{{is_image}}\\"></i></div>\\n        <div class=\\"msg-copy-location\\"  title=\'{[print(xabber.getString(\\"action_copy_location\\"))]}\'><div class=\\"msg-copy-location-content\\" data-location=\\"false\\"></div></div>\\n    </div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/messages/file_upload.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/forwarded.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"fwd-message\\" data-time=\\"{{timestamp}}\\" data-uniqueid=\\"{{unique_id}}\\" {[if (avatar_id) {]} data-avatar=\\"{{avatar_id}}\\" {[}]} {[if (avatar_url) {]} data-avatar-url=\\"{{avatar_url}}\\" {[}]} data-from-id=\\"{{from_id}}\\" data-from=\\"{{from_jid}}\\">\\n    <div class=\\"fwd-left-side noselect\\">\\n        <div class=\\"circle-avatar\\"></div>\\n    </div>\\n    <div class=\\"msg-wrap\\">\\n        <div class=\\"fwd-msg-author-wrap\\">\\n            <div class=\\"fwd-msg-author text-color-700 one-line\\">{{username}}</div>\\n            {[if (badge) {]} <div class=\\"chat-msg-author-badge one-line\\">{{badge}}</div>\\n            {[ } if ((role)&&(role != \'Member\')) {]} <div class=\\"chat-msg-author-role ground-color-700 one-line\\">{{role}}</div> {[}]}\\n            <div class=\\"msg-time selectable-text one-line\\" title=\\"{{time}}\\">{{short_time}}</div>\\n        </div>\\n        <div class=\\"fwd-msgs-block\\"></div>\\n        <div class=\\"chat-msg-content chat-text-content\\">{{message}}</div>\\n        <div class=\\"chat-msg-link-reference-content\\"></div>\\n        <div class=\\"chat-msg-media-content\\"></div>\\n        <div class=\\"chat-msg-location-content no-title\\" title=\\"{[print(xabber.getString(\'location_fragment__address_error__title\'))]}\\"></div>\\n    </div>\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/messages/forwarded.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/group_request.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"chat-message system auth-request\\" data-time=\\"{{timestamp}}\\" data-uniqueid=\\"{{unique_id}}\\" data-from=\\"{{from_jid}}\\">\\n    <div class=\\"left-side noselect\\">\\n        <div class=\\"circle-avatar\\"></div>\\n    </div>\\n\\n    <div class=\\"msg-wrap\\">\\n        <div class=\\"chat-msg-author-wrap\\">\\n            <div class=\\"chat-msg-author text-color-700 one-line\\">{{username}}</div>\\n        </div>\\n        <div class=\\"chat-msg-content chat-text-content\\">{{message}}<div><span class=\\"accept-request-group\\">Accept</span><span class=\\"decline-request-group\\">Decline</span><span class=\\"block-request-group\\">Block</span></div></div>\\n    </div>\\n\\n    <div class=\\"right-side noselect\\">\\n        <div class=\\"msg-time selectable-text\\" title=\\"{{time}}\\">{{short_time}}</div>\\n    </div>\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/messages/group_request.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/hidden-template-for-2.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"image-collection zoom-gallery\\"><div class=\\"img-content-template template-for-2\\"><img title=\\"{{images[0].description}}\\" class=\\"uploaded-img-for-collage popup-img\\" data-mfp-src=\\"{{images[0].sources[0]}}\\"></div>\\n<div class=\\"img-content-template template-for-2\\"><img title=\\"{{images[1].description}}\\" class=\\"uploaded-img-for-collage popup-img\\" data-mfp-src=\\"{{images[1].sources[0]}}\\"></div></div>");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/messages/hidden-template-for-2.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/hidden-template-for-3.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"image-collection zoom-gallery\\"><div class=\\"img-content-template template-for-3 main\\"><img title=\\"{{images[0].description}}\\" class=\\"uploaded-img-for-collage popup-img\\" data-mfp-src=\\"{{images[0].sources[0]}}\\"></div>\\n<div class=\\"template-for-3 minor-images\\"><div class=\\"img-content-template template-for-3 minor\\"><img title=\\"{{images[1].description}}\\" class=\\"uploaded-img-for-collage popup-img\\" data-mfp-src=\\"{{images[1].sources[0]}}\\"></div>\\n<div class=\\"img-content-template template-for-3 minor\\"><img title=\\"{{images[2].description}}\\" class=\\"uploaded-img-for-collage popup-img\\" data-mfp-src=\\"{{images[2].sources[0]}}\\"></div></div></div>");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/messages/hidden-template-for-3.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/hidden-template-for-4.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"image-collection zoom-gallery\\"><div class=\\"img-content-template template-for-4 main\\"><img title=\\"{{images[0].description}}\\" class=\\"uploaded-img-for-collage popup-img\\" data-mfp-src=\\"{{images[0].sources[0]}}\\"></div><div class=\\"template-for-4 minor-images\\">\\n<div class=\\"img-content-template template-for-4 minor\\"><img title=\\"{{images[1].description}}\\" class=\\"uploaded-img-for-collage popup-img\\" data-mfp-src=\\"{{images[1].sources[0]}}\\"></div>\\n<div class=\\"img-content-template template-for-4 minor\\"><img title=\\"{{images[2].description}}\\" class=\\"uploaded-img-for-collage popup-img\\" data-mfp-src=\\"{{images[2].sources[0]}}\\"></div>\\n<div class=\\"img-content-template template-for-4 minor\\"><img title=\\"{{images[3].description}}\\" class=\\"uploaded-img-for-collage popup-img\\" data-mfp-src=\\"{{images[3].sources[0]}}\\"></div></div></div>");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/messages/hidden-template-for-4.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/hidden-template-for-5.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"image-collection zoom-gallery template-for-5\\"><div class=\\"img-content-wrap template-for-5 main\\"><div class=\\"img-content-template template-for-5\\"><img title=\\"{{images[0].description}}\\" class=\\"uploaded-img-for-collage popup-img\\" data-mfp-src=\\"{{images[0].sources[0]}}\\"></div><div class=\\"img-content-template template-for-5\\"><img title=\\"{{images[1].description}}\\" class=\\"uploaded-img-for-collage popup-img\\" data-mfp-src=\\"{{images[1].sources[0]}}\\"></div></div>\\n<div class=\\"img-content-wrap template-for-5 minor-images\\"><div class=\\"img-content-template template-for-5\\"><img title=\\"{{images[2].description}}\\" class=\\"uploaded-img-for-collage popup-img\\" data-mfp-src=\\"{{images[2].sources[0]}}\\"></div>\\n<div class=\\"img-content-template template-for-5\\"><img title=\\"{{images[3].description}}\\" class=\\"uploaded-img-for-collage popup-img\\" data-mfp-src=\\"{{images[3].sources[0]}}\\"></div>\\n<div class=\\"img-content-template template-for-5\\"><img title=\\"{{images[4].description}}\\" class=\\"uploaded-img-for-collage popup-img\\" data-mfp-src=\\"{{images[4].sources[0]}}\\"></div></div></div>");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/messages/hidden-template-for-5.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/hidden-template-for-6.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"image-collection zoom-gallery template-for-6\\"><div class=\\"img-content-wrap template-for-6 main-row\\"><div class=\\"img-content-template template-for-6 main\\"><img title=\\"{{images[0].description}}\\" class=\\"uploaded-img-for-collage popup-img\\" data-mfp-src=\\"{{images[0].sources[0]}}\\"></div><div class=\\"template-for-6 minor-1\\"><div class=\\"img-content-template template-for-6\\"><img title=\\"{{images[1].description}}\\" class=\\"uploaded-img-for-collage popup-img\\" data-mfp-src=\\"{{images[1].sources[0]}}\\"></div>\\n<div class=\\"img-content-template template-for-6\\"><img title=\\"{{images[2].description}}\\" class=\\"uploaded-img-for-collage popup-img\\" data-mfp-src=\\"{{images[2].sources[0]}}\\"></div></div></div>\\n<div class=\\"template-for-6 minor-2\\"><div class=\\"img-content-template template-for-6\\"><img title=\\"{{images[3].description}}\\" class=\\"uploaded-img-for-collage popup-img\\" data-mfp-src=\\"{{images[3].sources[0]}}\\"></div>\\n<div class=\\"img-content-template template-for-6\\"><img title=\\"{{images[4].description}}\\" class=\\"uploaded-img-for-collage popup-img\\" data-mfp-src=\\"{{images[4].sources[0]}}\\"></div>\\n<div class=\\"img-content-template template-for-6 last-image\\"><img title=\\"{{images[5].description}}\\" class=\\"uploaded-img-for-collage popup-img\\" data-mfp-src=\\"{{images[5].sources[0]}}\\">\\n{[ if (images.length > 6) { ]}<span class=\\"image-counter\\"></span>{[ for (var i=6; i < images.length; i++) {]} <div class=\\"img-content-template hidden\\"><img title=\\"{{images[i].description}}\\" class=\\"uploaded-img-for-collage popup-img\\" data-mfp-src=\\"{{images[i].sources[0]}}\\"></div> {[}} ]}</div></div></div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/messages/hidden-template-for-6.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/images_details.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"images-details\\">\\n    <div class=\\"images-details-header\\">\\n        {[print(xabber.getString(\\"privacy_risk_images_header\\"))]}\\n    </div>\\n    {[img_information.images.forEach((image) => {]}\\n        <div class=\\"image-details\\">\\n            {{image.name}} <span>{{image.pretty_size}}, {{image.height}}x{{image.width}}</span>\\n        </div>\\n    {[})]}\\n</div>\\n<div class=\\"image-servers-details\\">\\n    {[if (img_information.servers.length === 1) {]}\\n        <div class=\\"images-details-header\\">\\n            {[print(xabber.getString(\\"privacy_risk_server_header\\", [img_information.servers[0]]))]}\\n        </div>\\n    {[} else {]}\\n        <div class=\\"images-details-header\\">\\n            {[print(xabber.getString(\\"privacy_risk_servers_header\\"))]}\\n        </div>\\n        {[img_information.servers.forEach((server) => {]}\\n            <div class=\\"server-details\\">\\n                {{server}}\\n            </div>\\n        {[})]}\\n    {[}]}\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/messages/images_details.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/link_reference.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"link-message-reference message-reference-preview-attached message-reference-preview-item {[ if (item.image && item.video_url) {]}link-message-reference-video{[}]}\\" data-original-url=\\"{{item.original_text}}\\">\\n    <svg class=\\"details-icon mdi mdi-18px mdi-close mdi-svg-template\\" data-svgname=\\"close\\"></svg>\\n    {[ if (item.image && item.video_url) {]}\\n    <img class=\\"attached-image\\" data-mfp-src=\\"{{item.image}}\\" src=\\"{{item.image}}\\">\\n    <div class=\\"attached-site-name one-line\\">{{item.site}}</div>\\n    {[} else if (item.image) {]}\\n    <img class=\\"attached-image\\" data-mfp-src=\\"{{item.image}}\\" src=\\"{{item.image}}\\">\\n    <div class=\\"attached-text-block\\">\\n        <div class=\\"link-site one-line\\">{{domain}}</div>\\n        {[if (item.description) {]}\\n            <div class=\\"link-title{[if (item.description.length <= 25) {]} link-title-short{[}]}\\">{{item.description}}</div>\\n        {[} else {]}\\n            <div class=\\"link-title{[if (item.title.length <= 25) {]} link-title-short{[}]}\\">{{item.title}}</div>\\n        {[}]}\\n    </div>\\n    {[} else {]}\\n    <div class=\\"attached-text-block\\">\\n        <div class=\\"link-site one-line\\">{{domain}}</div>\\n        {[if (item.description) {]}\\n            <div class=\\"link-title{[if (item.description.length <= 29) {]} link-title-short{[}]}\\">{{item.description}}</div>\\n        {[} else {]}\\n            <div class=\\"link-title{[if (item.title.length <= 29) {]} link-title-short{[}]}\\">{{item.title}}</div>\\n        {[}]}\\n    </div>\\n    {[}]}\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/messages/link_reference.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/link_reference_chat.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("{[ if (is_video) {]}\\n        <div class=\\"link-message-reference message-reference-preview-item message-reference-preview-item-big-image\\">\\n            <div class=\\"embed-video\\">\\n                <div class=\\"plyr-video-container\\" data-provider=\\"{{provider}}\\" data-src=\\"{{video_url}}\\">\\n                    <div class=\\"plyr-video-play\\">\\n                        <svg class=\\"mdi mdi-32px mdi-svg-template\\" data-svgname=\\"play\\"></svg>\\n                    </div>\\n                    <div class=\\"plyr-video-playing\\">\\n                        <svg class=\\"mdi mdi-48px mdi-svg-template\\" data-svgname=\\"player-float\\"></svg>\\n                        <div class=\\"plyr-video-playing-hint\\">{[print(xabber.getString(\\"chat_message_video_playing_hint\\"))]}</div>\\n                    </div>\\n                    {[ if (image) {]}\\n                    <img class=\\"plyr-video-poster\\" src=\\"{{image}}\\" onerror=\\"this.style.display=\'none\'\\">\\n                    {[}]}\\n                </div>\\n            </div>\\n            <a href=\\"{{original_text}}\\" target=”_blank” class=\\"msg-hyperlink\\">\\n                <div class=\\"attached-text-block\\">\\n                    <div class=\\"link-title one-line\\">{{domain}}</div>\\n                    <div class=\\"link-site-title\\">{{title}}</div>\\n                    <div class=\\"link-description\\">{{description}}</div>\\n                </div>\\n            </a>\\n        </div>\\n{[} else {]}\\n    <a href=\\"{{original_text}}\\" target=”_blank” class=\\"msg-hyperlink\\">\\n        <div class=\\"link-message-reference message-reference-preview-item{[if (image_width && image_width >= 590) {]} message-reference-preview-item-big-image{[}]}\\">\\n            {[ if (image) {]}\\n            <img class=\\"attached-image\\" data-mfp-src=\\"{{image}}\\" src=\\"{{image}}\\">\\n            {[}]}\\n            <div class=\\"attached-text-block\\">\\n                <div class=\\"link-title one-line\\">{{domain}}</div>\\n                <div class=\\"link-site-title\\">{{title}}</div>\\n                <div class=\\"link-description\\">{{description}}</div>\\n            </div>\\n        </div>\\n    </a>\\n{[}]}");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/messages/link_reference_chat.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/loading_circle.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"circle-wrap\\">\\n    <svg xmlns=\\"http://www.w3.org/2000/svg\\" class=\\"preloader-circular\\" viewBox=\\"27 27 54 54\\">\\n        <circle class=\\"preloader-path-new\\" cx=\\"54\\" cy=\\"54\\" r=\\"24\\" fill=\\"none\\" stroke-miterlimit=\\"10\\"></circle>\\n    </svg>\\n    <div class=\\"inside-circle\\">\\n        <i class=\\"mdi mdi-center-loading-indicator mdi-close mdi-20px\\"></i>\\n        <i class=\\"mdi mdi-alert-circle mdi-32px hidden\\"></i>\\n    </div>\\n    <div class=\\"circle-percent-text\\">0%</div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/messages/loading_circle.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/location.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"    <div id=\\\"{{id}}\\\" class=\\\"text-color-700\\\" style=\\\"width:350px; height:300px;pointer-events: none;\\\" data-type='map'><img id=\\\"img_{{ id }}\\\" ></div>\\n\\n\\n    <script type=\\\"text/javascript\\\">\\n    let map{{id}} = new ol.Map\\n        ({\\ttarget: '{{id}}',\\n        \\tview: new ol.View\\n            ({\\tzoom: 15,\\n                center: ol.proj.transform([{{lon}}, {{lat}}], 'EPSG:4326', 'EPSG:3857')\\n            }),\\n            interactions: ol.interaction.defaults({\\n                altShiftDragRotate:false,\\n                doubleClickZoom:false,\\n                keyboard:false,\\n                mouseWheelZoom:false,\\n                shiftDragZoom:false,\\n                dragPan:false,\\n                pinchRotate:false,\\n                pinchZoom:false\\n            }),\\n            layers: [ new ol.layer.Tile({ source: new ol.source.OSM() }) ],\\n        });\\n\\n    map{{id}}.once('rendercomplete', function(event) {\\n        const mapCanvas = document.createElement('canvas');\\n        const size = map{{id}}.getSize();\\n        mapCanvas.width = size[0];\\n        mapCanvas.height = size[1];\\n        const mapContext = mapCanvas.getContext('2d');\\n        Array.prototype.forEach.call(\\n          document.querySelectorAll('#{{id}} .ol-layer canvas'),\\n          function (canvas) {\\n            if (canvas.width > 0) {\\n              const opacity = canvas.parentNode.style.opacity;\\n              mapContext.globalAlpha = opacity === '' ? 1 : Number(opacity);\\n              const transform = canvas.style.transform;\\n              // Get the transform parameters from the style's transform matrix\\n              const matrix = transform\\n                .match(/^matrix\\\\(([^\\\\(]*)\\\\)$/)[1]\\n                .split(',')\\n                .map(Number);\\n              // Apply the transform to the export map context\\n              CanvasRenderingContext2D.prototype.setTransform.apply(\\n                mapContext,\\n                matrix\\n              );\\n              path = new Path2D('M 18 17.25 C 15.9289 17.25 14.25 15.5711 14.25 13.5 C 14.25 12.5054 14.6451 11.5516 15.3483 10.8483 C 16.0516 10.1451 17.0054 9.75 18 9.75 C 20.0711 9.75 21.75 11.4289 21.75 13.5 C 21.75 14.4946 21.3549 15.4484 20.6517 16.1517 C 19.9484 16.8549 18.9946 17.25 18 17.25 M 18 3 C 12.201 3 7.5 7.701 7.5 13.5 C 7.5 21.375 18 33 18 33 C 18 33 28.5 21.375 28.5 13.5 C 28.5 7.701 23.799 3 18 3 Z');\\n              mapContext.fillStyle = getComputedStyle(document.querySelector('#{{id}}')).color;\\n              mapContext.drawImage(canvas, 0, 0);\\n              mapContext.translate(157, 117);\\n\\n              mapContext.fill(path);\\n            }\\n          }\\n        );\\n        if (navigator.msSaveBlob) {\\n          // link download attribute does not work on MS browsers\\n          navigator.msSaveBlob(mapCanvas.msToBlob(), 'map.png');\\n        } else {\\n          var img = document.getElementById('img_{{ id }}');\\n          dataURL = mapCanvas.toDataURL('image/png');\\n          map{{id}}.setTarget(null)\\n          map{{id}} = null;\\n          img.src= dataURL\\n        }\\n    });\\n    <\/script>\\n</div>\");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/messages/location.html?./node_modules/raw-loader/dist/cjs.js")},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/main.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"chat-message main {{classlist}}\\"  {[if (avatar_id) {]} data-avatar=\\"{{avatar_id}}\\" {[}]} {[if (avatar_url) {]} data-avatar-url=\\"{{avatar_url}}\\" {[}]} data-time=\\"{{timestamp}}\\" data-uniqueid=\\"{{unique_id}}\\" {[if (from_id) {]} data-from-id=\\"{{from_id}}\\" {[}]} data-from=\\"{{from_jid}}\\">\\n    <div class=\\"left-side noselect\\">\\n        <div class=\\"circle-avatar\\"></div>\\n    </div>\\n\\n    <div class=\\"msg-wrap\\">\\n        <div class=\\"chat-msg-author-wrap\\">\\n            <div class=\\"chat-msg-author text-color-700 one-line\\">{{username}}</div>\\n            {[if (badge) {]} <div class=\\"chat-msg-author-badge one-line\\">{{badge}}</div>\\n            {[ } if (role && (role.toLowerCase() != \'member\')) {]} <div class=\\"chat-msg-author-role ground-color-700 one-line\\">{{role}}</div> {[}]}\\n        </div>\\n        <div class=\\"fwd-msgs-block\\"></div>\\n        <div class=\\"chat-msg-content chat-text-content\\">{{message}}</div>\\n        <div class=\\"chat-msg-link-reference-content\\"></div>\\n        <div class=\\"chat-msg-media-content\\"></div>\\n        <div class=\\"chat-msg-location-content no-title\\" title=\\"{[print(xabber.getString(\'location_fragment__address_error__title\'))]}\\"></div>\\n    </div>\\n\\n    <div class=\\"right-side noselect\\">\\n        <div class=\\"msg-time selectable-text\\" title=\\"{{time}}\\">{{short_time}}</div>\\n        <div class=\\"edited-info one-line hidden\\"></div>\\n        {[ if (is_sender) { ]}\\n            <i class=\\"msg-delivering-state mdi mdi-14px\\" data-state=\\"{{state}}\\" title=\\"{{verbose_state}}\\" data-activates=\\"retry-send-msg-{{msgid}}\\"></i>\\n            <div id=\\"retry-send-msg-{{msgid}}\\" class=\\"dropdown-content retry-send-message noselect\\">\\n                <div class=\\"msg-retry-dropdown-btn active-ground-color-600 btn-retry-send-message\\">{[print(xabber.getString(\\"chat_screen__message__button_retry_send\\"))]}</div>\\n            </div>\\n        {[ } ]}\\n        <div class=\\"msg-copy-link\\" title=\'{[print(xabber.getString(\\"action_copy_link\\"))]}\'><i class=\\"mdi mdi-link-variant\\" data-image=\\"{{is_image}}\\"></i></div>\\n        <div class=\\"msg-copy-location\\"  title=\'{[print(xabber.getString(\\"action_copy_location\\"))]}\'><div class=\\"msg-copy-location-content\\" data-location=\\"false\\"></div></div>\\n    </div>\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/messages/main.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/saved_main.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"chat-message saved-main main {{classlist}}\\" data-time=\\"{{timestamp}}\\" data-uniqueid=\\"{{unique_id}}\\" data-from=\\"{{from_jid}}\\">\\n    <div class=\\"fwd-msgs-block\\"></div>\\n    <div class=\\"right-side noselect\\">\\n        <div class=\\"msg-time selectable-text\\" title=\\"{{time}}\\">{{short_time}}</div>\\n        <i class=\\"msg-delivering-state mdi mdi-14px\\" data-state=\\"{{state}}\\" title=\\"{{verbose_state}}\\" data-activates=\\"retry-send-msg-{{msgid}}\\"></i>\\n        <div class=\\"edited-info one-line hidden\\"></div>\\n    </div>\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/messages/saved_main.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/searched.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"chat-message main {{classlist}}\\"  {[if (avatar_id) {]} data-avatar=\\"{{avatar_id}}\\" {[}]} {[if (avatar_url) {]} data-avatar-url=\\"{{avatar_url}}\\" {[}]} data-time=\\"{{timestamp}}\\" data-uniqueid=\\"{{unique_id}}\\" {[if (from_id) {]} data-from-id=\\"{{from_id}}\\" {[}]} data-from=\\"{{from_jid}}\\">\\n    <div class=\\"left-side noselect\\">\\n        <div class=\\"circle-avatar\\"></div>\\n    </div>\\n\\n    <div class=\\"msg-wrap\\">\\n        <div class=\\"chat-msg-author-wrap\\">\\n            <div class=\\"chat-msg-author text-color-700 one-line\\">{{username}}</div>\\n            {[if (badge) {]} <div class=\\"chat-msg-author-badge one-line\\">{{badge}}</div>\\n            {[ } if (role && (role.toLowerCase() != \'member\')) {]} <div class=\\"chat-msg-author-role ground-color-700 one-line\\">{{role}}</div> {[}]}\\n        </div>\\n        <div class=\\"chat-msg-content chat-text-content\\">{{message}}</div>\\n    </div>\\n\\n    <div class=\\"right-side noselect\\">\\n        <div class=\\"msg-time selectable-text\\" title=\\"{{time}}\\">{{msg_time}}</div>\\n    </div>\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/messages/searched.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/system.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"chat-message system\\"  data-time=\\"{{timestamp}}\\" data-uniqueid=\\"{{unique_id}}\\" data-from=\\"{{from_jid}}\\">\\n    <div class=\\"msg-wrap\\">\\n        <div class=\\"chat-msg-content chat-text-content\\">{{message}}</div>\\n    </div>\\n\\n    <div class=\\"right-side noselect\\">\\n        <div class=\\"msg-time selectable-text\\" title=\\"{{time}}\\">{{short_time}}</div>\\n    </div>\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/messages/system.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/template-for-2.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"image-collection zoom-gallery\\"><div class=\\"img-content-template template-for-2\\" data-upload-file-id=\\"{{images[0].upload_id}}\\"><img src=\\"{{images[0].sources[0]}}\\" title=\\"{{images[0].description}}\\" class=\\"uploaded-img-for-collage popup-img\\" data-mfp-src=\\"{{images[0].sources[0]}}\\"></div>\\n<div class=\\"img-content-template template-for-2\\" data-upload-file-id=\\"{{images[1].upload_id}}\\"><img src=\\"{{images[1].sources[0]}}\\" title=\\"{{images[1].description}}\\" class=\\"uploaded-img-for-collage popup-img\\" data-mfp-src=\\"{{images[1].sources[0]}}\\"></div></div>");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/messages/template-for-2.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/template-for-3.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"image-collection zoom-gallery\\"><div class=\\"img-content-template template-for-3 main\\" data-upload-file-id=\\"{{images[0].upload_id}}\\"><img src=\\"{{images[0].sources[0]}}\\" title=\\"{{images[0].description}}\\" class=\\"uploaded-img-for-collage popup-img\\" data-mfp-src=\\"{{images[0].sources[0]}}\\"></div>\\n<div class=\\"template-for-3 minor-images\\"><div class=\\"img-content-template template-for-3 minor\\" data-upload-file-id=\\"{{images[1].upload_id}}\\"><img src=\\"{{images[1].sources[0]}}\\" title=\\"{{images[1].description}}\\" class=\\"uploaded-img-for-collage popup-img\\" data-mfp-src=\\"{{images[1].sources[0]}}\\"></div>\\n<div class=\\"img-content-template template-for-3 minor\\" data-upload-file-id=\\"{{images[2].upload_id}}\\"><img src=\\"{{images[2].sources[0]}}\\" title=\\"{{images[2].description}}\\" class=\\"uploaded-img-for-collage popup-img\\" data-mfp-src=\\"{{images[2].sources[0]}}\\"></div></div></div>");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/messages/template-for-3.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/template-for-4.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"image-collection zoom-gallery\\"><div class=\\"img-content-template template-for-4 main\\" data-upload-file-id=\\"{{images[0].upload_id}}\\"><img src=\\"{{images[0].sources[0]}}\\" title=\\"{{images[0].description}}\\" class=\\"uploaded-img-for-collage popup-img\\" data-mfp-src=\\"{{images[0].sources[0]}}\\"></div><div class=\\"template-for-4 minor-images\\">\\n<div class=\\"img-content-template template-for-4 minor\\" data-upload-file-id=\\"{{images[1].upload_id}}\\"><img src=\\"{{images[1].sources[0]}}\\" title=\\"{{images[1].description}}\\" class=\\"uploaded-img-for-collage popup-img\\" data-mfp-src=\\"{{images[1].sources[0]}}\\"></div>\\n<div class=\\"img-content-template template-for-4 minor\\" data-upload-file-id=\\"{{images[2].upload_id}}\\"><img src=\\"{{images[2].sources[0]}}\\" title=\\"{{images[2].description}}\\" class=\\"uploaded-img-for-collage popup-img\\" data-mfp-src=\\"{{images[2].sources[0]}}\\"></div>\\n<div class=\\"img-content-template template-for-4 minor\\" data-upload-file-id=\\"{{images[3].upload_id}}\\"><img src=\\"{{images[3].sources[0]}}\\" title=\\"{{images[3].description}}\\" class=\\"uploaded-img-for-collage popup-img\\" data-mfp-src=\\"{{images[3].sources[0]}}\\"></div></div></div>");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/messages/template-for-4.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/template-for-5.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"image-collection zoom-gallery template-for-5\\"><div class=\\"img-content-wrap template-for-5 main\\"><div class=\\"img-content-template template-for-5\\" data-upload-file-id=\\"{{images[0].upload_id}}\\"><img src=\\"{{images[0].sources[0]}}\\" title=\\"{{images[0].description}}\\" class=\\"uploaded-img-for-collage popup-img\\" data-mfp-src=\\"{{images[0].sources[0]}}\\"></div><div class=\\"img-content-template template-for-5\\" data-upload-file-id=\\"{{images[1].upload_id}}\\"><img src=\\"{{images[1].sources[0]}}\\" title=\\"{{images[1].description}}\\" class=\\"uploaded-img-for-collage popup-img\\" data-mfp-src=\\"{{images[1].sources[0]}}\\"></div></div>\\n<div class=\\"img-content-wrap template-for-5 minor-images\\"><div class=\\"img-content-template template-for-5\\" data-upload-file-id=\\"{{images[2].upload_id}}\\"><img src=\\"{{images[2].sources[0]}}\\" title=\\"{{images[2].description}}\\" class=\\"uploaded-img-for-collage popup-img\\" data-mfp-src=\\"{{images[2].sources[0]}}\\"></div>\\n<div class=\\"img-content-template template-for-5\\" data-upload-file-id=\\"{{images[3].upload_id}}\\"><img src=\\"{{images[3].sources[0]}}\\" title=\\"{{images[3].description}}\\" class=\\"uploaded-img-for-collage popup-img\\" data-mfp-src=\\"{{images[3].sources[0]}}\\"></div>\\n<div class=\\"img-content-template template-for-5\\" data-upload-file-id=\\"{{images[4].upload_id}}\\"><img src=\\"{{images[4].sources[0]}}\\" title=\\"{{images[4].description}}\\" class=\\"uploaded-img-for-collage popup-img\\" data-mfp-src=\\"{{images[4].sources[0]}}\\"></div></div></div>");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/messages/template-for-5.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/template-for-6.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"image-collection zoom-gallery template-for-6\\"><div class=\\"img-content-wrap template-for-6 main-row\\"><div class=\\"img-content-template template-for-6 main\\" data-upload-file-id=\\"{{images[0].upload_id}}\\"><img src=\\"{{images[0].sources[0]}}\\" title=\\"{{images[0].description}}\\" class=\\"uploaded-img-for-collage popup-img\\" data-mfp-src=\\"{{images[0].sources[0]}}\\"></div><div class=\\"template-for-6 minor-1\\"><div class=\\"img-content-template template-for-6\\" data-upload-file-id=\\"{{images[1].upload_id}}\\"><img src=\\"{{images[1].sources[0]}}\\" title=\\"{{images[1].description}}\\" class=\\"uploaded-img-for-collage popup-img\\" data-mfp-src=\\"{{images[1].sources[0]}}\\"></div>\\n<div class=\\"img-content-template template-for-6\\" data-upload-file-id=\\"{{images[2].upload_id}}\\"><img src=\\"{{images[2].sources[0]}}\\" title=\\"{{images[2].description}}\\" class=\\"uploaded-img-for-collage popup-img\\" data-mfp-src=\\"{{images[2].sources[0]}}\\"></div></div></div>\\n<div class=\\"template-for-6 minor-2\\"><div class=\\"img-content-template template-for-6\\" data-upload-file-id=\\"{{images[3].upload_id}}\\"><img src=\\"{{images[3].sources[0]}}\\" title=\\"{{images[3].description}}\\" class=\\"uploaded-img-for-collage popup-img\\" data-mfp-src=\\"{{images[3].sources[0]}}\\"></div>\\n<div class=\\"img-content-template template-for-6\\" data-upload-file-id=\\"{{images[4].upload_id}}\\"><img src=\\"{{images[4].sources[0]}}\\" title=\\"{{images[4].description}}\\" class=\\"uploaded-img-for-collage popup-img\\" data-mfp-src=\\"{{images[4].sources[0]}}\\"></div>\\n<div class=\\"img-content-template template-for-6 last-image\\" data-upload-file-id=\\"{{images[5].upload_id}}\\"><img src=\\"{{images[5].sources[0]}}\\" title=\\"{{images[5].description}}\\" class=\\"uploaded-img-for-collage popup-img\\" data-mfp-src=\\"{{images[5].sources[0]}}\\">\\n{[ if (images.length > 6) { ]}<span class=\\"image-counter\\"></span>{[ for (var i=6; i < images.length; i++) {]} <div class=\\"img-content-template hidden\\" data-upload-file-id=\\"{{images[i].upload_id}}\\"><img src=\\"{{images[i].sources[0]}}\\" title=\\"{{images[i].description}}\\" class=\\"uploaded-img-for-collage popup-img\\" data-mfp-src=\\"{{images[i].sources[0]}}\\"></div> {[}} ]}</div></div></div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/messages/template-for-6.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/video.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"plyr-video-container\\"  data-provider=\\"html5\\" data-src=\\"{{video_src}}\\">\\n    <div class=\\"plyr-video-play\\">\\n        <svg class=\\"mdi mdi-32px mdi-svg-template\\" data-svgname=\\"play\\"></svg>\\n    </div>\\n    <div class=\\"plyr-video-playing\\">\\n        <svg class=\\"mdi mdi-48px mdi-svg-template\\" data-svgname=\\"player-float\\"></svg>\\n        <div class=\\"plyr-video-playing-hint\\">{[print(xabber.getString(\\"chat_message_video_playing_hint\\"))]}</div>\\n    </div>\\n    {[ if (thumbnail) {]}\\n        <img class=\\"plyr-video-poster\\" src=\\"{{thumbnail}}\\" onerror=\\"this.style.display=\'none\'\\">\\n    {[}]}\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/messages/video.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/voice_message.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"chat-message\\"> {[alert({file_url})]} </div>");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/messages/voice_message.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/saved_chat_head.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"circle-avatar ground-color-700\\"></div>\\n<div class=\\"chat-head-info-buttons-container\\">\\n    <div class=\\"contact-info\\">\\n        <p class=\\"contact-name one-line\\">{[print(xabber.getString(\\"saved_messages__header\\"))]}</p>\\n        <p class=\\"one-liner\\"></p>\\n    </div>\\n    <div class=\\"chat-tools-wrap\\">\\n        <div class=\\"chat-tool chat-tool-player\\">\\n            <div class=\\"chat-tool-player-containter\\">\\n                <div class=\\"chat-tool chat-tool-plyr-controls btn-previous-plyr\\">\\n                    <i class=\\"mdi mdi-skip-previous mdi-24px\\"></i>\\n                </div>\\n                <div class=\\"chat-tool chat-tool-plyr-controls btn-play-pause-plyr\\">\\n                    <i class=\\"mdi mdi-play mdi-24px\\"></i>\\n                    <i class=\\"mdi mdi-pause mdi-24px\\"></i>\\n                </div>\\n                <div class=\\"chat-tool chat-tool-plyr-controls btn-next-plyr\\">\\n                    <i class=\\"mdi mdi-skip-next mdi-24px\\"></i>\\n                </div>\\n                <div class=\\"chat-tool chat-tool-plyr-controls btn-popup-plyr\\">\\n                    <img class=\\"player-poster hidden\\">\\n                    <svg class=\\"mdi mdi-32px mdi-player-type-icon mdi-svg-template\\" data-svgname=\\"video\\"></svg>\\n                    <div class=\\"voice-message-player-avatar circle-avatar hidden\\"/>\\n                </div>\\n                <div class=\\"chat-tool chat-player-duration chat-tool-plyr-controls\\">\\n                    <div class=\\"chat-head-player-title one-line\\"><div class=\\"chat-head-player-title-text\\">{[print(xabber.getString(\\"chat_message_video\\"))]}</div></div>\\n                    <div class=\\"chat-head-player-title-bottom-container\\">\\n                        <span class=\\"chat-head-player-type one-line\\">{[print(xabber.getString(\\"chat_message_video\\"))]}</span><span class=\\"chat-head-player-type-dot\\"> •</span>\\n                        <span class=\\"chat-head-player-current-time\\">0:00</span> /\\n                        <span class=\\"chat-head-player-total-time\\">0:00</span>\\n                    </div>\\n                </div>\\n                <div class=\\"chat-tool chat-tool-plyr-controls btn-stop-plyr\\">\\n                    <i class=\\"mdi mdi-close mdi-16px\\"></i>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\"chat-tool btn-jingle-message\\">\\n            <i class=\\"mdi mdi-phone mdi-24px\\"></i>\\n        </div>\\n        <div class=\\"chat-tool btn-chat-pin\\">\\n            <svg class=\\"mdi mdi-24px\\" viewBox=\\"0 0 24 24\\">\\n                <svg class=\\"mdi mdi-24px\\" viewBox=\\"0 0 24 24\\">\\n                    <path id=\\"tooltip-variant\\" fill=\\"#9E9E9E\\" fill-rule=\\"nonzero\\" d=\\"M16,12V4H17V2H7V4H8V12L6,14V16H11.2V22H12.8V16H18V14L16,12Z\\"/>\\n                </svg>\\n            </svg>\\n        </div>\\n        <div class=\\"chat-tool btn-search-messages\\">\\n            <i class=\\"search-icon mdi mdi-24px mdi-magnify\\"></i>\\n        </div>\\n        <div class=\\"chat-tool btn-more dropdown-button\\" data-activates=\\"{{view.cid}}-more\\">\\n            <i class=\\"mdi mdi-24px mdi-dots-vertical\\"></i>\\n        </div>\\n        <ul id=\\"{{view.cid}}-more\\" class=\\"chat-head-menu dropdown-content noselect\\">\\n            <li class=\\"btn-delete-chat\\">\\n                <span class=\\"one-line\\">{[print(xabber.getString(\\"chat_settings__button_delete_all\\"))]}</span>\\n            </li>\\n        </ul>\\n    </div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/saved_chat_head.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/send_media.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"modal-header\\">\\n    <span></span>\\n    <div class=\\"menu-wrap\\">\\n        <div data-screen-name=\\"image\\" class=\\"menu-btn btn-library\\">{[print(xabber.getString(\\"images\\"))]}</div>\\n        <div data-screen-name=\\"video\\" class=\\"menu-btn btn-library\\">{[print(xabber.getString(\\"videos\\"))]}</div>\\n        <div data-screen-name=\\"upload\\" class=\\"menu-btn btn-upload\\">{[print(xabber.getString(\\"settings__dialog_background__menu_item_upload\\"))]}</div>\\n        <div data-screen-name=\\"web-address\\" class=\\"menu-btn btn-web-address\\">{[print(xabber.getString(\\"settings__dialog_background__menu_item_url\\"))]}</div>\\n    </div>\\n</div>\\n<div class=\\"modal-content\\">\\n    <div data-screen=\\"image\\" class=\\"screen-wrap hidden library-wrap\\"></div>\\n    <div data-screen=\\"video\\" class=\\"screen-wrap hidden library-wrap\\"></div>\\n    <div data-screen=\\"upload\\" class=\\"screen-wrap\\">\\n        <div class=\\"upload-wrap\\">\\n            <div class=\\"upload-text\\">{[print(xabber.getString(\\"chat_bottom__drag_and_drop__text_drop_files_here\\"))]}</div>\\n            <div class=\\"upload-button\\">\\n                <button type=\\"file\\">{[print(xabber.getString(\\"send_media__btn_upload\\"))]}</button>\\n                <input type=\\"file\\" multiple>\\n            </div></div>\\n    </div>\\n    <div data-screen=\\"web-address\\" class=\\"hidden screen-wrap web-address-wrap\\">\\n        <div class=\\"web-address\\">\\n            <div class=\\"label\\">{[print(xabber.getString(\\"settings__dialog_background__section_url__label\\"))]}</div>\\n            <input class=\\"url\\"/>\\n        </div>\\n        <div class=\\"image-preview\\">\\n            <img class=\\"hidden\\">\\n            <p>{[print(xabber.getString(\\"settings__dialog_background__section_url__placeholder_preview\\"))]}</p>\\n        </div>\\n    </div>\\n</div>\\n<div class=\\"modal-footer\\">\\n    <button class=\\"btn-flat btn-main text-color-700 non-active btn-add\\">{[print(xabber.getString(\\"add\\"))]}</button>\\n    <button class=\\"btn-flat btn-main btn-dark btn-cancel\\">{[print(xabber.getString(\\"cancel\\"))]}</button>\\n    <div class=\\"modal-preloader-wrap\\"></div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/send_media.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/chats/subscription_buttons.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"subscription-buttons\\">\\n    <div class=\\"subscription-info\\"></div>\\n    <div class=\\"button text-color-500 btn-add\\">{[print(xabber.getString(\\"contact_add\\"))]}</div>\\n    <div class=\\"button btn-block\\">{[print(xabber.getString(\\"contact_bar_block\\"))]}</div>\\n    <div class=\\"button text-color-500 btn-allow\\">{[print(xabber.getString(\\"chat_allow\\"))]}</div>\\n    <div class=\\"button text-color-500 btn-subscribe\\">{[print(xabber.getString(\\"chat_subscribe\\"))]}</div>\\n    <i class=\\"mdi-close btn-decline mdi mdi-24px\\"/>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/chats/subscription_buttons.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/account_roster_left.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"roster-account-info-wrap\\">\\n    <div class=\\"roster-account-info ground-color-100\\">\\n        <div class=\\"account-indicator ground-color-700\\"></div>\\n        <div class=\\"circle-avatar noselect\\"></div>\\n        <div class=\\"text-info-wrap\\">\\n            <p class=\\"name text-color-900 one-line\\"></p>\\n            <p class=\\"jid one-line\\"></p>\\n        </div>\\n        <div class=\\"button-divider\\"></div>\\n    </div>\\n    <div class=\\"status-button\\">\\n        <div class=\\"status\\"></div>\\n    </div>\\n    <div class=\\"roster-account-shrank-footer1 ground-color-50\\">\\n        <div class=\\"account-indicator ground-color-300\\"></div>\\n    </div>\\n    <div class=\\"roster-account-shrank-footer2 ground-color-50\\">\\n        <div class=\\"account-indicator ground-color-300\\"></div>\\n    </div>\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/account_roster_left.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/account_roster_right.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"roster-account-info-wrap\\">\\n    <div class=\\"roster-account-info\\">\\n        <div class=\\"circle-avatar-wrap ground-color-500\\">\\n            <div class=\\"circle-avatar border-color ground-color-700 noselect\\"></div>\\n        </div>\\n        <div class=\\"text-info-wrap\\">\\n            <p class=\\"name text-color-700 one-line\\"></p>\\n            <p class=\\"status-message text-color-700 one-line\\"></p>\\n            <div class=\\"roster-info\\">\\n                <i class=\\"mdi mdi-account-multiple-outline\\"></i>\\n                <span class=\\"counter\\"></span>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\"status-button\\">\\n        <div class=\\"status\\"></div>\\n    </div>\\n    <div class=\\"roster-account-shrank-footer1\\"></div>\\n    <div class=\\"roster-account-shrank-footer2\\"></div>\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/account_roster_right.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/add_contact.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"modal-content-wrap\\">\\n    <div class=\\"modal-header\\">\\n        <span>{[print(xabber.getString(\\"dialog_add_contact__header\\"))]}</span>\\n        <div class=\\"account-dropdown-wrap\\" data-activates=\\"select-account-for-add-contact\\">\\n            <div class=\\"dropdown-button\\">\\n                <div class=\\"account-item-wrap\\">\\n                    <div class=\\"circle-avatar noselect\\">\\n                        <img>\\n                    </div>\\n                </div>\\n            </div>\\n            <div id=\\"select-account-for-add-contact\\" class=\\"dropdown-content noselect\\">\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\"modal-content\\">\\n        <div class=\\"add-contact-jid-step\\">\\n            <div class=\\"row name-field\\">\\n                <div class=\\"input-field\\">\\n                    \x3c!--<label for=\\"new_contact_username\\">{[print(xabber.getString(\\"dialog_add_contact__label_jid\\"))]}</label>--\x3e\\n                    <input id=\\"new_contact_username\\" type=\\"text\\" placeholder=\'{[print(xabber.getString(\\"dialog_add_contact__label_jid\\"))]}\' name=\\"username\\">\\n                    <span class=\\"errors fixed\\"></span>\\n                </div>\\n            </div>\\n        </div>\\n        \x3c!--<div class=\\"add-contact-contact-step\\">--\x3e\\n            \x3c!--<div class=\\"row name-field\\">--\x3e\\n                \x3c!--<div class=\\"input-field\\">--\x3e\\n                    \x3c!--<label for=\\"new_contact_name\\">{[print(xabber.getString(\\"contact_user\\"))]}</label>--\x3e\\n                    \x3c!--<input id=\\"new_contact_name\\" type=\\"text\\" placeholder=\'{[print(xabber.getString(\\"contact_user\\"))]}\' name=\\"contact_name\\" required>--\x3e\\n                \x3c!--</div>--\x3e\\n            \x3c!--</div>--\x3e\\n            \x3c!--<div class=\\"row groups-field\\">--\x3e\\n                \x3c!--<div class=\\"field-header\\">{[print(xabber.getString(\\"contact_circle\\"))]}</div>--\x3e\\n                \x3c!--<div class=\\"groups checkbox-list\\">--\x3e\\n                \x3c!--</div>--\x3e\\n            \x3c!--</div>--\x3e\\n        \x3c!--</div>--\x3e\\n    </div>\\n    <div class=\\"modal-footer\\">\\n        <button class=\\"btn-flat btn-main btn-add\\">{[print(xabber.getString(\\"dialog_add_contact__button_add\\"))]}</button>\\n        <button class=\\"btn-flat btn-main btn-dark btn-cancel\\">{[print(xabber.getString(\\"dialog_add_contact__button_cancel\\"))]}</button>\\n    </div>\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/add_contact.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/add_contact_account_item.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"account-item-wrap property-variant\\" data-jid=\\"{{jid}}\\">\\n    <div class=\\"circle-avatar noselect\\">\\n        <img>\\n    </div>\\n    <div class=\\"name-wrap\\">\\n        <div class=\\"name one-line\\">{{name}}</div>\\n        <div class=\\"jid one-line\\">{{jid}}</div>\\n    </div>\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/add_contact_account_item.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/audio_file_waveform.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"waveform\\" id=\\"{{waveform_id}}\\"></div>\\n<div class=\\"audio-control-panel\\">\\n    <span class=\\"voice-msg-current-time\\">0:00</span> /\\n    <span class=\\"voice-msg-total-time\\">0:00</span>\\n    <input value=\\"50\\" type=\\"range\\" class=\\"voice-message-volume\\">\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/audio_file_waveform.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/contact_blocked_item.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div data-jid=\\"{{jid}}\\" class=\\"blocked-contact\\">\\n    <div class=\\"input-field checkbox-field\\">\\n        <input type=\\"checkbox\\" class=\\"filled-in\\" id=\\"blocked-jid-switch-{{jid}}\\"/>\\n        <label for=\\"blocked-jid-switch-{{jid}}\\">{{jid}}</label>\\n    </div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/contact_blocked_item.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/contact_details.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"panel-content-wrap noselect\\">\\n    <div class=\\"main-info\\">\\n        <div class=\\"avatar-wrap\\">\\n            <div class=\\"circle-avatar\\"/>\\n            <div class=\\"status hide-offline\\"></div>\\n        </div>\\n        <div class=\\"text-info\\">\\n            <div class=\\"name-wrap\\"></div>\\n            <div class=\\"status-message one-line\\"></div>\\n        </div>\\n        <div class=\\"btn-escape\\">\\n            <i class=\\"mdi mdi-24px mdi-close\\"></i>\\n            <span class=\\"btn-text\\">{[print(xabber.getString(\\"button_esc\\"))]}</span>\\n        </div>\\n        <div class=\\"btn-more  dropdown-button\\" data-activates=\\"{{view.cid}}-buttons-wrap\\">\\n            <i class=\\"mdi mdi-24px mdi-dots-vertical\\"></i>\\n        </div>\\n        <ul class=\\"buttons-menu-wrap dropdown-content noselect\\" id=\\"{{view.cid}}-buttons-wrap\\">\\n            <li class=\\"btn-qr-code\\"><span class=\\"one-line\\">{[print(xabber.getString(\\"contact_settings__button_show_qr_code\\"))]}</span></li>\\n            <li class=\\"btn-auth-request\\"><span class=\\"one-line\\">{[print(xabber.getString(\\"contact_settings__button_request_authorization\\"))]}</span></li>\\n            <li class=\\"btn-add\\"><span class=\\"one-line\\">{[print(xabber.getString(\\"contact_add\\"))]}</span></li>\\n            <li class=\\"btn-delete\\"><span class=\\"one-line\\">{[print(xabber.getString(\\"remove_contact\\"))]}</span></li>\\n        </ul>\\n        <div class=\\"buttons-wrap\\">\\n            <div class=\\"button-wrap btn-chat-wrap\\">\\n                <i class=\\"mdi mdi-24px mdi-message-text btn-chat\\"></i>\\n                <div class=\\"btn-name\\">{[print(xabber.getString(\\"contact_bar_chat\\"))]}</div>\\n            </div>\\n            <div class=\\"button-wrap btn-voice-call-wrap\\">\\n                <i class=\\"mdi mdi-24px mdi-phone btn-voice-call\\"></i>\\n                <div class=\\"btn-name\\">{[print(xabber.getString(\\"contact_bar_call\\"))]}</div>\\n            </div>\\n            <div class=\\"button-wrap btn-mute-wrap\\">\\n                <i class=\\"mdi mdi-24px mdi-bell btn-mute\\"></i>\\n                <div class=\\"btn-name\\">{[print(xabber.getString(\\"contact_bar_notifications\\"))]}</div>\\n            </div>\\n            <div class=\\"button-wrap btn-block-wrap\\">\\n                <i class=\\"mdi mdi-24px mdi-block-helper btn-block\\"></i>\\n                <div class=\\"btn-name\\">{[print(xabber.getString(\\"contact_bar_block\\"))]}</div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\"panel-content private-chat\\">\\n        <div class=\\"left-column\\">\\n            <div class=\\"block-wrap subscription-block-wrap\\">\\n                <div class=\\"block-header\\">\\n                    <span class=\\"block-name\\">{[print(xabber.getString(\\"contact_subscription_settings\\"))]}</span>\\n                </div>\\n                <div class=\\"subscription-info-wrap\\">\\n                    <div class=\\"incoming-subscription-wrap\\">\\n                        <div class=\\"input-field checkbox-field incoming-subscription-wrap\\">\\n                            <input type=\\"checkbox\\" class=\\"filled-in\\" id=\\"incoming-subscription\\"/>\\n                            <label for=\\"incoming-subscription\\"></label>\\n                        </div>\\n                    </div>\\n                    <div class=\\"outcoming-subscription-wrap\\">\\n                        <div class=\\"input-field checkbox-field incoming-subscription-wrap\\">\\n                            <input type=\\"checkbox\\" class=\\"filled-in\\" id=\\"outcoming-subscription\\"/>\\n                            <label for=\\"outcoming-subscription\\"></label>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\"block-wrap vcard\\">\\n            </div>\\n        </div>\\n        <div class=\\"right-column\\">\\n            <div class=\\"block-wrap resources-block-wrap hidden\\">\\n                <div class=\\"block-header\\">\\n                    <span class=\\"block-name\\">{[print(xabber.getString(\\"contact_info_connected_clients_header\\"))]}</span>\\n                </div>\\n                <div class=\\"resources-wrap\\">\\n                </div>\\n            </div>\\n            <div class=\\"block-wrap groups-block-wrap\\"></div>\\n        </div>\\n    </div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/contact_details.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/contact_details_right.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"panel-background-clickable\\"></div>\\n<div class=\\"panel-content-wrap noselect\\">\\n    <div class=\\"main-info\\">\\n        <div class=\\"avatar-wrap\\">\\n            <div class=\\"circle-avatar\\"/>\\n        </div>\\n        <div class=\\"text-info\\">\\n            <div class=\\"name-wrap contact-details-name-wrap one-line\\"></div>\\n        </div>\\n        <div class=\\"header-buttons\\">\\n            <div class=\\"btn-escape\\">\\n                <i class=\\"mdi mdi-24px mdi-close\\"></i>\\n                <span class=\\"btn-text\\">{[print(xabber.getString(\\"button_esc\\"))]}</span>\\n            </div>\\n            <span class=\\"block-name\\">{[print(xabber.getString(\\"contact_viewer\\"))]}</span>\\n            <span class=\\"block-name second-text\\"></span>\\n            <div class=\\"btn-qr-code\\">\\n                <svg class=\\"mdi mdi-24px mdi-svg-template\\" data-svgname=\\"qrcode\\"></svg>\\n            </div>\\n            <div class=\\"btn-edit\\">\\n                <svg class=\\"mdi mdi-24px mdi-svg-template\\" data-svgname=\\"edit-outline\\"></svg>\\n            </div>\\n        </div>\\n        <div class=\\"buttons-wrap\\">\\n            <div class=\\"button-wrap btn-voice-call-wrap\\">\\n                <div class=\\"contact-btn btn-voice-call  fill-color-500\\"><svg class=\\"mdi mdi-24px mdi-svg-template\\" data-svgname=\\"call\\"></svg></div>\\n                <div class=\\"btn-name\\">{[print(xabber.getString(\\"contact_bar_call\\"))]}</div>\\n            </div>\\n            <div class=\\"button-wrap btn-search-messages\\">\\n                <div class=\\"contact-btn btn-search fill-color-500\\"><svg class=\\"mdi mdi-24px mdi-svg-template\\" data-svgname=\\"search\\"></svg></div>\\n                <div class=\\"btn-name\\">{[print(xabber.getString(\\"search\\"))]}</div>\\n            </div>\\n            <div class=\\"button-wrap btn-mute-wrap\\">\\n                <div class=\\"contact-btn btn-mute dropdown-button fill-color-500\\" data-activates=\\"{{view.cid}}-more\\"><svg class=\\"mdi mdi-24px mdi-svg-template\\" data-svgname=\\"bell\\"></svg></div>\\n                <div class=\\"btn-name\\">{[print(xabber.getString(\\"contact_bar_notifications\\"))]}</div>\\n\\n                <ul id=\\"{{view.cid}}-more\\" class=\\"contact-mute-dropdown dropdown-content noselect\\">\\n                    <li class=\\"btn-unmute-dropdown\\">\\n                        <span class=\\"one-line\\">{[print(xabber.getString(\\"unmute_chat\\"))]}</span>\\n                    </li>\\n                    <li class=\\"btn-mute-dropdown\\" data-mute=\\"minutes15\\">\\n                        <span class=\\"one-line\\">{[print(xabber.getString(\\"mute_15_min\\"))]}</span>\\n                    </li>\\n                    <li class=\\"btn-mute-dropdown\\" data-mute=\\"hours1\\">\\n                        <span class=\\"one-line\\">{[print(xabber.getString(\\"mute_1_hour\\"))]}</span>\\n                    </li>\\n                    <li class=\\"btn-mute-dropdown\\" data-mute=\\"hours2\\">\\n                        <span class=\\"one-line\\">{[print(xabber.getString(\\"mute_2_hours\\"))]}</span>\\n                    </li>\\n                    <li class=\\"btn-mute-dropdown\\" data-mute=\\"day\\">\\n                        <span class=\\"one-line\\">{[print(xabber.getString(\\"mute_1_day\\"))]}</span>\\n                    </li>\\n                    <li class=\\"btn-mute-dropdown\\" data-mute=\\"forever\\">\\n                        <span class=\\"one-line\\">{[print(xabber.getString(\\"mute_forever\\"))]}</span>\\n                    </li>\\n                </ul>\\n            </div>\\n            <div class=\\"button-wrap btn-block-wrap\\">\\n                <div class=\\"contact-btn btn-block fill-color-500\\"><svg class=\\"mdi mdi-24px mdi-svg-template\\" data-svgname=\\"cancel\\"></svg></div>\\n                <div class=\\"btn-name text-color-500\\">{[print(xabber.getString(\\"contact_bar_block\\"))]}</div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\"panel-content private-chat\\">\\n        <div class=\\"block-wrap vcard\\">\\n        </div>\\n        <div class=\\"block-wrap groups-block-wrap\\"></div>\\n        <div class=\\"block-wrap edit-block-wrap\\"></div>\\n        <div class=\\"block-wrap search-messages-block-wrap\\"></div>\\n        <div class=\\"bottom-block\\">\\n            <ul class=\\"tabs\\">\\n                <li data-value=\\"image\\" class=\\"list-variant tab\\"><a class=\\"text-color-700\\">{[print(xabber.getString(\\"images\\"))]}</a></li>\\n                <li data-value=\\"video\\" class=\\"list-variant tab\\"><a class=\\"text-color-700\\">{[print(xabber.getString(\\"videos\\"))]}</a></li>\\n                <li data-value=\\"files\\" class=\\"list-variant tab\\"><a class=\\"text-color-700\\">{[print(xabber.getString(\\"files\\"))]}</a></li>\\n                <li data-value=\\"voice\\" class=\\"list-variant tab\\"><a class=\\"text-color-700\\">{[print(xabber.getString(\\"vcard_type_voice\\"))]}</a></li>\\n            </ul>\\n            <div class=\\"block-wrap participants-wrap\\"></div>\\n        </div>\\n    </div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/contact_details_right.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/contact_left_item.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"circle-avatar noselect\\"></div>\\n<div class=\\"text-info-wrap\\">\\n    <div class=\\"name-wrap\\">\\n        <p class=\\"name one-line\\"></p>\\n    </div>\\n    <p class=\\"jid one-line\\"></p>\\n</div>\\n<div class=\\"status hide-offline\\"></div>\\n<div class=\\"chat-icon hidden\\"></div>");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/contact_left_item.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/contact_placeholder.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"text\\">{[print(xabber.getString(\\"contact_list__placeholder\\"))]}</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/contact_placeholder.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/contact_right_item.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"circle-avatar noselect\\"></div>\\n<div class=\\"text-info-wrap\\">\\n    <p class=\\"name one-line\\"></p>\\n    <p class=\\"jid one-line hidden\\"></p>\\n    <p class=\\"status-message one-line\\"></p>\\n</div>\\n<div class=\\"status hide-offline\\"></div>\\n<div class=\\"chat-icon hidden\\"></div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/contact_right_item.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/edit_contact.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("\\n<div class=\\"edit-wrap\\">\\n    <div class=\\"edit-header block-header\\">\\n        <i class=\\"details-icon btn-back mdi mdi-24px mdi-arrow-left\\"></i>\\n        <span class=\\"block-name\\">{[print(xabber.getString(\\"edit_vcard\\"))]}</span>\\n    </div>\\n    <div class=\\"edit-contact\\">\\n        <div class=\\"details-icon-wrap\\"><svg class=\\"details-icon mdi mdi-24px mdi-svg-template\\" data-svgname=\\"account-outline\\"></svg></div>\\n        <div class=\\"name-wrap\\"></div>\\n    </div>\\n    <div class=\\"subscription-statuses\\">\\n        <div class=\\"status-out subscription-status-wrap dropdown-button\\" data-activates=\\"{{view.cid}}-status-out\\">\\n            <div class=\\"details-icon-wrap\\"><svg class=\\"details-icon mdi mdi-24px mdi-svg-template\\" data-svgname=\\"subscription-to\\"></svg></div>\\n            <div class=\\"info\\">\\n                <div class=\\"value dotted-underline one-line\\"></div>\\n            </div>\\n        </div>\\n        <div id=\\"{{view.cid}}-status-out\\" class=\\"status-out-dropdown dropdown-content noselect\\">\\n            <div class=\\"btn-request property-variant hidden\\">\\n                <div class=\\"one-line\\">{[print(xabber.getString(\\"contact_subscription_request_subscription\\"))]}</div>\\n            </div>\\n            <div class=\\"btn-cancel-request property-variant hidden\\">\\n                <div class=\\"one-line\\">{[print(xabber.getString(\\"contact_subscription_cancel_request_subscription\\"))]}</div>\\n            </div>\\n            <div class=\\"btn-cancel-subscription-out property-variant hidden\\">\\n                <div class=\\"one-line\\">{[print(xabber.getString(\\"contact_subscription_cancel_subscribe\\"))]}</div>\\n            </div>\\n        </div>\\n        <div class=\\"status-in subscription-status-wrap dropdown-button\\" data-activates=\\"{{view.cid}}-status-in\\">\\n            <div class=\\"details-icon-wrap\\"><svg class=\\"details-icon mdi mdi-24px mdi-svg-template\\" data-svgname=\\"subscription-from\\"></svg></div>\\n            <div class=\\"info\\">\\n                <div class=\\"value dotted-underline one-line\\"></div>\\n            </div>\\n        </div>\\n        <div id=\\"{{view.cid}}-status-in\\" class=\\"status-in-dropdown dropdown-content noselect\\">\\n            <div class=\\"btn-allow property-variant hidden\\">\\n                <div class=\\"one-line\\">{[print(xabber.getString(\\"contact_subscription_allow_subscription\\"))]}</div>\\n            </div>\\n            <div class=\\"btn-allow-request property-variant hidden\\">\\n                <div class=\\"one-line\\">{[print(xabber.getString(\\"contact_subscription_allow_subscription\\"))]}</div>\\n            </div>\\n            <div class=\\"btn-disallow-request property-variant hidden\\">\\n                <div class=\\"one-line\\">{[print(xabber.getString(\\"decline\\"))]}</div>\\n            </div>\\n            <div class=\\"btn-disallow-preapproved property-variant hidden\\">\\n                <div class=\\"one-line\\">{[print(xabber.getString(\\"contact_subscription_disallow_subscription\\"))]}</div>\\n            </div>\\n            <div class=\\"btn-cancel-subscription-in property-variant hidden\\">\\n                <div class=\\"one-line\\">{[print(xabber.getString(\\"contact_subscription_cancel_subscription\\"))]}</div>\\n            </div>\\n        </div>\\n        <div class=\\"status-description subscription-status-wrap\\">\\n            <div class=\\"details-icon-wrap\\"><svg class=\\"details-icon mdi mdi-24px mdi-svg-template\\" data-svgname=\\"information-outline\\"></svg></div>\\n            <div class=\\"info\\">\\n                <div class=\\"value\\"></div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\"edit-buttons\\">\\n        <div class=\\"edit-button btn-delete\\">\\n            <div class=\\"details-icon-wrap\\"><i class=\\"details-icon mdi mdi-24px mdi-delete text-color-500\\"></i></div>\\n            <div class=\\"edit-button-text \\">\\n                <span class=\\"text-color-500 dotted-underline text-decoration-color-300 one-line\\">{[print(xabber.getString(\\"contact_delete_full\\"))]}</span>\\n            </div>\\n        </div>\\n    </div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/edit_contact.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/edit_group.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("\\n<div class=\\"edit-wrap\\">\\n    <div class=\\"edit-save-preloader preloader-wrap\\">\\n        <div class=\\"preloader-wrapper preloader-17px visible\\">\\n            <div class=\\"spinner-layer\\">\\n                <div class=\\"circle-clipper left\\">\\n                    <div class=\\"circle\\"></div>\\n                </div>\\n                <div class=\\"gap-patch\\">\\n                    <div class=\\"circle\\"></div>\\n                </div>\\n                <div class=\\"circle-clipper right\\">\\n                    <div class=\\"circle\\"></div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\"edit-header main-edit-header block-header\\">\\n        <i class=\\"details-icon btn-back mdi mdi-24px mdi-arrow-right\\"></i>\\n        <span class=\\"block-name\\"></span>\\n        <div class=\\"btn-edit\\">\\n            <svg class=\\"mdi mdi-24px mdi-svg-template\\" data-svgname=\\"edit-outline\\"></svg>\\n        </div>\\n    </div>\\n    <div class=\\"edit-group vcard\\">\\n        <div class=\\"info-wrap description-info-wrap\\">\\n            <div class=\\"details-icon-wrap\\">\\n                <svg class=\\"details-icon mdi mdi-24px mdi-svg-template\\" data-svgname=\\"description-outline\\"></svg>\\n            </div>\\n            <div class=\\"info-hover\\">\\n                <div class=\\"info description\\">\\n                    <div class=\\"edit-group-name value\\"></div>\\n                    <div class=\\"edit-group-description value\\"></div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\"description-edit-wrap hidden\\">\\n        <div class=\\"edit-header property-header description-header block-header\\">\\n            <i class=\\"details-icon btn-property-back btn-back mdi mdi-24px mdi-arrow-right\\"></i>\\n            <span class=\\"block-name\\">{[print(xabber.getString(\\"groupchat_properties\\"))]}</span>\\n            <span class=\\"block-name second-text fade-out\\"></span>\\n            <button class=\\"btn-save btn-flat text-color-500 btn-main fade-out\\">{[print(xabber.getString(\\"save\\"))]}</button>\\n        </div>\\n        <div class=\\"main-info\\">\\n            <div class=\\"avatar-wrap\\">\\n                <div class=\\"circle-avatar\\">\\n                    <input title=\'{[print(xabber.getString(\\"groupchat_member_edit_change_avatar\\"))]}\' type=\\"file\\"/>\\n                    <svg class=\\"set-groupchat-avatar\\" viewBox=\\"0 0 24 24\\">\\n                        <path d=\\"M4,4H7L9,2H15L17,4H20A2,2 0 0,1 22,6V18A2,2 0 0,1 20,20H4A2,2 0 0,1 2,18V6A2,2 0 0,1 4,4M12,7A5,5 0 0,0 7,12A5,5 0 0,0 12,17A5,5 0 0,0 17,12A5,5 0 0,0 12,7M12,9A3,3 0 0,1 15,12A3,3 0 0,1 12,15A3,3 0 0,1 9,12A3,3 0 0,1 12,9Z\\" />\\n                    </svg>\\n                    <div class=\\"preloader-wrap\\">\\n                        <div class=\\"preloader-wrapper preloader-32px visible\\">\\n                            <div class=\\"spinner-layer\\">\\n                                <div class=\\"circle-clipper left\\">\\n                                    <div class=\\"circle\\"></div>\\n                                </div>\\n                                <div class=\\"gap-patch\\">\\n                                    <div class=\\"circle\\"></div>\\n                                </div>\\n                                <div class=\\"circle-clipper right\\">\\n                                    <div class=\\"circle\\"></div>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\"set-groupchat-avatar-text\\">{[print(xabber.getString(\\"groupchat_set_avatar\\"))]}</div>\\n            </div>\\n        </div>\\n        <div class=\\"edit-group\\">\\n            <div class=\\"edit-group-name-wrap\\"></div>\\n            <div class=\\"edit-group-description-wrap\\"></div>\\n        </div>\\n    </div>\\n    <div class=\\"edit-properties\\">\\n        <div class=\\"group-property membership-property\\">\\n            <div class=\\"details-icon-wrap\\" ><svg class=\\"details-icon mdi mdi-24px mdi-svg-template\\" data-svgname=\\"membership-outline\\"></svg></div>\\n            <div class=\\"group-property-text dotted-underline\\">\\n                {[print(xabber.getString(\\"groupchat_membership\\"))]}\\n                <span></span>\\n            </div>\\n            <div class=\\"details-icon-wrap\\"><svg class=\\"details-icon-right mdi mdi-28px mdi-svg-template\\" data-svgname=\\"chevron-right-variant\\"></svg></div>\\n        </div>\\n        <div class=\\"group-property index-property\\">\\n            <div class=\\"details-icon-wrap\\"><svg class=\\"details-icon mdi mdi-24px mdi-svg-template\\" data-svgname=\\"index\\"></svg></div>\\n            <div class=\\"group-property-text dotted-underline\\">\\n                {[print(xabber.getString(\\"groupchat_index\\"))]}\\n                <span></span>\\n            </div>\\n            <div class=\\"details-icon-wrap\\"><svg class=\\"details-icon-right mdi mdi-28px mdi-svg-template\\" data-svgname=\\"chevron-right-variant\\"></svg></div>\\n        </div>\\n        <div class=\\"edit-button btn-default-restrictions\\">\\n            <div class=\\"details-icon-wrap\\"><svg class=\\"details-icon mdi mdi-24px mdi-svg-template\\" data-svgname=\\"restrictions-outline\\"></svg></div>\\n            <div class=\\"edit-button-text\\">\\n                <span class=\\"one-line dotted-underline\\">{[print(xabber.getString(\\"groupchat_default_restrictions\\"))]}</span>\\n                <span class=\\"edit-button-value\\"></span>\\n            </div>\\n            <div class=\\"details-icon-wrap\\"><svg class=\\"details-icon-right mdi mdi-28px mdi-svg-template\\" data-svgname=\\"chevron-right-variant\\"></svg></div>\\n        </div>\\n    </div>\\n    <div class=\\"membership-property-edit-wrap hidden\\">\\n        <div class=\\"edit-header property-header block-header\\">\\n            <i class=\\"details-icon btn-property-back btn-back mdi mdi-24px mdi-arrow-right\\"></i>\\n            <span class=\\"block-name\\">{[print(xabber.getString(\\"groupchat_membership\\"))]}</span>\\n            <span class=\\"block-name second-text fade-out\\"></span>\\n            <button class=\\"btn-save btn-flat text-color-500 btn-main fade-out\\">{[print(xabber.getString(\\"save\\"))]}</button>\\n        </div>\\n        <div class=\\"property-wrap membership-field\\">\\n            <div class=\\"property-radio\\">\\n                <input id=\\"open\\" name=\\"membership-property-input\\" type=\\"radio\\" class=\\"with-gap\\" required=\\"\\">\\n                <label class=\\"property-label\\" for=\\"open\\">{[print(xabber.getString(\\"groupchat_membership_type_open\\"))]}</label>\\n            </div>\\n            <div class=\\"property-radio\\">\\n                <input id=\\"member-only\\" name=\\"membership-property-input\\" type=\\"radio\\" class=\\"with-gap\\" required=\\"\\">\\n                <label class=\\"property-label\\" for=\\"member-only\\">{[print(xabber.getString(\\"groupchat_membership_type_members_only\\"))]}</label>\\n            </div>\\n        </div>\\n        <div class=\\"property-description\\">{[print(xabber.getString(\\"groupchat_membership_description\\"))]}</div>\\n    </div>\\n    <div class=\\"index-property-edit-wrap hidden\\">\\n        <div class=\\"edit-header property-header block-header\\">\\n            <i class=\\"details-icon btn-property-back btn-back mdi mdi-24px mdi-arrow-right\\"></i>\\n            <span class=\\"block-name\\">{[print(xabber.getString(\\"groupchat_index\\"))]}</span>\\n            <span class=\\"block-name second-text fade-out\\"></span>\\n            <button class=\\"btn-save btn-flat text-color-500 btn-main fade-out\\">{[print(xabber.getString(\\"save\\"))]}</button>\\n        </div>\\n        <div class=\\"property-wrap index-field\\">\\n            <div class=\\"property-radio\\">\\n                <input id=\\"none\\" name=\\"index-property-input\\" type=\\"radio\\" class=\\"with-gap\\" required=\\"\\">\\n                <label class=\\"property-label\\" for=\\"none\\">{[print(xabber.getString(\\"groupchat_index_type_none\\"))]}</label>\\n            </div>\\n            <div class=\\"property-radio\\">\\n                <input id=\\"local\\" name=\\"index-property-input\\" type=\\"radio\\" class=\\"with-gap\\" required=\\"\\">\\n                <label class=\\"property-label\\" for=\\"local\\">{[print(xabber.getString(\\"groupchat_index_type_local\\"))]}</label>\\n            </div>\\n            <div class=\\"property-radio\\">\\n                <input id=\\"global\\" name=\\"index-property-input\\" type=\\"radio\\" class=\\"with-gap\\" required=\\"\\">\\n                <label class=\\"property-label\\" for=\\"global\\">{[print(xabber.getString(\\"groupchat_index_type_global\\"))]}</label>\\n            </div>\\n        </div>\\n        <div class=\\"property-description\\">{[print(xabber.getString(\\"groupchat_index_description\\"))]}</div>\\n    </div>\\n    <div class=\\"bottom-block edit-bottom-block\\">\\n        <div class=\\"edit-pictured-buttons\\">\\n            <div data-value=\\"invitations\\" class=\\"list-variant invitations-variant\\">\\n                <div class=\\"details-icon-wrap\\"><svg class=\\"details-icon mdi mdi-24px mdi-svg-template\\" data-svgname=\\"invite-outline\\"></svg></div>\\n                <div class=\\"variant-text dotted-underline\\">{[print(xabber.getString(\\"groupchat_invitations\\"))]}<span class=\\"counted\\"></span></div>\\n                <div class=\\"details-icon-wrap\\"><svg class=\\"details-icon-right mdi mdi-28px mdi-svg-template\\" data-svgname=\\"chevron-right-variant\\"></svg></div>\\n            </div>\\n            <div data-value=\\"blocked\\" class=\\"list-variant blocked-variant\\">\\n                <div class=\\"details-icon-wrap\\"><svg class=\\"details-icon mdi mdi-24px mdi-svg-template\\" data-svgname=\\"cancel\\"></svg></div>\\n                <div class=\\"variant-text dotted-underline\\">{[print(xabber.getString(\\"group_settings__block_list__header\\"))]}<span class=\\"counted\\"></span></div>\\n                <div class=\\"details-icon-wrap\\"><svg class=\\"details-icon-right mdi mdi-28px mdi-svg-template\\" data-svgname=\\"chevron-right-variant\\"></svg></div>\\n            </div>\\n        </div>\\n        <i class=\\"details-icon participants-edit-back btn-back-panel mdi mdi-24px mdi-arrow-right\\"></i>\\n        <span class=\\"block-name-panel\\"></span>\\n        <span class=\\"block-name-panel second-text fade-out\\">{[print(xabber.getString(\\"groupchat_selected\\"))]} <span></span></span>\\n        <div class=\\"btn-add-block\\">\\n            <svg class=\\"mdi mdi-24px mdi-svg-template\\" data-svgname=\\"blocked-add\\"></svg>\\n        </div>\\n        <i class=\\"mdi mdi-24px mdi-account-multiple-plus btn-invite\\"></i>\\n        <button class=\\"btn-remove-selected btn-flat btn-main fade-out\\">{[print(xabber.getString(\\"groupchat_revoke\\"))]}</button>\\n        <div class=\\"block-wrap participants-edit-wrap\\"></div>\\n    </div>\\n    <div class=\\"edit-buttons\\">\\n        <div class=\\"edit-button btn-clear-history-chat\\">\\n            <div class=\\"details-icon-wrap\\"><svg class=\\"details-icon mdi mdi-24px mdi-svg-template\\" data-svgname=\\"history\\"></svg></div>\\n            <div class=\\"edit-button-text\\">\\n                <span class=\\"one-line dotted-underline\\">{[print(xabber.getString(\\"clear_history\\"))]}</span>\\n            </div>\\n        </div>\\n        <div class=\\"edit-button btn-delete-group\\">\\n            <div class=\\"details-icon-wrap\\"><i class=\\"details-icon mdi mdi-24px mdi-delete text-color-500\\"></i></div>\\n            <div class=\\"edit-button-text\\">\\n                <span class=\\"text-color-500 one-line text-decoration-color-300 dotted-underline\\">{[print(xabber.getString(\\"group_settings__button_delete_group\\"))]}</span>\\n            </div>\\n        </div>\\n    </div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/edit_group.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/add_blocked_participant_form.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"block-form\\">\\n    <div class=\\"input-field\\">\\n        <input id=\\"blocking_id\\" class=\\"rich-textarea field-input\\" placeholder=\\"{[print(xabber.getString(\'vcard_jabber_id\'))]}\\" type=\\"text\\" name=\\"title\\">\\n    </div>\\n    <button class=\\"btn-block-id btn btn-main-filled ground-color-700\\">{[print(xabber.getString(\\"contact_bar_block\\"))]}</button>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/group_chats/add_blocked_participant_form.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/badge_edit_view.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"modal-content\\">\\n    <div class=\\"textarea-header\\">{[print(xabber.getString(\\"groupchat_member_badge\\"))]}</div>\\n    <div class=\\"rich-textarea badge-text\\" tabindex=\\"1\\" contenteditable></div>\\n    <div class=\\"error\\"></div>\\n</div>\\n<div class=\\"panel-footer noselect\\">\\n    <div class=\\"buttons-wrap\\">\\n        <div class=\\"insert-emoticon\\">\\n            <i class=\\"mdi mdi-24px mdi-emoticon hover-text-color-500\\"></i>\\n        </div>\\n        <div class=\\"emoticons-panel-wrap\\">\\n            <div class=\\"emoticons-panel\\"></div>\\n            <div class=\\"emoji-menu\\"></div>\\n        </div>\\n        <button class=\\"btn-save btn-flat btn-main\\">{[print(xabber.getString(\\"save\\"))]}</button>\\n        <button class=\\"btn-cancel btn-flat btn-main btn-dark\\">{[print(xabber.getString(\\"cancel\\"))]}</button>\\n    </div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/group_chats/badge_edit_view.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/default_restrictions.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"modal-header\\"><div class=\\"panel-header black-text\\">{[print(xabber.getString(\\"groupchat_default_restrictions\\"))]}</div></div>\\n<div class=\\"modal-content\\">\\n    <div class=\\"default-restrictions-list-wrap\\"></div>\\n    <p class=\\"default-restrictions-info\\">{[print(xabber.getString(\\"dialog_default_restrictions__placeholder\\"))]}</p>\\n</div>\\n<div class=\\"modal-footer\\">\\n    <div class=\\"buttons-wrap\\">\\n        <button class=\\"btn-default-restrictions-save btn-flat btn-main non-active\\">{[print(xabber.getString(\\"save\\"))]}</button>\\n        <button class=\\"btn-default-restrictions-cancel btn-flat btn-main btn-dark\\">{[print(xabber.getString(\\"cancel\\"))]}</button>\\n    </div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/group_chats/default_restrictions.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/default_restrictions_right.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"restrictions-wrap\\">\\n    <div class=\\"restrictions-header block-header\\">\\n        <i class=\\"details-icon btn-back mdi mdi-24px mdi-arrow-right\\"></i>\\n        <span class=\\"block-name\\">{[print(xabber.getString(\\"groupchat_default_restrictions\\"))]}</span>\\n        <span class=\\"block-name second-text fade-out\\"></span>\\n        <button class=\\"btn-default-restrictions-save text-color-500 btn-flat btn-main fade-out\\">{[print(xabber.getString(\\"save\\"))]}</button>\\n        <div class=\\"edit-save-preloader preloader-wrap\\">\\n            <div class=\\"preloader-wrapper preloader-17px visible\\">\\n                <div class=\\"spinner-layer\\">\\n                    <div class=\\"circle-clipper left\\">\\n                        <div class=\\"circle\\"></div>\\n                    </div>\\n                    <div class=\\"gap-patch\\">\\n                        <div class=\\"circle\\"></div>\\n                    </div>\\n                    <div class=\\"circle-clipper right\\">\\n                        <div class=\\"circle\\"></div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\"restrictions-content edit-default-restrictions\\">\\n        <div class=\\"default-restrictions-list-wrap\\"></div>\\n        <p class=\\"default-restrictions-info\\">{[print(xabber.getString(\\"dialog_default_restrictions_right__placeholder\\"))]}</p>\\n    </div>\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/group_chats/default_restrictions_right.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/description_input_widget.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"input-widget-wrap {{field_name}}-wrap\\">\\n    <div class=\\"{{field_name}}-input-wrap\\">\\n        <textarea class=\\"{{field_name}}-input rich-textarea field-input\\" type=\\"{{field_type}}\\" placeholder=\\"{{placeholder}}\\"></textarea>\\n    </div>\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/group_chats/description_input_widget.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/file_item.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"media-item\\">\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/group_chats/file_item.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/group_chat_details.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"panel-content-wrap noselect\\">\\n    <div class=\\"main-info\\">\\n        <div class=\\"avatar-wrap\\">\\n            <div class=\\"circle-avatar\\">\\n                <input title=\'{[print(xabber.getString(\\"groupchat_member_edit_change_avatar\\"))]}\' type=\\"file\\"/>\\n                <svg class=\\"set-groupchat-avatar\\" viewBox=\\"0 0 24 24\\">\\n                    <path d=\\"M4,4H7L9,2H15L17,4H20A2,2 0 0,1 22,6V18A2,2 0 0,1 20,20H4A2,2 0 0,1 2,18V6A2,2 0 0,1 4,4M12,7A5,5 0 0,0 7,12A5,5 0 0,0 12,17A5,5 0 0,0 17,12A5,5 0 0,0 12,7M12,9A3,3 0 0,1 15,12A3,3 0 0,1 12,15A3,3 0 0,1 9,12A3,3 0 0,1 12,9Z\\" />\\n                </svg>\\n                <div class=\\"preloader-wrap\\"><div class=\\"preloader-wrapper preloader-32px visible\\">\\n                    <div class=\\"spinner-layer\\">\\n                        <div class=\\"circle-clipper left\\">\\n                            <div class=\\"circle\\"></div>\\n                        </div>\\n                        <div class=\\"gap-patch\\">\\n                            <div class=\\"circle\\"></div>\\n                        </div>\\n                        <div class=\\"circle-clipper right\\">\\n                            <div class=\\"circle\\"></div>\\n                        </div>\\n                    </div>\\n                </div>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\"text-info\\">\\n            <div class=\\"name-wrap\\"></div>\\n            <div class=\\"status-message one-line\\"></div>\\n        </div>\\n        <div class=\\"btn-more dropdown-button\\" data-activates=\\"{{view.cid}}-buttons-wrap\\">\\n            <i class=\\"mdi mdi-24px mdi-dots-vertical\\"></i>\\n        </div>\\n        <ul class=\\"buttons-menu-wrap dropdown-content noselect\\" id=\\"{{view.cid}}-buttons-wrap\\">\\n            <li class=\\"btn-qr-code\\"><span class=\\"one-line\\">{[print(xabber.getString(\\"contact_settings__button_show_qr_code\\"))]}</span></li>\\n            <li class=\\"btn-edit-settings\\"><span class=\\"one-line\\">{[print(xabber.getString(\\"groupchat_settings\\"))]}</span></li>\\n            <li class=\\"btn-default-restrictions\\"><span class=\\"one-line\\">{[print(xabber.getString(\\"groupchat_default_restrictions\\"))]}</span></li>\\n            <li class=\\"btn-delete-group\\"><span class=\\"one-line\\">{[print(xabber.getString(\\"group_settings__button_delete_group\\"))]}</span></li>\\n        </ul>\\n        <div class=\\"btn-escape\\">\\n            <i class=\\"mdi mdi-24px mdi-close\\"></i>\\n            <span class=\\"btn-text\\">{[print(xabber.getString(\\"button_esc\\"))]}</span>\\n        </div>\\n        <div class=\\"buttons-wrap\\">\\n            <div class=\\"button-wrap btn-chat-wrap\\">\\n                <i class=\\"mdi mdi-24px mdi-message-text btn-chat\\"></i>\\n                <div class=\\"btn-name\\">{[print(xabber.getString(\\"contact_bar_chat\\"))]}</div>\\n            </div>\\n            <div class=\\"button-wrap btn-invite-wrap\\">\\n                <i class=\\"mdi mdi-24px mdi-account-multiple-plus btn-invite\\"></i>\\n                <div class=\\"btn-name\\">{[print(xabber.getString(\\"groupchat_bar_invite\\"))]}</div>\\n            </div>\\n            <div class=\\"button-wrap btn-mute-wrap\\">\\n                <i class=\\"mdi mdi-24px mdi-bell btn-mute\\"></i>\\n                <div class=\\"btn-name\\">{[print(xabber.getString(\\"contact_bar_notifications\\"))]}</div>\\n            </div>\\n            <div class=\\"button-wrap btn-leave-wrap\\">\\n                <div class=\\"btn-leave\\"><svg viewBox=\\"0 0 24 24\\">\\n                    <path d=\\"M13.34,8.17C12.41,8.17 11.65,7.4 11.65,6.47A1.69,1.69 0 0,1 13.34,4.78C14.28,4.78 15.04,5.54 15.04,6.47C15.04,7.4 14.28,8.17 13.34,8.17M10.3,19.93L4.37,18.75L4.71,17.05L8.86,17.9L10.21,11.04L8.69,11.64V14.5H7V10.54L11.4,8.67L12.07,8.59C12.67,8.59 13.17,8.93 13.5,9.44L14.36,10.79C15.04,12 16.39,12.82 18,12.82V14.5C16.14,14.5 14.44,13.67 13.34,12.4L12.84,14.94L14.61,16.63V23H12.92V17.9L11.14,16.21L10.3,19.93M21,23H19V3H6V16.11L4,15.69V1H21V23M6,23H4V19.78L6,20.2V23Z\\" />\\n                </svg>\\n                </div>\\n                <div class=\\"btn-name\\">{[print(xabber.getString(\\"groupchat_bar_leave\\"))]}</div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\"panel-content\\">\\n        <div class=\\"head-block\\">\\n            <div class=\\"left-column\\">\\n                <div class=\\"block-wrap group-chat-properties-wrap\\"></div>\\n            </div>\\n            <div class=\\"right-column\\">\\n                <div class=\\"block-wrap status-block-wrap\\"></div>\\n                <div class=\\"block-wrap groups-block-wrap\\"></div>\\n            </div>\\n        </div>\\n        <div class=\\"bottom-block\\">\\n            <ul class=\\"tabs\\">\\n                <li data-value=\\"participants\\" class=\\"list-variant tab\\"><a class=\\"text-color-700\\">{[print(xabber.getString(\\"group_settings__members_list__header\\"))]}</a></li>\\n                <li data-value=\\"invitations\\" class=\\"list-variant tab\\"><a class=\\"text-color-700\\">{[print(xabber.getString(\\"groupchat_invitations\\"))]}</a></li>\\n                <li data-value=\\"blocked\\" class=\\"list-variant tab\\"><a class=\\"text-color-700\\">{[print(xabber.getString(\\"group_settings__block_list__header\\"))]}</a></li>\\n            </ul>\\n            <div class=\\"block-wrap participants-wrap\\"></div>\\n        </div>\\n    </div>\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/group_chats/group_chat_details.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/group_chat_details_right.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"panel-background-clickable\\"></div>\\n<div class=\\"panel-content-wrap noselect\\">\\n    <div class=\\"main-info\\">\\n        <div class=\\"avatar-wrap\\">\\n            <div class=\\"circle-avatar\\">\\n                <div class=\\"preloader-wrap\\"><div class=\\"preloader-wrapper preloader-32px visible\\">\\n                    <div class=\\"spinner-layer\\">\\n                        <div class=\\"circle-clipper left\\">\\n                            <div class=\\"circle\\"></div>\\n                        </div>\\n                        <div class=\\"gap-patch\\">\\n                            <div class=\\"circle\\"></div>\\n                        </div>\\n                        <div class=\\"circle-clipper right\\">\\n                            <div class=\\"circle\\"></div>\\n                        </div>\\n                    </div>\\n                </div>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\"text-info\\">\\n            <div class=\\"name-wrap\\"></div>\\n        </div>\\n        <div class=\\"header-buttons\\">\\n            <div class=\\"btn-escape\\">\\n                <i class=\\"mdi mdi-24px mdi-close\\"></i>\\n                <span class=\\"btn-text\\">{[print(xabber.getString(\\"button_esc\\"))]}</span>\\n            </div>\\n            <span class=\\"block-name\\">{[print(xabber.getString(\\"groupchat_group\\"))]}</span>\\n            <span class=\\"block-name second-text\\"></span>\\n            <div class=\\"btn-qr-code\\">\\n                <svg class=\\"mdi mdi-24px mdi-svg-template\\" data-svgname=\\"qrcode\\"></svg>\\n            </div>\\n            <div class=\\"btn-edit\\">\\n                <svg class=\\"mdi mdi-24px mdi-svg-template\\" data-svgname=\\"information-outline\\"></svg>\\n            </div>\\n            <div class=\\"group-edit-preloader\\">\\n            </div>\\n        </div>\\n        <div class=\\"buttons-wrap\\">\\n            <div class=\\"button-wrap btn-invite-wrap\\">\\n                <i class=\\"mdi mdi-24px mdi-account-multiple-plus btn-invite text-color-500\\"></i>\\n                <div class=\\"btn-name\\">{[print(xabber.getString(\\"groupchat_bar_invite\\"))]}</div>\\n            </div>\\n            <div class=\\"button-wrap btn-search-messages\\">\\n                <div class=\\"contact-btn btn-search fill-color-500\\"><svg class=\\"mdi mdi-24px mdi-svg-template\\" data-svgname=\\"search\\"></svg></div>\\n                <div class=\\"btn-name\\">{[print(xabber.getString(\\"search\\"))]}</div>\\n            </div>\\n            <div class=\\"button-wrap btn-mute-wrap\\">\\n                <div class=\\"contact-btn btn-mute dropdown-button fill-color-500\\" data-activates=\\"{{view.cid}}-more\\"><svg class=\\"mdi mdi-24px mdi-svg-template\\" data-svgname=\\"bell\\"></svg></div>\\n                <div class=\\"btn-name\\">{[print(xabber.getString(\\"contact_bar_notifications\\"))]}</div>\\n\\n                <ul id=\\"{{view.cid}}-more\\" class=\\"contact-mute-dropdown dropdown-content noselect\\">\\n                    <li class=\\"btn-mute-dropdown\\" data-mute=\\"minutes15\\">\\n                        <span class=\\"one-line\\">{[print(xabber.getString(\\"mute_15_min\\"))]}</span>\\n                    </li>\\n                    <li class=\\"btn-mute-dropdown\\" data-mute=\\"hours1\\">\\n                        <span class=\\"one-line\\">{[print(xabber.getString(\\"mute_1_hour\\"))]}</span>\\n                    </li>\\n                    <li class=\\"btn-mute-dropdown\\" data-mute=\\"hours2\\">\\n                        <span class=\\"one-line\\">{[print(xabber.getString(\\"mute_2_hours\\"))]}</span>\\n                    </li>\\n                    <li class=\\"btn-mute-dropdown\\" data-mute=\\"day\\">\\n                        <span class=\\"one-line\\">{[print(xabber.getString(\\"mute_1_day\\"))]}</span>\\n                    </li>\\n                    <li class=\\"btn-mute-dropdown\\" data-mute=\\"forever\\">\\n                        <span class=\\"one-line\\">{[print(xabber.getString(\\"mute_forever\\"))]}</span>\\n                    </li>\\n                </ul>\\n            </div>\\n            <div class=\\"button-wrap btn-leave-wrap\\">\\n                <div class=\\"contact-btn btn-leave fill-color-500\\">\\n                    <svg viewBox=\\"0 0 24 24\\">\\n                        <path d=\\"M13.34,8.17C12.41,8.17 11.65,7.4 11.65,6.47A1.69,1.69 0 0,1 13.34,4.78C14.28,4.78 15.04,5.54 15.04,6.47C15.04,7.4 14.28,8.17 13.34,8.17M10.3,19.93L4.37,18.75L4.71,17.05L8.86,17.9L10.21,11.04L8.69,11.64V14.5H7V10.54L11.4,8.67L12.07,8.59C12.67,8.59 13.17,8.93 13.5,9.44L14.36,10.79C15.04,12 16.39,12.82 18,12.82V14.5C16.14,14.5 14.44,13.67 13.34,12.4L12.84,14.94L14.61,16.63V23H12.92V17.9L11.14,16.21L10.3,19.93M21,23H19V3H6V16.11L4,15.69V1H21V23M6,23H4V19.78L6,20.2V23Z\\" />\\n                    </svg>\\n                </div>\\n                <div class=\\"btn-name text-color-500\\">{[print(xabber.getString(\\"groupchat_bar_leave\\"))]}</div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\"panel-content\\">\\n        <div class=\\"block-wrap group-chat-properties-wrap vcard\\"></div>\\n        <div class=\\"block-wrap status-block-wrap\\"></div>\\n        <div class=\\"block-wrap edit-block-wrap\\"></div>\\n        <div class=\\"block-wrap restrictions-block-wrap\\"></div>\\n        <div class=\\"block-wrap groups-block-wrap\\"></div>\\n        <div class=\\"block-wrap search-messages-block-wrap\\"></div>\\n        <div class=\\"block-wrap participant-view-wrap\\"></div>\\n        <div class=\\"bottom-block\\">\\n            <ul class=\\"tabs not-edit\\">\\n                <li data-value=\\"participants\\" class=\\"list-variant tab\\"><a class=\\"text-color-700\\">{[print(xabber.getString(\\"group_settings__members_list__header\\"))]}</a></li>\\n                <li data-value=\\"image\\" class=\\"list-variant tab\\"><a class=\\"text-color-700\\">{[print(xabber.getString(\\"images\\"))]}</a></li>\\n                <li data-value=\\"video\\" class=\\"list-variant tab\\"><a class=\\"text-color-700\\">{[print(xabber.getString(\\"videos\\"))]}</a></li>\\n                <li data-value=\\"files\\" class=\\"list-variant tab\\"><a class=\\"text-color-700\\">{[print(xabber.getString(\\"files\\"))]}</a></li>\\n                <li data-value=\\"voice\\" class=\\"list-variant tab\\"><a class=\\"text-color-700\\">{[print(xabber.getString(\\"vcard_type_voice\\"))]}</a></li>\\n            </ul>\\n            <div class=\\"block-wrap participants-wrap\\"></div>\\n        </div>\\n    </div>\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/group_chats/group_chat_details_right.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/group_chat_properties.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"block-header\\">\\n    <span class=\\"block-name\\"></span>\\n    <span class=\\"btn-edit-settings\\">{[print(xabber.getString(\\"group_settings__properties__button_edit\\"))]}</span>\\n</div>\\n<div class=\\"group-chat-properties vcard\\">\\n    <div class=\\"info-wrap jid-info-wrap\\">\\n        <div title=\'{[print(xabber.getString(\\"group_settings__properties__tooltip_copy_by_click\\"))]}\' class=\\"details-icon-wrap\\">\\n            <svg class=\\"details-icon mdi mdi-24px mdi-svg-template\\" data-svgname=\\"xmpp\\"></svg>\\n        </div>\\n        <div class=\\"info jabber-id\\">\\n            <div class=\\"value one-line\\"></div>\\n            <div class=\\"label\\">{[print(xabber.getString(\\"group_settings__properties__label_jid\\"))]}</div>\\n        </div>\\n    </div>\\n    <div class=\\"info-wrap name-info-wrap\\">\\n        <i title=\'{[print(xabber.getString(\\"group_settings__properties__tooltip_copy_by_click\\"))]}\' class=\\"details-icon mdi mdi-24px mdi-account-box-outline\\"></i>\\n        <div class=\\"info name\\">\\n            <div class=\\"value one-line\\"></div>\\n            <div class=\\"label\\">{[print(xabber.getString(\\"groupchat_name\\"))]}</div>\\n        </div>\\n    </div>\\n    <div class=\\"info-wrap description-info-wrap\\">\\n        <i title=\'{[print(xabber.getString(\\"group_settings__properties__tooltip_copy_by_click\\"))]}\' class=\\"details-icon mdi mdi-24px mdi-file-document-box\\"></i>\\n        <div class=\\"info description\\">\\n            <div class=\\"value\\"></div>\\n            <div class=\\"label\\">{[print(xabber.getString(\\"groupchat_description\\"))]}</div>\\n        </div>\\n    </div>\\n    <div class=\\"info-wrap searchable-info-wrap\\">\\n        <svg class=\\"details-icon toolbar-icon mdi mdi-24px\\" viewBox=\\"0 0 24 24\\">\\n            <path title=\'{[print(xabber.getString(\\"group_settings__properties__tooltip_copy_by_click\\"))]}\' d=\\"M15.5,12C18,12 20,14 20,16.5C20,17.38 19.75,18.21 19.31,18.9L22.39,22L21,23.39L17.88,20.32C17.19,20.75 16.37,21 15.5,21C13,21 11,19 11,16.5C11,14 13,12 15.5,12M15.5,14A2.5,2.5 0 0,0 13,16.5A2.5,2.5 0 0,0 15.5,19A2.5,2.5 0 0,0 18,16.5A2.5,2.5 0 0,0 15.5,14M19.35,8.03C21.95,8.22 24,10.36 24,13C24,14.64 23.21,16.1 22,17V16.5A6.5,6.5 0 0,0 15.5,10A6.5,6.5 0 0,0 9,16.5C9,17 9.06,17.5 9.17,18H6A6,6 0 0,1 0,12C0,8.9 2.34,6.36 5.35,6.03C6.6,3.64 9.11,2 12,2C15.64,2 18.67,4.59 19.35,8.03Z\\"></path>\\n        </svg>\\n        <div class=\\"info searchable\\">\\n            <div class=\\"value one-line\\"></div>\\n            <div class=\\"label\\">{[print(xabber.getString(\\"group_settings__properties__label_indexed\\"))]}</div>\\n        </div>\\n    </div>\\n    <div class=\\"info-wrap model-info-wrap\\">\\n        <i title=\'{[print(xabber.getString(\\"group_settings__properties__tooltip_copy_by_click\\"))]}\' class=\\"details-icon mdi mdi-24px mdi-lock\\"></i>\\n        <div class=\\"info model\\">\\n            <div class=\\"value one-line\\"></div>\\n            <div class=\\"label\\">{[print(xabber.getString(\\"groupchat_membership\\"))]}</div>\\n        </div>\\n    </div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/group_chats/group_chat_properties.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/group_chat_properties_edit.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"modal-header\\"><div class=\\"panel-header black-text\\">{[if (privacy) { print(xabber.getString(\\"incognito_group_settings__header\\"))} else { print(xabber.getString(\\"public_group_settings__header\\"))}]}</div></div>\\n<div class=\\"modal-content group-chat-properties-wrap selectable-text\\">\\n    <div class=\\"property-wrap jid-info-wrap\\">\\n        <div class=\\"property-header\\">{[print(xabber.getString(\\"hint_xmpp_id\\"))]}</div>\\n        <div class=\\"jabber-id\\">\\n            <div class=\\"value one-line\\">{{jid}}</div>\\n        </div>\\n        <p id=\\"anonymous-public\\" class=\\"property-description hidden\\">{[print(xabber.getString(\\"group_settings_edit__setting_privacy__text_public\\"))]}</p>\\n        <p id=\\"anonymous-incognito\\" class=\\"property-description hidden\\">{[print(xabber.getString(\\"group_settings_edit__setting_privacy__text_incognito\\"))]}</p>\\n    </div>\\n    {[fields.forEach(function (field) { if (field.type === \'hidden\' || field.type === \'jid-multi\') return;]}\\n    <div class=\\"property-wrap {{field.var}}-field\\">\\n        {[if (!(field.type == \'fixed\' && field.values[0] === \\"\\")) {]}\\n        <div class=\\"property-header\\">{{field.label}}</div>\\n        {[}]}\\n        {[if (field.type === \'text-single\') {]}\\n        <div class=\\"input-field input-group-chat-name\\">\\n            <input value=\\"{{field.values[0]}}\\" id=\\"new_{{field.var}}_value\\" type=\\"text\\" name=\\"{{field.var}}\\" placeholder=\'{[print(xabber.getString(\\"group_settings_edit__setting_name__hint\\"))]}\' class=\\"text-field\\">\\n        </div>\\n        {[} else if (field.type === \'text-multi\') {]}\\n        <textarea placeholder=\'{[print(xabber.getString(\\"groupchat_example_description\\"))]}\' id=\\"{{field.var}}\\" cols=\\"30\\" rows=\\"10\\" class=\\"text-field materialize-textarea rich-textarea\\">{{field.values[0]}}</textarea>\\n        {[} else if (field.type === \'list-single\') { field.options.forEach(function (option) {]}\\n        <div class=\\"property-radio\\">\\n            <input {[if (option.value === field.values[0]){]}checked{[}]} id=\\"{{option.value}}\\" name=\\"{{field.var}}\\" type=\\"radio\\" class=\\"with-gap\\" required=\\"\\">\\n            <label class=\\"{{option.value}}-label\\" for=\\"{{option.value}}\\">{{option.label}}</label>\\n        </div>\\n        {[});} else  if (field.type === \'fixed\' && field.values[0] !== \\"\\") {]}\\n        <div class=\\"fixed-field{[if (field.var === \'description\'){]} description{[}]}\\">\\n            <div class=\\"value\\">{{field.values[0]}}</div>\\n        </div>\\n        {[}]}\\n        {[if (field.var === \'index\'){]}\\n        <p class=\\"property-description\\">{[print(xabber.getString(\\"group_settings_edit__setting_index__text\\"))]}</p>\\n        {[} else if (field.var === \'membership\') {]}\\n        <p class=\\"property-description\\">{[print(xabber.getString(\\"group_settings_edit__setting_membership__text\\"))]}</p>\\n        {[}]}\\n    </div>\\n    {[})]}\\n</div>\\n<div class=\\"modal-footer\\">\\n    <div class=\\"buttons-wrap\\">\\n        {[if (!all_fixed){]}\\n        <button class=\\"btn-save btn-flat btn-main non-active\\">{[print(xabber.getString(\\"save\\"))]}</button>\\n        {[}]}\\n        <button class=\\"btn-cancel btn-flat btn-dark btn-main\\">{[print(xabber.getString(\\"cancel\\"))]}</button>\\n    </div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/group_chats/group_chat_properties_edit.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/group_chat_properties_right.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"block-header\\">\\n    <span class=\\"block-name\\"></span>\\n    <span class=\\"btn-edit-settings\\">{[print(xabber.getString(\\"group_settings__properties__button_edit\\"))]}</span>\\n</div>\\n<div class=\\"group-chat-properties vcard-wrap\\" title=\'{[print(xabber.getString(\\"group_settings__properties__tooltip_copy_by_click\\"))]}\'>\\n    <div class=\\"info-wrap jid-info-wrap\\">\\n        <div class=\\"details-icon-wrap\\"><svg class=\\"details-icon mdi mdi-24px mdi-svg-template\\" data-svgname=\\"id-outline\\"></svg></div>\\n        <div class=\\"info-hover\\">\\n            <div class=\\"info jabber-id\\">\\n                <div class=\\"value one-line\\"></div>\\n                <div class=\\"label\\">{[print(xabber.getString(\\"group_settings__properties__label_jid\\"))]}</div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\"info-wrap description-info-wrap\\" title=\'{[print(xabber.getString(\\"group_settings__properties__tooltip_copy_by_click\\"))]}\'>\\n        <div class=\\"details-icon-wrap\\"><svg class=\\"details-icon mdi mdi-24px mdi-svg-template\\" data-svgname=\\"description-outline\\"></svg></div>\\n        <div class=\\"info-hover\\">\\n            <div class=\\"info description short\\">\\n                <div class=\\"value\\"></div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n<div class=\\"full-vcard-wrap\\">\\n    <div class=\\"full-vcard-content\\">\\n        <div class=\\"vcard-header block-header\\">\\n            <div class=\\"vcard-header-title\\">\\n                <i class=\\"details-icon btn-back mdi mdi-24px mdi-arrow-left\\"></i>\\n                <span class=\\"block-name\\">{[print(xabber.getString(\\"contact_vcard_header_title\\"))]}</span>\\n            </div>\\n            <div class=\\"main-info\\">\\n                <div class=\\"avatar-wrap\\">\\n                    <div class=\\"circle-avatar\\"/>\\n                </div>\\n                <div class=\\"text-info\\">\\n                    <div class=\\"name-wrap\\"></div>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\"vcard-list\\">\\n            <div class=\\"info-wrap jid-info-wrap\\">\\n                <div class=\\"details-icon-wrap\\"><svg class=\\"details-icon mdi mdi-24px mdi-svg-template\\" data-svgname=\\"id-outline\\"></svg></div>\\n                <div class=\\"info-hover\\">\\n                    <div class=\\"info jabber-id\\">\\n                        <div class=\\"value one-line\\"></div>\\n                        <div class=\\"label\\">{[print(xabber.getString(\\"group_settings__properties__label_jid\\"))]}</div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\"info-wrap name-info-wrap\\">\\n                <i title=\'{[print(xabber.getString(\\"group_settings__properties__tooltip_copy_by_click\\"))]}\' class=\\"details-icon mdi mdi-24px mdi-account-box-outline\\"></i>\\n                <div class=\\"info-hover\\">\\n                    <div class=\\"info name\\">\\n                        <div class=\\"value one-line\\"></div>\\n                        <div class=\\"label\\">{[print(xabber.getString(\\"groupchat_name\\"))]}</div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\"info-wrap description-info-wrap\\">\\n                <div class=\\"details-icon-wrap\\">\\n                    <svg class=\\"details-icon mdi mdi-24px mdi-svg-template\\" data-svgname=\\"description-outline\\"></svg>\\n                </div>\\n                <div class=\\"info-hover\\">\\n                    <div class=\\"info description\\">\\n                        <div class=\\"value\\"></div>\\n                        <div class=\\"label\\">{[print(xabber.getString(\\"groupchat_description\\"))]}</div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\"info-wrap searchable-info-wrap\\">\\n                <svg class=\\"details-icon toolbar-icon mdi mdi-24px\\" viewBox=\\"0 0 24 24\\">\\n                    <path title=\'{[print(xabber.getString(\\"group_settings__properties__tooltip_copy_by_click\\"))]}\' d=\\"M15.5,12C18,12 20,14 20,16.5C20,17.38 19.75,18.21 19.31,18.9L22.39,22L21,23.39L17.88,20.32C17.19,20.75 16.37,21 15.5,21C13,21 11,19 11,16.5C11,14 13,12 15.5,12M15.5,14A2.5,2.5 0 0,0 13,16.5A2.5,2.5 0 0,0 15.5,19A2.5,2.5 0 0,0 18,16.5A2.5,2.5 0 0,0 15.5,14M19.35,8.03C21.95,8.22 24,10.36 24,13C24,14.64 23.21,16.1 22,17V16.5A6.5,6.5 0 0,0 15.5,10A6.5,6.5 0 0,0 9,16.5C9,17 9.06,17.5 9.17,18H6A6,6 0 0,1 0,12C0,8.9 2.34,6.36 5.35,6.03C6.6,3.64 9.11,2 12,2C15.64,2 18.67,4.59 19.35,8.03Z\\"></path>\\n                </svg>\\n                <div class=\\"info-hover\\">\\n                    <div class=\\"info searchable\\">\\n                        <div class=\\"value one-line\\"></div>\\n                        <div class=\\"label\\">{[print(xabber.getString(\\"group_settings__properties__label_indexed\\"))]}</div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\"info-wrap model-info-wrap\\">\\n                <i title=\'{[print(xabber.getString(\\"group_settings__properties__tooltip_copy_by_click\\"))]}\' class=\\"details-icon mdi mdi-24px mdi-lock\\"></i>\\n                <div class=\\"info-hover\\">\\n                    <div class=\\"info model\\">\\n                        <div class=\\"value one-line\\"></div>\\n                        <div class=\\"label\\">{[print(xabber.getString(\\"groupchat_membership\\"))]}</div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/group_chats/group_chat_properties_right.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/group_member_item.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<tr class=\\"participant-wrap\\" data-id=\\"{{id}}\\" data-jid=\\"{{jid}}\\">\\n    <td class=\\"list-item group-chat-participant\\">\\n        <div class=\\"member-item\\">\\n            <div class=\\"circle-avatar\\"/>\\n            <div class=\\"participant-info\\">\\n            <div class=\\"top-line\\"><div title=\\"{{nickname}}\\" class=\\"nickname one-line\\">{{nickname}}</div>{[if (badge) {]}<div class=\\"badge one-line\\">{{badge}}</div>{[}]}</div>\\n            {[if (jid) {]}<p class=\\"jid one-line\\">{{jid}}</p>{[}]}\\n            </div>\\n        </div>\\n    </td>\\n    <td class=\\"last-seen\\">{[if (!present) {]}<span class=\\"online-status text-color-green-700\\">{[print(xabber.getString(\\"group_settings__members__status_online\\"))]}</span>{[} else {]}<span title=\\"{{present}}\\">{{pretty_present}}</span>{[}]}</td>\\n    <td class=\\"role\\">{[if (role !== \'member\') {]}{{role}}{[}]}</td>\\n    <td>\\n        {[if (is_me) {]}\\n        <span style=\\"font-size:12px\\" class=\\"text-color-500\\">{[print(xabber.getString(\\"groupchat_this_is_you\\"))]}</span>\\n        {[} else {]}\\n        <div class=\\"buttons-wrap\\">\\n            <div title=\'{[print(xabber.getString(\\"groupchat_kick\\"))]}\' class=\\"btn-kick\\">\\n                <i class=\\"mdi mdi-24px mdi-account-remove\\"></i>\\n            </div>\\n            <div title=\'{[print(xabber.getString(\\"groupchat_kick_and_block\\"))]}\' class=\\"btn-block\\">\\n                <svg class=\\"mdi mdi-24px\\" viewBox=\\"0 0 24 24\\">\\n                    <path fill=\\"#9e9e9e\\" d=\\"M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22A10,10 0 0,1 2,12A10,10 0 0,1 12,2M12,4A8,8 0 0,0 4,12C4,13.85 4.63,15.55 5.68,16.91L16.91,5.68C15.55,4.63 13.85,4 12,4M12,20A8,8 0 0,0 20,12C20,10.15 19.37,8.45 18.32,7.09L7.09,18.32C8.45,19.37 10.15,20 12,20Z\\" />\\n                </svg>\\n            </div>\\n        </div>\\n        {[}]}\\n    </td>\\n</tr>");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/group_chats/group_member_item.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/group_member_item_right.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<tr class=\\"participant-wrap\\" data-id=\\"{{id}}\\" data-jid=\\"{{jid}}\\">\\n    <td class=\\"list-item group-chat-participant\\">\\n        <div class=\\"member-item\\">\\n            <div class=\\"circle-avatar\\"/>\\n            <div class=\\"participant-info\\">\\n            <div class=\\"top-line\\">\\n                <div title=\\"{{nickname}}\\" class=\\"nickname one-line\\">{{nickname}}</div>\\n                {[if (badge) {]}<div class=\\"badge one-line\\">{{badge}}</div>{[}]}\\n            </div>\\n                <div class=\\"bottom-line\\">\\n                    {[ if (is_me) {]}\\n                    <div class=\\"online-status text-color-700\\">{[print(xabber.getString(\\"groupchat_this_is_you\\"))]}</div>\\n                    {[}else if (!present) {]}<span class=\\"online-status text-color-green-700\\">{[print(xabber.getString(\\"group_settings__members__status_online\\"))]}</span>{[} else {]}<span title=\\"{{present}}\\">{{pretty_present}}</span>{[}]}\\n                </div>\\n            </div>\\n            {[if (role === \'owner\' || role === \'admin\') {]}\\n            <div class=\\"participant-buttons-wrap\\">\\n                <div class=\\"participant-role\\">\\n                    {[if (role === \'owner\') {]}\\n                        <i class=\\"mdi participant-role-image mdi-24px mdi-star\\"></i>\\n                    {[}else if (role === \'admin\') {]}\\n                        <i class=\\"mdi participant-role-image mdi-24px mdi-star-outline\\"></i>\\n                    {[}]}\\n                </div>\\n            </div>\\n            {[} else if (!is_me) {]}\\n                <div class=\\"buttons-wrap\\">\\n                    <div title=\'{[print(xabber.getString(\\"groupchat_edit_member\\"))]}\' class=\\"btn-edit-member\\">\\n                        <svg class=\\"mdi mdi-24px mdi-svg-template\\" data-svgname=\\"edit-outline\\"></svg>\\n                    </div>\\n                    \x3c!--<div title=\'{[print(xabber.getString(\\"mute_chat\\"))]}\' class=\\"btn-mute\\">--\x3e\\n                        \x3c!--<i class=\\"mdi mdi-24px mdi-microphone-off\\"></i>--\x3e\\n                    \x3c!--</div>--\x3e\\n                    <div title=\'{[print(xabber.getString(\\"groupchat_kick\\"))]}\' class=\\"btn-kick\\">\\n                        <i class=\\"mdi mdi-24px mdi-account-remove\\"></i>\\n                    </div>\\n                </div>\\n            {[}]}\\n        </div>\\n    </td>\\n</tr>");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/group_chats/group_member_item_right.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/group_name_input_widget.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"input-widget-wrap {{field_name}}-wrap\\">\\n    <div class=\\"{{field_name}}-input-wrap\\">\\n        <input class=\\"{{field_name}}-input rich-textarea field-input\\" type=\\"{{field_type}}\\" placeholder=\\"{{placeholder}}\\">\\n        <div class=\\"buttons-wrap\\">\\n            <div class=\\"insert-emoticon\\">\\n                <i class=\\"mdi mdi-24px mdi-emoticon hover-text-color-500\\"></i>\\n            </div>\\n            <div class=\\"emoticons-panel-wrap\\">\\n                <div class=\\"emoticons-panel\\"></div>\\n                <div class=\\"emoji-menu\\"></div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/group_chats/group_name_input_widget.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/group_status.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"block-header\\">\\n    <span class=\\"block-name\\">{[print(xabber.getString(\\"groupchat_status\\"))]}</span>\\n</div>\\n<div class=\\"group-chat-status\\">\\n    <div class=\\"status-wrap\\">\\n        <div class=\\"status status-bulb\\"></div>\\n        <div class=\\"status-message\\"></div>\\n    </div>\\n    <div class=\\"btn-edit-status\\">{[print(xabber.getString(\\"group_settings__properties__button_edit\\"))]}</div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/group_chats/group_status.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/group_status_right.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"group-chat-status-wrap\\" title=\\"{[print(xabber.getString(\'group_settings__properties__tooltip_click_to_set_status\'))]}\\">\\n    <div class=\\"details-icon-wrap\\"><svg class=\\"details-icon mdi mdi-24px mdi-svg-template\\" data-svgname=\\"status-outline\\"></svg></div>\\n    <div class=\\"group-chat-status-border\\">\\n        <div class=\\"group-chat-status\\">\\n            <div class=\\"status-wrap\\">\\n                <div class=\\"status-message dotted-underline\\"></div>\\n                <div class=\\"status status-bulb\\"></div>\\n            </div>\\n            <div class=\\"label\\">{[print(xabber.getString(\\"groupchat_status\\"))]}</div>\\n        </div>\\n    </div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/group_chats/group_status_right.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/invitation.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"panel-content-wrap noselect\\">\\n    <div class=\\"main-info\\">\\n        <div class=\\"circle-avatar\\"></div>\\n        <div class=\\"text-info\\">\\n            <div class=\\"name-wrap one-line\\"></div>\\n            <div class=\\"jid one-line\\"></div>\\n        </div>\\n    </div>\\n\\n    <div class=\\"panel-content\\">\\n        <div class=\\"msg-wrap\\"><p class=\\"msg-text\\"></p></div>\\n        <div class=\\"panel-footer noselect\\">\\n            <div class=\\"buttons-wrap\\">\\n                <button class=\\"btn-join btn-flat btn-main\\">{[print(xabber.getString(\\"groupchat_join\\"))]}</button>\\n                <button class=\\"btn-decline btn-flat btn-main\\">{[print(xabber.getString(\\"groupchat_decline\\"))]}</button>\\n                <button class=\\"btn-block btn-flat btn-main\\">{[print(xabber.getString(\\"groupchat_block\\"))]}</button>\\n            </div>\\n        </div>\\n    </div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/group_chats/invitation.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/invited_member_item.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"list-item {{status}}-user\\" data-jid=\\"{{jid}}\\">\\n    <div class=\\"member-item\\">\\n        <div class=\\"circle-avatar\\"/>\\n        <p title=\\"{{jid}}\\" class=\\"one-line\\">{{jid}}</p>\\n        {[if (status == \'invitations\') {]}\\n        <div title=\'{[print(xabber.getString(\\"groupchat_revoke\\"))]}\' class=\\"revoke-invitation\\">\\n            {[}else{]}\\n            <div title=\'{[print(xabber.getString(\\"groupchat_unblock\\"))]}\' class=\\"unblock-user\\">\\n                {[}]}\\n                <i class=\\"mdi mdi-20px mdi-close\\"></i>\\n            </div>\\n    </div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/group_chats/invited_member_item.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/participant_badge_input_widget.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"input-widget-wrap {{field_name}}-wrap\\">\\n    <div class=\\"rich-textarea field-input badge-text\\" tabindex=\\"1\\" placeholder=\'{[print(xabber.getString(\\"groupchat_member_badge\\"))]}\' contenteditable></div>\\n    <div class=\\"buttons-wrap\\">\\n        <div class=\\"insert-emoticon\\">\\n            <i class=\\"mdi mdi-24px mdi-emoticon hover-text-color-500\\"></i>\\n        </div>\\n        <div class=\\"emoticons-panel-wrap\\">\\n            <div class=\\"emoticons-panel\\"></div>\\n            <div class=\\"emoji-menu\\"></div>\\n        </div>\\n    </div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/group_chats/participant_badge_input_widget.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/participant_details_item.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"participant-details-item {[if (subscription === null) {]}unsubscribed{[}]}\\" data-id=\\"{{id}}\\" data-jid=\\"{{jid}}\\" data-role=\\"{{role}}\\">\\n    {[if (subscription !== null) {]}\\n    <div class=\\"btn-more dropdown-button\\" data-activates=\\"{{id}}-buttons-wrap\\">\\n        <i class=\\"mdi mdi-24px mdi-dots-vertical\\"></i>\\n    </div>\\n    <ul class=\\"buttons-menu-wrap dropdown-content noselect\\" id=\\"{{id}}-buttons-wrap\\">\\n        <li class=\\"btn-block-participant\\"><span class=\\"one-line\\">{[print(xabber.getString(\\"groupchat_block\\"))]}</span></li>\\n    </ul>\\n    {[}]}\\n    <div class=\\"circle-avatar\\">\\n        {[if (subscription !== null) {]}\\n        <input title=\'{[print(xabber.getString(\\"groupchat_member_edit_change_avatar\\"))]}\' type=\\"file\\">\\n            <svg class=\\"set-groupchat-avatar\\" viewBox=\\"0 0 24 24\\">\\n                <path d=\\"M4,4H7L9,2H15L17,4H20A2,2 0 0,1 22,6V18A2,2 0 0,1 20,20H4A2,2 0 0,1 2,18V6A2,2 0 0,1 4,4M12,7A5,5 0 0,0 7,12A5,5 0 0,0 12,17A5,5 0 0,0 17,12A5,5 0 0,0 12,7M12,9A3,3 0 0,1 15,12A3,3 0 0,1 12,15A3,3 0 0,1 9,12A3,3 0 0,1 12,9Z\\" />\\n            </svg>\\n            <div class=\\"preloader-wrap\\"><div class=\\"preloader-wrapper preloader-16px visible\\">\\n                <div class=\\"spinner-layer\\">\\n                    <div class=\\"circle-clipper left\\">\\n                        <div class=\\"circle\\"></div>\\n                    </div>\\n                    <div class=\\"gap-patch\\">\\n                        <div class=\\"circle\\"></div>\\n                    </div>\\n                    <div class=\\"circle-clipper right\\">\\n                        <div class=\\"circle\\"></div>\\n                    </div>\\n                </div>\\n            </div>\\n            </div>\\n        {[}]}\\n    </div>\\n        <div class=\\"participant-info\\">\\n            {[if (subscription !== null) {]}<div id=\\"edit-nickname\\" class=\\"rich-textarea\\" tabindex=\\"1\\" contenteditable></div>{[}]}\\n            <div title=\\"{{nickname}}\\" class=\\"nickname one-line\\">{{nickname}}</div>\\n            <div class=\\"badge one-line {[if (!badge) {]}hidden{[}]}\\">{{badge}}</div>\\n            {[if (jid) {]}<p title=\\"{{jid}}\\" class=\\"jid selectable-text one-line\\">{{jid}}</p>{[}]}\\n            {[ if (is_myself) {]}\\n            <div class=\\"my-flag one-line text-color-red-700\\">{[print(xabber.getString(\\"groupchat_this_is_you\\"))]}</div>\\n            {[}]}\\n            {[ if (is_blocked_contact) {]}\\n            <div class=\\"my-flag one-line text-color-red-700\\">{[print(xabber.getString(\\"action_contact_blocked\\"))]}</div>\\n            {[}]}\\n            {[if (subscription === null) {]}<p class=\\"role selectable-text one-line\\">{[if (blocked) { print(xabber.getString(\\"groupchat_blocked\\")); }else{print(xabber.getString(\\"settings_group_member__placeholder_not_a_member\\"));}]}</p>{[}]}\\n        </div>\\n    <div class=\\"buttons-wrap\\">\\n        {[if (incognito_chat) {]}\\n        <div class=\\"button-wrap non-active btn-chat-wrap\\">\\n            <i class=\\"mdi mdi-24px mdi-incognito btn-chat\\"></i>\\n            <div class=\\"btn-name\\">{[print(xabber.getString(\\"groupchat_private_chat\\"))]}</div>\\n        </div>\\n        {[} else {]}\\n        <div class=\\"button-wrap non-active btn-chat-wrap\\">\\n            <i class=\\"mdi mdi-24px mdi-message-text btn-chat\\"></i>\\n            <div class=\\"btn-name\\">{[print(xabber.getString(\\"groupchat_direct_chat\\"))]}</div>\\n        </div>\\n        {[}]}\\n        <div class=\\"button-wrap btn-participant-messages-wrap\\">\\n            <i class=\\"mdi mdi-24px mdi-view-list btn-participant-messages\\"></i>\\n            <div class=\\"btn-name\\">{[print(xabber.getString(\\"groupchat_member_messages\\"))]}</div>\\n        </div>\\n        <div class=\\"button-wrap btn-set-badge-wrap\\">\\n            <svg class=\\"btn-set-badge\\" viewBox=\\"0 0 24 24\\">\\n                <path d=\\"M17,3H14V6H10V3H7A2,2 0 0,0 5,5V21A2,2 0 0,0 7,23H17A2,2 0 0,0 19,21V5A2,2 0 0,0 17,3M12,8A2,2 0 0,1 14,10A2,2 0 0,1 12,12A2,2 0 0,1 10,10A2,2 0 0,1 12,8M16,16H8V15C8,13.67 10.67,13 12,13C13.33,13 16,13.67 16,15V16M13,5H11V1H13V5M16,19H8V18H16V19M12,21H8V20H12V21Z\\" />\\n            </svg>\\n            <div class=\\"btn-name\\">{[print(xabber.getString(\\"groupchat_set_member_badge\\"))]}</div>\\n        </div>\\n        <div class=\\"button-wrap btn-kick-participant-wrap\\">\\n            <i class=\\"mdi mdi-24px mdi-account-remove btn-kick-participant\\"></i>\\n            <div class=\\"btn-name\\">{[print(xabber.getString(\\"groupchat_kick\\"))]}</div>\\n        </div>\\n    </div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/group_chats/participant_details_item.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/participant_details_item_right.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"participant-details-item {[if (subscription === null) {]}unsubscribed{[}]}\\" data-id=\\"{{id}}\\" data-jid=\\"{{jid}}\\" data-role=\\"{{role}}\\">\\n    <div class=\\"block-header\\">\\n        <i class=\\"details-icon btn-back parent-btn mdi mdi-24px mdi-arrow-right\\"></i>\\n        <i class=\\"details-icon btn-back-name child-btn mdi mdi-24px mdi-arrow-right hidden\\"></i>\\n        <span class=\\"block-name\\"></span>\\n        <span class=\\"block-name second-text\\"></span>\\n        <button class=\\"btn-save-user-rights non-active fade-out btn-flat btn-main\\">{[print(xabber.getString(\\"groupchat_save_member_settings\\"))]}</button>\\n        {[if (subscription !== null) {]}\\n        <div class=\\"btn-edit-participant\\">\\n            <svg class=\\"mdi mdi-24px mdi-svg-template\\" data-svgname=\\"edit-outline\\"></svg>\\n        </div>\\n        <ul class=\\"buttons-menu-wrap dropdown-content noselect\\" id=\\"{{id}}-buttons-wrap\\">\\n            <li class=\\"btn-block-participant\\"><span class=\\"one-line\\">{[print(xabber.getString(\\"groupchat_block\\"))]}</span></li>\\n        </ul>\\n        {[}]}\\n    </div>\\n    <div class=\\"circle-avatar\\">\\n        {[if (subscription !== null) {]}\\n            <div class=\\"preloader-wrap\\">\\n                <div class=\\"preloader-wrapper preloader-16px visible\\">\\n                    <div class=\\"spinner-layer\\">\\n                        <div class=\\"circle-clipper left\\">\\n                            <div class=\\"circle\\"></div>\\n                        </div>\\n                        <div class=\\"gap-patch\\">\\n                            <div class=\\"circle\\"></div>\\n                        </div>\\n                        <div class=\\"circle-clipper right\\">\\n                            <div class=\\"circle\\"></div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        {[}]}\\n    </div>\\n        <div class=\\"participant-info\\">\\n            {[if (subscription !== null) {]}<div class=\\"participant-edit-nickname hidden\\"></div>{[}]}\\n            <div class=\\"participant-edit-badge hidden\\"></div>\\n            <div class=\\"participant-info-text\\">\\n                <div class=\\"nickname\\">\\n                    {{nickname}} <div class=\\"badge one-line {[if (!badge) {]}hidden{[}]}\\">{{badge}}</div>\\n                </div>\\n                {[ if (is_myself) {]}\\n                <div class=\\"my-flag one-line\\">{[print(xabber.getString(\\"groupchat_this_is_you\\"))]}</div>\\n                {[}]}\\n\\n            </div>\\n        </div>\\n    <div class=\\"buttons-wrap\\">\\n        {[if (incognito_chat) {]}\\n        <div class=\\"button-wrap non-active btn-chat-wrap\\">\\n            <i class=\\"mdi contact-btn text-color-500 mdi-24px mdi-incognito btn-chat-participant\\"></i>\\n            <div class=\\"btn-name\\">{[print(xabber.getString(\\"groupchat_private_chat\\"))]}</div>\\n        </div>\\n        {[} else {]}\\n        <div class=\\"button-wrap non-active btn-chat-wrap\\">\\n            <i class=\\"mdi contact-btn text-color-500 mdi-24px mdi-message-text btn-chat-participant\\"></i>\\n            <div class=\\"btn-name\\">{[print(xabber.getString(\\"groupchat_direct_chat\\"))]}</div>\\n        </div>\\n        {[}]}\\n        <div class=\\"button-wrap btn-participant-messages-wrap\\">\\n            <i class=\\"mdi contact-btn text-color-500 mdi-24px mdi-view-list btn-participant-messages\\"></i>\\n            <div class=\\"btn-name\\">{[print(xabber.getString(\\"groupchat_member_messages\\"))]}</div>\\n        </div>\\n        <div class=\\"button-wrap non-active btn-set-visibility-wrap\\">\\n            <i title=\\"Feature not yet implemented\\" class=\\"mdi contact-btn text-color-500 mdi-24px mdi-eye btn-set-visibility\\"></i>\\n            <div class=\\"btn-name\\">{[print(xabber.getString(\\"groupchat_set_member_visibility_visible\\"))]}</div>\\n        </div>\\n        <div class=\\"button-wrap btn-kick-participant-wrap\\">\\n            <i class=\\"mdi contact-btn mdi-24px mdi-account-remove text-color-500 btn-kick-participant\\"></i>\\n            <div class=\\"btn-name text-color-500\\">{[print(xabber.getString(\\"groupchat_kick\\"))]}</div>\\n        </div>\\n    </div>\\n    <div class=\\"vcard-wrap vcard\\">\\n        {[if (jid) {]}\\n        <div class=\\"info-wrap jid-info-wrap\\" title=\'{[print(xabber.getString(\\"group_settings__properties__tooltip_copy_by_click\\"))]}\'>\\n            <div class=\\"details-icon-wrap\\"><svg class=\\"details-icon mdi mdi-24px mdi-svg-template\\" data-svgname=\\"id-outline\\"></svg></div>\\n            <div class=\\"info-hover\\">\\n                <div class=\\"info jabber-id\\">\\n                    <div class=\\"value one-line\\">{{jid}}</div>\\n                    <div class=\\"label\\">{[print(xabber.getString(\\"vcard_jabber_id\\"))]}</div>\\n                </div>\\n            </div>\\n        </div>\\n        {[}]}\\n        {[if (role === \'owner\' || role === \'admin\') {]}\\n        <div class=\\"info-wrap role-info-wrap\\">\\n            <div class=\\"details-icon-wrap\\">\\n                {[if (role === \'owner\') {]}\\n                    <i class=\\"details-icon mdi mdi-24px mdi-star\\"></i>\\n                {[}else if (role === \'admin\') {]}\\n                    <i class=\\"details-icon mdi mdi-24px mdi-star-outline\\"></i>\\n                {[}]}\\n            </div>\\n            <div>\\n                <div class=\\"info jabber-id\\">\\n                    <div class=\\"value one-line\\">\\n                        <span>\\n                            {[if (role === \'owner\') {]}\\n                                {[print(xabber.getString(\\"groupchat_role_owner\\"))]}\\n                            {[}else if (role === \'admin\') {]}\\n                                {[print(xabber.getString(\\"groupchat_role_admin\\"))]}\\n                            {[}]}\\n                        </span>\\n                    </div>\\n                    <div class=\\"label\\">{[print(xabber.getString(\\"groupchat_role\\"))]}</div>\\n                </div>\\n            </div>\\n        </div>\\n        {[}]}\\n        <div class=\\"info-wrap present-info-wrap\\">\\n            <div class=\\"details-icon-wrap\\"><svg class=\\"details-icon mdi mdi-24px mdi-svg-template\\" {[if (blocked) {]}data-svgname=\\"cancel\\"{[}else if (!present) {]}data-svgname=\\"status-outline\\"{[} else {]}data-svgname=\\"clock-outline\\"{[}]}></svg></div>\\n            <div>\\n                <div class=\\"info jabber-id\\">\\n                    <div class=\\"value one-line\\">\\n                        <span>\\n                            {[if (blocked) {]}\\n                                {[print(xabber.getString(\\"groupchat_blocked\\"))]}\\n                            {[}else if (!present) {]}\\n                                {[print(xabber.getString(\\"group_settings__members__status_online\\"))]}\\n                            {[} else {]}{{pretty_present}}{[}]}\\n                        </span>\\n                    </div>\\n                    <div class=\\"label\\">{[if (!present) {]}{[print(xabber.getString(\\"groupchat_status\\"))]}{[} else {]}{[print(xabber.getString(\\"group_settings__members__label_last_seen\\"))]}{[}]}</div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/group_chats/participant_details_item_right.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/participant_details_right.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"participant-details-wrap\\">\\n    <div class=\\"participant-details-info-wrap\\">\\n    </div>\\n    <div class=\\"bottom-block participant-bottom-block\\">\\n        <ul class=\\"tabs participant-tabs\\">\\n            <li data-value=\\"image\\" class=\\"list-variant tab\\"><a class=\\"text-color-700\\">{[print(xabber.getString(\\"images\\"))]}</a></li>\\n            <li data-value=\\"video\\" class=\\"list-variant tab\\"><a class=\\"text-color-700\\">{[print(xabber.getString(\\"videos\\"))]}</a></li>\\n            <li data-value=\\"files\\" class=\\"list-variant tab\\"><a class=\\"text-color-700\\">{[print(xabber.getString(\\"files\\"))]}</a></li>\\n            <li data-value=\\"voice\\" class=\\"list-variant tab\\"><a class=\\"text-color-700\\">{[print(xabber.getString(\\"vcard_type_voice\\"))]}</a></li>\\n        </ul>\\n        <div class=\\"block-wrap participants-details-media-wrap\\"></div>\\n    </div>\\n    <div class=\\"participant-details-edit-wrap edit-wrap\\">\\n        <div class=\\"main-info\\">\\n            <div class=\\"avatar-wrap\\">\\n                <div class=\\"circle-avatar\\">\\n                    <input title=\'{[print(xabber.getString(\\"groupchat_member_edit_change_avatar\\"))]}\' type=\\"file\\"/>\\n                    <svg class=\\"set-groupchat-avatar\\" viewBox=\\"0 0 24 24\\">\\n                        <path d=\\"M4,4H7L9,2H15L17,4H20A2,2 0 0,1 22,6V18A2,2 0 0,1 20,20H4A2,2 0 0,1 2,18V6A2,2 0 0,1 4,4M12,7A5,5 0 0,0 7,12A5,5 0 0,0 12,17A5,5 0 0,0 17,12A5,5 0 0,0 12,7M12,9A3,3 0 0,1 15,12A3,3 0 0,1 12,15A3,3 0 0,1 9,12A3,3 0 0,1 12,9Z\\" />\\n                    </svg>\\n                    <div class=\\"preloader-wrap\\">\\n                        <div class=\\"preloader-wrapper preloader-32px visible\\">\\n                            <div class=\\"spinner-layer\\">\\n                                <div class=\\"circle-clipper left\\">\\n                                    <div class=\\"circle\\"></div>\\n                                </div>\\n                                <div class=\\"gap-patch\\">\\n                                    <div class=\\"circle\\"></div>\\n                                </div>\\n                                <div class=\\"circle-clipper right\\">\\n                                    <div class=\\"circle\\"></div>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\"set-groupchat-avatar-text\\">{[print(xabber.getString(\\"groupchat_set_avatar\\"))]}</div>\\n            </div>\\n        </div>\\n        <div class=\\"participant-details-edit-inputs\\">\\n            <div class=\\"edit-participant-name-wrap\\">\\n            </div>\\n            <div class=\\"edit-participant-badge-wrap\\">\\n            </div>\\n        </div>\\n        <div class=\\"rights-wrap\\">\\n        </div>\\n    </div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/group_chats/participant_details_right.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/participant_rights.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"header\\">\\n</div>\\n<div class=\\"modal-content\\">\\n    <div class=\\"rights-wrap\\">\\n    </div>\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/group_chats/participant_rights.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/participants.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<table class=\\"members-list-wrap\\">\\n    <thead>\\n    <tr>\\n        <th>\\n            <div class=\\"participants-search-form search-form\\">\\n                <svg class=\\"search-icon\\" viewBox=\\"0 0 24 24\\">\\n                    <path d=\\"M15.5,12C18,12 20,14 20,16.5C20,17.38 19.75,18.21 19.31,18.9L22.39,22L21,23.39L17.88,20.32C17.19,20.75 16.37,21 15.5,21C13,21 11,19 11,16.5C11,14 13,12 15.5,12M15.5,14A2.5,2.5 0 0,0 13,16.5A2.5,2.5 0 0,0 15.5,19A2.5,2.5 0 0,0 18,16.5A2.5,2.5 0 0,0 15.5,14M10,4A4,4 0 0,1 14,8C14,8.91 13.69,9.75 13.18,10.43C12.32,10.75 11.55,11.26 10.91,11.9L10,12A4,4 0 0,1 6,8A4,4 0 0,1 10,4M2,20V18C2,15.88 5.31,14.14 9.5,14C9.18,14.78 9,15.62 9,16.5C9,17.79 9.38,19 10,20H2Z\\" />\\n                </svg>\\n                <input type=\\"text\\" class=\\"search-input simple-input-field\\" tabindex=\\"1\\" placeholder=\'{[print(xabber.getString(\\"groupchat_search_members\\"))]}\'>\\n                <i class=\\"close-search-icon mdi mdi-20px mdi-close\\"></i>\\n            </div>\\n        </th>\\n        <th>{[print(xabber.getString(\\"group_settings__members__label_last_seen\\"))]}</th>\\n        <th>{[print(xabber.getString(\\"groupchat_role\\"))]}</th>\\n        <th></th>\\n    </tr>\\n    </thead>\\n    <tbody></tbody>\\n</table>\\n<div class=\\"preloader-wrapper preloader-17px active\\">\\n    <div class=\\"spinner-layer\\">\\n        <div class=\\"circle-clipper left\\">\\n            <div class=\\"circle\\"></div>\\n        </div>\\n        <div class=\\"gap-patch\\">\\n            <div class=\\"circle\\"></div>\\n        </div>\\n        <div class=\\"circle-clipper right\\">\\n            <div class=\\"circle\\"></div>\\n        </div>\\n    </div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/group_chats/participants.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/participants_right_panel.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<table class=\\"members-list-wrap\\">\\n    <thead>\\n    <tr>\\n        <th>\\n            <div class=\\"participants-search-form search-form\\">\\n                <svg class=\\"search-icon\\" viewBox=\\"0 0 24 24\\">\\n                    <path d=\\"M15.5,12C18,12 20,14 20,16.5C20,17.38 19.75,18.21 19.31,18.9L22.39,22L21,23.39L17.88,20.32C17.19,20.75 16.37,21 15.5,21C13,21 11,19 11,16.5C11,14 13,12 15.5,12M15.5,14A2.5,2.5 0 0,0 13,16.5A2.5,2.5 0 0,0 15.5,19A2.5,2.5 0 0,0 18,16.5A2.5,2.5 0 0,0 15.5,14M10,4A4,4 0 0,1 14,8C14,8.91 13.69,9.75 13.18,10.43C12.32,10.75 11.55,11.26 10.91,11.9L10,12A4,4 0 0,1 6,8A4,4 0 0,1 10,4M2,20V18C2,15.88 5.31,14.14 9.5,14C9.18,14.78 9,15.62 9,16.5C9,17.79 9.38,19 10,20H2Z\\" />\\n                </svg>\\n                <input type=\\"text\\" class=\\"search-input simple-input-field\\" tabindex=\\"1\\" placeholder=\'{[print(xabber.getString(\\"groupchat_search_members\\"))]}\'>\\n                <i class=\\"close-search-icon mdi mdi-20px mdi-close\\"></i>\\n            </div>\\n        </th>\\n    </tr>\\n    </thead>\\n    <tbody></tbody>\\n</table>\\n<div class=\\"preloader-wrapper preloader-17px active\\">\\n    <div class=\\"spinner-layer\\">\\n        <div class=\\"circle-clipper left\\">\\n            <div class=\\"circle\\"></div>\\n        </div>\\n        <div class=\\"gap-patch\\">\\n            <div class=\\"circle\\"></div>\\n        </div>\\n        <div class=\\"circle-clipper right\\">\\n            <div class=\\"circle\\"></div>\\n        </div>\\n    </div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/group_chats/participants_right_panel.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/pinned_message.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg class=\\"pin\\" viewBox=\\"0 0 24 24\\">\\n    <path fill=\\"#757575\\" d=\\"M16,12V4H17V2H7V4H8V12L6,14V16H11.2V22H12.8V16H18V14L16,12Z\\" />\\n</svg>\\n<div class=\\"msg-wrap\\">\\n    <div class=\\"chat-msg-author-wrap\\">\\n        <div class=\\"chat-msg-author text-color-700 one-line\\">{{author}}</div>{[if (fwd_author){]}<svg class=\\"fwd-chevron\\" viewBox=\\"0 0 24 24\\"><path fill=\\"#9E9E9E\\" d=\\"M8.59,16.58L13.17,12L8.59,7.41L10,6L16,12L10,18L8.59,16.58Z\\"/></svg><div class=\\"chat-msg-author text-color-700 one-line\\">{{fwd_author}}</div>{[}]}\\n        <div class=\\"msg-time\\">{{time}}</div>\\n    </div>\\n    <div class=\\"chat-msg-content chat-text-content one-line\\">\\n        {{message}}\\n    </div>\\n</div>\\n<svg title=\'{[print(xabber.getString(\\"group_chat__pinned_message__tooltip_unpin\\"))]}\' class=\\"close\\" viewBox=\\"0 0 24 24\\">\\n    <path class=\\"close\\" fill=\\"#9E9E9E\\" d=\\"M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z\\" />\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/group_chats/pinned_message.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/private_participant_details.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"participant-details-item\\" data-id=\\"{{id}}\\" data-jid=\\"{{jid}}\\" data-role=\\"{{role}}\\">\\n    <div class=\\"circle-avatar\\">\\n        {[ if (is_myself) {]}\\n        <input title=\'{[print(xabber.getString(\\"groupchat_member_edit_change_avatar\\"))]}\' type=\\"file\\">\\n        {[}]}\\n        {[ if (is_myself) {]}\\n        <svg class=\\"set-groupchat-avatar\\" viewBox=\\"0 0 24 24\\">\\n            <path d=\\"M4,4H7L9,2H15L17,4H20A2,2 0 0,1 22,6V18A2,2 0 0,1 20,20H4A2,2 0 0,1 2,18V6A2,2 0 0,1 4,4M12,7A5,5 0 0,0 7,12A5,5 0 0,0 12,17A5,5 0 0,0 17,12A5,5 0 0,0 12,7M12,9A3,3 0 0,1 15,12A3,3 0 0,1 12,15A3,3 0 0,1 9,12A3,3 0 0,1 12,9Z\\" />\\n        </svg>\\n        <div class=\\"preloader-wrap\\"><div class=\\"preloader-wrapper preloader-16px visible\\">\\n            <div class=\\"spinner-layer\\">\\n                <div class=\\"circle-clipper left\\">\\n                    <div class=\\"circle\\"></div>\\n                </div>\\n                <div class=\\"gap-patch\\">\\n                    <div class=\\"circle\\"></div>\\n                </div>\\n                <div class=\\"circle-clipper right\\">\\n                    <div class=\\"circle\\"></div>\\n                </div>\\n            </div>\\n        </div>\\n        </div>\\n        {[}]}\\n    </div>\\n    <div class=\\"participant-info\\">\\n        {[ if (is_myself) {]}\\n        <div id=\\"edit-nickname\\" class=\\"rich-textarea\\" tabindex=\\"1\\" contenteditable></div>\\n        {[}]}\\n        <div title=\\"{{nickname}}\\" class=\\"{{is_myself && \'is-myself\'}} nickname one-line\\">{{nickname}}</div>\\n        <div class=\\"badge one-line {[if (!badge) {]}hidden{[}]}\\">{{badge}}</div>\\n        {[ if (is_myself) {]}\\n        <div class=\\"my-flag one-line text-color-red-700\\">{[print(xabber.getString(\\"groupchat_this_is_you\\"))]}</div>\\n        {[}]}\\n    </div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/group_chats/private_participant_details.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/private_participant_details_item_right.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"participant-details-item\\" data-id=\\"{{id}}\\" data-jid=\\"{{jid}}\\" data-role=\\"{{role}}\\">\\n    <div class=\\"block-header\\">\\n        <i class=\\"details-icon btn-back parent-btn mdi mdi-24px mdi-arrow-right\\"></i>\\n        <i class=\\"details-icon btn-back-name child-btn mdi mdi-24px mdi-arrow-right hidden\\"></i>\\n        <span class=\\"block-name\\"></span>\\n        <span class=\\"block-name second-text\\"></span>\\n        <button class=\\"btn-save-user-rights non-active fade-out btn-flat btn-main\\">{[print(xabber.getString(\\"groupchat_save_member_settings\\"))]}</button>\\n        {[if (subscription !== null) {]}\\n        <div class=\\"btn-edit-participant\\">\\n            <svg class=\\"mdi mdi-24px mdi-svg-template\\" data-svgname=\\"edit-outline\\"></svg>\\n        </div>\\n        <ul class=\\"buttons-menu-wrap dropdown-content noselect\\" id=\\"{{id}}-buttons-wrap\\">\\n            <li class=\\"btn-block-participant\\"><span class=\\"one-line\\">{[print(xabber.getString(\\"groupchat_block\\"))]}</span></li>\\n        </ul>\\n        {[}]}\\n    </div>\\n    <div class=\\"circle-avatar\\">\\n        <div class=\\"preloader-wrap\\">\\n            <div class=\\"preloader-wrapper preloader-16px visible\\">\\n                <div class=\\"spinner-layer\\">\\n                    <div class=\\"circle-clipper left\\">\\n                        <div class=\\"circle\\"></div>\\n                    </div>\\n                    <div class=\\"gap-patch\\">\\n                        <div class=\\"circle\\"></div>\\n                    </div>\\n                    <div class=\\"circle-clipper right\\">\\n                        <div class=\\"circle\\"></div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\"participant-info\\">\\n        {[if (subscription !== null) {]}<div class=\\"participant-edit-nickname hidden\\"></div>{[}]}\\n        <div class=\\"participant-edit-badge hidden\\"></div>\\n        <div class=\\"participant-info-text\\">\\n            <div class=\\"nickname\\">\\n                {{nickname}} <div class=\\"badge one-line {[if (!badge) {]}hidden{[}]}\\">{{badge}}</div>\\n            </div>\\n            {[ if (is_myself) {]}\\n            <div class=\\"my-flag one-line text-color-red-700\\">{[print(xabber.getString(\\"groupchat_this_is_you\\"))]}</div>\\n            {[}]}\\n\\n        </div>\\n    </div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/group_chats/private_participant_details_item_right.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/restriction_item.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"right-item restriction restriction-{{name}}\\">\\n    <div class=\\"right-name\\">{{pretty_name}}</div>\\n    <div class=\\"field clickable-field restriction-{{name}}-state switch normal\\">\\n        <input type=\\"checkbox\\" {[if (type === \'fixed\') {]} onclick=\\"return false;\\" {[}]} class=\\"filled-in\\" id=\\"{{name}}\\">\\n        <label for=\\"{{name}}\\"></label>\\n    </div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/group_chats/restriction_item.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/right_expire_variants.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"select-timer\\">\\n    <div class=\\"dropdown-button\\" data-activates=\\"select-timer-{{right_name}}\\">\\n        <div class=\\"timer-item-wrap\\"><div data-value=\\"0\\" class=\\"default-value property-value\\">{[print(xabber.getString(\\"dialog_rights__button_set_timer\\"))]}</div></div>\\n    </div>\\n    <div id=\\"select-timer-{{right_name}}\\" class=\\"dropdown-content noselect\\">\\n        {[expire_options.forEach(function (option) {]}\\n        <div data-value=\\"{{option.value}}\\" class=\\"property-variant\\">{{option.label}}</div>\\n        {[}.bind(this));]}\\n    </div>\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/group_chats/right_expire_variants.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/set_status.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"modal-content-wrap\\">\\n    <div class=\\"modal-header\\">\\n        <span>{[print(xabber.getString(\\"dialog_set_status__header\\"))]}</span>\\n    </div>\\n    <ul class=\\"status-values noselect\\">\\n        <div class=\\"loading-status\\">\\n            <div class=\\"preloader-wrapper preloader-17px active\\">\\n                <div class=\\"spinner-layer\\">\\n                    <div class=\\"circle-clipper left\\">\\n                        <div class=\\"circle\\"></div>\\n                    </div>\\n                    <div class=\\"gap-patch\\">\\n                        <div class=\\"circle\\"></div>\\n                    </div>\\n                    <div class=\\"circle-clipper right\\">\\n                        <div class=\\"circle\\"></div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </ul>\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/group_chats/set_status.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/status_item.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<li data-value=\\"{{status.value}}\\">\\n    <span class=\\"status-value one-line\\">{{status.label}}</span>\\n    <span class=\\"status-bulb\\" data-status=\\"{{status.show}}\\"></span>\\n</li>");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/group_chats/status_item.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_left.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"account-indicator ground-color-700\\"></div>\\n<div class=\\"group-head\\">\\n    <i class=\\"arrow mdi mdi-20px\\"></i>\\n    <div class=\\"group-title\\">\\n        <span class=\\"group-name one-line\\"></span>\\n        <span class=\\"member-counter one-line\\"></span>\\n    </div>\\n    <i class=\\"group-icon mdi mdi-20px hidden\\"></i>\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/group_left.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_right.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"group-head\\">\\n    <i class=\\"arrow mdi mdi-20px\\"></i>\\n    <div class=\\"group-title\\">\\n        <span class=\\"group-name one-line\\"></span>\\n        <span class=\\"member-counter one-line\\"></span>\\n    </div>\\n    <i class=\\"group-icon mdi mdi-20px hidden\\"></i>\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/group_right.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_settings.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"modal-content-wrap settings-panel\\">\\n    <div class=\\"modal-header\\">\\n        <span>{[print(xabber.getString(\\"dialog_circle_settings__header\\"))]}</span>\\n    </div>\\n\\n    <div class=\\"modal-content\\">\\n            <div class=\\"field-wrap group-name\\">\\n                <div class=\\"input-field\\">\\n                    <label for=\\"{{view.cid}}-group-name\\">{[print(xabber.getString(\\"circle_name\\"))]}</label>\\n                    <input id=\\"{{view.cid}}-group-name\\" type=\\"text\\" name=\\"group_name\\">\\n                    <span class=\\"errors fixed\\"></span>\\n                </div>\\n            </div>\\n\\n            <div class=\\"setting-name\\">{[print(xabber.getString(\\"category_offline_contacts\\"))]}</div>\\n            <div class=\\"setting-wrap\\">\\n                <div class=\\"setting offline radio-button field-wrap\\">\\n                    <div class=\\"field radio-field clickable-field\\">\\n                        <form action=\\"#\\">\\n                            <p>\\n                                <input class=\\"with-gap\\" name=\\"offline\\" value=\\"yes\\" type=\\"radio\\" id=\\"{{view.cid}}-show\\" />\\n                                <label for=\\"{{view.cid}}-show\\">{[print(xabber.getString(\\"show_offline_always\\"))]}</label>\\n                            </p>\\n                            <p>\\n                                <input class=\\"with-gap\\" name=\\"offline\\" value=\\"no\\" type=\\"radio\\" id=\\"{{view.cid}}-hide\\" />\\n                                <label for=\\"{{view.cid}}-hide\\">{[print(xabber.getString(\\"hide_offline_always\\"))]}</label>\\n                            </p>\\n                            <p>\\n                                <input class=\\"with-gap\\" name=\\"offline\\" value=\\"default\\" type=\\"radio\\" id=\\"{{view.cid}}-show-offline-default\\" />\\n                                <label for=\\"{{view.cid}}-show-offline-default\\">{[print(xabber.getString(\\"dialog_circle_settings__label_common_settings\\"))]}</label>\\n                            </p>\\n                        </form>\\n                    </div>\\n                </div>\\n            </div>\\n    </div>\\n    <div class=\\"modal-footer\\">\\n        <button class=\\"btn-flat btn-main btn-dark btn-delete left\\">{[print(xabber.getString(\\"circle_remove\\"))]}</button>\\n        <button class=\\"btn-flat btn-main btn-apply\\">{[print(xabber.getString(\\"dialog_circle_settings__button_apply\\"))]}</button>\\n        <button class=\\"btn-flat btn-main btn-dark btn-cancel\\">{[print(xabber.getString(\\"cancel\\"))]}</button>\\n    </div>\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/group_settings.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/groups.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"groups-list-wrap\\">\\n    <div class=\\"details-icon-wrap\\"><svg class=\\"details-icon mdi mdi-24px mdi-svg-template\\" data-svgname=\\"circles\\"></svg></div>\\n    <div class=\\"groups\\">\\n    </div>\\n    </div>\\n</div>\\n<div class=\\"groups-wrap\\">\\n    <div class=\\"checkbox-list\\">\\n    </div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/groups.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/groups_checkbox_list.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("{[ for (var i = 0; i < groups.length; i++) { var name = groups[i].name, checked = groups[i].checked, group_id = groups[i].id; ]}\\n    {[ if (!checked) {]}\\n        <div class=\\"input-field checkbox-field existing-group-field\\">\\n            <input type=\\"checkbox\\" class=\\"filled-in\\" id=\\"{{group_id}}\\" data-groupname=\\"{{name}}\\" {[ if (checked) { ]}checked=\\"checked\\"{[ } ]} />\\n            <label for=\\"{{group_id}}\\">{{name}}</label>\\n        </div>\\n    {[}]}\\n{[ } ]}\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/groups_checkbox_list.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/groups_checkbox_list_contact.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("{[ for (var i = 0; i < groups.length; i++) { var name = groups[i].name, checked = groups[i].checked, group_id = groups[i].id; ]}\\n    <div class=\\"input-field checkbox-field existing-group-field\\">\\n        <input type=\\"checkbox\\" class=\\"filled-in\\" id=\\"{{group_id}}\\" data-groupname=\\"{{name}}\\" {[ if (checked) { ]}checked=\\"checked\\"{[ } ]} />\\n        <label for=\\"{{group_id}}\\">{{name}}</label>\\n    </div>\\n{[ } ]}\\n    <div class=\\"new-group-field-wrap\\">\\n        <div class=\\"input-field checkbox-field new-group-checkbox\\">\\n            <input type=\\"checkbox\\" disabled class=\\"filled-in\\" id=\\"new_group_checkbox\\"/>\\n            <label for=\\"new_group_checkbox\\"></label>\\n        </div>\\n        <div class=\\"input-field new-group-name\\">\\n            <input class=\\"rich-textarea xabber-input\\" id=\\"new-group-name\\" type=\\"text\\" name=\\"new_group_name\\" placeholder=\'{[print(xabber.getString(\\"add_new_circle\\"))]}\'>\\n        </div>\\n    </div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/groups_checkbox_list_contact.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/groups_list.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("{[ for (var i = 0; i < groups.length; i++) { var name = groups[i].name, checked = groups[i].checked, group_id = groups[i].id; ]}\\n    {[ if (checked) {]}\\n        <div data-groupname=\\"{{name}}\\" title=\\"{[print(xabber.getString(\'contact_tooltip_remove_by_click\'))]}\\" class=\\"group ground-color-50\\">\\n            <div>{{name}}</div>\\n        </div>\\n    {[}]}\\n\\n{[ } ]}\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/groups_list.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/groups_new_group.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"new-group-field-wrap\\">\\n    <div class=\\"input-field checkbox-field new-group-checkbox\\">\\n        <input type=\\"checkbox\\" disabled class=\\"filled-in\\" id=\\"new_group_checkbox\\"/>\\n        <label for=\\"new_group_checkbox\\"></label>\\n    </div>\\n    <div class=\\"input-field new-group-name\\">\\n        <input class=\\"xabber-input\\" id=\\"new-group-name\\" autocomplete=\\"off\\" type=\\"text\\" name=\\"new_group_name\\" placeholder=\'{[print(xabber.getString(\\"add_new_circle\\"))]}\'>\\n    </div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/groups_new_group.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/media_item.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"gallery-file\\" title=\\"{{file.name}}\\" data-id=\\"{{file.id}}\\" data-uniqueid=\\"{{file.uniqueid}}\\"  data-file=\\"{{file.sources[0]}}\\" data-name=\\"{{file.name}}\\" data-size=\\"{{file.size}}\\" data-width=\\"{{file.width}}\\" data-height=\\"{{file.height}}\\" data-media-type=\\"{{file.media_type}}\\" >\\n    {[if (file.media_type && (file.media_type.includes(\'image\') || (file.media_type.includes(\'video\') && !file.has_encrypted_files))){]}\\n    <img class=\\"{[if (file.media_type.includes(\'video\')){]}uploaded-video{[} else {]}uploaded-img popup-img{[}]}\\"\\n         data-mfp-src=\\"{{file.sources[0]}}\\"\\n         src=\\"{[if (file.thumbnail){]}{{file.thumbnail}}{[} else {]}{{file.sources[0]}}{[}]}\\"\\n         onError=\\"this.parentElement.className = this.parentElement.className + \' hidden\';\\"\\n    >\\n    {[} else {]}\\n    {[if (svg_icon == \'file-audio\' && file.true_voice){]}\\n    <div class=\\"gallery-file-placeholder-background gallery-audio-file-not-uploaded\\">\\n        <i class=\\"details-icon mdi mdi-play no-uploaded\\"></i>\\n    </div>\\n    <div class=\\"gallery-file-audio-container\\">\\n    </div>\\n    {[} else {]}\\n    <div class=\\"gallery-file-placeholder-background\\">\\n        <svg class=\\"details-icon mdi mdi-24px mdi-svg-template\\" data-svgname=\\"{{svg_icon}}\\"></svg>\\n        <div class=\\"gallery-file-title-grid\\">{{filesize}}</div>\\n    </div>\\n    {[}]}\\n    <div class=\\"gallery-file-title one-line\\">\\n        {{file.name}},  <span class=\\"gallery-file-size\\">{{filesize}}</span>\\n    </div>\\n    {[if (duration && file.true_voice){]}\\n    <div class=\\"gallery-voice-file-duration\\">\\n        0:00 / <span class=\\"gallery-voice-file-total-duration\\">{{duration}}</span>\\n    </div>\\n    {[}]}\\n    {[}]}\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/media_item.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/media_items_empty.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"gallery-empty\\">\\n    <div class=\\"gallery-empty-icon-wrap\\">\\n        <i class=\\"gallery-empty-icon mdi mdi-24px mdi-package-variant\\"></i>\\n    </div>\\n    <div class=\\"gallery-empty-text\\">{[print(xabber.getString(\\"no_files\\"))]}</div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/media_items_empty.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/preloader.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"preloader-wrapper preloader-17px active visible\\">\\n    <div class=\\"spinner-layer\\">\\n        <div class=\\"circle-clipper left\\">\\n            <div class=\\"circle\\"></div>\\n        </div>\\n        <div class=\\"gap-patch\\">\\n            <div class=\\"circle\\"></div>\\n        </div>\\n        <div class=\\"circle-clipper right\\">\\n            <div class=\\"circle\\"></div>\\n        </div>\\n    </div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/preloader.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/roster_left.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"contacts-panel noselect\\">\\n    <div class=\\"contacts-search-form search-form panel-head\\">\\n        <div class=\\"account-indicator\\"></div>\\n        <i class=\\"search-icon mdi mdi-24px mdi-magnify\\"></i>\\n        <input type=\\"text\\" class=\\"search-input simple-input-field\\" tabindex=\\"1\\" placeholder=\'{[print(xabber.getString(\\"search\\"))]}\'>\\n        <i class=\\"close-search-icon mdi mdi-24px mdi-close\\"></i>\\n    </div>\\n\\n    <div class=\\"contact-list-wrap left-panel-list-wrap\\">\\n        <div class=\\"contact-list item-list\\">\\n        </div>\\n        <div class=\\"searched-lists-wrap\\">\\n            <div class=\\"chats-list-wrap hidden\\">\\n                <div class=\\"account-indicator\\"></div>\\n                <div class=\\"chats-title\\">{[print(xabber.getString(\\"search__header_chats\\"))]}</div>\\n                <div class=\\"chats-list roster-left-container\\"></div>\\n            </div>\\n            <div class=\\"contacts-list-wrap hidden\\">\\n                <div class=\\"account-indicator\\"></div>\\n                <div class=\\"contacts-title\\">{[print(xabber.getString(\\"category_title_contacts\\"))]}</div>\\n                <div class=\\"contacts-list roster-left-container\\"></div>\\n            </div>\\n            <div class=\\"messages-list-wrap hidden\\">\\n                <div class=\\"account-indicator\\"></div>\\n                <div class=\\"messages-title\\">{[print(xabber.getString(\\"search__header_messages\\"))]}</div>\\n                <div class=\\"messages-list roster-left-container\\"></div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/roster_left.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/roster_right.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"contacts-panel noselect\\">\\n    <div class=\\"collapsed-wrap\\">\\n        <i class=\\"collapsed-contacts-icon mdi mdi-24px mdi-account-multiple\\"></i>\\n        <div class=\\"all-contacts-counter\\"></div>\\n    </div>\\n    <div class=\\"expanded-wrap\\">\\n        <div class=\\"roster-head panel-head\\">\\n            <div class=\\"contacts-header\\">{[print(xabber.getString(\\"category_title_contacts\\"))]}</div>\\n            <div class=\\"roster-button btn-pin\\"></div>\\n        </div>\\n\\n        <div class=\\"contact-list-wrap\\">\\n            <div class=\\"contact-list\\">\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/roster_right.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/roster_settings.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("    <div class=\\"setting-name\\">{[print(xabber.getString(\\"settings__section_contact_list__header_offline_contacts\\"))]}</div>\\n    <div class=\\"setting offline-contacts radio-button field-wrap\\">\\n        <div class=\\"field radio-field clickable-field\\">\\n            <form action=\\"#\\">\\n                <p>\\n                    <input class=\\"with-gap\\" name=\\"offline-contacts\\" value=\\"yes\\" type=\\"radio\\" id=\\"{{view.cid}}-show\\" />\\n                    <label for=\\"{{view.cid}}-show\\">{[print(xabber.getString(\\"settings__section_contact_list__offline_contacts__label_show\\"))]}</label>\\n                </p>\\n                <p>\\n                    <input class=\\"with-gap\\" name=\\"offline-contacts\\" value=\\"no\\" type=\\"radio\\" id=\\"{{view.cid}}-hide\\" />\\n                    <label for=\\"{{view.cid}}-hide\\">{[print(xabber.getString(\\"settings__section_contact_list__offline_contacts__label_hide\\"))]}</label>\\n                </p>\\n            </form>\\n        </div>\\n    </div>\\n    <div class=\\"setting-name\\">{[print(xabber.getString(\\"settings__section_contact_list__header_sorting\\"))]}</div>\\n    <div class=\\"setting sorting-contacts radio-button field-wrap\\">\\n        <div class=\\"field radio-field clickable-field\\">\\n            <form action=\\"#\\">\\n                <p>\\n                    <input class=\\"with-gap\\" name=\\"sorting-contacts\\" value=\\"online-first\\" type=\\"radio\\" id=\\"{{view.cid}}-online-first\\" />\\n                    <label for=\\"{{view.cid}}-online-first\\">{[print(xabber.getString(\\"settings__section_contact_list__sorting__label_online_first\\"))]}</label>\\n                </p>\\n                <p>\\n                    <input class=\\"with-gap\\" name=\\"sorting-contacts\\" value=\\"by-alphabet\\" type=\\"radio\\" id=\\"{{view.cid}}-by-alphabet\\" />\\n                    <label for=\\"{{view.cid}}-by-alphabet\\">{[print(xabber.getString(\\"settings__section_contact_list__sorting__label_alphabet\\"))]}</label>\\n                </p>\\n            </form>\\n        </div>\\n    </div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/contacts/roster_settings.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/mentions/mention_item.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"group-chat-title-wrap hidden\\">\\n    <div class=\\"account-indicator ground-color-700\\"></div>\\n    <div class=\\"contact-icon\\">\\n        <img class=\\"server-icon hidden\\" src=\\"./images/BotIcon20x20@2x.png\\">\\n        <img class=\\"group-chat-icon hidden\\" src=\\"./images/GroupchatIcon20x20@2x.png\\">\\n    </div>\\n    <div class=\\"group-chat-name one-line\\"></div>\\n</div>\\n<div class=\\"mention-info-wrap\\">\\n<div class=\\"account-indicator ground-color-700\\"></div>\\n<div class=\\"circle-avatar\\"></div>\\n<div class=\\"mention-info\\">\\n    <div class=\\"chat-title-wrap\\">\\n        <p class=\\"chat-title one-line\\"></p>\\n        <p class=\\"last-msg-date\\"></p>\\n    </div>\\n    <p class=\\"last-msg one-line\\"></p>\\n    <span class=\\"msg-counter hidden\\"></span>\\n</div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/mentions/mention_item.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/mentions/mentions_panel.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"mentions-panel noselect\\">\\n    <div class=\\"chats-search-form search-form panel-head\\">\\n        <div class=\\"account-indicator\\"></div>\\n        <i class=\\"search-icon mdi mdi-24px mdi-magnify\\"></i>\\n        <input type=\\"text\\" class=\\"search-input simple-input-field\\" tabindex=\\"1\\" placeholder=\'{[print(xabber.getString(\\"search\\"))]}\'>\\n        <i class=\\"close-search-icon mdi mdi-24px mdi-close\\"></i>\\n    </div>\\n    <div class=\\"mentions-list-wrap left-panel-list-wrap\\">\\n        <div class=\\"mentions-list item-list\\">\\n        </div>\\n        <div class=\\"searched-lists-wrap\\">\\n            <div class=\\"chats-list-wrap hidden\\">\\n                <div class=\\"account-indicator\\"></div>\\n                <div class=\\"chats-title\\">{[print(xabber.getString(\\"search__header_chats\\"))]}</div>\\n                <div class=\\"chats-list roster-left-container\\"></div>\\n            </div>\\n            <div class=\\"contacts-list-wrap hidden\\">\\n                <div class=\\"account-indicator\\"></div>\\n                <div class=\\"contacts-title\\">{[print(xabber.getString(\\"category_title_contacts\\"))]}</div>\\n                <div class=\\"contacts-list roster-left-container\\"></div>\\n            </div>\\n            <div class=\\"messages-list-wrap hidden\\">\\n                <div class=\\"account-indicator\\"></div>\\n                <div class=\\"messages-title\\">{[print(xabber.getString(\\"search__header_messages\\"))]}</div>\\n                <div class=\\"messages-list roster-left-container\\"></div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/mentions/mentions_panel.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/mentions/mentions_placeholder.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"text\\">{[print(xabber.getString(\\"mentions_list__placeholder\\"))]}</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/mentions/mentions_placeholder.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/searching/existing_groupchat_details_view.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"block-header\\">\\n    <span class=\\"block-name\\">{[print(xabber.getString(\\"searching__chat_properties__header\\"))]}</span>\\n</div>\\n<div class=\\"chat-properties-wrap selectable-text\\">\\n    <div class=\\"info-wrap jid-info-wrap\\">\\n        <svg class=\\"details-icon mdi mdi-24px mdi-svg-template\\" data-svgname=\\"xmpp\\"></svg>\\n        <div class=\\"info jabber-id\\">\\n            <div class=\\"value one-line\\">{{jid}}</div>\\n            <div class=\\"label\\">{[print(xabber.getString(\\"group_settings__properties__label_jid\\"))]}</div>\\n        </div>\\n    </div>\\n    <div class=\\"info-wrap name-info-wrap\\">\\n        <i class=\\"details-icon mdi mdi-24px mdi-account-box-outline\\"></i>\\n        <div class=\\"info name\\">\\n            <div class=\\"value one-line\\">{{name}}</div>\\n            <div class=\\"label\\">{[print(xabber.getString(\\"groupchat_name\\"))]}</div>\\n        </div>\\n    </div>\\n    <div class=\\"info-wrap description-info-wrap\\">\\n        <i class=\\"details-icon mdi mdi-24px mdi-file-document-box\\"></i>\\n        <div class=\\"info description\\">\\n            <div class=\\"value one-line\\">{{description}}</div>\\n            <div class=\\"label\\">{[print(xabber.getString(\\"groupchat_description\\"))]}</div>\\n        </div>\\n    </div>\\n    <div class=\\"info-wrap anonymous-info-wrap\\">\\n        <i class=\\"details-icon mdi mdi-24px mdi-comment-question-outline\\"></i>\\n        <div class=\\"info anonymous\\">\\n            <div class=\\"value one-line\\">{{privacy}}</div>\\n            <div class=\\"label\\">{[print(xabber.getString(\\"groupchat_privacy_type_incognito\\"))]}</div>\\n        </div>\\n    </div>\\n    <div class=\\"info-wrap model-info-wrap\\">\\n        <i class=\\"details-icon mdi mdi-24px mdi-lock-open-outline\\"></i>\\n        <div class=\\"info model\\">\\n            <div class=\\"value one-line\\">{{membership}}</div>\\n            <div class=\\"label\\">{[print(xabber.getString(\\"groupchat_membership\\"))]}</div>\\n        </div>\\n    </div>\\n</div>\\n<button class=\\"btn-join-chat btn-flat btn-main btn-dark ground-color-100 hover-ground-color-300\\">{[print(xabber.getString(\\"groupchat_join\\"))]}</button>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/searching/existing_groupchat_details_view.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/searching/existing_groupchat_item.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"existing-chat-wrap\\" data-name=\\"{{name}}\\" data-jid=\\"{{jid}}\\">\\n    <div class=\\"account-indicator ground-color-{{color}}-500\\"></div>\\n    <div class=\\"circle-avatar\\">\\n        <img>\\n    </div>\\n    <div class=\\"existing-chat-item\\">\\n        <div class=\\"name one-line\\">{{name}}</div>\\n        <div class=\\"jid one-line\\">{{jid}}</div>\\n    </div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/searching/existing_groupchat_item.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/searching/searching_account_item.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"account-item-wrap\\" data-jid=\\"{{jid}}\\">\\n    <div class=\\"name one-line\\">{{jid}}</div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/searching/searching_account_item.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/searching/searching_wide.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"searching-panel\\">\\n    <div class=\\"search-wide search-form\\">\\n        <div class=\\"account-indicator ground-color-500\\"></div>\\n        <i class=\\"search-icon mdi mdi-24px mdi-magnify\\"></i>\\n        <input type=\\"text\\" class=\\"search-input simple-input-field\\" tabindex=\\"1\\" placeholder=\'{[print(xabber.getString(\\"searching__placeholder_search_by_domain\\"))]}\'>\\n        <i class=\\"close-search-icon mdi mdi-24px mdi-close\\"></i>\\n    </div>\\n    <div class=\\"searching-properties-field\\">\\n        <div class=\\"dropdown-button\\" data-visible=\\"false\\">\\n            <i class=\\"mdi mdi-24px mdi-chevron-down arrow\\"></i>\\n        </div>\\n    </div>\\n    <ul id=\\"select-searching-properties\\" class=\\"selectable-text\\">\\n        <div class=\\"account-property\\">\\n            <p class=\\"property-name\\">{[print(xabber.getString(\\"searching__search_panel__label_account\\"))]}</p>\\n            <div class=\\"account-field\\">\\n                <div class=\\"multiple-acc\\">\\n                    <div class=\\"account-dropdown-wrap\\">\\n                        <div class=\\"dropdown-button\\" data-activates=\\"select-account-for-searching\\">\\n                            <div class=\\"account-item-wrap\\">\\n                            </div>\\n                            <div class=\\"caret\\">\\n                                <i class=\\"mdi mdi-20px mdi-menu-down\\"></i>\\n                            </div>\\n                        </div>\\n                        <div id=\\"select-account-for-searching\\" class=\\"dropdown-content\\">\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\"single-acc\\">\\n                    <div class=\\"dropdown-button\\">\\n                        <div class=\\"account-item-wrap\\">\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\"title-property\\">\\n            <p class=\\"property-name\\">{[print(xabber.getString(\\"searching__search_panel__label_title\\"))]}</p>\\n            <div class=\\"input-field\\">\\n                <input id=\\"searching_property_title\\" type=\\"text\\" name=\\"title\\">\\n            </div>\\n        </div>\\n        <div class=\\"sorting-property\\">\\n            <p class=\\"property-name\\">{[print(xabber.getString(\\"searching__search_panel__label_sort_by\\"))]}</p>\\n            <div class=\\"input-field\\">\\n                <input id=\\"searching_property_sort_by\\" type=\\"text\\" name=\\"title\\">\\n            </div>\\n        </div>\\n        <button class=\\"btn-search btn btn-main-filled ground-color-700\\">{[print(xabber.getString(\\"search\\"))]}</button>\\n    </ul>\\n</div>\\n<div class=\\"searching-result-wrap\\">\\n    <div class=\\"chats-list-wrap\\">\\n        <div class=\\"result-string\\"></div>\\n        <div class=\\"preloader-wrapper preloader-17px active\\">\\n            <div class=\\"spinner-layer\\">\\n                <div class=\\"circle-clipper left\\">\\n                    <div class=\\"circle\\"></div>\\n                </div>\\n                <div class=\\"gap-patch\\">\\n                    <div class=\\"circle\\"></div>\\n                </div>\\n                <div class=\\"circle-clipper right\\">\\n                    <div class=\\"circle\\"></div>\\n                </div>\\n            </div></div>\\n        <div class=\\"chats-list\\"></div></div>\\n    <div class=\\"searching-more\\"></div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/searching/searching_wide.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/account-outline.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/account-outline</title>\\n    <g id=\\"icon/material/account-outline\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M19,19 L5,19 L5,5 L19,5 M19,3 L5,3 C3.8954305,3 3,3.8954305 3,5 L3,19 C3,20.1045695 3.8954305,21 5,21 L19,21 C20.1045695,21 21,20.1045695 21,19 L21,5 C21,3.89 20.1,3 19,3 M16.5,16.25 C16.5,14.75 13.5,14 12,14 C10.5,14 7.5,14.75 7.5,16.25 L7.5,17 L16.5,17 M12,12.25 C13.2426407,12.25 14.25,11.2426407 14.25,10 C14.25,8.75735931 13.2426407,7.75 12,7.75 C10.7573593,7.75 9.75,8.75735931 9.75,10 C9.75,11.2426407 10.7573593,12.25 12,12.25 Z\\" id=\\"mdi:account-box-outline\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/account-outline.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/address-outline.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/address-outline</title>\\n    <g id=\\"icon/material/address-outline\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M12,6.5 C13.3807119,6.5 14.5,7.61928813 14.5,9 C14.5,9.66304122 14.2366079,10.298926 13.767767,10.767767 C13.298926,11.2366079 12.6630412,11.5 12,11.5 C10.6192881,11.5 9.5,10.3807119 9.5,9 C9.5,8.33695878 9.7633921,7.70107399 10.232233,7.23223305 C10.701074,6.7633921 11.3369588,6.5 12,6.5 M12,2 C15.8659932,2 19,5.13400675 19,9 C19,14.25 12,22 12,22 C12,22 5,14.25 5,9 C5,5.13400675 8.13400675,2 12,2 M12,4 C9.23857625,4 7,6.23857625 7,9 C7,10 7,12 12,18.71 C17,12 17,10 17,9 C17,6.23857625 14.7614237,4 12,4 L12,4 Z\\" id=\\"mdi:map-marker-outline\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/address-outline.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/bell-off.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/bell-off</title>\\n    <g id=\\"icon/material/bell-off\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M20.84,22.73 L18.11,20 L3,20 L3,19 L5,17 L5,11 C5.00430327,9.85524651 5.28929416,8.72901748 5.83,7.72 L1.11,3 L2.39,1.73 L22.11,21.46 L20.84,22.73 Z M19.0000002,15.8 L19.0000002,11 C19.0007944,7.90366232 16.9672665,5.17466784 14,4.29 C14.0049007,4.19339544 14.0049007,4.09660456 14,4 C14,2.8954305 13.1045695,2 12,2 C10.8954305,2 10,2.8954305 10,4 C9.99507868,4.09660403 9.99507868,4.19339597 10,4.29 C9.385,4.474 8.8,4.743 8.26,5.09 L19.0000002,15.8 Z M12,23 C13.1045695,23 14,22.1045695 14,21 L10,21 C10,22.1045695 10.8954305,23 12,23 Z\\" id=\\"mdi:bell-off\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/bell-off.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/bell-sleep.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/bell-sleep</title>\\n    <g id=\\"icon/material/bell-sleep\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M10,21 L14,21 C14,22.1045695 13.1045695,23 12,23 C10.8954305,23 10,22.1045695 10,21 Z M21,19 L21,20 L3,20 L3,19 L5,17 L5,11 C4.99920557,7.90366232 7.0327335,5.17466784 10,4.29 C9.99507868,4.19339597 9.99507868,4.09660403 10,4 C10,2.8954305 10.8954305,2 12,2 C13.1045695,2 14,2.8954305 14,4 C14.005,4.097 14.005,4.193 14,4.29 C16.9672665,5.17466784 19.0007944,7.90366232 19,11 L19,17 L21,19 L21,19 Z M15,9 L9,9 L9,11 L12.24,11 L9,13.7 L9,16 L15,16 L15,14 L11.76,14 L15,11.3 L15,9 Z\\" id=\\"mdi:bell-sleep\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/bell-sleep.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/bell.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/bell</title>\\n    <g id=\\"icon/material/bell\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M21,19 L21,20 L3,20 L3,19 L5,17 L5,11 C4.99920557,7.90366232 7.0327335,5.17466784 10,4.29 C9.99507868,4.19339597 9.99507868,4.09660403 10,4 C10,2.8954305 10.8954305,2 12,2 C13.1045695,2 14,2.8954305 14,4 C14.005,4.097 14.005,4.193 14,4.29 C16.9672665,5.17466784 19.0007944,7.90366232 19,11 L19,17 L21,19 L21,19 Z M14,21 C14,22.1045695 13.1045695,23 12,23 C10.8954305,23 10,22.1045695 10,21 L14,21 Z\\" id=\\"mdi:bell\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/bell.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/birthday-outline.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/birthday-outline</title>\\n    <g id=\\"icon/material/birthday-outline\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M12,6 C13.1045695,6 14,5.1045695 14,4 C14,3.62 13.9,3.27 13.71,2.97 L12,0 L10.29,2.97 C10.1,3.27 10,3.62 10,4 C10,5.1 10.9,6 12,6 M18,9 L13,9 L13,7 L11,7 L11,9 L6,9 C4.34,9 3,10.34 3,12 L3,21 C3,21.55 3.45,22 4,22 L20,22 C20.55,22 21,21.55 21,21 L21,12 C21,10.34 19.66,9 18,9 M19,20 L5,20 L5,17 C5.9,17 6.76,16.63 7.4,16 L8.5,14.92 L9.56,16 C10.87,17.3 13.15,17.29 14.45,16 L15.53,14.92 L16.6,16 C17.24,16.63 18.1,17 19,17 L19,20 M19,15.5 C18.5,15.5 18,15.3 17.65,14.93 L15.5,12.8 L13.38,14.93 C12.64,15.67 11.35,15.67 10.61,14.93 L8.5,12.8 L6.34,14.93 C6,15.29 5.5,15.5 5,15.5 L5,12 C5,11.45 5.45,11 6,11 L18,11 C18.55,11 19,11.45 19,12 L19,15.5 Z\\" id=\\"mdi:cake-variant-outline\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/birthday-outline.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/blocked-add.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/blocked-add</title>\\n    <g id=\\"icon/material/blocked-add\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M20,15 L20,18 L23,18 L23,20 L20,20 L20,23 L18,23 L18,20 L15,20 L15,18 L18,18 L18,15 L20,15 Z M12,2 C17.5,2 22,6.5 22,12 C22,12.5859564 21.9489239,13.1605626 21.851004,13.7195862 C21.2621133,13.4007388 20.6141835,13.1778427 19.9277796,13.0712956 C19.9754227,12.7216453 20,12.3635535 20,12 C20,10.1 19.4,8.4 18.3,7.1 L7.1,18.3 C8.5,19.3 10.2,20 12,20 C12.3635535,20 12.7216453,19.9754227 13.0726961,19.9278476 C13.1778427,20.6141835 13.4007388,21.2621133 13.719191,21.8507762 C13.1605626,21.9489239 12.5859564,22 12,22 C6.5,22 2,17.5 2,12 C2,6.5 6.5,2 12,2 Z M12,4 C7.6,4 4,7.6 4,12 C4,13.7882353 4.53148789,15.399308 5.51109302,16.6664767 L5.7,16.9 L16.9,5.7 C15.6,4.6 13.9,4 12,4 Z\\" id=\\"xabber:block-add\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/blocked-add.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/blocked.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"16px\\" height=\\"16px\\" viewBox=\\"0 0 16 16\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>badge/icon/blocked</title>\\n    <g id=\\"badge/icon/blocked\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"Bounds\\" x=\\"0\\" y=\\"0\\" width=\\"16\\" height=\\"16\\"></rect>\\n        <path d=\\"M8,1 C11.8659932,1 15,4.13400675 15,8 C15,11.8659932 11.8659932,15 8,15 C4.13400675,15 1,11.8659932 1,8 C1,4.13400675 4.13400675,1 8,1 Z M12.3574649,4.64359326 L4.64359326,12.3574649 C5.57228864,13.073866 6.73637986,13.5 8,13.5 C11.0375661,13.5 13.5,11.0375661 13.5,8 C13.5,6.73637986 13.073866,5.57228864 12.3574649,4.64359326 Z M8,2.5 C4.96243388,2.5 2.5,4.96243388 2.5,8 C2.5,9.26408031 2.92644441,10.4285592 3.64331784,11.3574212 L11.3574212,3.64331784 C10.4285592,2.92644441 9.26408031,2.5 8,2.5 Z\\" id=\\"blocked\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/blocked.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/bot-variant.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"16px\\" height=\\"16px\\" viewBox=\\"0 0 16 16\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>badge/icon/bot-variant</title>\\n    <g id=\\"badge/icon/bot-variant\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"Bounds\\" x=\\"0\\" y=\\"0\\" width=\\"16\\" height=\\"16\\"></rect>\\n        <path d=\\"M8,3.5 C9.93299662,3.5 11.5,5.06700338 11.5,7 L11.5,9.5 C11.5,11.1568542 9.93299662,12.5 8,12.5 C6.06700338,12.5 4.5,11.1568542 4.5,9.5 L4.5,7 L4.50517886,6.8079648 C4.60487355,4.9642776 6.1314366,3.5 8,3.5 Z M8,5 C6.9456382,5 6.08183488,5.81587779 6.00548574,6.85073766 L6,7 L6,8 C6,8.82842712 6.8954305,9.5 8,9.5 C9.1045695,9.5 10,8.82842712 10,8 L10,7 C10,5.8954305 9.1045695,5 8,5 Z M3.5,6 C3.77614237,6 4,6.22385763 4,6.5 L4,9.5 C4,9.77614237 3.77614237,10 3.5,10 C3.22385763,10 3,9.77614237 3,9.5 L3,6.5 C3,6.22385763 3.22385763,6 3.5,6 Z M12.5,6 C12.7761424,6 13,6.22385763 13,6.5 L13,9.5 C13,9.77614237 12.7761424,10 12.5,10 C12.2238576,10 12,9.77614237 12,9.5 L12,6.5 C12,6.22385763 12.2238576,6 12.5,6 Z\\" id=\\"Bot\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/bot-variant.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/bot.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"16px\\" height=\\"16px\\" viewBox=\\"0 0 16 16\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>badge/icon/bot</title>\\n    <g id=\\"badge/icon/bot\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"Bounds\\" x=\\"0\\" y=\\"0\\" width=\\"16\\" height=\\"16\\"></rect>\\n        <path d=\\"M8.5,2.9 C8.83137085,2.9 9.1,3.16862915 9.1,3.5 C9.1,3.6775201 9.02290618,3.83703397 8.9003726,3.94688754 L8.899,4.999 L11,5 C11.5522847,5 12,5.44771525 12,6 L12,7 C12.2761424,7 12.5,7.22385763 12.5,7.5 L12.5,8.5 C12.5,8.77614237 12.2761424,9 12,9 L12,11 C12,11.5522847 11.5522847,12 11,12 L5,12 C4.44771525,12 4,11.5522847 4,11 L4,9 C3.72385763,9 3.5,8.77614237 3.5,8.5 L3.5,7.5 C3.5,7.22385763 3.72385763,7 4,7 L4,6 C4,5.44771525 4.44771525,5 5,5 L8.1,4.999 L8.0996274,3.94688754 C7.97709382,3.83703397 7.9,3.6775201 7.9,3.5 C7.9,3.16862915 8.16862915,2.9 8.5,2.9 Z M9.5,10 L6.5,10 C6.22385763,10 6,10.2238576 6,10.5 C6,10.7761424 6.22385763,11 6.5,11 L9.5,11 C9.77614237,11 10,10.7761424 10,10.5 C10,10.2238576 9.77614237,10 9.5,10 Z M6.5,6 C6.22385763,6 6,6.22385763 6,6.5 L6,7 L5.5,7 C5.22385763,7 5,7.22385763 5,7.5 C5,7.77614237 5.22385763,8 5.5,8 L6,8 L6,8.5 C6,8.77614237 6.22385763,9 6.5,9 C6.77614237,9 7,8.77614237 7,8.5 L7,8 L7.5,8 C7.77614237,8 8,7.77614237 8,7.5 C8,7.22385763 7.77614237,7 7.5,7 L7,7 L7,6.5 C7,6.22385763 6.77614237,6 6.5,6 Z M9.5,7 C9.22385763,7 9,7.22385763 9,7.5 C9,7.77614237 9.22385763,8 9.5,8 C9.77614237,8 10,7.77614237 10,7.5 C10,7.22385763 9.77614237,7 9.5,7 Z\\" id=\\"bot\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/bot.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/call-outline.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/call-outline</title>\\n    <g id=\\"icon/material/call-outline\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M20,15.5 C18.8,15.5 17.5,15.3 16.4,14.9 C16.3,14.9 16.2,14.9 16.1,14.9 C15.8,14.9 15.6,15 15.4,15.2 L13.2,17.4 C10.4,15.9 8,13.6 6.6,10.8 L8.8,8.6 C9.1,8.3 9.2,7.9 9,7.6 C8.7,6.5 8.5,5.2 8.5,4 C8.5,3.5 8,3 7.5,3 L4,3 C3.5,3 3,3.5 3,4 C3,13.4 10.6,21 20,21 C20.5,21 21,20.5 21,20 L21,16.5 C21,16 20.5,15.5 20,15.5 L20,15.5 Z M5,5 L6.5,5 C6.6,5.9 6.8,6.8 7,7.6 L5.8,8.8 C5.4,7.6 5.1,6.3 5,5 L5,5 Z M19,19 C17.7,18.9 16.4,18.6 15.2,18.2 L16.4,17 C17.2,17.2 18.1,17.4 19,17.4 L19,19 Z\\" id=\\"mdi:phone-outline\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/call-outline.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/call.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/call</title>\\n    <g id=\\"icon/material/call\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M6.62,10.79 C8.06,13.62 10.38,15.94 13.21,17.38 L15.41,15.18 C15.69,14.9 16.08,14.82 16.43,14.93 C17.55,15.3 18.75,15.5 20,15.5 C20.5522847,15.5 21,15.9477153 21,16.5 L21,20 C21,20.5522847 20.5522847,21 20,21 C10.6111593,21 3,13.3888407 3,4 C3,3.73478351 3.10535684,3.4804296 3.29289322,3.29289322 C3.4804296,3.10535684 3.73478351,3 4,3 L7.5,3 C8.05228475,3 8.5,3.44771525 8.5,4 C8.5,5.25 8.7,6.45 9.07,7.57 C9.18,7.92 9.1,8.31 8.82,8.59 L6.62,10.79 Z\\" id=\\"mdi:phone\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/call.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/camera-retake.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/camera-retake</title>\\n    <g id=\\"icon/material/camera-retake\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M20,5 L17,5 L15,3 L9,3 L7,5 L4,5 C2.8954305,5 2,5.8954305 2,7 L2,19 C2,20.1045695 2.8954305,21 4,21 L20,21 C21.1045695,21 22,20.1045695 22,19 L22,7 C22,5.8954305 21.1045695,5 20,5 M12,18.0000026 C10.92,18.0000026 9.86,17.65 9,17 L10.44,15.56 C10.91,15.85 11.45,16 12,16 C13.6568542,16 15,14.6568542 15,13 C15,11.3431458 13.6568542,10 12,10 C10.74,10 9.6,10.8 9.18,12 L11,12 L8,15 L5,12 L7.1,12 C7.36424064,10.6999079 8.13463224,9.5582575 9.24136868,8.82668596 C10.3481051,8.09511441 11.7003328,7.83367752 13,8.1 C15.5173928,8.61117175 17.2378687,10.9467344 16.9797109,13.5024961 C16.7215532,16.0582577 14.5687655,18.0025816 12,18.0000026 L12,18.0000026 Z\\" id=\\"mdi:camera-retake\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/camera-retake.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/cancel.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/cancel</title>\\n    <g id=\\"icon/material/cancel\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M12,2 C14.6521649,2 17.195704,3.0535684 19.0710678,4.92893219 C20.9464316,6.80429597 22,9.3478351 22,12 C22,17.5228475 17.5228475,22 12,22 C9.3478351,22 6.80429597,20.9464316 4.92893219,19.0710678 C3.0535684,17.195704 2,14.6521649 2,12 C2,9.3478351 3.0535684,6.80429597 4.92893219,4.92893219 C6.80429597,3.0535684 9.3478351,2 12,2 M12,3.99999926 C7.581722,3.99999926 4,7.581722 4,11.9999993 C4,13.85 4.63,15.55 5.68,16.91 L16.91,5.68 C15.505295,4.59031127 13.7778124,3.99923779 12,3.99999926 M12,20.0000007 C16.418278,20.0000007 20,16.418278 20,12 C20,10.15 19.37,8.45 18.32,7.09 L7.09,18.32 C8.49470497,19.4096887 10.2221876,20.0007622 12,20.0000007 L12,20.0000007 Z\\" id=\\"mdi:cancel\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/cancel.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/channel.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"16px\\" height=\\"16px\\" viewBox=\\"0 0 16 16\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>badge/icon/channel</title>\\n    <g id=\\"badge/icon/channel\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"Bounds\\" x=\\"0\\" y=\\"0\\" width=\\"16\\" height=\\"16\\"></rect>\\n        <path d=\\"M6.5,12.5 C6.5,12.7761424 6.27614237,13 6,13 L5,13 C4.72385763,13 4.5,12.7761424 4.5,12.5 L4.5,9.997 L4.02563513,9.99796942 C3.49695533,9.99796942 3.06170233,9.63379568 3.00601829,9.10979782 L3,8.99514074 L3,7 C3,6.44278422 3.50172034,6 4.02563513,6 L8,6 L11,4 L11,12 L8,9.99796942 L6.5,9.997 L6.5,12.5 Z M12,6 C12.7835446,6.37375602 13.2808221,7.14951331 13.2820439,8 C13.2882682,8.85255761 12.7887168,9.63186239 12,10 L12,6 Z\\" id=\\"Horn\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/channel.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/chevron-down.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/chevron-down</title>\\n    <g id=\\"icon/material/chevron-down\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <polygon id=\\"mdi:chevron-down\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\" points=\\"7.41 8.58 12 13.17 16.59 8.58 18 10 12 16 6 10\\"></polygon>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/chevron-down.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/chevron-left-variant.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/chevron-left-variant</title>\\n    <g id=\\"icon/material/chevron-left-variant\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <polygon id=\\"xabber:chevron-right\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\" transform=\\"translate(11.500000, 12.000000) scale(-1, 1) translate(-11.500000, -12.000000) \\" points=\\"7 18.5 13.5 12 7 5.5 8.25 4.25 16 12 8.25 19.75\\"></polygon>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/chevron-left-variant.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/chevron-right-variant.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/chevron-right-variant</title>\\n    <g id=\\"icon/material/chevron-right-variant\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <polygon id=\\"xabber:chevron-right\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\" points=\\"8 18.5 14.5 12 8 5.5 9.25 4.25 17 12 9.25 19.75\\"></polygon>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/chevron-right-variant.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/circles.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/circles</title>\\n    <g id=\\"icon/material/circles\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M8.61510772,4.31938417 C8.28417501,5.13922603 8.07752033,6.02134442 8.01792471,6.94352205 L7.91776678,6.99321105 C5.73983381,8.11301495 4.25,10.3825228 4.25,13 C4.25,16.7279221 7.27207794,19.75 11,19.75 C13.6571359,19.75 15.9556781,18.2146777 17.0568945,15.9827652 C17.9787775,15.9224511 18.8608306,15.7158021 19.6796219,15.3853225 C18.6352051,19.1981743 15.1448033,22 11,22 C6.02943725,22 2,17.9705627 2,13 C2,8.85508685 4.80197429,5.36460986 8.61510772,4.31938417 Z M16.5,1 C20.0898509,1 23,3.91014913 23,7.5 C23,11.0898509 20.0898509,14 16.5,14 C12.9101491,14 10,11.0898509 10,7.5 C10,3.91014913 12.9101491,1 16.5,1 Z M16.5,3 C14.0147186,3 12,5.01471863 12,7.5 C12,9.98528137 14.0147186,12 16.5,12 C18.9852814,12 21,9.98528137 21,7.5 C21,5.01471863 18.9852814,3 16.5,3 Z\\" id=\\"xabber:circles\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/circles.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/clock-outline.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/clock-outline</title>\\n    <g id=\\"icon/material/clock-outline\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M12,20 C16.418278,20 20,16.418278 20,12 C20,7.581722 16.418278,4 12,4 C7.581722,4 4,7.581722 4,12 C4,16.418278 7.581722,20 12,20 M12,2 C14.6521649,2 17.195704,3.0535684 19.0710678,4.92893219 C20.9464316,6.80429597 22,9.3478351 22,12 C22,17.5228475 17.5228475,22 12,22 C6.47,22 2,17.5 2,12 C2,6.4771525 6.4771525,2 12,2 M12.5,7 L12.5,12.25 L17,14.92 L16.25,16.15 L11,13 L11,7 L12.5,7 Z\\" id=\\"mdi:clock-outline\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/clock-outline.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/close.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"100%\\" height=\\"100%\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/close</title>\\n    <g id=\\"icon/material/close\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <polygon id=\\"mdi:close\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\" points=\\"19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12\\"></polygon>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/close.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/crosshairs-gps.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/crosshairs-gps</title>\\n    <g id=\\"icon/material/crosshairs-gps\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M12,8 C14.209139,8 16,9.790861 16,12 C16,14.209139 14.209139,16 12,16 C9.790861,16 8,14.209139 8,12 C8,9.790861 9.790861,8 12,8 M3.05,13 L1,13 L1,11 L3.05,11 C3.5,6.83 6.83,3.5 11,3.05 L11,1 L13,1 L13,3.05 C17.17,3.5 20.5,6.83 20.95,11 L23,11 L23,13 L20.95,13 C20.5,17.17 17.17,20.5 13,20.95 L13,23 L11,23 L11,20.95 C6.83,20.5 3.5,17.17 3.05,13 M12,5 C8.13400675,5 5,8.13400675 5,12 C5,15.8659932 8.13400675,19 12,19 C15.8659932,19 19,15.8659932 19,12 C19,8.13400675 15.8659932,5 12,5 L12,5 Z\\" id=\\"mdi:crosshairs-gps\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/crosshairs-gps.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/crosshairs-question.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/crosshairs-question</title>\\n    <g id=\\"icon/material/crosshairs-question\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M3.05,13 L1,13 L1,11 L3.05,11 C3.5,6.83 6.83,3.5 11,3.05 L11,1 L13,1 L13,3.05 C17.17,3.5 20.5,6.83 20.95,11 L23,11 L23,13 L20.95,13 C20.5,17.17 17.17,20.5 13,20.95 L13,23 L11,23 L11,20.95 C6.83,20.5 3.5,17.17 3.05,13 M12,5 C8.13,5 5,8.13 5,12 C5,15.87 8.13,19 12,19 C15.87,19 19,15.87 19,12 C19,8.13 15.87,5 12,5 M11.13,17.25 L12.88,17.25 L12.88,15.5 L11.13,15.5 L11.13,17.25 M12,6.75 C10.07,6.75 8.5,8.32 8.5,10.25 L10.25,10.25 C10.25,9.28 11.03,8.5 12,8.5 C12.97,8.5 13.75,9.28 13.75,10.25 C13.75,12 11.13,11.78 11.13,14.63 L12.88,14.63 C12.88,12.66 15.5,12.44 15.5,10.25 C15.5,8.32 13.93,6.75 12,6.75 Z\\" id=\\"mdi:crosshairs-question\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/crosshairs-question.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/crosshairs.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/crosshairs</title>\\n    <g id=\\"icon/material/crosshairs\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M3.05,13 L1,13 L1,11 L3.05,11 C3.5,6.83 6.83,3.5 11,3.05 L11,1 L13,1 L13,3.05 C17.17,3.5 20.5,6.83 20.95,11 L23,11 L23,13 L20.95,13 C20.5,17.17 17.17,20.5 13,20.95 L13,23 L11,23 L11,20.95 C6.83,20.5 3.5,17.17 3.05,13 M12,5 C8.13400675,5 5,8.13400675 5,12 C5,15.8659932 8.13400675,19 12,19 C15.8659932,19 19,15.8659932 19,12 C19,8.13400675 15.8659932,5 12,5 L12,5 Z\\" id=\\"mdi:crosshairs\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/crosshairs.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/description-outline.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/description-outline</title>\\n    <g id=\\"icon/material/description-outline\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M5,3 C3.89,3 3,3.89 3,5 L3,19 C3,20.11 3.89,21 5,21 L19,21 C20.11,21 21,20.11 21,19 L21,5 C21,3.89 20.11,3 19,3 L5,3 M5,5 L19,5 L19,19 L5,19 L5,5 M7,7 L7,9 L17,9 L17,7 L7,7 M7,11 L7,13 L17,13 L17,11 L7,11 M7,15 L7,17 L14,17 L14,15 L7,15 Z\\" id=\\"mdi:text-box-outline\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/description-outline.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/devices.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/devices</title>\\n    <g id=\\"icon/material/devices\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M23,11 L18,11 C17.4477153,11 17,11.4477153 17,12 L17,21 C17,21.5522847 17.4477153,22 18,22 L23,22 C23.5522847,22 24,21.5522847 24,21 L24,12 C24,11.4477153 23.5522847,11 23,11 M23,20 L18,20 L18,13 L23,13 L23,20 M20,2 L2,2 C0.89,2 0,2.89 0,4 L0,16 C0,17.1045695 0.8954305,18 2,18 L9,18 L9,20 L7,20 L7,22 L15,22 L15,20 L13,20 L13,18 L15,18 L15,16 L2,16 L2,4 L20,4 L20,9 L22,9 L22,4 C22,2.8954305 21.1045695,2 20,2 Z\\" id=\\"mdi:monitor-cellphone\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/devices.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/edit-outline.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/edit-outline</title>\\n    <g id=\\"icon/material/edit-outline\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M14.06,9 L15,9.94 L5.92,19 L5,19 L5,18.08 L14.06,9 M17.66,3 C17.41,3 17.15,3.1 16.96,3.29 L15.13,5.12 L18.88,8.87 L20.71,7.04 C21.1,6.65 21.1,6 20.71,5.63 L18.37,3.29 C18.17,3.09 17.92,3 17.66,3 M14.06,6.19 L3,17.25 L3,21 L6.75,21 L17.81,9.94 L14.06,6.19 Z\\" id=\\"mdi:pencil-outline\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/edit-outline.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/edit.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/edit</title>\\n    <g id=\\"icon/material/edit\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M20.71,7.04 C21.1,6.65 21.1,6 20.71,5.63 L18.37,3.29 C18,2.9 17.35,2.9 16.96,3.29 L15.12,5.12 L18.87,8.87 M3,17.25 L3,21 L6.75,21 L17.81,9.93 L14.06,6.18 L3,17.25 Z\\" id=\\"mdi:pencil\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/edit.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/email-outline.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/email-outline</title>\\n    <g id=\\"icon/material/email-outline\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M22,6 C22,4.9 21.1,4 20,4 L4,4 C2.9,4 2,4.9 2,6 L2,18 C2,19.1 2.9,20 4,20 L20,20 C21.1,20 22,19.1 22,18 L22,6 M20,6 L12,11 L4,6 L20,6 M20,18 L4,18 L4,8 L12,13 L20,8 L20,18 Z\\" id=\\"mdi:email-outline\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/email-outline.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/file-audio.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/file-audio</title>\\n    <g id=\\"icon/material/file-audio\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M12,3 L12,13.55 C11.41,13.21 10.73,13 10,13 C7.79,13 6,14.79 6,17 C6,19.21 7.79,21 10,21 C12.21,21 14,19.21 14,17 L14,7 L18,7 L18,3 L12,3 Z\\" id=\\"mdi:music-note\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/file-audio.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/file-document.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/file-document</title>\\n    <g id=\\"icon/material/file-document\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M13,9 L18.5,9 L13,3.5 L13,9 M6,2 L14,2 L20,8 L20,20 C20,21.1045695 19.1045695,22 18,22 L6,22 C4.8954305,22 4,21.1045695 4,20 L4,4 C4,2.89 4.89,2 6,2 M15,18 L15,16 L6,16 L6,18 L15,18 M18,14 L18,12 L6,12 L6,14 L18,14 Z\\" id=\\"mdi:file-document\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/file-document.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/file-pdf.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/file-pdf</title>\\n    <g id=\\"icon/material/file-pdf\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M19,3 C20.1045695,3 21,3.8954305 21,5 L21,19 C21,20.1045695 20.1045695,21 19,21 L5,21 C3.89,21 3,20.1 3,19 L3,5 C3,3.89 3.89,3 5,3 L19,3 M10.59,10.08 C10.57,10.13 10.3,11.84 8.5,14.77 C8.5,14.77 5,16.58 5.83,17.94 C6.5,19 8.15,17.9 9.56,15.27 C9.56,15.27 11.38,14.63 13.79,14.45 C13.79,14.45 17.65,16.19 18.17,14.34 C18.69,12.5 15.12,12.9 14.5,13.09 C14.5,13.09 12.46,11.75 12,9.89 C12,9.89 13.13,5.95 11.38,6 C9.63,6.05 10.29,9.12 10.59,10.08 M11.4,11.13 C11.43,11.13 11.87,12.33 13.29,13.58 C13.29,13.58 10.96,14.04 9.9,14.5 C9.9,14.5 10.9,12.75 11.4,11.13 M15.32,13.84 C15.9,13.69 17.64,14 17.58,14.32 C17.5,14.65 15.32,13.84 15.32,13.84 M8.26,15.7 C7.73,16.91 6.83,17.68 6.6,17.67 C6.37,17.66 7.3,16.07 8.26,15.7 M11.4,8.76 C11.39,8.71 11.03,6.57 11.4,6.61 C11.94,6.67 11.4,8.71 11.4,8.76 Z\\" id=\\"mdi:file-pdf-box\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/file-pdf.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/file-presentation.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/file-presentation</title>\\n    <g id=\\"icon/material/file-presentation\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M11,2 L13,2 L13,3 L19,3 C20.1045695,3 21,3.8954305 21,5 L21,16 C21,17.1045695 20.1045695,18 19,18 L13,18 L13,21 L17,21 L17,23 L7,23 L7,21 L11,21 L11,18 L5,18 C3.8954305,18 3,17.1045695 3,16 L3,5 C3,3.8954305 3.8954305,3 5,3 L11,3 L11,2 Z M19,5 L5,5 L5,16 L19,16 L19,5 Z M9,9 L9,14 L7,14 L7,9 L9,9 Z M13,7 L13,14 L11,14 L11,7 L13,7 Z M17,11 L17,14 L15,14 L15,11 L17,11 Z\\" id=\\"xabber:presentation\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/file-presentation.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/file-video.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/file-video</title>\\n    <g id=\\"icon/material/file-video\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M18,9 L16,9 L16,7 L18,7 M18,13 L16,13 L16,11 L18,11 M18,17 L16,17 L16,15 L18,15 M8,9 L6,9 L6,7 L8,7 M8,13 L6,13 L6,11 L8,11 M8,17 L6,17 L6,15 L8,15 M18,3 L18,5 L16,5 L16,3 L8,3 L8,5 L6,5 L6,3 L4,3 L4,21 L6,21 L6,19 L8,19 L8,21 L16,21 L16,19 L18,19 L18,21 L20,21 L20,3 L18,3 Z\\" id=\\"mdi:filmstrip\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/file-video.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/file-zip.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/file-zip</title>\\n    <g id=\\"icon/material/file-zip\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M14,17 L12,17 L12,15 L10,15 L10,13 L12,13 L12,15 L14,15 M14,9 L12,9 L12,11 L14,11 L14,13 L12,13 L12,11 L10,11 L10,9 L12,9 L12,7 L10,7 L10,5 L12,5 L12,7 L14,7 M19,3 L5,3 C3.89,3 3,3.89 3,5 L3,19 C3,20.1045695 3.8954305,21 5,21 L19,21 C20.1045695,21 21,20.1045695 21,19 L21,5 C21,3.89 20.1,3 19,3 Z\\" id=\\"mdi:zip-box\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/file-zip.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/file.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/file</title>\\n    <g id=\\"icon/material/file\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M13,9 L13,3.5 L18.5,9 M6,2 C4.89,2 4,2.89 4,4 L4,20 C4,21.1045695 4.8954305,22 6,22 L18,22 C19.1045695,22 20,21.1045695 20,20 L20,8 L14,2 L6,2 Z\\" id=\\"mdi:file\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/file.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/fullname-outline.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/fullname-outline</title>\\n    <g id=\\"icon/material/fullname-outline\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M8,9 C9.1045695,9 10,9.8954305 10,11 C10,12.1045695 9.1045695,13 8,13 C6.8954305,13 6,12.1045695 6,11 C6,9.8954305 6.8954305,9 8,9 M12,17 L4,17 L4,16 C4,14.67 6.67,14 8,14 C9.33,14 12,14.67 12,16 L12,17 M20,8 L14,8 L14,10 L20,10 L20,8 M20,12 L14,12 L14,14 L20,14 L20,12 M20,16 L14,16 L14,18 L20,18 L20,16 M22,4 L14,4 L14,6 L22,6 L22,20 L2,20 L2,6 L10,6 L10,4 L2,4 C0.8954305,4 0,4.8954305 0,6 L0,20 C0,21.1045695 0.8954305,22 2,22 L22,22 C23.1045695,22 24,21.1045695 24,20 L24,6 C24,4.8954305 23.1045695,4 22,4 M13,6 L11,6 L11,2 L13,2 L13,6 Z\\" id=\\"mdi:badge-account-horizontal-outline\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/fullname-outline.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/fullname.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/fullname</title>\\n    <g id=\\"icon/material/fullname\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M22,4 L14,4 L14,7 L10,7 L10,4 L2,4 C0.8954305,4 0,4.8954305 0,6 L0,20 C0,21.1045695 0.8954305,22 2,22 L22,22 C23.1045695,22 24,21.1045695 24,20 L24,6 C24,4.8954305 23.1045695,4 22,4 M8,9 C9.1045695,9 10,9.8954305 10,11 C10,12.1045695 9.1045695,13 8,13 C6.8954305,13 6,12.1045695 6,11 C6,9.8954305 6.8954305,9 8,9 M12,17 L4,17 L4,16 C4,14.67 6.67,14 8,14 C9.33,14 12,14.67 12,16 L12,17 M20,18 L14,18 L14,16 L20,16 L20,18 M20,14 L14,14 L14,12 L20,12 L20,14 M20,10 L14,10 L14,8 L20,8 L20,10 M13,6 L11,6 L11,2 L13,2 L13,6 Z\\" id=\\"mdi:badge-account-horizontal\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/fullname.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/group-incognito.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"16px\\" height=\\"16px\\" viewBox=\\"0 0 16 16\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>badge/icon/group-incognito</title>\\n    <g id=\\"badge/icon/group-incognito\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"Bounds\\" x=\\"0\\" y=\\"0\\" width=\\"16\\" height=\\"16\\"></rect>\\n        <path d=\\"M10,8.00704958 C10.9597902,8.00704958 12.8474987,8.64533875 12.9912872,9.91524601 L13,10.0706662 L13,11.0070496 L10.7492023,11.0070496 L10.75,9.875 C10.75,9.10242267 10.3751421,8.46914598 9.75414509,8.01828756 L9.88054216,8.01011295 L10,8.00704958 Z M7,8 C8.71428571,8 10,8.75 10,9.875 L10,11 L4,11 L4,9.875 C4,8.75 5.28571429,8 7,8 Z M7,8.75 C5.68529006,8.75 4.83790401,9.22876096 4.75645218,9.78636102 L4.75,9.875 L4.75,10.25 L9.25,10.25 L9.25,9.875 C9.25,9.31020891 8.46834945,8.80320839 7.20365867,8.75392032 L7,8.75 Z M10.5,4 C11.3284271,4 12,4.67157288 12,5.5 C12,6.32842712 11.3284271,7 10.5,7 C10.0309641,7 9.61220865,6.78472342 9.33715065,6.44758714 C9.59948544,6.02690214 9.75,5.53102835 9.75,5 C9.75,4.7455993 9.71545544,4.49926692 9.65080116,4.2654377 C9.89064982,4.09777196 10.183907,4 10.5,4 Z M7,3 C8.1045695,3 9,3.8954305 9,5 C9,6.1045695 8.1045695,7 7,7 C5.8954305,7 5,6.1045695 5,5 C5,3.8954305 5.8954305,3 7,3 Z M7,3.75 C6.30964406,3.75 5.75,4.30964406 5.75,5 C5.75,5.69035594 6.30964406,6.25 7,6.25 C7.69035594,6.25 8.25,5.69035594 8.25,5 C8.25,4.30964406 7.69035594,3.75 7,3.75 Z\\" id=\\"incognito\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/group-incognito.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/group-invite.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"16px\\" height=\\"16px\\" viewBox=\\"0 0 16 16\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>badge/icon/group-invite</title>\\n    <g id=\\"badge/icon/group-invite\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"Bounds\\" x=\\"0\\" y=\\"0\\" width=\\"16\\" height=\\"16\\"></rect>\\n        <path d=\\"M4.8,5 L11.2,5 C11.64,5 12,5.33981818 12,5.76363636 L12,10.2363636 C12,10.6581084 11.6418278,11 11.2,11 L4.8,11 C4.3581722,11 4,10.6581084 4,10.2363636 L4,5.76363636 C4,5.33981818 4.356,5 4.8,5 Z M4.57142857,5.81818182 L4.57142857,6.90909091 L8,9.09090909 L11.4285714,6.90909091 L11.4285714,5.81818182 L8,8 L4.57142857,5.81818182 Z\\" id=\\"invitation\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/group-invite.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/group-private.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"16px\\" height=\\"16px\\" viewBox=\\"0 0 16 16\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>badge/icon/group-private</title>\\n    <g id=\\"badge/icon/group-private\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"Bounds\\" x=\\"0\\" y=\\"0\\" width=\\"16\\" height=\\"16\\"></rect>\\n        <path d=\\"M5.54386908,9.00001406 C4.74833179,9.00015914 4.03626356,9.50273575 3.75677818,10.2613541 C3.4772928,11.0199725 3.68898239,11.8755937 4.28805949,12.4087226 C4.88713659,12.9418515 5.74800895,13.0407214 6.44860686,12.6568582 C7.14920477,12.272995 7.54265288,11.4868729 7.43605089,10.683913 C7.61005089,10.6450242 7.79823271,10.6139132 7.99841453,10.6144687 C8.19859635,10.6155798 8.38677817,10.6450242 8.56077817,10.683913 C8.45417618,11.4868729 8.84762429,12.272995 9.5482222,12.6568582 C10.2488201,13.0407214 11.1096925,12.9418515 11.7087696,12.4087226 C12.3078467,11.8755937 12.5195363,11.0199725 12.2400509,10.2613541 C11.9605655,9.50273575 11.2484973,9.00015914 10.45296,9.00001406 C9.6733377,8.99699984 8.97079939,9.47872777 8.68023271,10.2155808 C8.45968538,10.1448214 8.22964016,10.109582 7.99841453,10.1111366 C7.69841453,10.1111366 7.49059635,10.1616921 7.31659635,10.2155808 C7.02602967,9.47872777 6.32349136,8.99699984 5.54386908,9.00001406 L5.54386908,9.00001406 Z M5.54386908,9.55558244 C6.29698464,9.55558244 6.90750544,10.1774076 6.90750544,10.9444679 C6.90750544,11.7115282 6.29698464,12.3333534 5.54386908,12.3333534 C4.79075351,12.3333534 4.18023271,11.7115282 4.18023271,10.9444679 C4.18023271,10.1774076 4.79075351,9.55558244 5.54386908,9.55558244 Z M10.45296,9.55558244 C11.2060756,9.55558244 11.8165963,10.1774076 11.8165963,10.9444679 C11.8165963,11.7115282 11.2060756,12.3333534 10.45296,12.3333534 C9.69984442,12.3333534 9.08932362,11.7115282 9.08932362,10.9444679 C9.08932362,10.1774076 9.69984442,9.55558244 10.45296,9.55558244 Z M8,7 C6.512,7 4.39345455,7.268 4.25,7.297 C3.78243762,7.41026088 3.32163107,7.54577794 2.86945455,7.703 C2.31418182,7.877 2,8 2,8 L14,8 C14,8 13.6858182,7.877 13.1305455,7.703 C12.6727414,7.54549536 12.2062901,7.40997808 11.7330909,7.297 C11.7330909,7.297 9.54036364,7 8,7 Z M8,3 C6.53163636,3.0015 5.49418182,3.6095 5.49418182,3.6095 L4.72727273,6 L11.2727273,6 L10.5058182,3.6095 C10.5058182,3.6095 9.46836364,3.001 8,3 Z\\" id=\\"private\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/group-private.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/group-public.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"16px\\" height=\\"16px\\" viewBox=\\"0 0 16 16\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>badge/icon/group-public</title>\\n    <g id=\\"badge/icon/group-public\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"Bounds\\" x=\\"0\\" y=\\"0\\" width=\\"16\\" height=\\"16\\"></rect>\\n        <path d=\\"M10.500501,8 C11.3287776,8 11.995,7.328 11.995,6.5 C11.995,5.672 11.3287776,5 10.500501,5 C9.67222445,5 9,5.672 9,6.5 C9,7.328 9.67222445,8 10.500501,8 Z M6.5,7 C7.33,7 7.995,6.33 7.995,5.5 C7.995,4.67 7.33,4 6.5,4 C5.67,4 5,4.67 5,5.5 C5,6.33 5.67,7 6.5,7 Z M10.5,9 C9.66818182,9 8,9.46 8,10.375 L8,10.9989178 L13,10.9989178 L13,10.375 C13,9.46 11.3318182,9 10.5,9 Z M6.50474946,7.99186821 C4.77490105,7.99186821 3,8.585 3,9.75 L3,11 L7,11 L7,10 C7,9.24841871 7.73828683,8.72461975 8.70884076,8.35916117 C8.08932051,8.04219075 6.85693708,7.99186821 6.50474946,7.99186821 Z\\" id=\\"xabber:group-public\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/group-public.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/history.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/history</title>\\n    <g id=\\"icon/material/history\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M13.5,8 L12,8 L12,13 L16.28,15.54 L17,14.33 L13.5,12.25 L13.5,8 M13,3 C8.02943725,3 4,7.02943725 4,12 L1,12 L4.96,16.03 L9,12 L6,12 C6,8.13400675 9.13400675,5 13,5 C16.8659932,5 20,8.13400675 20,12 C20,15.8659932 16.8659932,19 13,19 C11.07,19 9.32,18.21 8.06,16.94 L6.64,18.36 C8.31963558,20.0581063 10.6115589,21.0094707 13,21.00007 C17.9705627,21.00007 22,16.9705627 22,12 C22,7.02943725 17.9705627,3 13,3\\" id=\\"mdi:history\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/history.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/ic-at.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<path fill=\\"#9E9E9E\\" d=\\"M12,15C12.81,15 13.5,14.7 14.11,14.11C14.7,13.5 15,12.81 15,12C15,11.19 14.7,10.5 14.11,9.89C13.5,9.3 12.81,9 12,9C11.19,9 10.5,9.3 9.89,9.89C9.3,10.5 9,11.19 9,12C9,12.81 9.3,13.5 9.89,14.11C10.5,14.7 11.19,15 12,15M12,2C14.75,2 17.1,3 19.05,4.95C21,6.9 22,9.25 22,12V13.45C22,14.45 21.65,15.3 21,16C20.3,16.67 19.5,17 18.5,17C17.3,17 16.31,16.5 15.56,15.5C14.56,16.5 13.38,17 12,17C10.63,17 9.45,16.5 8.46,15.54C7.5,14.55 7,13.38 7,12C7,10.63 7.5,9.45 8.46,8.46C9.45,7.5 10.63,7 12,7C13.38,7 14.55,7.5 15.54,8.46C16.5,9.45 17,10.63 17,12V13.45C17,13.86 17.16,14.22 17.46,14.53C17.76,14.84 18.11,15 18.5,15C18.92,15 19.27,14.84 19.57,14.53C19.87,14.22 20,13.86 20,13.45V12C20,9.81 19.23,7.93 17.65,6.35C16.07,4.77 14.19,4 12,4C9.81,4 7.93,4.77 6.35,6.35C4.77,7.93 4,9.81 4,12C4,14.19 4.77,16.07 6.35,17.65C7.93,19.23 9.81,20 12,20H17V22H12C9.25,22 6.9,21 4.95,19.05C3,17.1 2,14.75 2,12C2,9.25 3,6.9 4.95,4.95C6.9,3 9.25,2 12,2Z\\" />");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/ic-at.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/ic-jabber.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<path\\n     style=\\"fill-rule:evenodd\\"\\n     inkscape:connector-curvature=\\"0\\"\\n     id=\\"path5\\"\\n     d=\\"m 5.2462478,6.4309194 c 0,0 0.2534497,0.5323027 1.6195791,-0.2126538 C 9.2126105,5.0708821 11.67437,4.0095 14.785441,5.5382202 17.009904,6.7924 17.27733,10.360371 13.864368,13.369134 c -1.679464,1.609494 -1.887868,4.226006 -1.825254,4.993295 -0.128246,1.561168 0.259655,1.837265 0.594912,1.938246 0.335257,0.100981 1.461445,-0.04379 1.305934,-1.000087 -0.193265,-1.461227 -0.06192,-2.413209 0.855267,-4.044829 0.758763,-1.162942 2.123721,-1.871086 3.273016,-4.211889 C 18.840748,9.1444158 18.891207,6.503336 17.479328,4.894053 16.152845,3.3821059 14.670099,2.4131656 12.422552,2.4210559 9.8716741,2.446853 8.13424,2.8374168 6.751418,3.5206351 4.5012489,4.730324 4.2973099,4.8714754 5.2462478,6.4309194 z\\"\\n     clip-rule=\\"evenodd\\"\\n     sodipodi:nodetypes=\\"cccccscccsccc\\" />\\n<path\\n     style=\\"fill-rule:evenodd\\"\\n     inkscape:connector-curvature=\\"0\\"\\n     id=\\"path7\\"\\n     d=\\"M 10.393116,10.546893 C 10.179036,9.8582024 9.6418168,9.5037588 9.1268128,9.5037588 c -0.686671,0 -1.6386388,0.1373222 -1.6546508,1.5832442 0,0 0.5308711,2.944458 1.5235151,2.93234 0.364542,-0.004 0.7403587,-0.28287 0.017892,-1.856769 0,0 -0.4395592,-0.974022 -0.1380497,-1.193301 0.5440269,-0.394487 0.5911749,0.418754 0.9156116,1.069105 0.674692,0.328471 1.06244,-0.702948 1.201092,-0.722298 1.026124,-0.142524 -0.130551,1.372622 -0.2386,1.539241 -0.467844,0.515308 -1.3020963,1.251877 -0.614252,1.612091 0.864686,0.205725 1.292561,-0.492065 1.464229,-0.658684 0.2663,-0.37565 0.549622,-0.820112 0.721289,-1.133153 0.877971,-1.468145 0.834305,-2.8722146 -0.558429,-2.9011876 -0.515004,0 -0.814918,0.2302366 -1.373344,0.7725056 z\\"\\n     clip-rule=\\"evenodd\\"\\n     sodipodi:nodetypes=\\"cscccccccccccc\\" />\\n<path\\n     sodipodi:nodetypes=\\"cssccsccccssccssc\\"\\n     style=\\"fill-rule:evenodd\\"\\n     inkscape:connector-curvature=\\"0\\"\\n     id=\\"path9\\"\\n     d=\\"m 6.8360046,14.735541 c -0.2526865,-0.134842 -0.341246,-0.148685 -0.556785,-0.125105 -0.4758127,0.05205 -0.712045,0.475393 -0.6165306,0.901178 0.2727696,1.215955 1.0359093,1.641989 2.25985,2.132257 1.2530682,0.41756 2.475738,0.396638 3.398493,-0.0757 0.298412,-0.05064 0.287556,-0.683612 0.292618,-1.034981 0.006,-0.414484 -0.327129,-0.528727 -0.651454,-0.493243 -0.82369,0.222079 -0.891361,0.338578 -1.882259,0.248554 -1.1996954,-0.369888 -1.6284239,-0.589257 -2.2439324,-1.55296 z m -0.596727,2.884244 c -0.1641271,-0.121 -0.2921232,-0.08347 -0.442594,-0.06701 -0.3893935,0.0426 -0.727761,0.382603 -0.6463412,0.81143 0.2795655,1.472433 3.2776659,2.179707 4.6014193,2.113323 1.0831623,-0.05044 1.6865703,-0.273231 1.7646093,-1.16247 -0.03364,-0.366114 -0.266964,-0.659232 -0.720411,-0.609623 -0.432095,0.04727 -0.373883,0.118182 -1.0438868,0.191485 C 8.563559,19.026954 7.5842504,18.723225 6.2392776,17.619785 z\\"\\n     clip-rule=\\"evenodd\\" />\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/ic-jabber.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/ic-searching.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<path fill=\\"#9E9E9E\\" d=\\"M15.5,12C18,12 20,14 20,16.5C20,17.38 19.75,18.21 19.31,18.9L22.39,22L21,23.39L17.88,20.32C17.19,20.75 16.37,21 15.5,21C13,21 11,19 11,16.5C11,14 13,12 15.5,12M15.5,14A2.5,2.5 0 0,0 13,16.5A2.5,2.5 0 0,0 15.5,19A2.5,2.5 0 0,0 18,16.5A2.5,2.5 0 0,0 15.5,14M19.35,8.03C21.95,8.22 24,10.36 24,13C24,14.64 23.21,16.1 22,17V16.5A6.5,6.5 0 0,0 15.5,10A6.5,6.5 0 0,0 9,16.5C9,17 9.06,17.5 9.17,18H6A6,6 0 0,1 0,12C0,8.9 2.34,6.36 5.35,6.03C6.6,3.64 9.11,2 12,2C15.64,2 18.67,4.59 19.35,8.03Z\\" />");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/ic-searching.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/id-outline.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/id-outline</title>\\n    <g id=\\"icon/material/id-outline\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M12,2 C15.8659932,2 19,5.13400675 19,9 C19,11.38 17.81,13.47 16,14.74 L16,17 C16,17.5522847 15.5522847,18 15,18 L9,18 C8.44771525,18 8,17.5522847 8,17 L8,14.74 C6.19,13.47 5,11.38 5,9 C5,5.13400675 8.13400675,2 12,2 M9,21 L9,20 L15,20 L15,21 C15,21.5522847 14.5522847,22 14,22 L10,22 C9.44771525,22 9,21.5522847 9,21 M12,4 C9.23857625,4 7,6.23857625 7,9 C7,11.05 8.23,12.81 10,13.58 L10,16 L14,16 L14,13.58 C15.77,12.81 17,11.05 17,9 C17,6.23857625 14.7614237,4 12,4 L12,4 Z\\" id=\\"mdi:lightbulb-outline\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/id-outline.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/image.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/image</title>\\n    <g id=\\"icon/material/image\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M8.5,13.5 L11,16.5 L14.5,12 L19,18 L5,18 M21,19 L21,5 C21,3.89 20.1,3 19,3 L5,3 C3.8954305,3 3,3.8954305 3,5 L3,19 C3,20.1045695 3.8954305,21 5,21 L19,21 C20.1045695,21 21,20.1045695 21,19 Z\\" id=\\"mdi:image\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/image.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/index.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/index</title>\\n    <g id=\\"icon/material/index\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M12,2 C7.581722,2 4,5.581722 4,10 C4,14.03 7,17.42 11,17.93 L11,19 L10,19 C9.44771525,19 9,19.4477153 9,20 L2,20 L2,22 L9,22 C9,22.5522847 9.44771525,23 10,23 L14,23 C14.5522847,23 15,22.5522847 15,22 L22,22 L22,20 L15,20 C15,19.4477153 14.5522847,19 14,19 L13,19 L13,17.93 C17,17.43 20,14.03 20,10 C20,5.581722 16.418278,2 12,2 M12,4 C12,4 12.74,5.28 13.26,7 L10.74,7 C11.26,5.28 12,4 12,4 M9.77,4.43 C9.5,4.93 9.09,5.84 8.74,7 L6.81,7 C7.5,5.84 8.5,4.93 9.77,4.43 M14.23,4.44 C15.5,4.94 16.5,5.84 17.19,7 L15.26,7 C14.91,5.84 14.5,4.93 14.23,4.44 M6.09,9 L8.32,9 C8.28,9.33 8.25,9.66 8.25,10 C8.25,10.34 8.28,10.67 8.32,11 L6.09,11 C5.96891098,10.3388318 5.96891098,9.66116821 6.09,9 M10.32,9 L13.68,9 C13.72,9.33 13.75,9.66 13.75,10 C13.75,10.34 13.72,10.67 13.68,11 L10.32,11 C10.28,10.67 10.25,10.34 10.25,10 C10.25,9.66 10.28,9.33 10.32,9 M15.68,9 L17.91,9 C18.031089,9.66116821 18.031089,10.3388318 17.91,11 L15.68,11 C15.72,10.67 15.75,10.34 15.75,10 C15.75,9.66 15.72,9.33 15.68,9 M6.81,13 L8.74,13 C9.09,14.16 9.5,15.07 9.77,15.56 C8.5,15.06 7.5,14.16 6.81,13 M10.74,13 L13.26,13 C12.74,14.72 12,16 12,16 C12,16 11.26,14.72 10.74,13 M15.26,13 L17.19,13 C16.5,14.16 15.5,15.07 14.23,15.57 C14.5,15.07 14.91,14.16 15.26,13 Z\\" id=\\"mdi:wan\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/index.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/information-outline.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/information-outline</title>\\n    <g id=\\"icon/material/information-outline\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M11,9 L13,9 L13,7 L11,7 M12,20 C7.59,20 4,16.41 4,12 C4,7.59 7.59,4 12,4 C16.41,4 20,7.59 20,12 C20,16.41 16.41,20 12,20 M12,2 C6.4771525,2 2,6.4771525 2,12 C2,14.6521649 3.0535684,17.195704 4.92893219,19.0710678 C6.80429597,20.9464316 9.3478351,22 12,22 C17.5228475,22 22,17.5228475 22,12 C22,6.4771525 17.5228475,2 12,2 M11,17 L13,17 L13,11 L11,11 L11,17 Z\\" id=\\"mdi:information-outline\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/information-outline.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/invite-outline.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/invite-outline</title>\\n    <g id=\\"icon/material/invite-outline\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M12,2 L15.77,4.36 L19,4.36 L19,6.36 L21.03,7.65 C21.5653846,7.97307692 21.9388757,8.53473373 21.993168,9.19339554 L22,9.36 L22,19.36 C22,20.4195455 21.1890702,21.2786364 20.1499371,21.3545464 L20,21.36 L4,21.36 C2.9456382,21.36 2.08183488,20.5441222 2.00548574,19.5092623 L2,19.36 L2,9.36 C2,8.68615385 2.33230769,8.09751479 2.83961766,7.73565772 L5,6.36 L5,4.36 L8.23,4.36 L12,2 Z M20,11.36 L12,16.36 L4,11.36 L4,19.36 L20,19.36 L20,11.36 Z M17,6.36 L7,6.36 L7,11.24 L12,14.36 L17,11.24 L17,6.36 Z M16,9.86 L16,11.36 L8,11.36 L8,9.86 L16,9.86 Z M19,8.74 L19,9.99 L20,9.36 L19,8.74 Z M5,8.74 L4,9.36 L5,9.99 L5,8.74 Z M16,7.36 L16,8.86 L8,8.86 L8,7.36 L16,7.36 Z\\" id=\\"xabber:invite-outline\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/invite-outline.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/job-outline.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/job-outline</title>\\n    <g id=\\"icon/material/job-outline\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M20,6 C20.58,6 21.05,6.2 21.42,6.59 C21.8,7 22,7.45 22,8 L22,19 C22,19.55 21.8,20 21.42,20.41 C21.05,20.8 20.58,21 20,21 L4,21 C3.42,21 2.95,20.8 2.58,20.41 C2.2,20 2,19.55 2,19 L2,8 C2,7.45 2.2,7 2.58,6.59 C2.95,6.2 3.42,6 4,6 L8,6 L8,4 C8,3.42 8.2,2.95 8.58,2.58 C8.95,2.2 9.42,2 10,2 L14,2 C14.58,2 15.05,2.2 15.42,2.58 C15.8,2.95 16,3.42 16,4 L16,6 L20,6 M4,8 L4,19 L20,19 L20,8 L4,8 M14,6 L14,4 L10,4 L10,6 L14,6 Z\\" id=\\"mdi:briefcase-outline\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/job-outline.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/link.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/link</title>\\n    <g id=\\"icon/material/link\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M3.9,12 C3.9,10.29 5.29,8.9 7,8.9 L11,8.9 L11,7 L7,7 C4.23857625,7 2,9.23857625 2,12 C2,14.7614237 4.23857625,17 7,17 L11,17 L11,15.1 L7,15.1 C5.29,15.1 3.9,13.71 3.9,12 M8,13 L16,13 L16,11 L8,11 L8,13 M17,7 L13,7 L13,8.9 L17,8.9 C18.71,8.9 20.1,10.29 20.1,12 C20.1,13.71 18.71,15.1 17,15.1 L13,15.1 L13,17 L17,17 C19.7614237,17 22,14.7614237 22,12 C22,9.23857625 19.7614237,7 17,7 Z\\" id=\\"mdi:link\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/link.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/map-marker-outline.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/map-marker-outline</title>\\n    <g id=\\"icon/material/map-marker-outline\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M12,6.5 C13.3807119,6.5 14.5,7.61928813 14.5,9 C14.5,9.66304122 14.2366079,10.298926 13.767767,10.767767 C13.298926,11.2366079 12.6630412,11.5 12,11.5 C10.6192881,11.5 9.5,10.3807119 9.5,9 C9.5,8.33695878 9.7633921,7.70107399 10.232233,7.23223305 C10.701074,6.7633921 11.3369588,6.5 12,6.5 M12,2 C15.8659932,2 19,5.13400675 19,9 C19,14.25 12,22 12,22 C12,22 5,14.25 5,9 C5,5.13400675 8.13400675,2 12,2 M12,4 C9.23857625,4 7,6.23857625 7,9 C7,10 7,12 12,18.71 C17,12 17,10 17,9 C17,6.23857625 14.7614237,4 12,4 L12,4 Z\\" id=\\"mdi:map-marker-outline\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/map-marker-outline.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/map-marker.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/map-marker</title>\\n    <g id=\\"icon/material/map-marker\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M12,11.5 C10.6192881,11.5 9.5,10.3807119 9.5,9 C9.5,8.33695878 9.7633921,7.70107399 10.232233,7.23223305 C10.701074,6.7633921 11.3369588,6.5 12,6.5 C13.3807119,6.5 14.5,7.61928813 14.5,9 C14.5,9.66304122 14.2366079,10.298926 13.767767,10.767767 C13.298926,11.2366079 12.6630412,11.5 12,11.5 M12,2 C8.13400675,2 5,5.13400675 5,9 C5,14.25 12,22 12,22 C12,22 19,14.25 19,9 C19,5.13400675 15.8659932,2 12,2 Z\\" id=\\"mdi:map-marker\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/map-marker.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/membership-outline.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/membership-outline</title>\\n    <g id=\\"icon/material/membership-outline\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M12,2 C6.4771525,2 2,6.4771525 2,12 C2,14.6521649 3.0535684,17.195704 4.92893219,19.0710678 C6.80429597,20.9464316 9.3478351,22 12,22 C17.5228475,22 22,17.5228475 22,12 C22,6.4771525 17.5228475,2 12,2 M7.07,18.28 C7.5,17.38 10.12,16.5 12,16.5 C13.88,16.5 16.5,17.38 16.93,18.28 C15.5293835,19.3960251 13.7908746,20.0025637 12,20 C10.14,20 8.43,19.36 7.07,18.28 M18.36,16.83 C16.93,15.09 13.46,14.5 11.9999999,14.5 C10.54,14.5 7.07,15.09 5.64,16.83 C4.57618516,15.4446232 3.99966563,13.7467029 3.99999985,12 C3.99999985,7.59 7.59,4 11.9999999,4 C16.41,4 19.9999999,7.59 19.9999999,12 C19.9999999,13.82 19.38,15.5 18.36,16.83 M12,6 C10.06,6 8.5,7.56 8.5,9.5 C8.5,11.44 10.06,13 12,13 C13.94,13 15.5,11.44 15.5,9.5 C15.5,7.56 13.94,6 12,6 M12,11 C11.1715729,11 10.5,10.3284271 10.5,9.5 C10.5,8.67157288 11.1715729,8 12,8 C12.8284271,8 13.5,8.67157288 13.5,9.5 C13.5,10.3284271 12.8284271,11 12,11 Z\\" id=\\"mdi:account-circle-outline\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/membership-outline.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/message-bookmark-outline.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/message-bookmark-outline</title>\\n    <g id=\\"icon/material/message-bookmark-outline\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M20,2 L4,2 C2.9,2 2,2.9 2,4 L2,22 L6,18 L20,18 C21.1,18 22,17.1 22,16 L22,4 C22,2.9 21.1,2 20,2 M20,16 L5.2,16 L4,17.2 L4,4 L20,4 L20,16 M18,14 L18,6 L13,6 L13,14 L15.5,12.5 L18,14\\" id=\\"mdi:message-bookmark-outline\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/message-bookmark-outline.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/message-group.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<g id=\\"Page-1\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n    <g id=\\"message-group-variant2\\" fill=\\"#000000\\">\\n        <path d=\\"M14.2526206,6 L21.4947588,6 C22.3260806,6 23,6.6752491 23,7.49824524 L23,24 L19,20 L8.50524116,20 C7.67391942,20 7,19.3247509 7,18.5017548 L7,17 L17.0005775,17 C18.6556493,17 20,15.6542582 20,13.9942017 L20,6 L14.2526206,6 Z\\" id=\\"Message2\\"></path>\\n        <path d=\\"M1,2.49824524 C1,1.67078724 1.66642015,1 2.50863659,1 L16.4913634,1 C17.3245604,1 18,1.6752491 18,2.49824524 L18,13.5017548 C18,14.3292128 17.3335799,15 16.4913634,15 L5,15 L1,19 L1,2.49824524 Z M4,10 L4,12 L12,12 L12,10 L4,10 Z M4,7 L4,9 L15,9 L15,7 L4,7 Z M4,4 L4,6 L15,6 L15,4 L4,4 Z\\" id=\\"Combined-Shape\\"></path>\\n    </g>\\n</g>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/message-group.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/minus.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/minus</title>\\n    <g id=\\"icon/material/minus\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <polygon id=\\"mdi:minus\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\" points=\\"19 13 5 13 5 11 19 11\\"></polygon>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/minus.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/mobile.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"16px\\" height=\\"16px\\" viewBox=\\"0 0 16 16\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>badge/icon/mobile</title>\\n    <g id=\\"badge/icon/mobile\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"Bounds\\" x=\\"0\\" y=\\"0\\" width=\\"16\\" height=\\"16\\"></rect>\\n        <path d=\\"M10,1 C11.1045695,1 12,1.8954305 12,3 L12,12 C12,13.1045695 11.1045695,14 10,14 L6,14 C4.8954305,14 4,13.1045695 4,12 L4,3 C4,1.8954305 4.8954305,1 6,1 L10,1 Z M10,4 L6,4 L6,10 L10,10 L10,4 Z\\" id=\\"Mobile\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/mobile.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/palette.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/palette</title>\\n    <g id=\\"icon/material/palette\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M17.5,12 C16.6715729,12 16,11.3284271 16,10.5 C16,9.67157288 16.6715729,9 17.5,9 C18.3284271,9 19,9.67157288 19,10.5 C19,11.3284271 18.3284271,12 17.5,12 M14.5,8 C13.6715729,8 13,7.32842712 13,6.5 C13,5.67157288 13.6715729,5 14.5,5 C15.3284271,5 16,5.67157288 16,6.5 C16,7.32842712 15.3284271,8 14.5,8 M9.5,8 C8.67157288,8 8,7.32842712 8,6.5 C8,5.67157288 8.67157288,5 9.5,5 C10.3284271,5 11,5.67157288 11,6.5 C11,7.32842712 10.3284271,8 9.5,8 M6.5,12 C5.67157288,12 5,11.3284271 5,10.5 C5,9.67157288 5.67157288,9 6.5,9 C7.32842712,9 8,9.67157288 8,10.5 C8,11.3284271 7.32842712,12 6.5,12 M12,3 C7.02943725,3 3,7.02943725 3,12 C3,16.9705627 7.02943725,21 12,21 C12.8284271,21 13.5,20.3284271 13.5,19.5 C13.5,19.11 13.35,18.76 13.11,18.5 C12.88,18.23 12.73,17.88 12.73,17.5 C12.73,16.6715729 13.4015729,16 14.23,16 L16,16 C18.7614237,16 21,13.7614237 21,11 C21,6.58 16.97,3 12,3 L12,3 Z\\" id=\\"mdi:palette\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/palette.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/pause.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/pause</title>\\n    <g id=\\"icon/material/pause\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M14,19 L18,19 L18,5 L14,5 M6,19 L10,19 L10,5 L6,5 L6,19 Z\\" id=\\"mdi:pause\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/pause.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/picture-in-picture-bottom-right.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/picture-in-picture-bottom-right</title>\\n    <g id=\\"icon/material/picture-in-picture-bottom-right\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M19,11 L11,11 L11,17 L19,17 L19,11 M23,19 L23,5 C23,3.88 22.1,3 21,3 L3,3 C1.8954305,3 1,3.8954305 1,5 L1,19 C1,20.1045695 1.8954305,21 3,21 L21,21 C22.1045695,21 23,20.1045695 23,19 M21,19 L3,19 L3,4.97 L21,4.97 L21,19 Z\\" id=\\"mdi:picture-in-picture-bottom-right\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/picture-in-picture-bottom-right.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/picture-in-picture-minimize.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/picture-in-picture-minimize</title>\\n    <g id=\\"icon/material/picture-in-picture-minimize\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M21,3 C22.1,3 23,3.88 23,5 L23.0008195,11.8103588 C22.4253055,11.2578757 21.7483079,10.8103075 21.000576,10.4984036 L21,4.97 L3,4.97 L3,19 L12.4984036,19.000576 C12.8103075,19.7483079 13.2578757,20.4253055 13.8103588,21.0008195 L3,21 C1.8954305,21 1,20.1045695 1,19 L1,5 C1,3.8954305 1.8954305,3 3,3 L21,3 Z M21,13 L21,14.5 L17.5,14.5 L22,19 L21,20 L16.5,15.5 L16.5,19 L15,19 L15,13 L21,13 Z M13,7 L13,13 L5,13 L5,7 L13,7 Z\\" id=\\"xabber:picture-in-picture-minimize\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/picture-in-picture-minimize.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/picture-in-picture-top-right.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/picture-in-picture-top-right</title>\\n    <g id=\\"icon/material/picture-in-picture-top-right\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M19,7 L11,7 L11,13 L19,13 L19,7 M21,3 L3,3 C1.8954305,3 1,3.8954305 1,5 L1,19 C1,20.1045695 1.8954305,21 3,21 L21,21 C22.1045695,21 23,20.1045695 23,19 L23,5 C23,3.8954305 22.1045695,3 21,3 M21,19 L3,19 L3,5 L21,5 L21,19 Z\\" id=\\"mdi:picture-in-picture-top-right\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/picture-in-picture-top-right.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/pinned-circle-small.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/pinned-circle-small</title>\\n    <g id=\\"icon/material/pinned-circle-small\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M12,3 C16.9705627,3 21,7.02943725 21,12 C21,16.9705627 16.9705627,21 12,21 C7.02943725,21 3,16.9705627 3,12 C3,7.02943725 7.02943725,3 12,3 Z M12,4 C7.581722,4 4,7.581722 4,12 C4,16.418278 7.581722,20 12,20 C16.418278,20 20,16.418278 20,12 C20,7.581722 16.418278,4 12,4 Z M14,6.5 L17.5,9.5 L16.5,10.5 L16,10 L14.25,13.25 L15.25,14.75 L14,16 L11.5,13.5 L8.75,16.25 L7.75,16.25 L7.75,15.25 L10.5,12.5 L8,10 L9.25,8.75 L10.75,9.75 L13.5,8 L13,7.5 L14,6.5 Z\\" id=\\"xabber:pinned-small\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/pinned-circle-small.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/pinned.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/pinned</title>\\n    <g id=\\"icon/material/pinned\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M12,2 C17.5228475,2 22,6.4771525 22,12 C22,17.5228475 17.5228475,22 12,22 C6.4771525,22 2,17.5228475 2,12 C2,6.4771525 6.4771525,2 12,2 Z M12,3 C7.02943725,3 3,7.02943725 3,12 C3,16.9705627 7.02943725,21 12,21 C16.9705627,21 21,16.9705627 21,12 C21,7.02943725 16.9705627,3 12,3 Z M14.5,6 L18,9.5 L17,10.5 L16.5,10 L14.5,13 L15.5,14.5 L14,16 L11.5,13.5 L8.5,16.5 L7.5,16.5 L7.5,15.5 L10.5,12.5 L8,10 L9.5,8.5 L11,9.5 L14,7.5 L13.5,7 L14.5,6 Z\\" id=\\"xabber:pinned\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/pinned.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/play.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"100%\\" height=\\"100%\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/play</title>\\n    <g id=\\"icon/material/play\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <polygon id=\\"mdi:play\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\" points=\\"8 5 8 19 19 12\\"></polygon>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/play.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/player-float.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"100%\\" height=\\"100%\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/player-float</title>\\n    <g id=\\"icon/material/player-float\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M13,3 L13,5 L3,5 L3,19 L20,19 L20,11 L22,11 L22,19 C22,20.1045695 21.1045695,21 20,21 L3,21 C1.8954305,21 1,20.1045695 1,19 L1,5 C1,3.8954305 1.8954305,3 3,3 L13,3 Z M13,9 L13,15 L11.5,15 L11.5,11.5 L6.5,16.5 L5.5,15.5 L10.5,10.5 L7,10.5 L7,9 L13,9 Z M22,2 C23.1045695,2 24,2.8954305 24,4 L24,7 C24,8.1045695 23.1045695,9 22,9 L17,9 C15.8954305,9 15,8.1045695 15,7 L15,4 C15,2.8954305 15.8954305,2 17,2 L22,2 Z\\" id=\\"xabber:player-float\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/player-float.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/player-full.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/player-full</title>\\n    <g id=\\"icon/material/player-full\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M14.8101336,2.99941507 C14.2575941,3.5750451 13.8100058,4.25218587 13.4981326,5.00007375 L3,5 L3,19 L20,19 L20.000332,13.9810299 C20.7043777,13.9274362 21.3770687,13.7616821 22.000576,13.5015964 L22,19 C22,20.1045695 21.1045695,21 20,21 L3,21 C1.8954305,21 1,20.1045695 1,19 L1,5 C1,3.8954305 1.8954305,3 3,3 L14.8101336,2.99941507 Z M12,10 C13.1045695,10 14,10.8954305 14,12 L14,15 C14,16.1045695 13.1045695,17 12,17 L7,17 C5.8954305,17 5,16.1045695 5,15 L5,12 C5,10.8954305 5.8954305,10 7,10 L12,10 Z M22,4 L23,5 L18.5,9.5 L22,9.5 L22,11 L16,11 L16,5 L17.5,5 L17.5,8.5 L22,4 Z\\" id=\\"xabber:picture-in-picture-full\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/player-full.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/player-mini-variant.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/player-mini-variant</title>\\n    <g id=\\"icon/material/player-mini-variant\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M19.5,4.5 C19.5,5.32842712 18.8284271,6 18,6 L6,6 C5.17157288,6 4.5,5.32842712 4.5,4.5 C4.5,3.67157288 5.17157288,3 6,3 L18,3 C18.8284271,3 19.5,3.67157288 19.5,4.5 Z\\" id=\\"xabber:player-mini-variant\\" fill=\\"#000000\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/player-mini-variant.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/player-mini.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/player-mini</title>\\n    <g id=\\"icon/material/player-mini\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M17,8 L17,9.5 L13.5,9.5 L18,14 L17,15 L12.5,10.5 L12.5,14 L11,14 L11,8 L17,8 Z M19.5,4.5 C19.5,5.32842712 18.8284271,6 18,6 L6,6 C5.17157288,6 4.5,5.32842712 4.5,4.5 C4.5,3.67157288 5.17157288,3 6,3 L18,3 C18.8284271,3 19.5,3.67157288 19.5,4.5 Z\\" id=\\"xabber:player-mini\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/player-mini.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/plus.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"100%\\" height=\\"100%\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/plus</title>\\n    <g id=\\"icon/material/plus\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <polygon id=\\"mdi:plus\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\" points=\\"19 12.998 13 12.998 13 18.998 11 18.998 11 12.998 5 12.998 5 10.998 11 10.998 11 4.998 13 4.998 13 10.998 19 10.998\\"></polygon>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/plus.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/plyr.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <symbol id=\\"plyr-airplay\\" viewBox=\\"0 0 18 18\\"><path d=\\"M16 1H2a1 1 0 00-1 1v10a1 1 0 001 1h3v-2H3V3h12v8h-2v2h3a1 1 0 001-1V2a1 1 0 00-1-1z\\"></path><path d=\\"M4 17h10l-5-6z\\"></path></symbol>\\n    <symbol id=\\"plyr-captions-off\\" viewBox=\\"0 0 18 18\\"><path d=\\"M1 1c-.6 0-1 .4-1 1v11c0 .6.4 1 1 1h4.6l2.7 2.7c.2.2.4.3.7.3.3 0 .5-.1.7-.3l2.7-2.7H17c.6 0 1-.4 1-1V2c0-.6-.4-1-1-1H1zm4.52 10.15c1.99 0 3.01-1.32 3.28-2.41l-1.29-.39c-.19.66-.78 1.45-1.99 1.45-1.14 0-2.2-.83-2.2-2.34 0-1.61 1.12-2.37 2.18-2.37 1.23 0 1.78.75 1.95 1.43l1.3-.41C8.47 4.96 7.46 3.76 5.5 3.76c-1.9 0-3.61 1.44-3.61 3.7 0 2.26 1.65 3.69 3.63 3.69zm7.57 0c1.99 0 3.01-1.32 3.28-2.41l-1.29-.39c-.19.66-.78 1.45-1.99 1.45-1.14 0-2.2-.83-2.2-2.34 0-1.61 1.12-2.37 2.18-2.37 1.23 0 1.78.75 1.95 1.43l1.3-.41c-.28-1.15-1.29-2.35-3.25-2.35-1.9 0-3.61 1.44-3.61 3.7 0 2.26 1.65 3.69 3.63 3.69z\\" fill-rule=\\"evenodd\\" fill-opacity=\\".5\\"></path></symbol>\\n    <symbol id=\\"plyr-captions-on\\" viewBox=\\"0 0 18 18\\"><path d=\\"M1 1c-.6 0-1 .4-1 1v11c0 .6.4 1 1 1h4.6l2.7 2.7c.2.2.4.3.7.3.3 0 .5-.1.7-.3l2.7-2.7H17c.6 0 1-.4 1-1V2c0-.6-.4-1-1-1H1zm4.52 10.15c1.99 0 3.01-1.32 3.28-2.41l-1.29-.39c-.19.66-.78 1.45-1.99 1.45-1.14 0-2.2-.83-2.2-2.34 0-1.61 1.12-2.37 2.18-2.37 1.23 0 1.78.75 1.95 1.43l1.3-.41C8.47 4.96 7.46 3.76 5.5 3.76c-1.9 0-3.61 1.44-3.61 3.7 0 2.26 1.65 3.69 3.63 3.69zm7.57 0c1.99 0 3.01-1.32 3.28-2.41l-1.29-.39c-.19.66-.78 1.45-1.99 1.45-1.14 0-2.2-.83-2.2-2.34 0-1.61 1.12-2.37 2.18-2.37 1.23 0 1.78.75 1.95 1.43l1.3-.41c-.28-1.15-1.29-2.35-3.25-2.35-1.9 0-3.61 1.44-3.61 3.7 0 2.26 1.65 3.69 3.63 3.69z\\" fill-rule=\\"evenodd\\"></path></symbol>\\n    <symbol id=\\"plyr-download\\" viewBox=\\"0 0 18 18\\"><path d=\\"M9 13c.3 0 .5-.1.7-.3L15.4 7 14 5.6l-4 4V1H8v8.6l-4-4L2.6 7l5.7 5.7c.2.2.4.3.7.3zm-7 2h14v2H2z\\"></path></symbol><symbol id=\\"plyr-enter-fullscreen\\" viewBox=\\"0 0 18 18\\"><path d=\\"M10 3h3.6l-4 4L11 8.4l4-4V8h2V1h-7zM7 9.6l-4 4V10H1v7h7v-2H4.4l4-4z\\"></path></symbol>\\n    <symbol id=\\"plyr-exit-fullscreen\\" viewBox=\\"0 0 18 18\\"><path d=\\"M1 12h3.6l-4 4L2 17.4l4-4V17h2v-7H1zM16 .6l-4 4V1h-2v7h7V6h-3.6l4-4z\\"></path></symbol>\\n    <symbol id=\\"plyr-fast-forward\\" viewBox=\\"0 0 18 18\\"><path d=\\"M7.875 7.171L0 1v16l7.875-6.171V17L18 9 7.875 1z\\"></path></symbol>\\n    <symbol id=\\"plyr-logo-vimeo\\" viewBox=\\"0 0 18 18\\"><path d=\\"M17 5.3c-.1 1.6-1.2 3.7-3.3 6.4-2.2 2.8-4 4.2-5.5 4.2-.9 0-1.7-.9-2.4-2.6C5 10.9 4.4 6 3 6c-.1 0-.5.3-1.2.8l-.8-1c.8-.7 3.5-3.4 4.7-3.5 1.2-.1 2 .7 2.3 2.5.3 2 .8 6.1 1.8 6.1.9 0 2.5-3.4 2.6-4 .1-.9-.3-1.9-2.3-1.1.8-2.6 2.3-3.8 4.5-3.8 1.7.1 2.5 1.2 2.4 3.3z\\"></path></symbol>\\n    <symbol id=\\"plyr-logo-youtube\\" viewBox=\\"0 0 18 18\\"><path d=\\"M16.8 5.8c-.2-1.3-.8-2.2-2.2-2.4C12.4 3 9 3 9 3s-3.4 0-5.6.4C2 3.6 1.3 4.5 1.2 5.8 1 7.1 1 9 1 9s0 1.9.2 3.2c.2 1.3.8 2.2 2.2 2.4C5.6 15 9 15 9 15s3.4 0 5.6-.4c1.4-.3 2-1.1 2.2-2.4.2-1.3.2-3.2.2-3.2s0-1.9-.2-3.2zM7 12V6l5 3-5 3z\\"></path></symbol>\\n    <symbol id=\\"plyr-muted\\" viewBox=\\"0 0 18 18\\"><path d=\\"M12.4 12.5l2.1-2.1 2.1 2.1 1.4-1.4L15.9 9 18 6.9l-1.4-1.4-2.1 2.1-2.1-2.1L11 6.9 13.1 9 11 11.1zM3.786 6.008H.714C.286 6.008 0 6.31 0 6.76v4.512c0 .452.286.752.714.752h3.072l4.071 3.858c.5.3 1.143 0 1.143-.602V2.752c0-.601-.643-.977-1.143-.601L3.786 6.008z\\"></path></symbol>\\n    <symbol id=\\"plyr-pause\\" viewBox=\\"0 0 18 18\\"><path d=\\"M6 1H3c-.6 0-1 .4-1 1v14c0 .6.4 1 1 1h3c.6 0 1-.4 1-1V2c0-.6-.4-1-1-1zm6 0c-.6 0-1 .4-1 1v14c0 .6.4 1 1 1h3c.6 0 1-.4 1-1V2c0-.6-.4-1-1-1h-3z\\"></path></symbol>\\n    <symbol id=\\"plyr-pip\\" viewBox=\\"0 0 18 18\\"><path d=\\"M13.293 3.293L7.022 9.564l1.414 1.414 6.271-6.271L17 7V1h-6z\\"></path><path d=\\"M13 15H3V5h5V3H2a1 1 0 00-1 1v12a1 1 0 001 1h12a1 1 0 001-1v-6h-2v5z\\"></path></symbol>\\n    <symbol id=\\"plyr-play\\" viewBox=\\"0 0 18 18\\"><path d=\\"M15.562 8.1L3.87.225c-.818-.562-1.87 0-1.87.9v15.75c0 .9 1.052 1.462 1.87.9L15.563 9.9c.584-.45.584-1.35 0-1.8z\\"></path></symbol>\\n    <symbol id=\\"plyr-restart\\" viewBox=\\"0 0 18 18\\"><path d=\\"M9.7 1.2l.7 6.4 2.1-2.1c1.9 1.9 1.9 5.1 0 7-.9 1-2.2 1.5-3.5 1.5-1.3 0-2.6-.5-3.5-1.5-1.9-1.9-1.9-5.1 0-7 .6-.6 1.4-1.1 2.3-1.3l-.6-1.9C6 2.6 4.9 3.2 4 4.1 1.3 6.8 1.3 11.2 4 14c1.3 1.3 3.1 2 4.9 2 1.9 0 3.6-.7 4.9-2 2.7-2.7 2.7-7.1 0-9.9L16 1.9l-6.3-.7z\\"></path></symbol>\\n    <symbol id=\\"plyr-rewind\\" viewBox=\\"0 0 18 18\\"><path d=\\"M10.125 1L0 9l10.125 8v-6.171L18 17V1l-7.875 6.171z\\"></path></symbol>\\n    <symbol id=\\"plyr-settings\\" viewBox=\\"0 0 18 18\\"><path d=\\"M16.135 7.784a2 2 0 01-1.23-2.969c.322-.536.225-.998-.094-1.316l-.31-.31c-.318-.318-.78-.415-1.316-.094a2 2 0 01-2.969-1.23C10.065 1.258 9.669 1 9.219 1h-.438c-.45 0-.845.258-.997.865a2 2 0 01-2.969 1.23c-.536-.322-.999-.225-1.317.093l-.31.31c-.318.318-.415.781-.093 1.317a2 2 0 01-1.23 2.969C1.26 7.935 1 8.33 1 8.781v.438c0 .45.258.845.865.997a2 2 0 011.23 2.969c-.322.536-.225.998.094 1.316l.31.31c.319.319.782.415 1.316.094a2 2 0 012.969 1.23c.151.607.547.865.997.865h.438c.45 0 .845-.258.997-.865a2 2 0 012.969-1.23c.535.321.997.225 1.316-.094l.31-.31c.318-.318.415-.781.094-1.316a2 2 0 011.23-2.969c.607-.151.865-.547.865-.997v-.438c0-.451-.26-.846-.865-.997zM9 12a3 3 0 110-6 3 3 0 010 6z\\"></path></symbol>\\n    <symbol id=\\"plyr-volume\\" viewBox=\\"0 0 18 18\\"><path d=\\"M15.6 3.3c-.4-.4-1-.4-1.4 0-.4.4-.4 1 0 1.4C15.4 5.9 16 7.4 16 9c0 1.6-.6 3.1-1.8 4.3-.4.4-.4 1 0 1.4.2.2.5.3.7.3.3 0 .5-.1.7-.3C17.1 13.2 18 11.2 18 9s-.9-4.2-2.4-5.7z\\"></path><path d=\\"M11.282 5.282a.909.909 0 000 1.316c.735.735.995 1.458.995 2.402 0 .936-.425 1.917-.995 2.487a.909.909 0 000 1.316c.145.145.636.262 1.018.156a.725.725 0 00.298-.156C13.773 11.733 14.13 10.16 14.13 9c0-.17-.002-.34-.011-.51-.053-.992-.319-2.005-1.522-3.208a.909.909 0 00-1.316 0zm-7.496.726H.714C.286 6.008 0 6.31 0 6.76v4.512c0 .452.286.752.714.752h3.072l4.071 3.858c.5.3 1.143 0 1.143-.602V2.752c0-.601-.643-.977-1.143-.601L3.786 6.008z\\"></path></symbol>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/plyr.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/qrcode.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/qrcode</title>\\n    <g id=\\"icon/material/qrcode\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M3,11 L5,11 L5,13 L3,13 L3,11 M11,5 L13,5 L13,9 L11,9 L11,5 M9,11 L13,11 L13,15 L11,15 L11,13 L9,13 L9,11 M15,11 L17,11 L17,13 L19,13 L19,11 L21,11 L21,13 L19,13 L19,15 L21,15 L21,19 L19,19 L19,21 L17,21 L17,19 L13,19 L13,21 L11,21 L11,17 L15,17 L15,15 L17,15 L17,13 L15,13 L15,11 M19,19 L19,15 L17,15 L17,19 L19,19 M15,3 L21,3 L21,9 L15,9 L15,3 M17,5 L17,7 L19,7 L19,5 L17,5 M3,3 L9,3 L9,9 L3,9 L3,3 M5,5 L5,7 L7,7 L7,5 L5,5 M3,15 L9,15 L9,21 L3,21 L3,15 M5,17 L5,19 L7,19 L7,17 L5,17 Z\\" id=\\"mdi:qrcode\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/qrcode.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/restrictions-outline.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/restrictions-outline</title>\\n    <g id=\\"icon/material/restrictions-outline\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M18.5,8 C18.33,8 18.16,8 18,8.05 L18,4.5 C18,3.11928813 16.8807119,2 15.5,2 C15.31,2 15.13,2 14.96,2.06 C14.7461874,0.868716938 13.7103179,0.0012815407 12.5,0 C11.44,0 10.54,0.66 10.17,1.59 C9.41693202,1.38051444 8.60922719,1.53531349 7.98697307,2.00838366 C7.36471894,2.48145383 6.99954575,3.21833807 7,4 L7,4.55 C6.84,4.5 6.67,4.5 6.5,4.5 C5.11928813,4.5 4,5.61928813 4,7 L4,15.5 C4,20.19 7.81,24 12.5,24 C17.19,24 21,20.19 21,15.5 L21,10.5 C21,9.11928813 19.8807119,8 18.5,8 M19,15.5 C19,19.0898509 16.0898509,22 12.5,22 C8.91014913,22 6,19.0898509 6,15.5 L6,7 C6,6.72 6.22,6.5 6.5,6.5 C6.78,6.5 7,6.72 7,7 L7,12 L9,12 L9,4 C9,3.72 9.22,3.5 9.5,3.5 C9.78,3.5 10,3.72 10,4 L10,11 L12,11 L12,2.5 C12,2.22 12.22,2 12.5,2 C12.78,2 13,2.22 13,2.5 L13,11 L15,11 L15,4.5 C15,4.22 15.22,4 15.5,4 C15.78,4 16,4.22 16,4.5 L16,13.42 C14.23,14.19 13,15.95 13,18 L15,18 C15,16.34 16.34,15 18,15 L18,10.5 C18,10.22 18.22,10 18.5,10 C18.78,10 19,10.22 19,10.5 L19,15.5 Z\\" id=\\"mdi:hand-front-right-outline\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/restrictions-outline.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/rss-variant.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"16px\\" height=\\"16px\\" viewBox=\\"0 0 16 16\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>badge/icon/rss-variant</title>\\n    <g id=\\"badge/icon/rss-variant\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"Bounds\\" x=\\"0\\" y=\\"0\\" width=\\"16\\" height=\\"16\\"></rect>\\n        <path d=\\"M5,10 C5.55228475,10 6,10.4477153 6,11 C6,11.5412844 5.55045872,12 5,12 C4.4587156,12 4,11.5412844 4,11 C4,10.4477153 4.44771525,10 5,10 M4,4 C8.418278,4 12,7.581722 12,12 L10.5449871,12 C10.5449871,8.38530341 7.61469659,5.45501285 4,5.45501285 L4,4 M4,7 C6.76142375,7 9,9.23857625 9,12 L7.57070707,12 C7.57070707,11.0529896 7.19450866,10.1447663 6.52487118,9.47512882 C5.85523371,8.80549134 4.9470104,8.42929293 4,8.42929293 L4,7 Z\\" id=\\"rss-variant\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/rss-variant.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/rss.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"16px\\" height=\\"16px\\" viewBox=\\"0 0 16 16\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>badge/icon/rss</title>\\n    <g id=\\"badge/icon/rss\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"Bounds\\" x=\\"0\\" y=\\"0\\" width=\\"16\\" height=\\"16\\"></rect>\\n        <path d=\\"M4.75,10 C5.44035594,10 6,10.5596441 6,11.25 C6,11.9403559 5.44035594,12.5 4.75,12.5 C4.05964406,12.5 3.5,11.9403559 3.5,11.25 C3.5,10.5596441 4.05964406,10 4.75,10 Z M5.11116669,7.54639605 C6.82660407,7.80940186 8.1830606,9.16218778 8.45158391,10.8758014 L7.23152342,11.1795044 C7.08441894,9.91212418 6.07561709,8.9075227 4.80628203,8.7668642 L5.11116669,7.54639605 Z M5.72009926,5.11432766 C8.32885675,5.60976503 10.3855062,7.6642481 10.8841422,10.2718714 L9.66858256,10.5739265 C9.28406621,8.41337145 7.57799724,6.7100586 5.41602734,6.32963962 L5.72009926,5.11432766 Z M6.32787101,2.68573625 C9.83044069,3.40831848 12.5892971,6.16611302 13.3134345,9.66811414 L12.0989255,9.96960741 C11.4871421,6.91510726 9.07973668,4.50930363 6.02438684,3.89987406 L6.32787101,2.68573625 Z\\" id=\\"Channel-variant\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/rss.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/saved-messages.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/saved-messages</title>\\n    <g id=\\"icon/material/saved-messages\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M17.1666667,1 C17.9487847,1 18.6165365,1.26855469 19.1699219,1.80566406 C19.7233073,2.34277344 20,2.99088542 20,3.75 L20,21.625 C20,21.9973958 19.8634983,22.3196615 19.5904948,22.5917969 C19.3174913,22.8639323 18.9817708,23 18.5833333,23 L12,18.1875 L5.41666667,23 C5.01822917,23 4.68250868,22.8639323 4.40950521,22.5917969 C4.13650174,22.3196615 4,21.9973958 4,21.625 L4,3.75 C4,2.99088542 4.27669271,2.34277344 4.83007812,1.80566406 C5.38346354,1.26855469 6.05121528,1 6.83333333,1 L17.1666667,1 Z M12.0016667,4.4375 L10.2972396,8.1328125 L6.335,8.6484375 L9.256875,11.4199219 L8.50427083,15.4375 L12.0016667,13.4609375 L15.4990625,15.4375 L14.7464583,11.4199219 L17.6683333,8.6484375 L13.7060938,8.1328125 L12.0016667,4.4375 Z\\" id=\\"xabber:saved-messages\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/saved-messages.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/search.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/search</title>\\n    <g id=\\"icon/material/search\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <mask id=\\"mask-2\\" fill=\\"white\\">\\n            <path d=\\"M15.5,14 L14.71,14 L14.43,13.73 C15.41,12.59 16,11.11 16,9.5 C16,5.91 13.09,3 9.5,3 C5.91,3 3,5.91 3,9.5 C3,13.09 5.91,16 9.5,16 C11.11,16 12.59,15.41 13.73,14.43 L14,14.71 L14,15.5 L19,20.49 L20.49,19 L15.5,14 Z M9.5,14 C7.01,14 5,11.99 5,9.5 C5,7.01 7.01,5 9.5,5 C11.99,5 14,7.01 14,9.5 C14,11.99 11.99,14 9.5,14 Z\\" id=\\"path-1\\"></path>\\n        </mask>\\n        <path d=\\"M15.5,14 L14.71,14 L14.43,13.73 C15.41,12.59 16,11.11 16,9.5 C16,5.91 13.09,3 9.5,3 C5.91,3 3,5.91 3,9.5 C3,13.09 5.91,16 9.5,16 C11.11,16 12.59,15.41 13.73,14.43 L14,14.71 L14,15.5 L19,20.49 L20.49,19 L15.5,14 Z M9.5,14 C7.01,14 5,11.99 5,9.5 C5,7.01 7.01,5 9.5,5 C11.99,5 14,7.01 14,9.5 C14,11.99 11.99,14 9.5,14 Z\\" id=\\"path-1\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/search.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/server.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"16px\\" height=\\"16px\\" viewBox=\\"0 0 16 16\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>badge/icon/server</title>\\n    <g id=\\"badge/icon/server\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"Bounds\\" x=\\"0\\" y=\\"0\\" width=\\"16\\" height=\\"16\\"></rect>\\n        <path d=\\"M10.1428571,13 L5.85714286,13 C5.38571429,13 5,12.625 5,12.1666667 L5,3.83333333 C5,3.375 5.38571429,3 5.85714286,3 L10.1428571,3 C10.6142857,3 11,3.375 11,3.83333333 L11,12.1666667 C11,12.625 10.6142857,13 10.1428571,13 Z M10,5 L6,5 L6,6 L10,6 L10,5 Z M10,7 L6,7 L6,8 L10,8 L10,7 Z M10,11 L9,11 L9,12 L10,12 L10,11 Z\\" id=\\"Server\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/server.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/status-outline.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/status-outline</title>\\n    <g id=\\"icon/material/status-outline\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M16.06,2.2 L17.74,6.26 L21.8,7.94 L20.12,12 L21.8,16.06 L17.74,17.74 L16.06,21.8 L12,20.12 L7.94,21.8 L6.26,17.74 L2.2,16.06 L3.88,12 L2.2,7.94 L6.26,6.26 L7.94,2.2 L12,3.88 L16.06,2.2 Z M15,4.81 L12,6.05 L9,4.81 L7.79,7.79 L4.81,9 L6.05,12 L4.81,15 L7.79,16.21 L9,19.19 L12,17.95 L15,19.19 L16.21,16.21 L19.19,15 L17.95,12 L19.19,9 L16.21,7.79 L15,4.81 Z M13.5,7 L12,11 L15,11 L11.5,17 L10.5,17 L12,13 L9,13 L12.5,7 L13.5,7 Z\\" id=\\"xabber:status-outline\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/status-outline.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/subscription-from.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/subscription-from</title>\\n    <g id=\\"icon/material/subscription-from\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M14,8 C17.3137085,8 20,10.6862915 20,14 C20,17.3137085 17.3137085,20 14,20 C10.6862915,20 8,17.3137085 8,14 C8,13.462632 8.07064283,12.9417636 8.20314833,12.4461748 L9.67168223,13.9143229 C9.77459988,14.0172246 9.8859413,14.1065666 10.0034864,14.1823489 L10.0048953,14.1996403 C10.1089211,16.3160315 11.8578046,18 14,18 C16.209139,18 18,16.209139 18,14 C18,11.851413 16.3059677,10.0984884 14.180685,10.0040081 C14.1065666,9.8859413 14.0172246,9.77459988 13.9143229,9.67168223 L12.4461748,8.20314833 C12.9417636,8.07064283 13.462632,8 14,8 Z M11,4 L11,6 L7.415,6 L12.5,11.0857864 L11.0857864,12.5 L6,7.415 L6,11 L4,11 L4,4 L11,4 Z\\" id=\\"xabber:subscribe-from\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/subscription-from.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/subscription-to.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/subscription-to</title>\\n    <g id=\\"icon/material/subscription-to\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M13.9994979,8.00000002 C17.3137085,8.00000002 20,10.6862915 20,14 C20,17.3137085 17.3137085,20 14,20 C10.7616031,20 8.12242824,17.4344251 8.00413847,14.2249383 L8,13.999 L10,14 L10,14 C10,16.209139 11.790861,18 14,18 C16.209139,18 18,16.209139 18,14 C18,11.8578046 16.3160315,10.1089211 14.1996403,10.0048953 L13.999,10 L13.9994979,8.00000002 Z M4.91421356,3.5 L10,8.585 L10,5 L12,5 L12,12 L5,12 L5,10 L8.585,10 L3.5,4.91421356 L4.91421356,3.5 Z\\" id=\\"xabber:subscribe-to\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/subscription-to.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/task.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"16px\\" height=\\"16px\\" viewBox=\\"0 0 16 16\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>badge/circle/task</title>\\n    <g id=\\"badge/circle/task\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"Bounds\\" x=\\"0\\" y=\\"0\\" width=\\"16\\" height=\\"16\\"></rect>\\n        <circle id=\\"Circle\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\" cx=\\"8\\" cy=\\"8\\" r=\\"7\\"></circle>\\n        <g id=\\"icon16/bot-variant\\">\\n            <rect id=\\"Bounds\\" x=\\"0\\" y=\\"0\\" width=\\"16\\" height=\\"16\\"></rect>\\n            <polygon id=\\"Path\\" fill=\\"#FFFFFF\\" fill-rule=\\"nonzero\\" points=\\"7 12.5 2.75 8.25 4 7 7 10 12 5 13.25 6.25\\"></polygon>\\n        </g>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/task.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/translate.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/translate</title>\\n    <g id=\\"icon/material/translate\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M12.87,15.07 L10.33,12.56 L10.36,12.53 C12.0541502,10.6471017 13.3198948,8.41925464 14.07,6 L17,6 L17,4 L10,4 L10,2 L8,2 L8,4 L1,4 L1,6 L12.17,6 C11.5,7.92 10.44,9.75 9,11.35 C8.07,10.32 7.3,9.19 6.69,8 L4.69,8 C5.42,9.63 6.42,11.17 7.67,12.56 L2.58,17.58 L4,19 L9,14 L12.11,17.11 L12.87,15.07 M18.5,10 L16.5,10 L12,22 L14,22 L15.12,19 L19.87,19 L21,22 L23,22 L18.5,10 M15.88,17 L17.5,12.67 L19.12,17 L15.88,17 L15.88,17 Z\\" id=\\"mdi:translate\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/translate.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/video.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/video</title>\\n    <g id=\\"icon/material/video\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M17,10.5 L17,7 C17,6.44771525 16.5522847,6 16,6 L4,6 C3.44771525,6 3,6.44771525 3,7 L3,17 C3,17.5522847 3.44771525,18 4,18 L16,18 C16.5522847,18 17,17.5522847 17,17 L17,13.5 L21,17.5 L21,6.5 L17,10.5 Z\\" id=\\"mdi:video\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/video.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/volume-high.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/volume-high</title>\\n    <g id=\\"icon/material/volume-high\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M14,3.23 L14,5.29 C16.89,6.15 19,8.83 19,12 C19,15.17 16.89,17.84 14,18.7 L14,20.77 C18,19.86 21,16.28 21,12 C21,7.72 18,4.14 14,3.23 M16.5,12 C16.5,10.23 15.5,8.71 14,7.97 L14,16 C15.5,15.29 16.5,13.76 16.5,12 M3,9 L3,15 L7,15 L12,20 L12,4 L7,9 L3,9 Z\\" id=\\"mdi:volume-high\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/volume-high.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/volume-off-variant.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<g id=\\"Page-1\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n    <g id=\\"Mobile-Portrait\\" transform=\\"translate(-41.000000, -4.000000)\\">\\n        <g id=\\"volume-off-variant\\" transform=\\"translate(34.000000, 0.000000)\\">\\n            <rect id=\\"Bounds\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n            <polygon id=\\"Path-2\\" points=\\"7 9 7 15 11 15 16 20 16 16.5 8.5 9\\"></polygon>\\n            <polygon id=\\"Path-3\\" points=\\"7 6 18.5 17.5 19.5 16.5 16 13 16 4 11.5 8.5 8 5\\"></polygon>\\n        </g>\\n    </g>\\n</g>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/volume-off-variant.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/volume-off.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <title>icon/material/volume-off</title>\\n    <g id=\\"icon/material/volume-off\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n        <rect id=\\"ViewBox\\" fill-rule=\\"nonzero\\" x=\\"0\\" y=\\"0\\" width=\\"24\\" height=\\"24\\"></rect>\\n        <path d=\\"M12,4 L9.91,6.09 L12,8.18 M4.27,3 L3,4.27 L7.73,9 L3,9 L3,15 L7,15 L12,20 L12,13.27 L16.25,17.53 C15.58,18.04 14.83,18.46 14,18.7 L14,20.77 C15.38,20.45 16.63,19.82 17.68,18.96 L19.73,21 L21,19.73 L12,10.73 M19,12 C19,12.94 18.8,13.82 18.46,14.64 L19.97,16.15 C20.62,14.91 21,13.5 21,12 C21,7.72 18,4.14 14,3.23 L14,5.29 C16.89,6.15 19,8.83 19,12 M16.5,12 C16.5,10.23 15.5,8.71 14,7.97 L14,10.18 L16.45,12.63 C16.5,12.43 16.5,12.21 16.5,12 Z\\" id=\\"mdi:volume-off\\" fill=\\"#000000\\" fill-rule=\\"nonzero\\"></path>\\n    </g>\\n</svg>");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/volume-off.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/xabber-offline.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<g id=\\"Page-1\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n    <g id=\\"Xabber-Offline\\" fill=\\"#000000\\">\\n        <path d=\\"M13.4146471,22.5 L14.009222,22.5 C14.5490248,22.5 15,22.0522847 15,21.5 C15,20.9438648 14.5564136,20.5 14.009222,20.5 L9.99077797,20.5 C9.45097518,20.5 9,20.9477153 9,21.5 C9,22.0561352 9.44358641,22.5 9.99077797,22.5 L10.5853529,22.5 C10.7912711,23.0825962 11.3468906,23.5 12,23.5 C12.6531094,23.5 13.2087289,23.0825962 13.4146471,22.5 Z\\" id=\\"Base\\"></path>\\n        <rect id=\\"Middle-base\\" x=\\"8\\" y=\\"17.75\\" width=\\"8\\" height=\\"2\\" rx=\\"1\\"></rect>\\n        <path d=\\"M17.5099945,14.8015103 L17.5099945,14.8015103 C17.1966102,15.1049344 17.0013821,15.5296633 17,16 C17,16.5522847 16.5443356,17 16.0046024,17 L7.99539757,17 C7.44565467,17 7,16.5561352 6.99998649,16 C6.99861167,15.5296664 6.80338616,15.10494 6.49000549,14.8015163 L6.49000549,14.8000192 C4.95622884,13.3424727 4,11.282906 4,9 C4,4.581722 7.581722,1 12,1 C16.418278,1 20,4.581722 20,9 C20,11.282906 19.0437712,13.3424727 17.5099945,14.8000192 L17.5099945,14.8015103 Z M8.86088543,15 L15.1391084,15 C15.3021338,14.4253123 15.6014858,13.895093 16,13.472213 C17.2274987,12.3735719 18,10.7769996 18,9 C18,5.6862915 15.3137085,3 12,3 C8.6862915,3 6,5.6862915 6,9 C6,10.7769996 6.77250128,12.3735719 8,13.472213 C8.39851111,13.8950917 8.69786083,14.4253152 8.86088543,15 Z\\" id=\\"Bulb-shape\\"></path>\\n    </g>\\n</g>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/xabber-offline.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/xabber-online.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<g id=\\"Page-1\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"none\\" fill-rule=\\"evenodd\\">\\n    <g id=\\"Xabber-Online\\" fill=\\"#000000\\">\\n        <path d=\\"M13.4146471,22.5 L14.009222,22.5 C14.5490248,22.5 15,22.0522847 15,21.5 C15,20.9438648 14.5564136,20.5 14.009222,20.5 L9.99077797,20.5 C9.45097518,20.5 9,20.9477153 9,21.5 C9,22.0561352 9.44358641,22.5 9.99077797,22.5 L10.5853529,22.5 C10.7912711,23.0825962 11.3468906,23.5 12,23.5 C12.6531094,23.5 13.2087289,23.0825962 13.4146471,22.5 Z\\" id=\\"Base\\"></path>\\n        <rect id=\\"Middle-base\\" x=\\"8\\" y=\\"17.75\\" width=\\"8\\" height=\\"2\\" rx=\\"1\\"></rect>\\n        <path d=\\"M17.5099945,14.8015103 L17.5099945,14.8000192 C19.0437712,13.3424727 20,11.282906 20,9 C20,4.581722 16.418278,1 12,1 C7.581722,1 4,4.581722 4,9 C4,11.282906 4.95622884,13.3424727 6.49000549,14.8000192 L6.49000549,14.8015163 C6.80338616,15.10494 6.99861167,15.5296664 6.99998649,16 C7,16.5561352 7.44565467,17 7.99539757,17 L16.0046024,17 C16.5443356,17 17,16.5522847 17,16 C17.0013821,15.5296633 17.1966102,15.1049344 17.5099945,14.8015103 L17.5099945,14.8015103 Z\\" id=\\"Bulb-shape\\"></path>\\n    </g>\\n</g>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/xabber-online.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/svg/xmpp.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<path\\n     inkscape:connector-curvature=\\"0\\"\\n     d=\\"m 17.765357,5.9248618 c 0.009,0.1518861 -0.206601,0.1119764 -0.206601,0.2652514 0,4.4595198 -5.17314,11.2012628 -10.3933633,12.5152538 v 0.136731 C 14.101125,18.204712 21.825325,11.114777 22,4.2839629 l -4.233831,1.6413619 z\\"\\n     id=\\"path4-5\\" />\\n<path\\n     inkscape:connector-curvature=\\"0\\"\\n     d=\\"m 15.907561,6.3610856 c 0.009,0.1518861 0.014,0.3045804 0.014,0.4578554 0,4.459522 -3.55133,10.468554 -8.7715528,11.783009 v 0.189367 C 13.982554,18.349079 19.389945,11.500913 19.389945,6.1592263 c 0,-0.2747361 -0.01446,-0.5470438 -0.04292,-0.8162264 l -3.439122,1.017508 z\\"\\n     id=\\"path6\\" />\\n<path\\n     inkscape:connector-curvature=\\"0\\"\\n     d=\\"m 6.2332547,5.9248618 c -0.00886,0.1518861 0.2067174,0.1119764 0.2067174,0.2652514 0,4.4595198 5.3857609,11.2631498 10.6063279,12.5777208 V 18.95743 C 10.11103,18.318886 2.1746761,11.11443 2,4.2836157 l 4.2337177,1.6413618 z\\"\\n     id=\\"path8\\" />\\n<path\\n     inkscape:connector-curvature=\\"0\\"\\n     d=\\"M 8.3307389,6.473525 C 8.3219828,6.6254111 8.31686,6.7777591 8.31686,6.9312646 c 0,4.4595214 3.551213,10.4685544 8.771549,11.7830104 v 0.189596 C 10.258286,18.581129 4.8484667,11.613351 4.8484667,6.2717814 c 0,-0.2747361 0.014805,-0.5470427 0.042915,-0.8162284 l 3.4391228,1.0177415 z\\"\\n     id=\\"path10\\" />\\n<path\\n     inkscape:connector-curvature=\\"0\\"\\n     d=\\"m 4.8583007,5.3920472 0.8811221,0.3148763 c -0.00473,0.111283 -0.00765,0.2607395 -0.00765,0.3730642 0,4.7681513 4.3114542,11.3600893 10.0954942,12.3914783 0.375377,0.125857 0.871982,0.240263 1.264595,0.339052 V 19 C 9.5433961,18.356828 4.2400023,10.686651 4.857725,5.3915852 z\\"\\n     id=\\"path12\\" />\\n<path\\n     inkscape:connector-curvature=\\"0\\"\\n     d=\\"m 19.390639,5.2968432 -0.906108,0.3036565 c 0.0047,0.1113977 0.02208,0.2548387 0.02208,0.3670476 0,4.7681497 -4.311569,11.3602047 -10.0957226,12.3914777 -0.3751445,0.125972 -0.8719856,0.240267 -1.2643666,0.33917 v 0.189596 C 15.052467,17.886018 20.00767,10.591448 19.389946,5.2967275 z\\"\\n     id=\\"path14\\" />\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/svg/xmpp.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/vcard/vcard.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"block-header\\">\\n    <span class=\\"block-name\\"></span>\\n    <div class=\\"btn-vcard-refresh\\">\\n        <div class=\\"button\\">\\n            <i class=\\"mdi mdi-20px mdi-refresh\\"></i>\\n        </div>\\n        <div class=\\"preloader-wrapper preloader-20px active\\">\\n            <div class=\\"spinner-layer\\">\\n                <div class=\\"circle-clipper left\\">\\n                    <div class=\\"circle\\"></div>\\n                </div>\\n                <div class=\\"gap-patch\\">\\n                    <div class=\\"circle\\"></div>\\n                </div>\\n                <div class=\\"circle-clipper right\\">\\n                    <div class=\\"circle\\"></div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n<div class=\\"vcard-wrap\\">\\n    <div class=\\"info-wrap jid-info-wrap hidden\\">\\n        <div class=\\"details-icon-wrap\\" title=\'{[print(xabber.getString(\\"group_settings__properties__tooltip_copy_by_click\\"))]}\'><svg class=\\"details-icon mdi mdi-24px mdi-svg-template\\" data-svgname=\\"xmpp\\"></svg></div>\\n        <div class=\\"info jabber-id\\">\\n            <div class=\\"value one-line\\"></div>\\n            <div class=\\"label\\">{[print(xabber.getString(\\"vcard_jabber_id\\"))]}</div>\\n        </div>\\n    </div>\\n    <div class=\\"info-wrap personal-info-wrap hidden\\">\\n        <div class=\\"details-icon-wrap\\" title=\'{[print(xabber.getString(\\"group_settings__properties__tooltip_copy_by_click\\"))]}\'><svg class=\\"details-icon mdi mdi-24px mdi-svg-template\\" data-svgname=\\"account-outline\\"></svg></div>\\n        <div class=\\"info first-name\\">\\n            <div class=\\"value one-line\\"></div>\\n            <div class=\\"label\\">{[print(xabber.getString(\\"vcard_given_name\\"))]}</div>\\n        </div>\\n        <div class=\\"info middle-name\\">\\n            <div class=\\"value one-line\\"></div>\\n            <div class=\\"label\\">{[print(xabber.getString(\\"vcard_middle_name\\"))]}</div>\\n        </div>\\n        <div class=\\"info last-name\\">\\n            <div class=\\"value one-line\\"></div>\\n            <div class=\\"label\\">{[print(xabber.getString(\\"vcard_family_name\\"))]}</div>\\n        </div>\\n        <div class=\\"info fullname\\">\\n            <div class=\\"value one-line\\"></div>\\n            <div class=\\"label\\">{[print(xabber.getString(\\"vcard_full_name\\"))]}</div>\\n        </div>\\n    </div>\\n    <div class=\\"info-wrap nickname-info-wrap hidden\\">\\n        <i class=\\"details-icon mdi mdi-24px mdi-account-box-outline\\"></i>\\n        <div class=\\"info nickname\\">\\n            <div class=\\"value one-line\\"></div>\\n            <div class=\\"label\\">{[print(xabber.getString(\\"vcard_nick_name\\"))]}</div>\\n        </div>\\n    </div>\\n    <div class=\\"info-wrap birthday-info-wrap hidden\\">\\n        <div class=\\"details-icon-wrap\\" title=\'{[print(xabber.getString(\\"group_settings__properties__tooltip_copy_by_click\\"))]}\'><svg class=\\"details-icon mdi mdi-24px mdi-svg-template\\" data-svgname=\\"birthday-outline\\"></svg></div>\\n        <div class=\\"info birthday\\">\\n            <div class=\\"value one-line\\"></div>\\n            <div class=\\"label\\">{[print(xabber.getString(\\"vcard_birth_date\\"))]}</div>\\n        </div>\\n    </div>\\n    <div class=\\"info-wrap job-info-wrap hidden\\">\\n        <div class=\\"details-icon-wrap\\" title=\'{[print(xabber.getString(\\"group_settings__properties__tooltip_copy_by_click\\"))]}\'><svg class=\\"details-icon mdi mdi-24px mdi-svg-template\\" data-svgname=\\"job-outline\\"></svg></div>\\n        <div class=\\"info org-name\\">\\n            <div class=\\"value one-line\\"></div>\\n            <div class=\\"label\\">{[print(xabber.getString(\\"vcard_organization\\"))]}</div>\\n        </div>\\n        <div class=\\"info job-title\\">\\n            <div class=\\"value one-line\\"></div>\\n            <div class=\\"label\\">{[print(xabber.getString(\\"vcard_title\\"))]}</div>\\n        </div>\\n        <div class=\\"info org-unit\\">\\n            <div class=\\"value one-line\\"></div>\\n            <div class=\\"label\\">{[print(xabber.getString(\\"vcard_organization_unit\\"))]}</div>\\n        </div>\\n        <div class=\\"info role\\">\\n            <div class=\\"value one-line\\"></div>\\n            <div class=\\"label\\">{[print(xabber.getString(\\"vcard_role\\"))]}</div>\\n        </div>\\n    </div>\\n    <div class=\\"info-wrap site-info-wrap hidden\\">\\n        <i title=\'{[print(xabber.getString(\\"group_settings__properties__tooltip_copy_by_click\\"))]}\' class=\\"details-icon mdi mdi-24px mdi-web\\"></i>\\n        <div class=\\"info url\\">\\n            <div class=\\"value one-line\\"></div>\\n            <div class=\\"label\\">{[print(xabber.getString(\\"vcard_url\\"))]}</div>\\n        </div>\\n    </div>\\n    <div class=\\"info-wrap description-info-wrap hidden\\">\\n        <i title=\'{[print(xabber.getString(\\"group_settings__properties__tooltip_copy_by_click\\"))]}\' class=\\"details-icon mdi mdi-24px mdi-file-document-box\\"></i>\\n        <div class=\\"info description\\">\\n            <div class=\\"value\\"></div>\\n            <div class=\\"label\\">{[print(xabber.getString(\\"vcard_decsription\\"))]}</div>\\n        </div>\\n    </div>\\n    <div class=\\"info-wrap phone-info-wrap hidden\\">\\n        <i title=\'{[print(xabber.getString(\\"group_settings__properties__tooltip_copy_by_click\\"))]}\' class=\\"details-icon mdi mdi-24px mdi-phone\\"></i>\\n        <div class=\\"info phone-work\\">\\n            <div class=\\"value one-line\\"></div>\\n            <div class=\\"label\\">{[print(xabber.getString(\\"vcard_type_work\\"))]}</div>\\n        </div>\\n        <div class=\\"info phone-home\\">\\n            <div class=\\"value one-line\\"></div>\\n            <div class=\\"label\\">{[print(xabber.getString(\\"vcard_type_home\\"))]}</div>\\n        </div>\\n        <div class=\\"info phone-mobile\\">\\n            <div class=\\"value one-line\\"></div>\\n            <div class=\\"label\\">{[print(xabber.getString(\\"vcard_type_mobile\\"))]}</div>\\n        </div>\\n        <div class=\\"info phone-default\\">\\n            <div class=\\"value one-line\\"></div>\\n            <div class=\\"label\\">{[print(xabber.getString(\\"vcard_telephone\\"))]}</div>\\n        </div>\\n    </div>\\n    <div class=\\"info-wrap email-info-wrap hidden\\">\\n        <i title=\'{[print(xabber.getString(\\"group_settings__properties__tooltip_copy_by_click\\"))]}\' class=\\"details-icon mdi mdi-24px mdi-email\\"></i>\\n        <div class=\\"info email-work\\">\\n            <div class=\\"value one-line\\"></div>\\n            <div class=\\"label\\">{[print(xabber.getString(\\"vcard_type_work\\"))]}</div>\\n        </div>\\n        <div class=\\"info email-home\\">\\n            <div class=\\"value one-line\\"></div>\\n            <div class=\\"label\\">{[print(xabber.getString(\\"vcard_type_personal\\"))]}</div>\\n        </div>\\n        <div class=\\"info email-default\\">\\n            <div class=\\"value one-line\\"></div>\\n            <div class=\\"label\\">{[print(xabber.getString(\\"vcard_email\\"))]}</div>\\n        </div>\\n    </div>\\n    <div class=\\"info-wrap address-info-wrap hidden\\">\\n        <i title=\'{[print(xabber.getString(\\"group_settings__properties__tooltip_copy_by_click\\"))]}\' class=\\"details-icon mdi mdi-24px mdi-map-marker\\"></i>\\n        <div class=\\"info address-home\\">\\n            <div class=\\"pobox value one-line\\"></div>\\n            <div class=\\"extadd value one-line\\"></div>\\n            <div class=\\"street value one-line\\"></div>\\n            <div class=\\"locality value one-line\\"></div>\\n            <div class=\\"region value one-line\\"></div>\\n            <div class=\\"pcode value one-line\\"></div>\\n            <div class=\\"country value one-line\\"></div>\\n            <div class=\\"label\\">{[print(xabber.getString(\\"vcard_type_home\\"))]}</div>\\n        </div>\\n        <div class=\\"info address-work\\">\\n            <div class=\\"pobox value one-line\\"></div>\\n            <div class=\\"extadd value one-line\\"></div>\\n            <div class=\\"street value one-line\\"></div>\\n            <div class=\\"locality value one-line\\"></div>\\n            <div class=\\"region value one-line\\"></div>\\n            <div class=\\"pcode value one-line\\"></div>\\n            <div class=\\"country value one-line\\"></div>\\n            <div class=\\"label\\">{[print(xabber.getString(\\"vcard_type_work\\"))]}</div>\\n        </div>\\n        <div class=\\"info address-default\\">\\n            <div class=\\"extadd value one-line\\"></div>\\n            <div class=\\"street value one-line\\"></div>\\n            <div class=\\"locality value one-line\\"></div>\\n            <div class=\\"region value one-line\\"></div>\\n            <div class=\\"pcode value one-line\\"></div>\\n            <div class=\\"country value one-line\\"></div>\\n            <div class=\\"label\\">{[print(xabber.getString(\\"vcard_address\\"))]}</div>\\n        </div>\\n    </div>\\n    <button class=\\"btn-vcard-edit btn-flat btn-main btn-dark ground-color-grey-100 hover-ground-color-grey-300 hidden\\">{[print(xabber.getString(\\"edit_vcard\\"))]}</button>\\n</div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/vcard/vcard.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/vcard/vcard_edit.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("    <div class=\\"right-column noselect\\">\\n        <div class=\\"settings-panel-head\\">\\n            <span>{[print(xabber.getString(\\"vcard_edit__header\\"))]}</span>\\n            <div class=\\"buttons-wrap\\">\\n                <button class=\\"btn-vcard-back btn-flat btn-main btn-dark ground-color-grey-100 hover-ground-color-grey-300\\">{[print(xabber.getString(\\"vcard_edit__button_cancel\\"))]}</button>\\n                <button class=\\"btn-vcard-save btn-flat btn-main text-color-500 ground-color-grey-100 hover-ground-color-grey-300\\">{[print(xabber.getString(\\"vcard_edit__button_save\\"))]}</button>\\n            </div>\\n        </div>\\n\\n        <div class=\\"panel-content-wrap\\">\\n            <div class=\\"panel-content details-panel\\">\\n\\n                <div class=\\"settings-block-wrap vcard\\">\\n                    <div class=\\"vcard-edit-wrap\\">\\n                        <div class=\\"info-wrap personal-info-wrap\\">\\n                            <i class=\\"details-icon mdi mdi-24px mdi-account-card-details\\"></i>\\n                            <div class=\\"input-field first-name\\">\\n                                <input id=\\"{{view.cid}}-first-name\\" placeholder=\\"{[print(xabber.getString(\'vcard_given_name\'))]}\\" type=\\"text\\" name=\\"first_name\\">\\n                            </div>\\n                            <div class=\\"input-field middle-name\\">\\n                                <input id=\\"{{view.cid}}-middle-name\\" placeholder=\\"{[print(xabber.getString(\'vcard_middle_name\'))]}\\" type=\\"text\\" name=\\"middle_name\\">\\n                            </div>\\n                            <div class=\\"input-field last-name\\">\\n                                <input id=\\"{{view.cid}}-last-name\\" placeholder=\\"{[print(xabber.getString(\'vcard_family_name\'))]}\\" type=\\"text\\" name=\\"last_name\\">\\n                            </div>\\n                            <div class=\\"input-field fullname\\">\\n                                <input id=\\"{{view.cid}}-fullname\\" placeholder=\\"{[print(xabber.getString(\'vcard_full_name\'))]}\\" type=\\"text\\" name=\\"fullname\\">\\n                            </div>\\n                        </div>\\n\\n                        <div class=\\"info-wrap nickname-info-wrap\\">\\n                            <div class=\\"input-label\\">{[print(xabber.getString(\\"vcard_nick_name\\"))]}</div>\\n                            <i class=\\"details-icon mdi mdi-24px mdi-account-box-outline\\"></i>\\n                            <div class=\\"input-field nickname\\">\\n                                <input id=\\"{{view.cid}}-nickname\\" placeholder=\\"{[print(xabber.getString(\'vcard_nick_name\'))]}\\" type=\\"text\\" name=\\"nickname\\">\\n                            </div>\\n                        </div>\\n\\n                        <div class=\\"info-wrap birthday-info-wrap\\">\\n                            <div class=\\"input-label\\">{[print(xabber.getString(\\"vcard_birth_date\\"))]}</div>\\n                            <i class=\\"details-icon mdi mdi-24px mdi-cake-variant\\"></i>\\n                            <div class=\\"input-field birthday\\">\\n                                <input id=\\"{{view.cid}}-birthday\\" placeholder=\\"{[print(xabber.getString(\'vcard_birth_date_placeholder\'))]}\\" type=\\"text\\" class=\\"datepicker\\">\\n                            </div>\\n                        </div>\\n\\n                        <div class=\\"info-wrap job-info-wrap\\">\\n                            <div class=\\"input-label\\">{[print(xabber.getString(\\"vcard_job\\"))]}</div>\\n                            <i class=\\"details-icon mdi mdi-24px mdi-briefcase\\"></i>\\n                            <div class=\\"input-field org-name\\">\\n                                <input id=\\"{{view.cid}}-org-name\\" placeholder=\\"{[print(xabber.getString(\'vcard_organization\'))]}\\" type=\\"text\\" name=\\"org_name\\">\\n                            </div>\\n                            <div class=\\"input-field job-title\\">\\n                                <input id=\\"{{view.cid}}-job-title\\" placeholder=\\"{[print(xabber.getString(\'vcard_title\'))]}\\" type=\\"text\\" name=\\"job_title\\">\\n                            </div>\\n                            <div class=\\"input-field org-unit\\">\\n                                <input id=\\"{{view.cid}}-org-unit\\" placeholder=\\"{[print(xabber.getString(\'vcard_organization_unit\'))]}\\" type=\\"text\\" name=\\"org_unit\\">\\n                            </div>\\n                            <div class=\\"input-field role\\">\\n                                <input id=\\"{{view.cid}}-role\\" placeholder=\\"{[print(xabber.getString(\'vcard_role\'))]}\\" type=\\"text\\" name=\\"role\\">\\n                            </div>\\n                        </div>\\n                        <div class=\\"info-wrap site-info-wrap\\">\\n                            <div class=\\"input-label\\">{[print(xabber.getString(\\"vcard_url\\"))]}</div>\\n                            <i class=\\"details-icon mdi mdi-24px mdi-web\\"></i>\\n                            <div class=\\"input-field url\\">\\n                                <input id=\\"{{view.cid}}-url\\" placeholder=\\"{[print(xabber.getString(\'vcard_url_placeholder\'))]}\\" type=\\"text\\" name=\\"url\\">\\n                            </div>\\n                        </div>\\n                        <div class=\\"info-wrap description-info-wrap\\">\\n                            <div class=\\"input-label\\">{[print(xabber.getString(\\"vcard_decsription\\"))]}</div>\\n                            <i class=\\"details-icon mdi mdi-24px mdi-file-document-box\\"></i>\\n                            <div class=\\"input-field description\\">\\n                                <textarea id=\\"{{view.cid}}-description\\" placeholder=\\"{[print(xabber.getString(\'vcard_decsription_placeholder\'))]}\\" type=\\"text\\" cols=\\"30\\" rows=\\"10\\" class=\\"text-field materialize-textarea\\" name=\\"description\\"></textarea>\\n                            </div>\\n                        </div>\\n\\n                        <div class=\\"info-wrap phone-info-wrap\\">\\n                            <div class=\\"input-label\\">{[print(xabber.getString(\\"vcard_telephone\\"))]}</div>\\n                            <i class=\\"details-icon mdi mdi-24px mdi-phone\\"></i>\\n                            <div class=\\"input-field phone-work\\">\\n                                <input id=\\"{{view.cid}}-phone-work\\" placeholder=\\"{[print(xabber.getString(\'vcard_type_work\'))]}\\" type=\\"text\\" name=\\"phone_work\\">\\n                            </div>\\n                            <div class=\\"input-field phone-home\\">\\n                                <input id=\\"{{view.cid}}-phone-home\\" placeholder=\\"{[print(xabber.getString(\'vcard_type_home\'))]}\\" type=\\"text\\" name=\\"phone_home\\">\\n                            </div>\\n                            <div class=\\"input-field phone-mobile\\">\\n                                <input id=\\"{{view.cid}}-phone-mobile\\" placeholder=\\"{[print(xabber.getString(\'vcard_type_mobile\'))]}\\" type=\\"text\\" name=\\"phone_mobile\\">\\n                            </div>\\n                        </div>\\n                        <div class=\\"info-wrap email-info-wrap\\">\\n                            <div class=\\"input-label\\">{[print(xabber.getString(\\"vcard_email\\"))]}</div>\\n                            <i class=\\"details-icon mdi mdi-24px mdi-email\\"></i>\\n                            <div class=\\"input-field email-work\\">\\n                                <input id=\\"{{view.cid}}-email-work\\" placeholder=\\"{[print(xabber.getString(\'vcard_type_work\'))]}\\" type=\\"text\\" name=\\"email_work\\">\\n                            </div>\\n                            <div class=\\"input-field email-home\\">\\n                                <input id=\\"{{view.cid}}-email-home\\" placeholder=\\"{[print(xabber.getString(\'vcard_type_personal\'))]}\\" type=\\"text\\" name=\\"email_home\\">\\n                            </div>\\n                        </div>\\n\\n                        <div class=\\"info-wrap address-info-wrap\\">\\n                            <i class=\\"details-icon mdi mdi-24px mdi-map-marker\\"></i>\\n                            <div class=\\"input-wrap address-wrap address-home-wrap\\">\\n                                <div class=\\"input-label\\">{[print(xabber.getString(\\"vcard_home_address\\"))]}</div>\\n                                <div class=\\"input-field pobox\\">\\n                                    <input id=\\"{{view.cid}}-po-home-box\\" placeholder=\\"{[print(xabber.getString(\'vcard_address_pobox\'))]}\\" type=\\"text\\" name=\\"po_home_box\\">\\n                                </div>\\n                                <div class=\\"input-field extadd\\">\\n                                    <input id=\\"{{view.cid}}-addr-home-extadd\\" placeholder=\\"{[print(xabber.getString(\'vcard_address_extadr\'))]}\\" type=\\"text\\" name=\\"addr_home_extadd\\">\\n                                </div>\\n                                <div class=\\"input-field street\\">\\n                                    <input id=\\"{{view.cid}}-addr-home-street\\" placeholder=\\"{[print(xabber.getString(\'vcard_address_street\'))]}\\" type=\\"text\\" name=\\"addr_home_street\\">\\n                                </div>\\n                                <div class=\\"input-field locality\\">\\n                                    <input id=\\"{{view.cid}}-addr-home-locality\\" placeholder=\\"{[print(xabber.getString(\'vcard_address_locality\'))]}\\" type=\\"text\\" name=\\"addr_home_locality\\">\\n                                </div>\\n                                <div class=\\"input-field region\\">\\n                                    <input id=\\"{{view.cid}}-addr-home-region\\" placeholder=\\"{[print(xabber.getString(\'vcard_address_region\'))]}\\" type=\\"text\\" name=\\"addr_home_region\\">\\n                                </div>\\n                                <div class=\\"input-field pcode\\">\\n                                    <input id=\\"{{view.cid}}-addr-home-pcode\\" placeholder=\\"{[print(xabber.getString(\'vcard_address_pcode\'))]}\\" type=\\"text\\" name=\\"addr_home_pcode\\">\\n                                </div>\\n                                <div class=\\"input-field country\\">\\n                                    <input id=\\"{{view.cid}}-addr-home-country\\" placeholder=\\"{[print(xabber.getString(\'vcard_address_ctry\'))]}\\" type=\\"text\\" name=\\"addr_home_country\\">\\n                                </div>\\n                            </div>\\n                            <div class=\\"input-wrap address-wrap address-work-wrap\\">\\n                                <div class=\\"input-label\\">{[print(xabber.getString(\\"vcard_work_address\\"))]}</div>\\n                                <div class=\\"input-field pobox\\">\\n                                    <input id=\\"{{view.cid}}-po-work-box\\" placeholder=\\"{[print(xabber.getString(\'vcard_address_pobox\'))]}\\" type=\\"text\\" name=\\"po_work_box\\">\\n                                </div>\\n                                <div class=\\"input-field extadd\\">\\n                                    <input id=\\"{{view.cid}}-addr-work-extadd\\" placeholder=\\"{[print(xabber.getString(\'vcard_address_extadr\'))]}\\" type=\\"text\\" name=\\"addr_work_extadd\\">\\n                                </div>\\n                                <div class=\\"input-field street\\">\\n                                    <input id=\\"{{view.cid}}-addr-work-street\\" placeholder=\\"{[print(xabber.getString(\'vcard_address_street\'))]}\\" type=\\"text\\" name=\\"addr_work_street\\">\\n                                </div>\\n                                <div class=\\"input-field locality\\">\\n                                    <input id=\\"{{view.cid}}-addr-work-locality\\" placeholder=\\"{[print(xabber.getString(\'vcard_address_locality\'))]}\\" type=\\"text\\" name=\\"addr_work_locality\\">\\n                                </div>\\n                                <div class=\\"input-field region\\">\\n                                    <input id=\\"{{view.cid}}-addr-work-region\\" placeholder=\\"{[print(xabber.getString(\'vcard_address_region\'))]}\\" type=\\"text\\" name=\\"addr_work_region\\">\\n                                </div>\\n                                <div class=\\"input-field pcode\\">\\n                                    <input id=\\"{{view.cid}}-addr-work-pcode\\" placeholder=\\"{[print(xabber.getString(\'vcard_address_pcode\'))]}\\" type=\\"text\\" name=\\"addr_work_pcode\\">\\n                                </div>\\n                                <div class=\\"input-field country\\">\\n                                    <input id=\\"{{view.cid}}-addr-work-country\\" placeholder=\\"{[print(xabber.getString(\'vcard_address_ctry\'))]}\\" type=\\"text\\" name=\\"addr_work_country\\">\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n\\n            </div>\\n        </div>\\n    </div>\\n");\n\n//# sourceURL=webpack://xabber.web/./templates/vcard/vcard_edit.html?./node_modules/raw-loader/dist/cjs.js')},"./node_modules/raw-loader/dist/cjs.js!./templates/vcard/vcard_right.html":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\\"block-header\\">\\n    <div class=\\"btn-vcard-refresh\\">\\n        <div class=\\"button\\">\\n            <i class=\\"mdi mdi-20px mdi-refresh\\"></i>\\n        </div>\\n        <div class=\\"preloader-wrapper preloader-20px active\\">\\n            <div class=\\"spinner-layer\\">\\n                <div class=\\"circle-clipper left\\">\\n                    <div class=\\"circle\\"></div>\\n                </div>\\n                <div class=\\"gap-patch\\">\\n                    <div class=\\"circle\\"></div>\\n                </div>\\n                <div class=\\"circle-clipper right\\">\\n                    <div class=\\"circle\\"></div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n<div class=\\"vcard-wrap\\">\\n    <div class=\\"info-wrap jid-info-wrap hidden\\" title=\'{[print(xabber.getString(\\"group_settings__properties__tooltip_copy_by_click\\"))]}\'>\\n        <div class=\\"details-icon-wrap\\"><svg class=\\"details-icon mdi mdi-24px mdi-svg-template\\" data-svgname=\\"id-outline\\"></svg></div>\\n        <div class=\\"info-hover\\">\\n            <div class=\\"info jabber-id\\">\\n                <div class=\\"value one-line\\"></div>\\n                <div class=\\"label\\">{[print(xabber.getString(\\"vcard_jabber_id\\"))]}</div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\"info-wrap nickname-info-wrap hidden\\" title=\'{[print(xabber.getString(\\"group_settings__properties__tooltip_copy_by_click\\"))]}\'>\\n        <div class=\\"details-icon-wrap\\"><svg class=\\"details-icon mdi mdi-24px mdi-svg-template\\" data-svgname=\\"account-outline\\"></svg></div>\\n        <div class=\\"info-hover\\">\\n            <div class=\\"info nickname\\">\\n                <div class=\\"value one-line\\"></div>\\n                <div class=\\"label\\">{[print(xabber.getString(\\"vcard_nick_name\\"))]}</div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\"info-wrap personal-info-wrap hidden\\" title=\'{[print(xabber.getString(\\"group_settings__properties__tooltip_copy_by_click\\"))]}\'>\\n        <div class=\\"details-icon-wrap\\"><svg class=\\"details-icon mdi mdi-24px mdi-svg-template\\" data-svgname=\\"fullname-outline\\"></svg></div>\\n        <div class=\\"info-hover\\">\\n            <div class=\\"info first-name\\">\\n                <div class=\\"value one-line\\"></div>\\n                <div class=\\"label\\">{[print(xabber.getString(\\"vcard_given_name\\"))]}</div>\\n            </div>\\n        </div>\\n        <div class=\\"info-hover\\">\\n            <div class=\\"info last-name\\">\\n                <div class=\\"value one-line\\"></div>\\n                <div class=\\"label\\">{[print(xabber.getString(\\"vcard_family_name\\"))]}</div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\"info-wrap birthday-info-wrap hidden\\" title=\'{[print(xabber.getString(\\"group_settings__properties__tooltip_copy_by_click\\"))]}\'>\\n        <div class=\\"details-icon-wrap\\"><svg class=\\"details-icon mdi mdi-24px mdi-svg-template\\" data-svgname=\\"birthday-outline\\"></svg></div>\\n        <div class=\\"info-hover\\">\\n            <div class=\\"info birthday\\">\\n                <div class=\\"value one-line\\"></div>\\n                <div class=\\"label\\">{[print(xabber.getString(\\"vcard_birth_date\\"))]}</div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\"info-wrap site-info-wrap hidden\\" title=\'{[print(xabber.getString(\\"group_settings__properties__tooltip_copy_by_click\\"))]}\'>\\n        <i class=\\"details-icon mdi mdi-24px mdi-web\\"></i>\\n        <div class=\\"info-hover\\">\\n            <div class=\\"info url\\">\\n                <div class=\\"value one-line\\"></div>\\n                <div class=\\"label\\">{[print(xabber.getString(\\"vcard_url\\"))]}</div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\"info-wrap more\\">\\n        <div class=\\"show-vcard\\">\\n            {[print(xabber.getString(\\"contact_vcard_more\\"))]}\\n        </div>\\n    </div>\\n</div>\\n<div class=\\"full-vcard-wrap\\">\\n    <div class=\\"full-vcard-content\\">\\n        <div class=\\"vcard-header block-header\\">\\n            <div class=\\"vcard-header-title\\">\\n                <i class=\\"details-icon btn-back mdi mdi-24px mdi-arrow-left\\"></i>\\n                <span class=\\"block-name\\">{[print(xabber.getString(\\"contact_vcard_header_title\\"))]}</span>\\n            </div>\\n            <div class=\\"main-info\\">\\n                <div class=\\"avatar-wrap\\">\\n                    <div class=\\"circle-avatar\\"/>\\n                </div>\\n                <div class=\\"text-info\\">\\n                    <div class=\\"name-wrap\\"></div>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\"vcard-list\\">\\n            <div class=\\"info-wrap jid-info-wrap hidden\\" title=\'{[print(xabber.getString(\\"group_settings__properties__tooltip_copy_by_click\\"))]}\'>\\n                <div class=\\"details-icon-wrap\\"><svg class=\\"details-icon mdi mdi-24px mdi-svg-template\\" data-svgname=\\"id-outline\\"></svg></div>\\n                <div class=\\"info-hover\\">\\n                    <div class=\\"info jabber-id\\">\\n                        <div class=\\"value one-line\\"></div>\\n                        <div class=\\"label\\">{[print(xabber.getString(\\"vcard_jabber_id\\"))]}</div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\"info-wrap nickname-info-wrap hidden\\" title=\'{[print(xabber.getString(\\"group_settings__properties__tooltip_copy_by_click\\"))]}\'>\\n                <div class=\\"details-icon-wrap\\"><svg class=\\"details-icon mdi mdi-24px mdi-svg-template\\" data-svgname=\\"account-outline\\"></svg></div>\\n                <div class=\\"info-hover\\">\\n                    <div class=\\"info nickname\\">\\n                        <div class=\\"value one-line\\"></div>\\n                        <div class=\\"label\\">{[print(xabber.getString(\\"vcard_nick_name\\"))]}</div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\"info-wrap personal-info-wrap hidden\\" title=\'{[print(xabber.getString(\\"group_settings__properties__tooltip_copy_by_click\\"))]}\'>\\n                <div class=\\"details-icon-wrap\\"><svg class=\\"details-icon mdi mdi-24px mdi-svg-template\\" data-svgname=\\"fullname-outline\\"></svg></div>\\n                <div class=\\"info-hover\\">\\n                    <div class=\\"info first-name\\">\\n                        <div class=\\"value one-line\\"></div>\\n                        <div class=\\"label\\">{[print(xabber.getString(\\"vcard_given_name\\"))]}</div>\\n                    </div>\\n                </div>\\n                <div class=\\"info-hover\\">\\n                    <div class=\\"info middle-name\\">\\n                        <div class=\\"value one-line\\"></div>\\n                        <div class=\\"label\\">{[print(xabber.getString(\\"vcard_middle_name\\"))]}</div>\\n                    </div>\\n                </div>\\n                <div class=\\"info-hover\\">\\n                    <div class=\\"info last-name\\">\\n                        <div class=\\"value one-line\\"></div>\\n                        <div class=\\"label\\">{[print(xabber.getString(\\"vcard_family_name\\"))]}</div>\\n                    </div>\\n                </div>\\n                <div class=\\"info-hover\\">\\n                    <div class=\\"info fullname\\">\\n                        <div class=\\"value one-line\\"></div>\\n                        <div class=\\"label\\">{[print(xabber.getString(\\"vcard_full_name\\"))]}</div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\"info-wrap birthday-info-wrap hidden\\" title=\'{[print(xabber.getString(\\"group_settings__properties__tooltip_copy_by_click\\"))]}\'>\\n                <div class=\\"details-icon-wrap\\"><svg class=\\"details-icon mdi mdi-24px mdi-svg-template\\" data-svgname=\\"birthday-outline\\"></svg></div>\\n                <div class=\\"info-hover\\">\\n                    <div class=\\"info birthday\\">\\n                        <div class=\\"value one-line\\"></div>\\n                        <div class=\\"label\\">{[print(xabber.getString(\\"vcard_birth_date\\"))]}</div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\"info-wrap job-info-wrap hidden\\" title=\'{[print(xabber.getString(\\"group_settings__properties__tooltip_copy_by_click\\"))]}\'>\\n                <div class=\\"details-icon-wrap\\"><svg class=\\"details-icon mdi mdi-24px mdi-svg-template\\" data-svgname=\\"job-outline\\"></svg></div>\\n                <div class=\\"info-hover\\">\\n                    <div class=\\"info org-name\\">\\n                        <div class=\\"value one-line\\"></div>\\n                        <div class=\\"label\\">{[print(xabber.getString(\\"vcard_organization\\"))]}</div>\\n                    </div>\\n                </div>\\n                <div class=\\"info-hover\\">\\n                    <div class=\\"info job-title\\">\\n                        <div class=\\"value one-line\\"></div>\\n                        <div class=\\"label\\">{[print(xabber.getString(\\"vcard_title\\"))]}</div>\\n                    </div>\\n                </div>\\n                <div class=\\"info-hover\\">\\n                    <div class=\\"info org-unit\\">\\n                        <div class=\\"value one-line\\"></div>\\n                        <div class=\\"label\\">{[print(xabber.getString(\\"vcard_organization_unit\\"))]}</div>\\n                    </div>\\n                </div>\\n                <div class=\\"info-hover\\">\\n                    <div class=\\"info role\\">\\n                        <div class=\\"value one-line\\"></div>\\n                        <div class=\\"label\\">{[print(xabber.getString(\\"vcard_role\\"))]}</div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\"info-wrap site-info-wrap hidden\\" title=\'{[print(xabber.getString(\\"group_settings__properties__tooltip_copy_by_click\\"))]}\'>\\n                <i class=\\"details-icon mdi mdi-24px mdi-web\\"></i>\\n                <div class=\\"info-hover\\">\\n                    <div class=\\"info url\\">\\n                        <div class=\\"value one-line\\"></div>\\n                        <div class=\\"label\\">{[print(xabber.getString(\\"vcard_url\\"))]}</div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\"info-wrap description-info-wrap hidden\\" title=\'{[print(xabber.getString(\\"group_settings__properties__tooltip_copy_by_click\\"))]}\'>\\n                <div class=\\"details-icon-wrap\\"><svg class=\\"details-icon mdi mdi-24px mdi-svg-template\\" data-svgname=\\"description-outline\\"></svg></div>\\n                <div class=\\"info-hover\\">\\n                    <div class=\\"info description\\">\\n                        <div class=\\"value\\"></div>\\n                        <div class=\\"label\\">{[print(xabber.getString(\\"vcard_decsription\\"))]}</div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\"info-wrap phone-info-wrap hidden\\" title=\'{[print(xabber.getString(\\"group_settings__properties__tooltip_copy_by_click\\"))]}\'>\\n                <div class=\\"details-icon-wrap\\"><svg class=\\"details-icon mdi mdi-24px mdi-svg-template\\" data-svgname=\\"call-outline\\"></svg></div>\\n                <div class=\\"info-hover\\">\\n                    <div class=\\"info phone-work\\">\\n                        <div class=\\"value one-line\\"></div>\\n                        <div class=\\"label\\">{[print(xabber.getString(\\"vcard_type_work\\"))]}</div>\\n                    </div>\\n                </div>\\n                <div class=\\"info-hover\\">\\n                    <div class=\\"info phone-home\\">\\n                        <div class=\\"value one-line\\"></div>\\n                        <div class=\\"label\\">{[print(xabber.getString(\\"vcard_type_home\\"))]}</div>\\n                    </div>\\n                </div>\\n                <div class=\\"info-hover\\">\\n                    <div class=\\"info phone-mobile\\">\\n                        <div class=\\"value one-line\\"></div>\\n                        <div class=\\"label\\">{[print(xabber.getString(\\"vcard_type_mobile\\"))]}</div>\\n                    </div>\\n                </div>\\n                <div class=\\"info-hover\\">\\n                    <div class=\\"info phone-default\\">\\n                        <div class=\\"value one-line\\"></div>\\n                        <div class=\\"label\\">{[print(xabber.getString(\\"vcard_telephone\\"))]}</div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\"info-wrap email-info-wrap hidden\\" title=\'{[print(xabber.getString(\\"group_settings__properties__tooltip_copy_by_click\\"))]}\'>\\n                <div class=\\"details-icon-wrap\\"><svg class=\\"details-icon mdi mdi-24px mdi-svg-template\\" data-svgname=\\"email-outline\\"></svg></div>\\n                <div class=\\"info-hover\\">\\n                    <div class=\\"info email-work\\">\\n                        <div class=\\"value one-line\\"></div>\\n                        <div class=\\"label\\">{[print(xabber.getString(\\"vcard_type_work\\"))]}</div>\\n                    </div>\\n                </div>\\n                <div class=\\"info-hover\\">\\n                    <div class=\\"info email-home\\">\\n                        <div class=\\"value one-line\\"></div>\\n                        <div class=\\"label\\">{[print(xabber.getString(\\"vcard_type_personal\\"))]}</div>\\n                    </div>\\n                </div>\\n                <div class=\\"info-hover\\">\\n                    <div class=\\"info email-default\\">\\n                        <div class=\\"value one-line\\"></div>\\n                        <div class=\\"label\\">{[print(xabber.getString(\\"vcard_email\\"))]}</div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\"info-wrap address-info-wrap hidden\\" title=\'{[print(xabber.getString(\\"group_settings__properties__tooltip_copy_by_click\\"))]}\'>\\n                <div class=\\"details-icon-wrap\\"><svg class=\\"details-icon mdi mdi-24px mdi-svg-template\\" data-svgname=\\"job-outline\\"></svg></div>\\n                <div class=\\"info-hover\\">\\n                    <div class=\\"info address-home\\">\\n                        <div class=\\"pobox value one-line\\"></div>\\n                        <div class=\\"extadd value one-line\\"></div>\\n                        <div class=\\"street value one-line\\"></div>\\n                        <div class=\\"locality value one-line\\"></div>\\n                        <div class=\\"region value one-line\\"></div>\\n                        <div class=\\"pcode value one-line\\"></div>\\n                        <div class=\\"country value one-line\\"></div>\\n                        <div class=\\"label\\">{[print(xabber.getString(\\"vcard_type_home\\"))]}</div>\\n                    </div>\\n                </div>\\n                <div class=\\"info-hover\\">\\n                    <div class=\\"info address-work\\">\\n                        <div class=\\"pobox value one-line\\"></div>\\n                        <div class=\\"extadd value one-line\\"></div>\\n                        <div class=\\"street value one-line\\"></div>\\n                        <div class=\\"locality value one-line\\"></div>\\n                        <div class=\\"region value one-line\\"></div>\\n                        <div class=\\"pcode value one-line\\"></div>\\n                        <div class=\\"country value one-line\\"></div>\\n                        <div class=\\"label\\">{[print(xabber.getString(\\"vcard_type_work\\"))]}</div>\\n                    </div>\\n                </div>\\n                <div class=\\"info-hover\\">\\n                    <div class=\\"info address-default\\">\\n                        <div class=\\"extadd value one-line\\"></div>\\n                        <div class=\\"street value one-line\\"></div>\\n                        <div class=\\"locality value one-line\\"></div>\\n                        <div class=\\"region value one-line\\"></div>\\n                        <div class=\\"pcode value one-line\\"></div>\\n                        <div class=\\"country value one-line\\"></div>\\n                        <div class=\\"label\\">{[print(xabber.getString(\\"vcard_address\\"))]}</div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\"resources-block-wrap hidden\\">\\n                <div class=\\"resources-wrap\\">\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>");\n\n//# sourceURL=webpack://xabber.web/./templates/vcard/vcard_right.html?./node_modules/raw-loader/dist/cjs.js')},"./src/accounts.js":(module,exports,__webpack_require__)=>{eval("/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ \"./node_modules/console-browserify/index.js\");\n/* provided dependency */ var WaveSurfer = __webpack_require__(/*! wavesurfer */ \"./node_modules/wavesurfer/dist/wavesurfer.js\");\nvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    return function (xabber) {\n        let env = xabber.env,\n            constants = env.constants,\n            templates = env.templates.accounts,\n            utils = env.utils,\n            $ = env.$,\n            $iq = env.$iq,\n            $pres = env.$pres,\n            Strophe = env.Strophe,\n            _ = env._,\n            moment = env.moment,\n            Images = utils.images,\n            pretty_datetime = (timestamp) => { return utils.pretty_datetime(timestamp, (xabber.settings.language == 'ru-RU' || xabber.settings.language == 'default' && xabber.get(\"default_language\") == 'ru-RU') && 'D MMMM YYYY HH:mm:ss')};\n\n\n        xabber.Account = Backbone.Model.extend({\n                idAttribute: 'jid',\n\n                defaults: {\n                    enabled: true,\n                    auth_type: \"password\",\n                    status: \"online\",\n                    status_message: \"\",\n                    priority: 67,\n                    auto_login_xa: true,\n                    groupchat_servers_list: []\n                },\n\n                initialize: function (_attrs, options) {\n                    this.retraction_version = null;\n                    options || (options = {});\n                    if (_attrs.is_new && !options.auth_view) {\n                        this.is_invalid = true;\n                        this.on(\"destroy\", this.onDestroy, this);\n                        return;\n                    }\n                    this.last_msg_timestamp = 0;\n                    this.settings = xabber.account_settings_list.get(_attrs.jid);\n                    if (!this.settings) {\n                        this.settings = xabber.account_settings_list.create({\n                            jid: _attrs.jid,\n                            timestamp: utils.now(),\n                            auto_login_xa: this.get('auto_login_xa'),\n                            to_sync: xabber.api_account && xabber.api_account.get('sync_all')\n                        });\n                    }\n                    let settings = _.clone(this.settings.attributes);\n                    settings.color || (settings.color = this.collection.getDefaultColor());\n                    settings.order || (settings.order = this.collection.getLastOrder() + 1);\n                    this.settings.save(settings);\n                    this.settings.on(\"delete_account\", this.deleteAccount, this);\n                    let attrs = _.clone(_attrs);\n                    attrs.name || (attrs.name = attrs.jid);\n                    attrs.image || (attrs.image = Images.getDefaultAvatar(attrs.name));\n                    this.cached_image = Images.getCachedImage(attrs.image);\n                    attrs.vcard = utils.vcard.getBlank(attrs.jid);\n                    attrs.photo_hash = '';\n                    this.save(attrs);\n                    this.auth_view = options.auth_view || null;\n                    this.session = new Backbone.Model({\n                        connected: false,\n                        reconnected: false,\n                        conn_retries: 0,\n                        conn_feedback: xabber.getString(\"connection__error__text_disconnected\")\n                    });\n                    this._waiting_code = false;\n                    this.code_requests = [];\n                    this.gallery_code_requests = [];\n                    this.xabber_auth = {};\n                    this.session.on(\"change:connected\", this.onChangedConnected, this);\n                    this.CONNECTION_URL = _attrs.websocket_connection_url || constants.CONNECTION_URL;\n                    this.conn_manager = new Strophe.ConnectionManager(this.CONNECTION_URL, {'x-token': true});\n                    this.connection = this.conn_manager.connection;\n                    this.get('x_token') && (this.connection.x_token = this.get('x_token'));\n                    if (this.connection.x_token && this.connection.x_token.counter && !this.get('hotp_counter'))\n                        this.save({\n                            hotp_counter: this.connection.x_token.counter,\n                        });\n                    this.get('hotp_counter') && (this.connection.counter = this.get('hotp_counter'));\n                    this.on(\"destroy\", this.onDestroy, this);\n                    this._added_pres_handlers = [];\n                    this._pending_stanzas = [];\n                    this._pending_messages = [];\n                    this.dfd_presence = new $.Deferred();\n                    this.resources = new xabber.AccountResources(null, {account: this});\n                    this.password_view = new xabber.ChangePasswordView({model: this});\n                    this.vcard_edit = new xabber.VCardEditView({model: this});\n                    this.updateColorScheme();\n                    this.settings.on(\"change:color\", this.updateColorScheme, this);\n                    this.on(\"change:photo_hash\", this.getVCard, this);\n                    _.each(this._init_plugins, (plugin) => {\n                        plugin.call(this);\n                    });\n                    this.connection.xmlInput = function (xml) {\n                        xabber.info('input main connection');\n                        xabber.info(xml);\n                    };\n                    this.connection.xmlOutput = function (xml) {\n                        xabber.info('output main connection');\n                        xabber.info(xml);\n                    };\n                    this.once(\"start\", this.start, this);\n                    if (xabber.api_account)\n                        xabber.api_account.on(\"settings_result\", function (result) {\n                            if (result && this.settings.get('token')) {\n                                this.save({auth_type: 'token'});\n                            }\n                            this.trigger('start');\n                        }, this);\n                    else\n                        xabber.on(\"bind_xmpp_accounts\", () => {\n                            if (this.settings.get('token'))\n                                this.save({auth_type: 'token'});\n                            this.trigger('start');\n                        }, this);\n                },\n\n                start: function () {\n                    this.get('enabled') && this.isOnline() && this.connect();\n                },\n\n                _init_plugins: [],\n\n                getPassword: function () {\n                    try {\n                        return utils.atou(this.get('password'));\n                    } catch (e) {\n                        return '';\n                    }\n                },\n\n                isConnected: function () {\n                    return this.session && this.session.get('connected');\n                },\n\n                isOnline: function () {\n                    return this.get('status') !== 'offline';\n                },\n\n                sendMsg: function (stanza, callback) {\n                    let res = this.connection.authenticated && !this.connection.disconnecting && this.session.get('connected') && this.get('status') !== 'offline';\n                    if (res) {\n                        this.connection.send(stanza);\n                        callback && callback();\n                    } else {\n                        console.log('message went to pending');\n                        console.log({stanza: stanza, callback: callback, is_msg: true});\n                        this._pending_stanzas.push({stanza: stanza, callback: callback, is_msg: true});\n                    }\n                    return res;\n                },\n\n                sendMsgFast: function (stanza, callback) {\n                    // let res = this.fast_connection && !this.fast_connection.disconnecting && this.fast_connection.authenticated && this.fast_connection.connected && this.get('status') !== 'offline';\n                    // if (res) {\n                    //     this.fast_connection.send(stanza);\n                    //     callback && callback();\n                    //     return res;\n                    // } else {\n                    return this.sendMsg(stanza, callback);\n                    // }\n                },\n\n                getConnectionForIQ: function () {\n                    let res = this.fast_connection && !this.fast_connection.disconnecting && this.fast_connection.authenticated && this.fast_connection.connected && this.get('status') !== 'offline';\n                    if (res) {\n                        return this.fast_connection;\n                    } else\n                        return this.connection;\n                },\n\n                sendIQFast: function () {\n                    let res = this.fast_connection && !this.fast_connection.disconnecting && this.fast_connection.authenticated && this.fast_connection.connected && this.get('status') !== 'offline';\n                    if (res) {\n                        this.fast_connection.sendIQ.apply(this.fast_connection, arguments);\n                        return res;\n                    } else\n                        return this.sendIQ.apply(this, arguments);\n                },\n\n                sendFast: function (stanza, callback, errback) {\n                    if ($(stanza.nodeTree).first().is('message')) {\n                        this.sendMsgFast(stanza, callback);\n                    } else {\n                        this.sendIQFast(stanza, callback, errback);\n                    }\n                },\n\n                pubAvatar: function (image, callback, errback) {\n                    if (!image) {\n                        this.removeAvatar(callback, errback);\n                        return;\n                    }\n                    let dfd = new $.Deferred();\n\n                    dfd.done((data, http_avatar) => {\n                        if (http_avatar) {\n                            let avatar_hash = data.hash || image.hash || sha1(image.base64),\n                                iq_pub_metadata = $iq({type: 'set'})\n                                    .c('pubsub', {xmlns: Strophe.NS.PUBSUB})\n                                    .c('publish', {node: Strophe.NS.PUBSUB_AVATAR_METADATA})\n                                    .c('item', {id: avatar_hash})\n                                    .c('metadata', {xmlns: Strophe.NS.PUBSUB_AVATAR_METADATA})\n                                    .c('info', {bytes: data.size, id: avatar_hash, type: data.type, url: data.file});\n                            data.thumbnails.forEach((thumbnail) => {\n                                iq_pub_metadata.c('thumbnail', {\n                                    xmlns: Strophe.NS.PUBSUB_AVATAR_METADATA_THUMBNAIL,\n                                    url: thumbnail.url,\n                                    width: thumbnail.width,\n                                    height: thumbnail.height,\n                                }).up()\n                            })\n                            this.sendIQFast(iq_pub_metadata, () => {\n                                    callback && callback(avatar_hash);\n                                },\n                                function (data_error) {\n                                    errback && errback(data_error);\n                                });\n                        }\n                        else {\n                            let avatar_hash = image.hash || sha1(image.base64),\n                                iq_pub_data = $iq({type: 'set'})\n                                    .c('pubsub', {xmlns: Strophe.NS.PUBSUB})\n                                    .c('publish', {node: Strophe.NS.PUBSUB_AVATAR_DATA})\n                                    .c('item', {id: avatar_hash})\n                                    .c('data', {xmlns: Strophe.NS.PUBSUB_AVATAR_DATA}).t(data),\n                                iq_pub_metadata = $iq({type: 'set'})\n                                    .c('pubsub', {xmlns: Strophe.NS.PUBSUB})\n                                    .c('publish', {node: Strophe.NS.PUBSUB_AVATAR_METADATA})\n                                    .c('item', {id: avatar_hash})\n                                    .c('metadata', {xmlns: Strophe.NS.PUBSUB_AVATAR_METADATA})\n                                    .c('info', {bytes: image.size, id: avatar_hash, type: image.type});\n                            this.sendIQFast(iq_pub_data, () => {\n                                    this.sendIQFast(iq_pub_metadata, () => {\n                                            callback && callback(avatar_hash);\n                                        },\n                                        function (data_error) {\n                                            errback && errback(data_error);\n                                        });\n                                },\n                                (data_error) => {\n                                    errback && errback(data_error);\n                                });\n                        }\n                    });\n                    if (image.uploaded){\n                        dfd.resolve(image, true)\n                    }\n                    else if (this.get('gallery_token') && this.get('gallery_url') && !image.generated && !image.uploaded){\n                        let file = image.name ? image : image.file;\n                        this.uploadAvatar(file, (res) => {\n                            if (res.thumbnails.length || res.file){\n                                res.type = file.type;\n                                dfd.resolve(res, true)\n                            } else\n                                dfd.resolve(image.base64)\n                        }, (res) => {\n                            dfd.resolve(image.base64)\n                        });\n                    } else\n                        dfd.resolve(image.base64)\n                },\n\n                removeAvatar: function (callback, errback) {\n                    let iq_pub_metadata = $iq({type: 'set'})\n                        .c('pubsub', {xmlns: Strophe.NS.PUBSUB})\n                        .c('publish', {node: Strophe.NS.PUBSUB_AVATAR_METADATA})\n                        .c('item')\n                        .c('metadata', {xmlns: Strophe.NS.PUBSUB_AVATAR_METADATA});\n                    this.sendIQFast(iq_pub_metadata, () => {\n                            callback && callback();\n                        },\n                        function () {\n                            errback && errback();\n                        });\n                },\n\n                getAvatar: function (avatar, callback, errback) {\n                    let iq_request_avatar = $iq({type: 'get', to: this.get('jid')})\n                        .c('pubsub', {xmlns: Strophe.NS.PUBSUB})\n                        .c('items', {node: Strophe.NS.PUBSUB_AVATAR_DATA})\n                        .c('item', {id: avatar});\n                    this.sendIQFast(iq_request_avatar, (iq) => {\n                        let pubsub_avatar = $(iq).find('data').text();\n                        if (pubsub_avatar == \"\")\n                            errback && errback(xabber.getString(\"pubsub__error__text_empty_node\"));\n                        else\n                            callback && callback(pubsub_avatar);\n                    });\n                },\n\n                sendIQ: function () {\n                    let res = this.connection.authenticated && !this.connection.disconnecting && this.session.get('connected') && this.get('status') !== 'offline';\n                    if (res) {\n                        let elem = arguments[0];\n                        if (typeof(elem.tree) === \"function\" && elem.tree().getAttribute('type') == 'get') {\n                            let lang = xabber.settings.language;\n                            (lang == 'default') && (lang = xabber.get('default_language'));\n                            elem.tree().setAttribute('xml:lang', lang);\n                        }\n                        this.connection.sendIQ.apply(this.connection, arguments);\n                    } else {\n                        if (!(arguments[0] && $(arguments[0].nodeTree).find('query[xmlns=\"' + Strophe.NS.MAM + '\"]').length)) {\n                            this._pending_stanzas.push({stanza: arguments, is_iq: true});\n                        }\n                    }\n                    return res;\n                },\n\n                parseDataForm: function ($dataform, options) {\n                    options = options || {};\n                    let type = $dataform.attr('type'),\n                        title = $dataform.children('title').text(),\n                        instructions = $dataform.children('instructions').text(),\n                        fields = [],\n                        data_form = {};\n                    $dataform.children('field').each((idx, field) => {\n                        let $field = $(field),\n                            attrs = {},\n                            field_var = $field.attr('var'),\n                            field_type = $field.attr('type'),\n                            field_label = $field.attr('label'),\n                            field_value = [], field_options = [];\n                        $field.children('value').each((i, value) => {\n                            field_value.push($(value).text());\n                        });\n                        $field.children('option').each((i, option) => {\n                            let $option = $(option),\n                                val = $option.children('value').text(),\n                                lbl = $option.attr('label');\n                            field_options.push({value: val, label: lbl});\n                        });\n                        field_var && (attrs.var = field_var);\n                        field_type && (attrs.type = field_type);\n                        field_label && (attrs.label = field_label);\n                        field_value.length && (attrs.values = field_value);\n                        field_options.length && (attrs.options = field_options);\n                        fields.push(attrs);\n                    });\n                    type && (data_form.type = type);\n                    title && (data_form.title = title);\n                    instructions && (data_form.instructions = instructions);\n                    fields.length && (data_form.fields = fields);\n                    return data_form;\n                },\n\n                addDataFormToStanza: function ($stanza, data_form) {\n                    $stanza.c('x', {xmlns: Strophe.NS.DATAFORM, type: 'submit'});\n                    data_form.title && $stanza.c('title').t(data_form.title).up();\n                    data_form.instructions && $stanza.c('instructions').t(data_form.instructions).up();\n                    data_form.fields.forEach((field) => {\n                        let field_attrs = _.clone(field);\n                        delete field_attrs.values;\n                        delete field_attrs.options;\n                        $stanza.c('field', field_attrs);\n                        field.values && field.values.forEach((value) => {\n                            $stanza.c('value').t(value).up();\n                        });\n                        $stanza.up();\n                    });\n                    return $stanza;\n                },\n\n                sendPres: function (stanza) {\n                    if (this.connection.authenticated && this.session.get('connected')) {\n                        this.connection.send(stanza);\n                    } else {\n                        this._pending_stanzas.push({stanza: stanza});\n                    }\n                    return this.connection.authenticated;\n                },\n\n                verifyXabberAccount: function (code, callback) {\n                    let request = {\n                        type: 'POST',\n                        url: constants.API_SERVICE_URL + '/accounts/xmpp_auth/',\n                        contentType: \"application/json\",\n                        dataType: 'json',\n                        data: JSON.stringify({ code: code, jid: this.connection.jid}),\n                        success: function (data, textStatus, jqXHR) {\n                            callback && callback(data.token);\n                        }\n                    };\n                    $.ajax(request);\n                },\n\n                createFastConnection: function () {\n                    let jid = this.get('jid'),\n                        auth_type = this.conn_manager.auth_type,\n                        password;\n                    if (auth_type === 'token') {\n                        password = this.settings.get('token');\n                    } else if (auth_type === 'x-token') {\n                        if (this.get('x_token') && (Number(this.get('x_token').expire)*1000 > moment.now() || !this.get('x_token').expire))\n                            password = this.get('x_token').token;\n                        else\n                            password = undefined;\n                    } else {\n                        password = this.getPassword();\n                    }\n                    if (!password) {\n                        let attrs = {login: true};\n                        options.token_invalidated && (attrs.token_invalidated = true);\n                        this.password_view.show(attrs);\n                        return;\n                    }\n                    if (!this.fast_conn_manager) {\n                        this.fast_conn_manager = new Strophe.ConnectionManager(this.CONNECTION_URL);\n                        this.fast_connection = this.fast_conn_manager.connection;\n                        this.fast_connection.account = this;\n                        this.fast_connection.xmlInput = function (xml) {\n                            xabber.info('input fast connection');\n                            xabber.info(xml);\n                        };\n                        this.fast_connection.xmlOutput = function (xml) {\n                            xabber.info('output fast connection');\n                            xabber.info(xml);\n                        };\n                    } else{\n                        this.fast_connection.disconnect();\n                        return this.createFastConnection();\n                    }\n                    if (auth_type === 'x-token' && this.fast_connection) {\n                        this.fast_connection.x_token = this.get('x_token');\n                        this.fast_connection.counter = this.get('hotp_counter');\n                        this.fast_connection.x_token_auth = true;\n                    }\n                    this.fast_conn_manager.connect(auth_type, jid, password, this.onFastConnected.bind(this));\n                },\n\n                connect: function (options) {\n                    options = options || {};\n                    let jid = this.get('jid'),\n                        auth_type = this.get('auth_type'),\n                        password;\n                    jid += '/xabber-web-' + xabber.get('client_id');\n                    this.connection.x_token = this.get('x_token');\n                    this.connection.counter = this.get('hotp_counter');\n                    this.connection.account = this;\n                    if (this.connection.x_token && !this.connection.counter)\n                        this.connection.counter = 0;\n                    if (auth_type === 'token') {\n                        password = this.settings.get('token');\n                    } else if (auth_type === 'x-token') {\n                        if (this.get('x_token') && (Number(this.get('x_token').expire)*1000 > moment.now() || !this.get('x_token').expire))\n                            password = this.get('x_token').token;\n                        else\n                            password = undefined;\n                    } else {\n                        password = this.getPassword();\n                    }\n                    if (!password) {\n                        let attrs = {login: true};\n                        options.token_invalidated && (attrs.token_invalidated = true);\n                        this.password_view.show(attrs);\n                        return;\n                    }\n                    this.session.set({\n                        connected: false,\n                        reconnected: false,\n                        reconnecting: false,\n                        conn_retries: 0,\n                        conn_feedback: xabber.getString(\"application_state_connecting\"),\n                        auth_failed: false\n                    });\n                    this.restoreStatus();\n                    this.conn_manager.connect(auth_type, jid, password, this.connectionCallback.bind(this));\n                },\n\n                reconnect: function (is_fast) {\n                    let conn_retries = this.session.get('conn_retries'),\n                        timeout = conn_retries < 3 ? constants.RECONNECTION_TIMEOUTS[conn_retries] : 20000;\n                    is_fast && (timeout = 1500);\n                    this.session.set({\n                        connected: false,\n                        reconnected: false,\n                        reconnecting: true,\n                        conn_retries: ++conn_retries,\n                        conn_feedback:  xabber.getString(\"application_state_reconnect_after_some_seconds\", [timeout/1000]),\n                        auth_failed: false\n                    });\n                    if (this.get('x_token'))\n                        this.connection.x_token = this.get('x_token');\n                    this.connection.account = this;\n                    setTimeout(() => {\n                        this.connFeedback(xabber.getString(\"application_state_connecting\"));\n                        this.restoreStatus();\n                        this.connection.reset();\n                        this.conn_manager.reconnect(this.reconnectionCallback.bind(this));\n                    }, timeout);\n                },\n\n                connectionCallback: function (status, condition, elem) {\n                    if (this.session.get('reconnecting')) {\n                        xabber.info('ignore connection callback for status: '+constants.CONN_STATUSES[status]);\n                        return;\n                    }\n                    this.auth_view && this.loginCallback(status, condition);\n                    this.session.set({conn_status: status, conn_condition: condition});\n                    if ((status === Strophe.Status.ERROR) && (condition === 'conflict') && !this.session.get('delete')) {\n                        this.onConnectionConflict();\n                    }\n                    if (status === Strophe.Status.CONNECTED) {\n                        this.session.set('on_token_revoked', false);\n                        if (this.connection.x_token) {\n                            this.save({\n                                auth_type: 'x-token',\n                                x_token: this.connection.x_token,\n                                hotp_counter: this.connection.counter,\n                            });\n                            this.conn_manager.auth_type = 'x-token';\n                        }\n\n                        if (this.get('registration_nickname')){\n                            let vcard = utils.vcard.getBlank(this.get('jid'));\n                            vcard.nickname = this.get('registration_nickname');\n                            this.setVCard(vcard,\n                                () => {\n                                    this.getVCard();\n                                    this.set('registration_nickname', null)\n                                },\n                                function () {\n                                    utils.dialogs.error(xabber.getString(\"account_user_info_save_fail\"));\n                                    this.set('registration_nickname', null)\n                                }\n                            );\n                        }\n                        this.createFastConnection();\n                        this.session.set({connected: true, reconnected: false});\n                    } else if (status === Strophe.Status.AUTHFAIL) {\n                        if ((this.get('auth_type') === 'x-token' || this.connection.x_token)){\n                            if (this.session.get('conn_retries') <= 3 && $(elem).find('credentials-expired').length === 0)\n                                this.reconnect(true);\n                            else\n                                this.onTokenRevoked();\n                        }\n                        else\n                            this.onAuthFailed();\n                    } else if (status === Strophe.Status.DISCONNECTED) {\n                        if (this.session.get('on_token_revoked'))\n                            return;\n                        this.connection.flush();\n                        this.session.set({connected: false});\n                    }\n                },\n\n                connectXabberAccount: function () {\n                    let iq_private_storage = $iq({type: 'get'}).c('query', {xmlns: Strophe.NS.PRIVATE_STORAGE}).c('storage', {xmlns:'xabber:options'});\n                    this.sendIQFast(iq_private_storage, (iq) => {\n                        if (($(iq).find('option').attr('type') == 'bind') && ($(iq).find('option').text() == 1)) {\n                            this.authXabberAccount();\n                        }\n                    });\n                },\n\n                authXabberAccount: function (callback) {\n                    this.requestPassword((data) => {\n                        this.xabber_auth = { api_jid: data.api_jid, request_id: data.request_id };\n                        if (this.code_requests.length > 0) {\n                            let verifying_code = this.code_requests.find(verifying_mess => (verifying_mess.jid === this.xabber_auth.api_jid && verifying_mess.id === this.xabber_auth.request_id));\n                            if (verifying_code) {\n                                let idx_verifying_code = this.code_requests.indexOf(verifying_code);\n                                (idx_verifying_code > -1) && this.code_requests.splice(idx_verifying_code, 1);\n                                this.verifyXabberAccount(verifying_code.code, (data) => {\n                                    this._waiting_code = false;\n                                    let iq_send_auth_mark = $iq({type: 'set'})\n                                        .c('query', {xmlns: Strophe.NS.PRIVATE_STORAGE})\n                                        .c('storage', {xmlns:'xabber:options'})\n                                        .c('option', {type: 'bind'}).t(1);\n                                    if (xabber.api_account) {\n                                        xabber.api_account.save('token', data);\n                                        xabber.api_account.login_by_token();\n                                    }\n                                    this.sendIQFast(iq_send_auth_mark);\n                                    callback && callback();\n                                });\n                            }\n                            if (this.code_requests.length) {\n                                let msg_attrs = {\n                                    from_jid: this.code_requests[0].jid,\n                                    message: xabber.getString(\"xmpp_confirm__text_message__verification_code_is\", [Number(this.code_requests[0].code)]),\n                                    is_archived: false\n                                };\n                                this.createMessageFromIQ(msg_attrs);\n                            }\n                        }\n                    });\n                },\n\n                requestPassword: function(callback) {\n                    let request = {\n                        type: 'POST',\n                        url: constants.API_SERVICE_URL + '/accounts/xmpp_code_request/',\n                        contentType: \"application/json\",\n                        dataType: 'json',\n                        data: JSON.stringify({ jid: this.connection.jid, type: 'iq'}),\n                        success: function (data, textStatus, jqXHR) {\n                            callback && callback(data);\n                        }\n                    };\n                    this._waiting_code = true;\n                    $.ajax(request);\n                },\n\n                reconnectionCallback: function (status, condition, elem) {\n                    if (!this.session.get('reconnecting')) {\n                        xabber.info('ignore reconnection callback for status: '+constants.CONN_STATUSES[status]);\n                        return;\n                    }\n                    this.session.set({conn_status: status, conn_condition: condition});\n                    if (status === Strophe.Status.CONNECTED) {\n                        this.session.set('on_token_revoked', false);\n                        if (this.connection.x_token) {\n                            this.save({\n                                auth_type: 'x-token',\n                                x_token: this.connection.x_token,\n                                hotp_counter: this.connection.counter,\n                            });\n                        }\n                        this.createFastConnection();\n                        this.connection.connect_callback = this.connectionCallback.bind(this);\n                        this.session.set({connected: true, reconnected: true,\n                            reconnecting: false, conn_retries: 0});\n                    } else if (status === Strophe.Status.AUTHFAIL) {\n                        if ((this.get('auth_type') === 'x-token' || this.connection.x_token)) {\n                            if ($(elem).find('credentials-expired').length > 0)\n                                this.onTokenRevoked();\n                            else if (this.session.get('conn_retries') > 2 )\n                                this.onAuthFailed();\n                            else\n                                this.reconnect(true);\n                        }\n                        else\n                            this.onAuthFailed();\n                    } else if (status === Strophe.Status.DISCONNECTED) {\n                        if (this.session.get('on_token_revoked'))\n                            return;\n                        this.connection.flush();\n                        let max_retries = xabber.settings.max_connection_retries;\n                        if (max_retries === -1 || this.session.get('conn_retries') < max_retries) {\n                            this.reconnect();\n                        } else {\n                            this.connFeedback(xabber.getString(\"connection__error__connection_lost\"));\n                        }\n                    }\n                },\n\n                registerCallback: function (status, condition, error_text) {\n                    if (status === Strophe.Status.REGISTER) {\n                        this.connection.register.fields.username = Strophe.getNodeFromJid(this.get('jid'));\n                        this.connection.register.fields.password = this.getPassword();\n                        if (xabber.url_params && xabber.url_params.rkey) {\n                            this.connection.register.fields.key = xabber.url_params.rkey;\n                        }\n                        this.connection.register.submit();\n                    } else if (status === Strophe.Status.REGISTERED) {\n                        let nickname = this.auth_view.$nickname_input.val()\n                        this.auth_view.data.set('step',6);\n                        if(nickname){\n                            this.set('registration_nickname', nickname)\n                        }\n                    } else if (status === Strophe.Status.CONFLICT) {\n                        this.auth_view.errorRegistrationFeedback({jid: xabber.getString(\"label_xmpp_id\")});\n                        this.auth_view.data.set('step', 3)\n                    } else if (status === Strophe.Status.NOTACCEPTABLE) {\n                        if (error_text)\n                            this.auth_view.errorRegistrationFeedback({password: error_text});\n                        else {\n                            condition = condition ? ': ' + condition : '';\n                            this.auth_view.errorRegistrationFeedback({password: xabber.getString(\"xmpp_login__registration_not_filled\") + condition});\n                        }\n                        this.auth_view.data.set('step', 4)\n                    } else if (status === Strophe.Status.REGIFAIL) {\n                        if (error_text)\n                            this.auth_view.errorRegistrationFeedback({password: error_text});\n                        else {\n                            condition = condition ? ': ' + condition : '';\n                            this.auth_view.errorRegistrationFeedback({password: xabber.getString(\"xmpp_login__registration_failed\") + condition});\n                        }\n                        this.auth_view.data.set('step', 4)\n                    }\n                },\n\n                changePasswordCallback: function (status, condition) {\n                    if (this.settings_right && this.settings_right.children && this.settings_right.children.account_password_view){\n                        if (status === Strophe.Status.REGISTERED) {\n                            this.settings_right.children.account_password_view.successFeedback();\n                        } else if (status === Strophe.Status.CONFLICT\n                            || status === Strophe.Status.NOTACCEPTABLE\n                            || status === Strophe.Status.REGIFAIL) {\n                            condition = condition ? ': ' + condition : '';\n                            this.settings_right.children.account_password_view.errorFeedback({password: xabber.getString(\"password_changed_fail\") + condition});\n                        } else if (status === Strophe.Status.AUTHFAIL) {\n                            this.settings_right.children.account_password_view.errorFeedback({old_password: xabber.getString(\"AUTHENTICATION_FAILED\")});\n                        } else if (status === Strophe.Status.CONNECTED) {\n                            this.change_password_connection.register.fields.username = Strophe.getNodeFromJid(this.get('jid'));\n                            this.change_password_connection.register.fields.password = this.settings_right.children.account_password_view.$password_input.val().trim();\n                            this.change_password_connection.register.submit();\n                        } else if (status === Strophe.Status.DISCONNECTED) {\n                            this.change_password_connection_manager = undefined;\n                            this.change_password_connection = undefined;\n                        }\n                    }\n                },\n\n                loginCallback: function (status, condition) {\n                    if (status === Strophe.Status.CONNECTING) {\n                        if (this.auth_view.stepped_auth){\n                            this.auth_view.resetAuthStepper()\n                        }\n                    } else if (status === Strophe.Status.CONNECTED) {\n                        this.save('is_new', undefined);\n                        if (this.auth_view.stepped_auth && !this.auth_view.data.get('registration'))\n                            this.auth_view.authStepperStart();\n                        else{\n                            this.auth_view.endAuth();\n                        }\n\n                    } else if (_.contains(constants.BAD_CONN_STATUSES, status)) {\n                        let stepper_auth_error = false;\n                        if (status === Strophe.Status.ERROR) {\n                            status = xabber.getString(\"CONNECTION_FAILED\");\n                        } else if (status === Strophe.Status.CONNFAIL) {\n                            status = xabber.getString(\"CONNECTION_FAILED\");\n                        } else if (status === Strophe.Status.AUTHFAIL) {\n                            status = xabber.getString(\"AUTHENTICATION_FAILED\");\n                            stepper_auth_error = true;\n                        } else if (status === Strophe.Status.DISCONNECTED) {\n                            status = xabber.getString(\"connection__error__text_disconnected\");\n                        } else if (status === Strophe.Status.CONNTIMEOUT) {\n                            status = xabber.getString(\"connection__error__text_timeout_expired\");\n                        }\n                        condition = condition ? ': ' + condition : '';\n                        if (this.auth_view.stepped_auth)\n                            this.auth_view.authStepperError(stepper_auth_error, {password: status + condition});\n                        else\n                            this.auth_view.errorFeedback({password: status + condition});\n                        this.get('is_new') && this.destroy();\n                    }\n                },\n\n                onAuthFailed: function () {\n                    if (!this.auth_view){\n                        utils.dialogs.error(xabber.getString(\"connection__error__text_authentication_failed\", [this.get('jid')]));\n                        this.password_view.show();\n                    }\n                    this.session.set({\n                        auth_failed: true,\n                        connected: false,\n                        no_reconnect: true\n                    });\n                    this.save({old_device_token: this.get('x_token'), auth_type: 'password', password: null, x_token: null});\n                    this.connection.pass = \"\";\n                    this.trigger('deactivate', this);\n                    this.connFeedback(xabber.getString(\"connection__error__text_authentication_failed_short\"));\n                },\n\n                onConnectionConflict: function () {\n                    utils.dialogs.error(xabber.getString(\"connection__error__text_connection_conflict\", [this.get('jid')]));\n                    this.session.set({\n                        auth_failed: true,\n                        no_reconnect: true\n                    });\n                    this.trigger('deactivate', this);\n                    this.connFeedback(xabber.getString(\"connection__error__text_connection_conflict_short\"));\n                },\n\n                getAllXTokens: function () {\n                    let tokens_list = [],\n                        iq = $iq({\n                            type: 'get',\n                            to: this.connection.domain\n                        }).c('query', {xmlns: `${Strophe.NS.AUTH_DEVICES}#items`});\n                    this.sendIQFast(iq, (tokens) => {\n                        $(tokens).find('device').each((idx, token) => {\n                            let $token = $(token),\n                                client = $token.find('client').text(),\n                                device = $token.find('info').text(),\n                                description = $token.find('description').text(),\n                                token_uid = $token.attr('id'),\n                                expire = Number($token.find('expire').text())*1000,\n                                last_auth = Number($token.find('last-auth').text())*1000,\n                                ip_address = $token.find('ip').text();\n                            tokens_list.push({client: client, device: device, description: description, token_uid: token_uid, last_auth: last_auth, expire: expire, ip: ip_address});\n                        });\n                        this.x_tokens_list = tokens_list;\n                        this.settings_right && this.settings_right.updateXTokens();\n                    });\n                },\n\n                onTokenRevoked: function () {\n                    if (xabber.api_account && xabber.api_account.get('xmpp_binding') === this.get('jid')) {\n                        xabber.trigger('quit_accounts');\n                        return;\n                    }\n                    if (!this.auth_view) {\n                        utils.dialogs.error(xabber.getString(\"connection__error__text_token_invalidated\", [this.get('jid')]));\n                    }\n                    this.session.set({\n                        on_token_revoked: true,\n                        auth_failed: true,\n                        connected: false,\n                        no_reconnect: true\n                    });\n                    this.save({auth_type: 'password', password: null, x_token: null});\n                    this.connection.pass = \"\";\n                    this.trigger('deactivate', this);\n                    this.connFeedback(xabber.getString(\"connection__error__text_token_invalidated_short\"));\n                    this.deleteAccount()\n                },\n\n                onChangedConnected: function () {\n                    if (this.isConnected()) {\n                        this.session.get('reconnected') ? this.onReconnected() : this.onConnected();\n                    } else {\n                        this.onDisconnected();\n                    }\n                },\n\n                onConnected: function () {\n                    this.connFeedback(xabber.getString(\"account_state_connected\"));\n                    this.jid = this.connection.jid;\n                    this.resource = Strophe.getResourceFromJid(this.jid);\n                    this.domain = Strophe.getDomainFromJid(this.jid);\n                    this.trigger('activate', this);\n                    this.session.get('no_reconnect') && this.session.set('no_reconnect', false);\n                    this.afterConnected();\n                    _.each(this._after_connected_plugins, (plugin) => {\n                        plugin.call(this);\n                    });\n                },\n\n                onFastConnected: function (status) {\n                    if (status === Strophe.Status.CONNECTED) {\n                        if (this.fast_connection.x_token) {\n                            this.save({\n                                x_token: this.fast_connection.x_token,\n                                hotp_counter: this.fast_connection.counter,\n                            });\n                            this.fast_conn_manager.auth_type = 'x-token';\n                            this.fast_connection.x_token_auth = true;\n                            if (this.connection && this.connection.pass)\n                                this.fast_connection.pass = this.connection.pass;\n                        }\n                        _.each(this._after_fast_connected_plugins, (plugin) => {\n                            plugin.call(this);\n                        });\n                    } else if (status === Strophe.Status.AUTHFAIL || status === Strophe.Status.DISCONNECTED) {\n                        this.fast_conn_manager = undefined;\n                        this.fast_connection = undefined;\n                    }\n                },\n\n                onReconnected: function () {\n                    this.connFeedback(xabber.getString(\"account_state_connected\"));\n                    this.afterConnected();\n                    _.each(this._after_reconnected_plugins, (plugin) => {\n                        plugin.call(this);\n                    });\n                },\n\n                afterConnected: function () {\n                    this.dfd_presence.done(() => {\n                        this.sendPendingStanzas();\n                        setTimeout(() => {\n                            this.sendPendingMessages();\n                        }, 2500);\n                    });\n                    this.registerPresenceHandler();\n                    this.enableCarbons();\n                },\n\n                getAllMessageRetractions: function (encrypted, callback) {\n                    let query_options = {xmlns: Strophe.NS.REWRITE, version: (encrypted && this.omemo) ? this.omemo.getRetractVersion() : this.retraction_version};\n                    encrypted && (query_options.type = 'encrypted');\n                    let retractions_query = $iq({type: 'get'})\n                        .c('query', query_options);\n                    this.sendIQFast(retractions_query, callback);\n                },\n\n                sendPendingStanzas: function () {\n                    console.log('pending stanzas');\n                    console.log(this._pending_stanzas);\n                    _.each(this._pending_stanzas, (item) => {\n                        console.log(item);\n                        if ((item.stanza instanceof Strophe.Builder) || item.is_msg) {\n                            this.connection.send(item.stanza);\n                            item.callback && item.callback();\n                        } else if (item && item.stanza && item.is_iq){\n                            this.connection.sendIQ.apply(this.connection, item.stanza);\n                        }\n                    });\n                    this._pending_stanzas = [];\n                },\n\n                sendPendingMessages: function () {\n                    console.log('pending messages');\n                    console.log(this._pending_messages);\n                    _.each(this._pending_messages, (item) => {\n                        console.log(item)\n                        let msg = this.messages.get(item.unique_id), msg_iq;\n                        msg && (msg_iq = msg.get('xml'));\n                        $(msg_iq).append(\"<retry xmlns='\" + Strophe.NS.DELIVERY + \"'/>\")\n                        msg_iq && this.sendMsg(msg_iq);\n                    });\n                    this._pending_messages = [];\n                    this.trigger('send_pending_messages');\n                },\n\n                _after_connected_plugins: [],\n                _after_reconnected_plugins: [],\n                _after_fast_connected_plugins: [],\n\n                onDisconnected: function () {\n                    this.disconnected_timestamp = this.last_stanza_timestamp;\n                    if (this.session.get('delete')) {\n                        this.destroy();\n                        return;\n                    }\n                    let deactivate = this.session.get('deactivate');\n                    if (deactivate) {\n                        this.connFeedback(xabber.getString(\"settings_account__label_state_disconnected\"));\n                        this.session.set('deactivate', null);\n                        if (deactivate === 'set_off') {\n                            this.trigger('deactivate', this);\n                        }\n                    } else {\n                        if (this.session.get('no_reconnect')) {\n                            this.session.set('no_reconnect', false);\n                        } else {\n                            this.fast_connection && this.fast_connection.connected && this.fast_connection.disconnect();\n                            this.reconnect();\n                        }\n                    }\n                },\n\n                connFeedback: function (message) {\n                    this.session.set(\"conn_feedback\", message);\n                },\n\n                enableCarbons: function () {\n                    let iq = $iq({type: 'set'}).c('enable', {xmlns: Strophe.NS.CARBONS});\n                    this.sendIQFast(iq);\n                },\n\n                getVCard: function (callback) {\n                    let jid = this.get('jid'),\n                        is_callback = _.isFunction(callback);\n                    if (this.connection && this.connection.connected) {\n                        this.getConnectionForIQ().vcard.get(jid,\n                            (vcard) => {\n                                let attrs = {\n                                    vcard: vcard,\n                                    vcard_updated: moment.now()\n                                };\n                                attrs.name = vcard.nickname || (vcard.first_name + ' ' + vcard.last_name).trim() || vcard.fullname || jid;\n                                if (!this.get('avatar_priority') || this.get('avatar_priority') <= constants.AVATAR_PRIORITIES.VCARD_AVATAR) {\n                                    if (vcard.photo.image) {\n                                        attrs.avatar_priority = constants.AVATAR_PRIORITIES.VCARD_AVATAR;\n                                        attrs.image = vcard.photo.image;\n                                    }\n                                    else\n                                        attrs.image = Images.getDefaultAvatar(attrs.name);\n                                    this.cached_image = Images.getCachedImage(attrs.image);\n                                }\n                                this.save(attrs);\n                                is_callback && callback(vcard);\n                            },\n                            function () {\n                                is_callback && callback(null);\n                            }\n                        );\n                    }\n                },\n\n                setVCard: function (data, callback, errback) {\n                    let vcard = _.extend(_.clone(this.get('vcard')), data);\n                    this.connection.vcard.set(this.get('jid'), vcard, () => {\n                        this.vcardPhotoUpdated(vcard.photo.image);\n                        callback && callback();\n                    }, errback);\n                },\n\n                getStatusMessage: function () {\n                    return this.get('status_message') || xabber.getString([this.get('status')]);\n                },\n\n                setStatus: function (status, message) {\n                    let attrs = { status_updated: moment.now() };\n                    status !== null && (attrs.status = status);\n                    message !== null && (attrs.status_message = message || '');\n                    if (status === 'offline' && this.get('status') !== 'offline')\n                        attrs.status_prev = this.get('status');\n                    this.save(attrs);\n                    if (!this.get('enabled'))\n                        return;\n                    if (status === 'offline') {\n                        this.deactivate('set_offline');\n                    } else if (!this.isConnected()) {\n                        this.activate();\n                    } else {\n                        this.sendPresence();\n                    }\n                },\n\n                restoreStatus: function () {\n                    if (this.get('status') === 'offline') {\n                        this.save({\n                            status_updated: moment.now(),\n                            status: this.get('status_prev') || 'online',\n                            status_prev: undefined\n                        });\n                    }\n                },\n\n                getAvatarHash: function (avatar) {\n                    let from_avatar = avatar || this.get('vcard').photo.image;\n                    if (from_avatar) {\n                        let decoded_raw = atob(from_avatar),\n                            bin = Uint8Array.from(Array.prototype.map.call(decoded_raw,function(x) {\n                                return x.charCodeAt(0);\n                            }));\n                        return sha1(bin);\n                    }\n                    else\n                        return \"\";\n                },\n\n                vcardPhotoUpdated: function (photo) {\n                    let stanza = $pres().c('x', {xmlns: Strophe.NS.VCARD_UPDATE}).c('photo').t(this.getAvatarHash(photo)).up().up();\n                    return this.sendPres(stanza);\n                },\n\n                sendPresence: function (type, message) {\n                    type = type || this.get('status');\n                    let status_message = message || this.get('status_message'), stanza = $pres();\n                    if (type === 'offline') {\n                        stanza.attrs({'type': 'unavailable'});\n                    } else {\n                        if (type !== 'online') {\n                            stanza.c('show').t(type).up();\n                        }\n                        stanza.c('status').t(status_message).up();\n                        stanza.c('priority').t(this.get('priority')).up();\n                        if(this.get('x_token'))\n                            stanza.c('device', {xmlns: Strophe.NS.AUTH_DEVICES, id: this.get('x_token').token_uid}).up();\n                    }\n                    stanza.cnode(this.connection.caps.createCapsNode({\n                        node: 'https://www.xabber.com/clients/xabber/web'\n                    }).tree());\n                    return this.sendPres(stanza);\n                },\n\n                showSettings: function (right, block_name) {\n                    let has_settings_right = !_.isUndefined(this.settings_right);\n                    if (!this.settings_left)\n                        this.settings_left = new xabber.AccountSettingsLeftView({model: this});\n                    if (!has_settings_right)\n                        this.settings_right = new xabber.AccountSettingsRightView({model: this});\n                    this.updateColorScheme();\n                    xabber.body.setScreen('account_settings', {\n                        account: this, right: right, block_name: block_name\n                    });\n                    this.trigger('open_settings');\n                    if (!has_settings_right) {\n                        this.trigger('render_settings');\n                        this.settings_right.addChild('blocklist', xabber.BlockListView, {\n                            account: this,\n                            el: this.settings_right.$('.blocklist-info')[0]\n                        });\n                        this.settings_right.addChild('account_password_view', xabber.ChangeAccountPasswordView, {\n                            model: this,\n                            el: this.settings_right.$('.change-password-container')[0]\n                        });\n                    }\n                },\n\n                updateColorScheme: function () {\n                    let color = this.settings.get('color');\n                    this.settings_left && this.settings_left.$el.attr('data-color', color);\n                    if (this.settings_right) {\n                        this.settings_right.$el.attr('data-color', color);\n                    }\n                    this.vcard_edit.$el.attr('data-color', color);\n                },\n\n                revokeXToken: function (token_uid, callback) {\n                    let iq = $iq({\n                        type: 'set',\n                        to: this.connection.domain\n                    }).c('revoke', {xmlns:Strophe.NS.AUTH_DEVICES});\n                    for (let token_num = 0; token_num < token_uid.length; token_num++)\n                        iq.c('device', {id: token_uid[token_num]}).up();\n                    this.sendIQFast(iq, () => {\n                        callback && callback();\n                    });\n                },\n\n                revokeAllXTokens: function (callback, errback) {\n                    let iq = $iq({\n                        type: 'set',\n                        to: this.connection.domain\n                    }).c('revoke-all', {xmlns:Strophe.NS.AUTH_DEVICES});\n                    this.sendIQFast(iq, (success) => {\n                            callback & callback(success);\n                        },\n                        function (error) {\n                            errback && errback(error);\n                        });\n                },\n\n                deleteAccount: function (show_settings) {\n                    this.show_settings_after_delete = show_settings;\n                    xabber.body.setScreen('all_chats', {right_contact: ''});\n                    if (this.get('x_token'))\n                        this.revokeXToken([this.get('x_token').token_uid]);\n                    this.session.set('delete', true);\n                    this.deactivate();\n                    if (xabber.api_account && xabber.api_account.get('xmpp_binding') === this.get('jid'))\n                        xabber.trigger('quit_accounts');\n                },\n\n                activate: function () {\n                    if (!this.isConnected())\n                        this.connect();\n                },\n\n                deactivate: function (type) {\n                    type || (type = 'set_off');\n                    this.session.set('deactivate', type);\n                    if (this.isConnected()) {\n                        this.connFeedback(xabber.getString(\"settings_account__label_state_disconnecting\"));\n                        this.sendPresence('offline');\n                        this.connection.disconnect();\n                        if (this.fast_conn_manager) this.fast_connection.disconnect();\n                    } else {\n                        this.onDisconnected();\n                    }\n                },\n\n                onDestroy: function () {\n                    if (this.connection && !this.connection.register._registering)\n                        this.connection.connect_callback = null;\n                    if (this.settings)\n                        this.settings.destroy();\n                    if (this.isConnected()) {\n                        this.connection.disconnect();\n                        if (this.fast_conn_manager) this.fast_connection.disconnect();\n                    }\n                    this.cached_sync_conversations.clearDataBase();\n                    this.trigger('remove_saved_chat');\n                },\n\n                registerIQHandler: function () {\n                    this.connection.deleteHandler(this._stanza_handler);\n                    this._stanza_handler = this.connection.addHandler((iq) => {\n                            this.onGetIQ(iq);\n                            return true;\n                        }, null, 'iq', \"get\");\n                },\n\n\n                registerSyncedIQHandler: function () {\n                    this.connection.deleteHandler(this._synced_stanza_handler);\n                    this._synced_stanza_handler = this.connection.addHandler(\n                        this.onSyncedIQ.bind(this),\n                        Strophe.NS.SYNCHRONIZATION, 'iq', \"set\");\n                },\n\n                registerPresenceHandler: function () {\n                    this.connection.deleteHandler(this._pres_handler);\n                    this._pres_handler = this.connection.addHandler(\n                        (presence) => {\n                            this.onPresence(presence);\n                            return true;\n                        }, null, 'presence', null);\n                },\n\n                onSetIQResult: function (iq) {\n                    let to = $(iq).attr('to');\n                    if (this.fast_connection && this.fast_connection.jid === to\n                        && !this.fast_connection.disconnecting && this.fast_connection.authenticated\n                        && this.fast_connection.connected && this.get('status') !== 'offline'){\n                        this.sendIQFast($iq({\n                            type: 'result', id: iq.getAttribute('id'),\n                        }));\n                    } else if (this.connection && this.connection.jid === to && this.connection.authenticated\n                        && !this.connection.disconnecting && this.session.get('connected') && this.get('status') !== 'offline') {\n                        this.sendIQ($iq({\n                            type: 'result', id: iq.getAttribute('id'),\n                        }));\n                    }\n                },\n\n                onSyncedIQ: function (iq) {\n                    this.onSetIQResult(iq);\n                    this.roster.syncConversations(iq);\n                    return true;\n                },\n\n                onGetIQ: function (iq) {\n                    let $incoming_iq = $(iq),\n                        $confirm = $incoming_iq.find(`confirm[xmlns=\"${Strophe.NS.HTTP_AUTH}\"]`),\n                        $session_availability = $incoming_iq.find(`query[xmlns=\"${Strophe.NS.JINGLE_MSG}\"]`),\n                        request_code,\n                        from_jid = $incoming_iq.attr('from');\n                    if ($confirm.length) {\n                        request_code = $confirm.attr('id');\n                        if (this.get('gallery_auth_request_code')) {\n                            this.onAuthCode(request_code)\n                        }\n                        else {\n                            this.gallery_code_requests.push({\n                                id: $incoming_iq.attr('id'),\n                                code: request_code\n                            });\n                        }\n                    }\n                    if ($session_availability.length) {\n                        let session_id = $session_availability.children('session').attr('id'), $session_availability_response;\n                        if (session_id && xabber.current_voip_call && session_id === xabber.current_voip_call.get('session_id') && !xabber.current_voip_call.get('state')) {\n                            $session_availability_response = $iq({to: from_jid, type: 'result', id: $incoming_iq.attr('id')})\n                                .c('query', {xmlns: Strophe.NS.JINGLE_MSG})\n                                .c('session', {id: session_id});\n                            xabber.current_voip_call.updateStatus(xabber.getString(\"dialog_jingle_message__status_calling\"));\n                        }\n                        else {\n                            $session_availability_response = $iq({to: from_jid, type: 'error', id: $incoming_iq.attr('id')})\n                                .c('error', {xmlns: Strophe.NS.JINGLE_MSG});\n\n                        }\n                        this.sendIQFast($session_availability_response);\n                    }\n                },\n\n                testGalleryTokenExpire: function(callback) {\n                    let currentTime = new Date(),\n                        tokenExpireTime = new Date(this.get('gallery_token_expires'));\n                    if (this.get('gallery_auth')){\n                        this.once('gallery_token_authenticated', callback)\n                    }\n                    else if (currentTime < tokenExpireTime){\n                        callback && callback();\n                    }\n                    else if (this.server_features.get('media-gallery')){\n                        this.initGalleryAuth(this.server_features.get('media-gallery'))\n                        this.once('gallery_token_authenticated', callback)\n                    }\n                    else if (!this.server_features.get('media-gallery')){\n                        this.set('gallery_url', undefined);\n                        this.set('gallery_token', undefined);\n                        this.set('gallery_token_expires', undefined);\n                        callback && callback();\n                    }\n                },\n\n                initGalleryAuth: function(gallery_feature) {\n                    this.set('gallery_url', gallery_feature.get('from'));\n                    if (this.get('gallery_url') && !this.get('gallery_auth')) {\n                        this.set('gallery_auth', true)\n                        $.ajax({\n                            type: 'POST',\n                            url: this.get('gallery_url') + 'v1/account/xmpp_code_request/',\n                            dataType: 'json',\n                            data: JSON.stringify({jid: this.jid, type: \"iq\"}),\n                            success: (response) => {\n                                if (response.request_id){\n                                    this.set('gallery_auth_request_code', response.request_id)\n                                    if (this.gallery_code_requests.length){\n                                        let verifying_code = this.gallery_code_requests.find(verifying_mess => (verifying_mess.id === this.get('gallery_auth_request_code')));\n                                        if (verifying_code && verifying_code.code)\n                                            this.onAuthCode(verifying_code.code)\n                                    }\n                                }\n                            },\n                            error: (response) => {\n                                this.handleCommonGalleryErrors(response)\n                                this.set('gallery_auth', false)\n                                this.gallery_code_requests = [];\n                                console.log(response)\n                            }\n                        });\n                    }\n                },\n\n                onAuthCode: function (confirm_code) {\n                    this.gallery_code_requests = [];\n                    this.set('gallery_auth_request_code', undefined);\n                    if (confirm_code)\n                        $.ajax({\n                            type: 'POST',\n                            url: this.get('gallery_url') + 'v1/account/xmpp_auth/',\n                            dataType: 'json',\n                            data: JSON.stringify({jid: this.id, code: confirm_code}),\n                            success: (response) => {\n                                if (response.token)\n                                    this.set('gallery_token', response.token);\n                                if (response.expires)\n                                    this.set('gallery_token_expires', response.expires);\n                                this.trigger('gallery_token_authenticated')\n                                this.set('gallery_auth', false)\n                            },\n                            error: (response) => {\n                                this.set('gallery_auth', false)\n                                this.handleCommonGalleryErrors(response)\n                                console.log(response)\n                            }\n                        });\n                },\n\n                prepareFiles: function (files, callback) {\n                    files.forEach((file) => {\n                        let reader = new FileReader();\n                        reader.onloadend = () => {\n                            let b64 = reader.result.split('base64,'),\n                                binary_file = atob(b64[1]),\n                                bytes = new Uint8Array(binary_file.length);\n                            for (let i = 0; i < binary_file.length; i++)\n                                bytes[i] = binary_file.charCodeAt(i);\n                            this.testFile({size: file.size, name: file.name, hash: sha1(bytes)}, file, callback)\n                        }\n                        reader.readAsDataURL(file);\n                    })\n                },\n\n                handleCommonGalleryErrors: function (response) {\n                    if (response.status === 401){\n                        if (this.server_features.get('media-gallery')){\n                            this.initGalleryAuth(this.server_features.get('media-gallery'))\n                        } else {\n                            this.set('gallery_url', null);\n                            this.set('gallery_token', null);\n                        }\n                    }\n                },\n\n                getStorageStats: function (params, callback) {\n                    this.testGalleryTokenExpire(() => {\n                        params && (params = {});\n                        if (this.get('gallery_token') && this.get('gallery_url'))\n                            $.ajax({\n                                type: 'GET',\n                                headers: {\"Authorization\": 'Bearer ' + this.get('gallery_token')},\n                                url: this.get('gallery_url') + 'v1/files/stats/',\n                                dataType: 'json',\n                                data: params,\n                                success: (response) => {\n                                    callback && callback(response)\n                                },\n                                error: (response) => {\n                                    this.handleCommonGalleryErrors(response)\n                                    console.log(response)\n                                }\n                            });\n                    });\n                },\n\n                testFile: function (params, file, callback) {\n                    this.testGalleryTokenExpire(() => {\n                        if (this.get('gallery_token') && this.get('gallery_url'))\n                            $.ajax({\n                                type: 'GET',\n                                headers: {\"Authorization\": 'Bearer ' + this.get('gallery_token')},\n                                url: this.get('gallery_url') + 'v1/files/slot/',\n                                dataType: 'json',\n                                data: params,\n                                success: (response) => {\n                                    this.uploadFile(file , callback)\n                                },\n                                error: (response) => {\n                                    this.handleCommonGalleryErrors(response)\n                                    console.log(response)\n                                }\n                            });\n\n                    });\n                },\n\n                uploadFile: function (file, callback, errback) {\n                    this.testGalleryTokenExpire(() => {\n                        if (this.get('gallery_token') && this.get('gallery_url')) {\n                            let formData = new FormData();\n                            formData.append('file', file, file.name);\n                            if (file.duration)\n                                formData.append('duration', file.duration);\n                            if (file.voice)\n                                formData.append('media_type', file.type + '+voice');\n                            else\n                                formData.append('media_type', file.type);\n                            $.ajax({\n                                type: 'POST',\n                                headers: {\"Authorization\": 'Bearer ' + this.get('gallery_token')},\n                                url: this.get('gallery_url') + 'v1/files/upload/',\n                                data: formData,\n                                contentType: false,\n                                processData: false,\n                                success: (response) => {\n                                    console.log(response)\n                                    callback && callback(response)\n                                },\n                                error: (response) => {\n                                    this.handleCommonGalleryErrors(response)\n                                    console.log(response)\n                                    errback && errback(response)\n                                }\n                            });\n                        }\n                    });\n                },\n\n                uploadAvatar: function (file, callback, errback) {\n                    this.testGalleryTokenExpire(() => {\n                        if (this.get('gallery_token') && this.get('gallery_url')) {\n                            if (!file)\n                                errback && errback('no file')\n                            let formData = new FormData();\n                            formData.append('file', file, file.name);\n                            formData.append('media_type', file.type);\n                            $.ajax({\n                                type: 'POST',\n                                headers: {\"Authorization\": 'Bearer ' + this.get('gallery_token')},\n                                url: this.get('gallery_url') + 'v1/avatar/upload/',\n                                data: formData,\n                                contentType: false,\n                                processData: false,\n                                success: (response) => {\n                                    console.log(response)\n                                    callback && callback(response)\n                                },\n                                error: (response) => {\n                                    this.handleCommonGalleryErrors(response)\n                                    console.log(response)\n                                    errback && errback(response)\n                                }\n                            });\n                        }\n                    });\n                },\n\n                deleteFile: function (file_id, callback, errback) {\n                    this.testGalleryTokenExpire(() => {\n                        if (this.get('gallery_token') && this.get('gallery_url') && file_id)\n                            $.ajax({\n                                type: 'DELETE',\n                                headers: {\"Authorization\": 'Bearer ' + this.get('gallery_token')},\n                                url: this.get('gallery_url') + 'v1/files/',\n                                dataType: 'json',\n                                data: JSON.stringify({id: file_id}),\n                                success: (response) => {\n                                    console.log(response)\n                                    callback && callback(response)\n                                },\n                                error: (response) => {\n                                    this.handleCommonGalleryErrors(response)\n                                    console.log(response)\n                                    errback && errback(response)\n                                }\n                            });\n                    });\n                },\n\n                getOpenGraphData: function (url, callback, errback) {\n                    this.testGalleryTokenExpire(() => {\n                        if (this.get('gallery_token') && this.get('gallery_url'))\n                            $.ajax({\n                                type: 'POST',\n                                headers: {\"Authorization\": 'Bearer ' + this.get('gallery_token'), \"Content-Type\": \"application/json\"},\n                                url: this.get('gallery_url') + 'v1/opengraph/',\n                                dataType: 'json',\n                                data: JSON.stringify({url: url}),\n                                success: (response) => {\n                                    response.site = $(response.ogp).closest('meta[property=\"og:site_name\"]').attr('content')\n                                    response.type = $(response.ogp).closest('meta[property=\"og:type\"]').attr('content')\n                                    response.url = $(response.ogp).closest('meta[property=\"og:url\"]').attr('content')\n                                    response.description = $(response.ogp).closest('meta[property=\"og:description\"]').attr('content')\n                                    response.title = $(response.ogp).closest('meta[property=\"og:title\"]').attr('content')\n                                    response.image = $(response.ogp).closest('meta[property=\"og:image\"]').attr('content')\n                                    response.image_height = $(response.ogp).closest('meta[property=\"og:image:height\"]').attr('content')\n                                    response.image_width = $(response.ogp).closest('meta[property=\"og:image:width\"]').attr('content')\n                                    response.video_url = $(response.ogp).closest('meta[property=\"og:video:url\"]').attr('content')\n                                    console.log(response)\n                                    callback && callback(response)\n                                },\n                                error: (response) => {\n                                    this.handleCommonGalleryErrors(response)\n                                    errback && errback(response)\n                                    console.log(response)\n                                }\n                            });\n                    });\n                },\n\n                createMessageFromIQ: function (attrs) {\n                    let contact = this.contacts.mergeContact(attrs.from_jid),\n                        chat = this.chats.getChat(contact);\n                    chat.messages.create(attrs);\n                },\n\n                onPresence: function (presence) {\n                    let $presence = $(presence),\n                        type = presence.getAttribute('type');\n                    if (type === 'error') { return; }\n                    let jid = presence.getAttribute('from'),\n                        bare_jid = Strophe.getBareJidFromJid(jid);\n                    if (bare_jid !== this.get('jid')) {\n                        _.each(this._added_pres_handlers, function (handler) {\n                            handler(presence, bare_jid);\n                        });\n                        return;\n                    };\n                    let resource = Strophe.getResourceFromJid(jid),\n                        priority = Number($presence.find('priority').text()),\n                        status = $presence.find('show').text() || 'online',\n                        status_message = $presence.find('status').text();\n                    _.isNaN(priority) && (priority = 0);\n                    let $vcard_update = $presence.find(`x[xmlns=\"${Strophe.NS.VCAD_UPDATE}\"]`);\n                    if ($vcard_update.length && this.get('avatar_priority') && this.get('avatar_priority') <= constants.AVATAR_PRIORITIES.VCARD_AVATAR)\n                        this.save('photo_hash', $vcard_update.find('photo').text());\n                    if (resource) {\n                        let resource_obj = this.resources.get(resource);\n                        if (type === 'unavailable') {\n                            if (resource_obj) { resource_obj.destroy(); }\n                        } else {\n                            let attrs = {\n                                resource: resource,\n                                priority: priority,\n                                status: status,\n                                status_message: status_message\n                            };\n                            let $device = $presence.find(`device[xmlns=\"${Strophe.NS.AUTH_DEVICES}\"]`);\n                            if ($device && this.x_tokens_list && $device.attr('id')) {\n                                attrs.token_uid = $device.attr('id')\n                            }\n                            if (!resource_obj)\n                                resource_obj = this.resources.create(attrs);\n                            else\n                                resource_obj.set(attrs);\n                        }\n                    }\n                }\n            },\n            {\n                addInitPlugin: function (func) {\n                    this.prototype._init_plugins.push(func);\n                },\n\n                addConnPlugin: function (func, conn, reconn) {\n                    conn && this.prototype._after_connected_plugins.push(func);\n                    reconn && this.prototype._after_reconnected_plugins.push(func);\n                },\n\n                addFastConnPlugin: function (func, conn, reconn) {\n                    conn && this.prototype._after_fast_connected_plugins.push(func);\n                }\n            });\n\n        xabber.Accounts = Backbone.CollectionWithStorage.extend({\n            model: xabber.Account,\n            comparator: function (acc1, acc2) {\n                return acc1.settings.get('order') < acc2.settings.get('order') ? -1 : 1;\n            },\n\n            _initialize: function (models, options) {\n                this.settings_list = xabber.account_settings_list;\n                this.getEnabledList();\n                this.getConnectedList();\n                this.on(\"add\", this.onAdd, this);\n                this.on(\"destroy\", this.onDestroy, this);\n                this.on(\"change:enabled\", this.getEnabledList, this);\n                this.on(\"update_order\", this.onUpdatedOrder, this);\n                this.on(\"add destroy activate deactivate\", this.onListChanged, this);\n                this.on(\"destroy deactivate\", this.onAccountDisconnected, this);\n                xabber.on(\"quit\", this.onQuit, this);\n                xabber.on(\"quit_accounts\", this.onQuitAccounts, this);\n                this.settings_list.on(\"add_settings\", this.onSettingsAdded, this);\n                xabber.api_account && xabber.api_account.on(\"settings_result\", function (result) {\n                    result && this.trigger('update_order');\n                }, this);\n            },\n\n            onQuit: function () {\n                xabber.api_account && xabber.api_account.revoke_token();\n                _.each(_.clone(this.models), function (account) {\n                    account.deleteAccount();\n                    account.password_view.closeModal();\n                    utils.modals.clear_queue();\n                });\n                !this.models.length && xabber.body.setScreen('login');\n            },\n\n            onQuitAccounts: function () {\n                xabber.api_account && xabber.api_account.revoke_token();\n                _.each(_.clone(this.models), function (account) {\n                    if (account.settings.get('to_sync')) {\n                        account.deleteAccount();\n                        account.password_view.closeModal();\n                        utils.modals.clear_queue();\n                    }\n                });\n                !this.models.length && xabber.body.setScreen('login');\n            },\n\n            getEnabledList: function () {\n                this.enabled = this.filter(account => account.get('enabled'));\n            },\n\n            getConnectedList: function () {\n                this.connected = this.filter(account => account.isConnected());\n            },\n\n            onListChanged: function () {\n                this.getEnabledList();\n                this.getConnectedList();\n                this.trigger('list_changed', this);\n            },\n\n            onAdd: function (account) {\n                if (account.is_invalid)\n                    account.destroy();\n            },\n\n            onDestroy: function (account) {\n                if (!account.get('is_new')) {\n                    let no_accounts = !(this.length || xabber.api_account && xabber.api_account.get('connected'));\n                    if (no_accounts) {\n                        xabber.body.setScreen('login');\n                    } else if (account.show_settings_after_delete) {\n                        xabber.body.setScreen('settings');\n                    } else {\n                        xabber.body.setScreen('all-chats');\n                        xabber.chats_view.showAllChats();\n                    }\n                }\n            },\n\n            onAccountDisconnected: function () {\n                xabber.toolbar_view.recountAllMessageCounter();\n                xabber.recountAllMessageCounter();\n            },\n\n            onSettingsAdded: function (settings) {\n                let jid = settings.get('jid');\n                if (!this.get(jid))\n                    this.create({jid: jid});\n            },\n\n            onUpdatedOrder: function () {\n                this.sort();\n                this.getEnabledList();\n                this.getConnectedList();\n            },\n\n            getLastOrder: function () {\n                return this.length ? this.last().settings.get('order') : 0;\n            },\n\n            getDefaultColor: function () {\n                let used_colors = {}, colors = constants.MATERIAL_COLORS;\n                this.each(function (account) {\n                    used_colors[account.settings.get('color')] = true;\n                });\n                for (let idx = 0; idx < colors.length; idx++) {\n                    if (!used_colors[colors[idx]])\n                        return colors[idx];\n                }\n                return 'red';\n            },\n\n            moveBefore: function (acc1, acc2) {\n                let index2 = this.indexOf(acc2),\n                    prev_order = index2 > 0 ? this.at(index2-1).settings.get('order') : 0;\n                acc1.settings.save('order', (acc2.settings.get('order') + prev_order)/2);\n                this._updateOrder();\n            },\n\n            moveToBottom: function (acc) {\n                acc.settings.save('order', this.getLastOrder() + 1);\n                this._updateOrder();\n            },\n\n            _updateOrder: function () {\n                this.sort();\n                this.each(function (acc, index) {\n                    acc.settings.save({order: index + 1});\n                });\n                this.trigger('update_order');\n                if (xabber.api_account && xabber.api_account.get('connected')) {\n                    this.settings_list.order_timestamp.save('timestamp', utils.now());\n                    xabber.api_account.synchronize_order_settings();\n                }\n            }\n        });\n\n        xabber.AccountToolbarItemView = xabber.BasicView.extend({\n            className: 'toolbar-item account-item',\n            template: templates.toolbar_item,\n            avatar_size: constants.AVATAR_SIZES.TOOLBAR_ACCOUNT_ITEM,\n\n            events: {\n                'click .filter-chats': 'filterChats',\n                'click .circle-avatar': 'showSettings'\n            },\n\n            _initialize: function () {\n                this.updateConnected();\n                this.updateAuthState();\n                this.updateStatus();\n                this.updateAvatar();\n                this.updateColorScheme();\n                this.$el.attr('data-jid', this.model.get('jid'));\n                this.model.session.on(\"change:auth_failed\", this.updateAuthState, this);\n                this.model.session.on(\"change:connected\", this.updateConnected, this);\n                this.model.on(\"change:status\", this.updateStatus, this);\n                this.model.on(\"change:image\", this.updateAvatar, this);\n                this.model.settings.on(\"change:color\", this.updateColorScheme, this);\n                this.model.on(\"filter_chats\", this.setActive, this);\n                this.model.on(\"open_settings\", this.setActive, this);\n            },\n\n            updateConnected: function () {\n                this.$el.switchClass('disconnected', !this.model.isConnected());\n            },\n\n            updateAuthState: function () {\n                let auth_failed = this.model.session.get('auth_failed');\n                this.$('.status').hideIf(auth_failed);\n                this.$('.auth-failed').showIf(auth_failed);\n            },\n\n            updateStatus: function () {\n                this.$('.status').attr('data-status', this.model.get('status'));\n            },\n\n            updateAvatar: function () {\n                let image = this.model.cached_image;\n                this.$('.circle-avatar').setAvatar(image, this.avatar_size);\n            },\n\n            updateColorScheme: function () {\n                this.$el.attr('data-color', this.model.settings.get('color'));\n            },\n\n            showSettings: function () {\n                let scroll_top = xabber.toolbar_view.getScrollTop();\n                this.model.showSettings();\n                xabber.toolbar_view.scrollTo(scroll_top);\n            },\n\n            filterChats: function (ev) {\n                let scroll_top = xabber.toolbar_view.getScrollTop();\n                ev.stopPropagation();\n                xabber.chats_view.showChatsByAccount(this.model);\n                this.model.trigger('filter_chats');\n                xabber.toolbar_view.scrollTo(scroll_top);\n            },\n\n            setActive: function () {\n                xabber.toolbar_view.$('.toolbar-item').removeClass('active');\n                this.$el.addClass('active');\n            }\n        });\n\n        xabber.ToolbarAccountsBlockView = xabber.BasicView.extend({\n            _initialize: function () {\n                this.updateList();\n                this.model.on(\"add change:enabled\", this.updateOneInList, this);\n                this.model.on(\"update_order\", this.updateList, this);\n                this.model.on(\"destroy\", this.onAccountRemoved, this);\n            },\n\n            updateList: function (account) {\n                _.each(this.children, function (view) { view.detach(); });\n                _.each(this.model.enabled, (account) => {\n                    let jid = account.get('jid'), view = this.child(jid);\n                    !view && (view = this.addChild(jid, xabber.AccountToolbarItemView, {model: account}));\n                    this.$el.append(view.$el);\n                });\n                this.parent.updateScrollBar();\n            },\n\n            updateOneInList: function (account) {\n                let jid = account.get('jid');\n                if (account.get('enabled')) {\n                    let view = this.child(jid);\n                    if (view) {\n                        view.$el.detach();\n                    } else {\n                        view = this.addChild(jid, xabber.AccountToolbarItemView,\n                            {model: account});\n                    }\n                    let index = this.model.enabled.indexOf(account);\n                    if (index === 0) {\n                        this.$el.prepend(view.$el);\n                    } else {\n                        this.$('.account-item').eq(index - 1).after(view.$el);\n                    }\n                } else {\n                    account.last_msg_timestamp = 0;\n                    this.removeChild(jid);\n                }\n                this.parent.updateScrollBar();\n            },\n\n            onAccountRemoved: function (account) {\n                this.removeChild(account.get('jid'));\n                this.parent.updateScrollBar();\n            }\n        });\n\n        xabber.Resource = Backbone.Model.extend({\n            idAttribute: 'resource',\n            defaults: {\n                priority: 0\n            }\n        });\n\n        xabber.ResourceView = xabber.BasicView.extend({\n            className: 'resource-wrap',\n            template: templates.resource,\n\n            _initialize: function (options) {\n                this.update();\n                this.model.on(\"change\", this.update, this);\n            },\n\n            update: function () {\n                let attrs = this.model.attributes;\n                this.$('.status').attr('data-status', attrs.status);\n                this.$('.status-message').text(attrs.status_message || xabber.getString(attrs.status));\n                this.$('.client').text(attrs.client || xabber.getString(\"please_wait\"));\n                this.$('.resource').text(attrs.resource);\n                this.$('.priority').text(attrs.priority);\n                return this;\n            }\n        });\n\n        xabber.ResourceRightView = xabber.BasicView.extend({\n            className: 'resource-wrap',\n            template: templates.resource_right,\n\n            _initialize: function (options) {\n                this.update();\n                this.model.on(\"change\", this.update, this);\n            },\n\n            update: function () {\n                let attrs = this.model.attributes;\n                this.$('.status').attr('data-status', attrs.status);\n                this.$('.status-message').text(attrs.status_message || xabber.getString(attrs.status));\n                this.$('.client').text(attrs.client || xabber.getString(\"please_wait\"));\n                this.$('.resource').text(attrs.resource);\n                this.$('.priority').text(attrs.priority);\n                return this;\n            }\n        });\n\n        xabber.Resources = Backbone.Collection.extend({\n            model: xabber.Resource,\n            comparator: function (r1, r2) {\n                let p1 = r1.get('priority'), p2 = r2.get('priority');\n                return p1 > p2 ? -1 : (p1 < p2 ? 1 : 0);\n            },\n\n            requestInfo: function (resource, callback) {\n                let jid = this.jid + '/' + resource.get('resource');\n                if (this.connection && this.connection.connected) {\n                    this.connection.disco.info(jid, null, (iq) => {\n                        let $identity = $(iq).find('identity[category=client]');\n                        if ($identity.length)\n                            resource.set('client', $identity.attr('name'));\n                        this.attention_supported = this.isFeatureSupported(iq, Strophe.NS.ATTENTION);\n                        callback && callback();\n                    });\n                }\n            },\n\n            isFeatureSupported: function (stanza, ns) {\n                let $stanza = $(stanza), is_supported = false;\n                $stanza.find('feature').each(function () {\n                    let namespace = $(this).attr('var');\n                    if (namespace === ns)\n                        is_supported = true;\n                });\n                return is_supported;\n            },\n        });\n\n        xabber.ResourcesView = xabber.BasicView.extend({\n            _initialize: function () {\n                this.renderByInit();\n                this.model.on(\"add\", this.onResourceAdded, this);\n                this.model.on(\"remove\", this.onResourceRemoved, this);\n                this.model.on(\"reset\", this.onReset, this);\n                this.model.on(\"change:priority\", this.onPriorityChanged, this);\n            },\n\n            renderByInit: function () {\n                this.model.each((resource) => {\n                    this.onResourceAdded(resource);\n                });\n            },\n\n            onResourceAdded: function (resource) {\n                this.model.requestInfo(resource);\n                this.addChild(resource.get('resource'),\n                    xabber.ResourceView, {model: resource});\n                this.updatePosition(resource);\n                this.$el.removeClass('hidden');\n                this.parent.updateScrollBar();\n            },\n\n            onPriorityChanged: function (resource) {\n                this.model.sort();\n                this.updatePosition(resource);\n            }\n        });\n\n        xabber.AccountResources = xabber.Resources.extend({\n            initialize: function (models, options) {\n                this.jid = options.account.get('jid');\n                this.connection = options.account.connection;\n            }\n        });\n\n        xabber.AccountResourcesView = xabber.ResourcesView.extend({\n            onResourceRemoved: function (resource) {\n                this.removeChild(resource.get('resource'));\n                this.parent.updateScrollBar();\n            },\n\n            onReset: function () {\n                this.removeChildren();\n                this.parent.updateScrollBar();\n            },\n\n            updatePosition: function (resource) {\n                let view = this.child(resource.get('resource'));\n                if (!view) return;\n                view.$el.detach();\n                let index = this.model.indexOf(resource);\n                if (index === 0) {\n                    this.$('.main-resource').after(view.$el);\n                } else {\n                    this.$('.resource-wrap').eq(index).after(view.$el);\n                }\n                this.updateScrollBar();\n            }\n        });\n\n        xabber.AccountVCardView = xabber.VCardView.extend({\n            events: {\n                \"click .btn-vcard-refresh\": \"refresh\",\n                \"click .btn-vcard-edit\": \"showEditView\",\n                \"click .details-icon\": \"onClickIcon\"\n            },\n\n            __initialize: function () {\n                this.updateButtons();\n                this.model.on(\"activate deactivate\", this.updateButtons, this);\n            },\n\n            updateButtons: function () {\n                let connected = this.model.isConnected();\n                this.$('.btn-vcard-edit').showIf(connected);\n                this.$('.btn-vcard-refresh').showIf(connected);\n            },\n\n            showEditView: function () {\n                this.model.showSettings('vcard_edit');\n            }\n        });\n\n        xabber.AccountMediaGalleryView = xabber.BasicView.extend({\n            template: templates.media_gallery_account,\n            events: {\n                \"change input.gallery-upload\": \"onFileInputChanged\",\n                \"click .gallery-file:not(.gallery-avatar) .btn-delete\": \"deleteFile\",\n                \"click .gallery-file.gallery-avatar .btn-delete\": \"deleteAvatar\",\n                \"click .tabs .tab\": \"onTabClick\",\n                \"click .btn-gallery-sorting\": \"sortFiles\",\n                \"click .gallery-file\": \"onClickFile\",\n            },\n\n            _initialize: function () {\n                this.account = this.model;\n                this.$el.html(this.template());\n                this.parent.ps_container.on(\"ps-scroll-up ps-scroll-down\", this.onScroll.bind(this));\n                this.account.on(\"update_avatar_list\", this.onUpdateAvatars.bind(this));\n            },\n\n            render: function () {\n                this.updateStorage();\n                let dropdown_settings = {\n                    inDuration: 100,\n                    outDuration: 100,\n                    constrainWidth: false,\n                    hover: false,\n                    alignment: 'right'\n                };\n                this.$('.dropdown-button').dropdown(dropdown_settings);\n            },\n\n            onScroll: function () {\n                if (this.$el.hasClass('hidden'))\n                    return;\n                let scrollTop = this.parent.ps_container[0].scrollTop,\n                    scrollHeight = this.parent.ps_container[0].scrollHeight,\n                    offsetHeight = this.parent.ps_container[0].offsetHeight,\n                    persentScrolled = scrollTop / (scrollHeight - offsetHeight);\n                if (persentScrolled > 0.8 && !this.loading_files && (this.current_page < this.total_pages)){\n                    this.current_page++;\n                    this.current_options.page = this.current_page;\n                    this.getFiles(this.current_options)\n                }\n            },\n\n            updateStorage: function (after_deletion, after_avatar_update) {\n                this.account.getStorageStats(null,(response) => {\n                    let used_storage = utils.pretty_size(response.total.used) || '0';\n                    this.$('.btn-delete-files-dropdown').hideIf(!(response.total && response.total.used))\n                    this.$('.gallery-manage-storage').hideIf(!(response.total && response.total.used))\n                    this.$('.storage-usage').html(used_storage + xabber.getString(\"of\") + utils.pretty_size(response.quota))\n                    if (!after_avatar_update){\n                        this.$('.tabs .list-variant[data-value=\"image\"]').hideIf(!(response.images && response.images.used))\n                        if (response.images && response.images.used)\n                            this.$('.tabs .list-variant[data-value=\"image\"]').addClass('tab')\n                        else\n                            this.$('.tabs .list-variant[data-value=\"image\"]').removeClass('tab')\n                    }\n                    this.$('.storage-label-images').hideIf(!(response.images && response.images.used))\n                    this.$('.storage-usage-images').hideIf(!(response.images && response.images.used))\n                    this.$('.storage-usage-images .storage-usage-amount').html(utils.pretty_size(response.images.used))\n                    this.$('.tabs .list-variant[data-value=\"video\"]').hideIf(!(response.videos && response.videos.used))\n                    if (response.videos && response.videos.used)\n                        this.$('.tabs .list-variant[data-value=\"video\"]').addClass('tab')\n                    else\n                        this.$('.tabs .list-variant[data-value=\"video\"]').removeClass('tab')\n                    this.$('.storage-label-videos').hideIf(!(response.videos && response.videos.used))\n                    this.$('.storage-usage-videos').hideIf(!(response.videos && response.videos.used))\n                    this.$('.storage-usage-videos .storage-usage-amount').html(utils.pretty_size(response.videos.used))\n                    this.$('.tabs .list-variant[data-value=\"voice\"]').hideIf(!(response.voices && response.voices.used))\n                    if (response.voices && response.voices.used)\n                        this.$('.tabs .list-variant[data-value=\"voice\"]').addClass('tab')\n                    else\n                        this.$('.tabs .list-variant[data-value=\"voice\"]').removeClass('tab')\n                    this.$('.storage-label-voices').hideIf(!(response.voices && response.voices.used))\n                    this.$('.storage-usage-voices').hideIf(!(response.voices && response.voices.used))\n                    this.$('.storage-usage-voices .storage-usage-amount').html(utils.pretty_size(response.voices.used))\n                    this.$('.tabs .list-variant[data-value=\"files\"]').hideIf(!(response.files && response.files.used))\n                    if (response.files && response.files.used)\n                        this.$('.tabs .list-variant[data-value=\"files\"]').addClass('tab')\n                    else\n                        this.$('.tabs .list-variant[data-value=\"files\"]').removeClass('tab')\n                    this.$('.storage-label-files').hideIf(!(response.files && response.files.used))\n                    this.$('.storage-usage-files').hideIf(!(response.files && response.files.used))\n                    this.$('.storage-usage-files .storage-usage-amount').html(utils.pretty_size(response.files.used))\n                    if (response.images){\n                        this.$('.storage-progress-images').css('width', ((response.images.used/response.quota) * 100).toFixed(2) + '%')\n                    }\n                    if (response.videos){\n                        this.$('.storage-progress-videos').css('width', ((response.videos.used/response.quota) * 100).toFixed(2) + '%')\n                    }\n                    if (response.voices){\n                        this.$('.storage-progress-voices').css('width', ((response.voices.used/response.quota) * 100).toFixed(2) + '%')\n                    }\n                    if (response.files){\n                        this.$('.storage-progress-files').css('width', ((response.files.used/response.quota) * 100).toFixed(2) + '%')\n                    }\n                    this.$('.tabs .indicator').remove();\n                    this.$('.tabs').tabs();\n                    this.$('.indicator').addClass('ground-color-500');\n                    if (after_deletion){\n                        if (!this.$('.tabs .list-variant.tab').length) {\n                            return;\n                        }\n                        !this.$('.gallery-files').children('.gallery-file').length && this.$('.tabs .list-variant.tab a').first().click();\n                    }\n                });\n            },\n\n            filterType: function (file_type, sorting) {\n                this.$('.gallery-files').html('')\n                if (file_type === 'image' || file_type === 'video' || file_type === 'avatars') {\n                    this.$('.gallery-files').removeClass('voice')\n                    this.$('.gallery-files').addClass('grid')\n                } else if (file_type === 'voice') {\n                    this.$('.gallery-files').addClass('voice')\n                    this.$('.gallery-files').removeClass('grid')\n                } else {\n                    this.$('.gallery-files').removeClass('voice')\n                    this.$('.gallery-files').removeClass('grid')\n                }\n                this.$('.tabs .list-variant a').removeClass('active');\n                this.$('.tabs .list-variant[data-value=\"' + file_type + '\"] a').addClass('active');\n                let options = {type: file_type}\n                sorting && (options.order_by = sorting)\n                this.current_options = options\n                if (file_type === 'avatars')\n                    this.getAvatars(options)\n                else\n                    this.getFiles(options)\n            },\n\n            onTabClick: function (ev) {\n                let $target = $(ev.target).closest('.tab'),\n                    file_type = $target.attr('data-value');\n                this.current_page = 1;\n                this.total_pages = 0;\n                this.$('.gallery-files').html('')\n                this.filterType(file_type);\n            },\n\n            onUpdateAvatars: function (ev) {\n                this.updateStorage(false, true);\n                if (this.$('.tab .active').closest('.tab').attr('data-value') === 'avatars'){\n                    this.current_page = 1;\n                    this.total_pages = 0;\n                    this.$('.gallery-files').html('');\n                    this.filterType('avatars');\n                }\n            },\n\n            sortFiles: function (ev) {\n                let $target = $(ev.target).closest('.btn-gallery-sorting'),\n                    file_type = this.$('.tab .active').closest('.tab').attr('data-value'),\n                    sort_type = $target.attr('data-value');\n                this.current_page = 1;\n                this.total_pages = 0;\n                this.$('.gallery-files').html('')\n                this.filterType(file_type, sort_type);\n            },\n\n            onClickFile: function (ev) {\n                let $elem = $(ev.target);\n                if ($elem.hasClass('uploaded-video')) {\n                    let $file = $elem.closest('.gallery-file'),\n                        f_url = $file.attr('data-file');\n\n                    utils.dialogs.common('', '<video class=\"gallery-video-frame\" controls autoplay=1 width=\"420\" height=\"315\" src=\"' + f_url +'\"></video>', null, null, null, 'gallery-video-modal')\n                    return;\n                }\n                if ($elem.hasClass('no-uploaded') || $elem.hasClass('gallery-audio-file-not-uploaded')) {\n                    let $audio_elem = $elem.closest('.gallery-file'),\n                        f_url = $audio_elem.attr('data-file');\n                    $audio_elem.find('.mdi-play').removeClass('audio-file-play');\n                    $audio_elem[0].voice_message = this.renderVoiceMessage($audio_elem.find('.gallery-file-audio-container')[0], f_url);\n                    this.prev_audio_message && this.prev_audio_message.voice_message.pause();\n                    this.prev_audio_message = $audio_elem[0];\n                    return;\n                }\n\n                if ($elem.hasClass('mdi-play')) {\n                    let $audio_elem = $elem.closest('.gallery-file');\n                    this.prev_audio_message.voice_message.pause();\n                    this.prev_audio_message = $audio_elem[0];\n                    $audio_elem[0].voice_message.play();\n                    return;\n                }\n\n                if ($elem.hasClass('mdi-pause')) {\n                    this.prev_audio_message.voice_message.pause();\n                    return;\n                }\n            },\n\n            renderVoiceMessage: function (element, file_url) {\n                let not_expanded_msg = element.innerHTML,\n                    unique_id = 'waveform' + moment.now(),\n                    $elem = $(element),\n                    $msg_element = $elem.closest('.gallery-file');\n                $elem.addClass('voice-message-rendering').html($(templates.audio_file_waveform({waveform_id: unique_id})));\n                let aud = this.createAudio(file_url, unique_id);\n\n                aud.on('ready', () => {\n                    $msg_element.find('.gallery-file-placeholder-background .mdi').removeClass('no-uploaded');\n                    $msg_element.find('.gallery-file-placeholder-background').removeClass('gallery-audio-file-not-uploaded');\n                    let duration = Math.round(aud.getDuration());\n                    $elem.find('.voice-msg-total-time').text(utils.pretty_duration(duration));\n                    aud.play();\n                });\n\n                aud.on('error', () => {\n                    $elem.removeClass('voice-message-rendering');\n                    element.innerHTML = not_expanded_msg;\n                    aud.unAll();\n                    $elem.find('.voice-message-play').get(0).remove();\n                    utils.callback_popup_message(xabber.getString(\"jingle__error__audio_not_supported\"), 3000);\n                });\n\n                aud.on('play', () => {\n                    $msg_element.find('.gallery-file-placeholder-background .mdi').addClass('mdi-pause').removeClass('mdi-play');\n                    $msg_element.addClass('playing');\n                    let timerId = setInterval(function() {\n                        let cur_time = Math.round(aud.getCurrentTime());\n                        if (aud.isPlaying())\n                            $elem.find('.voice-msg-current-time').text(utils.pretty_duration(cur_time));\n                        else\n                            clearInterval(timerId);\n                    }, 100);\n                });\n\n                aud.on('finish', () => {\n                    $msg_element.find('.gallery-file-placeholder-background .mdi').removeClass('mdi-pause').addClass('mdi-play');\n                    $msg_element.removeClass('playing');\n                });\n\n                aud.on('pause', () => {\n                    $msg_element.find('.gallery-file-placeholder-background .mdi').removeClass('mdi-pause').addClass('mdi-play');\n                    $msg_element.removeClass('playing');\n                });\n\n                $elem.find('.voice-message-volume')[0].onchange = () => {\n                    aud.setVolume($elem.find('.voice-message-volume').val()/100);\n                };\n                return aud;\n            },\n\n            createAudio: function(file_url, unique_id) {\n                let audio = WaveSurfer.create({\n                    container: \"#\" + unique_id,\n                    scrollParent: false,\n                    barWidth: 3,\n                    height: 48,\n                    barHeight: 48,\n                    cursorColor: 'rgba(211,47,47,0.8)',\n                    autoCenter: false,\n                    normalize: true,\n                    hideScrollBar: true,\n                    progressColor: '#757575'\n                });\n                audio.load(file_url);\n                audio.setVolume(0.5);\n                return audio;\n            },\n\n            getFiles: function (options) {\n                this.account.testGalleryTokenExpire(() => {\n                    options && options.file && (options = {});\n                    options = Object.assign({obj_per_page: 50, order_by: '-id'}, options);\n                    if (this.account.get('gallery_token') && this.account.get('gallery_url')) {\n                        if (this.loading_files && this.current_rendered_type === options.type && !options.page)\n                            return;\n                        this.current_rendered_type = options.type;\n                        this.loading_files = true\n                        $(env.templates.contacts.preloader()).appendTo(this.$('.gallery-files'))\n                        $.ajax({\n                            type: 'GET',\n                            headers: {\"Authorization\": 'Bearer ' + this.account.get('gallery_token')},\n                            url: this.account.get('gallery_url') + 'v1/files/',\n                            dataType: 'json',\n                            data: options,\n                            success: (response) => {\n                                response.type = options.type\n                                this.renderFiles(response)\n                                this.loading_files = false\n                            },\n                            error: (response) => {\n                                this.account.handleCommonGalleryErrors(response)\n                                this.current_rendered_type = undefined;\n                                console.log(response)\n                                this.loading_files = false\n                                this.$('.gallery-files .preloader-wrapper').remove()\n                            }\n                        });\n                    }\n                });\n            },\n\n            getAvatars: function (options) {\n                this.account.testGalleryTokenExpire(() => {\n                    options && options.file && (options = {});\n                    options = Object.assign({obj_per_page: 50, order_by: '-id', type: \"avatars\"}, options);\n                    if (this.account.get('gallery_token') && this.account.get('gallery_url')) {\n                        if (this.loading_files && this.current_rendered_type === options.type && !options.page)\n                            return;\n                        this.current_rendered_type = options.type;\n                        this.loading_files = true\n                        $(env.templates.contacts.preloader()).appendTo(this.$('.gallery-files'))\n                        $.ajax({\n                            type: 'GET',\n                            headers: {\"Authorization\": 'Bearer ' + this.account.get('gallery_token')},\n                            url: this.account.get('gallery_url') + 'v1/avatar/',\n                            dataType: 'json',\n                            data: options,\n                            success: (response) => {\n                                response.type = options.type\n                                this.renderFiles(response)\n                                this.loading_files = false\n                            },\n                            error: (response) => {\n                                this.account.handleCommonGalleryErrors(response)\n                                this.current_rendered_type = undefined\n                                console.log(response)\n                                this.loading_files = false\n                                this.$('.gallery-files .preloader-wrapper').remove()\n                            }\n                        });\n                    }\n                });\n            },\n\n            renderFiles: function (response) {\n                if (response.type != this.$('.tab .active').closest('.tab').attr('data-value'))\n                    return;\n                if (!response.total_objects && response.type != 'avatars'){\n                    if (response.type){\n                        let tab = this.$('.tabs .list-variant[data-value=' + response.type + ']');\n                        tab.removeClass('tab');\n                        tab.addClass('hidden');\n                        this.$('.tabs .indicator').remove();\n                        this.$('.tabs').tabs();\n                        this.$('.indicator').addClass('ground-color-500');\n                    }\n                }\n                if (!response.items.length){\n                    !this.$('.gallery-files').children('.gallery-file').length && this.$('.tabs .list-variant.tab a').first().click();\n                    return;\n                }\n                this.total_pages = response.total_pages;\n                this.$('.gallery-files .preloader-wrapper').remove()\n                if (response.items.length){\n                    response.items.forEach((item) => {\n                        item.thumbnail && item.thumbnail.url && (item.thumbnail = item.thumbnail.url);\n                        let $gallery_file = $(templates.media_gallery_account_file({file: item, svg_icon: utils.file_type_icon_svg(item.media_type), filesize: utils.pretty_size(item.size), duration: utils.pretty_duration(item.duration)}));\n                        (response.type === 'avatars') && $gallery_file.addClass('gallery-avatar');\n                        $gallery_file.appendTo(this.$('.gallery-files'));\n                        $gallery_file.find('.uploaded-img').magnificPopup({\n                            type: 'image',\n                            closeOnContentClick: true,\n                            fixedContentPos: true,\n                            mainClass: 'mfp-no-margins mfp-with-zoom',\n                            image: {\n                                verticalFit: true,\n                                titleSrc: function(item) {\n                                    return '<a class=\"image-source-link\" href=\"'+item.el.attr('src')+'\" target=\"_blank\">' + item.name + '</a>';\n                                }\n                            },\n                            zoom: {\n                                enabled: true,\n                                duration: 300\n                            }\n                        });\n                    });\n                }\n                else {\n                    this.$('.gallery-files').html(xabber.getString(\"no_files\"))\n                }\n                let dropdown_settings = {\n                    inDuration: 100,\n                    outDuration: 100,\n                    constrainWidth: false,\n                    hover: false,\n                    alignment: 'right'\n                };\n                this.$('.dropdown-button').dropdown(dropdown_settings)\n            },\n\n            deleteFile: function (ev) {\n                let $target = $(ev.target).closest('.gallery-file'),\n                    file_id = $target.attr('data-id');\n                this.account.deleteFile(file_id,(response) => {\n                    this.updateStorage(true);\n                    $target.detach();\n                }, (err) => {\n                })\n            },\n\n            deleteAvatar: function (ev) {\n                this.account.testGalleryTokenExpire(() => {\n                    let $target = $(ev.target).closest('.gallery-file'),\n                        file_id = $target.attr('data-id');\n                    if (this.account.get('gallery_token') && this.account.get('gallery_url') && file_id)\n                        $.ajax({\n                            type: 'DELETE',\n                            headers: {\"Authorization\": 'Bearer ' + this.account.get('gallery_token')},\n                            url: this.account.get('gallery_url') + 'v1/avatar/',\n                            dataType: 'json',\n                            data: JSON.stringify({id: file_id}),\n                            success: (response) => {\n                                this.updateStorage(true);\n                                $target.detach();\n                            },\n                            error: (response) => {\n                                this.account.handleCommonGalleryErrors(response)\n                                console.log(response)\n                            }\n                        });\n                });\n            },\n\n            deleteFilesFiltered: function (ev) {\n                this.account.testGalleryTokenExpire(() => {\n                    let $target = $(ev.target).closest('.property-variant'),\n                        days = $target.attr('data-date'),\n                        date = new Date();\n                    days && date.setDate(date.getDate() - days)\n                    if (this.account.get('gallery_token') && this.account.get('gallery_url') && date && date.toISOString().split('T') && date.toISOString().split('T')[0])\n                        $.ajax({\n                            type: 'DELETE',\n                            headers: {\"Authorization\": 'Bearer ' + this.account.get('gallery_token')},\n                            url: this.account.get('gallery_url') + 'v1/files/',\n                            dataType: 'json',\n                            data: JSON.stringify({date_lte: date.toISOString().split('T')[0]}),\n                            success: (response) => {\n                                this.updateStorage(true);\n                            },\n                            error: (response) => {\n                                this.account.handleCommonGalleryErrors(response)\n                                console.log(response)\n                            }\n                        });\n                });\n            },\n\n            onFileInputChanged: function (ev) {\n                let target = ev.target,\n                    files = [];\n                for (let i = 0; i < target.files.length; i++) {\n                    files.push(target.files[i]);\n                }\n\n                if (files) {\n                    this.account.prepareFiles(files, this.openStoragePanel.bind(this));\n                    $(target).val('')\n                }\n            },\n        });\n\n        xabber.AccountSettingsLeftView = xabber.BasicView.extend({\n            className: 'account-settings-left-wrap',\n            template: templates.settings_left,\n            avatar_size: constants.AVATAR_SIZES.ACCOUNT_SETTINGS_LEFT,\n\n            events: {\n                \"change .main-info-wrap .circle-avatar input\": \"changeAvatar\",\n                \"click .btn-choose-image\": \"chooseAvatar\",\n                \"click .btn-emoji-panel\": \"openEmojiPanel\",\n                \"click .btn-selfie\": \"openWebcamPanel\",\n                \"click .main-info-wrap .status\": \"openChangeStatus\",\n                \"click .settings-tabs-wrap .settings-tab\": \"jumpToBlock\",\n                \"click .settings-tab.delete-account\": \"deleteAccount\"\n            },\n\n            _initialize: function () {\n                this.status_field = new xabber.StatusMessageWidget({\n                    el: this.$('.status-wrap')[0],\n                    model: this.model\n                });\n                this.updateName();\n                this.updateStatus();\n                this.updateAvatar();\n                this.updateBlocks();\n                this.model.on(\"change:name\", this.updateName, this);\n                this.model.on(\"change:status_updated\", this.updateStatus, this);\n                this.model.on(\"change:image\", this.updateAvatar, this);\n                this.model.on(\"change:gallery_token\", this.updateGallery, this);\n                this.model.on(\"activate deactivate\", this.updateBlocks, this);\n                this.model.on(\"destroy\", this.remove, this);\n            },\n\n            render: function (options) {\n                !options.block_name && (options.block_name = 'connection')\n                this.$el.switchClass('vcard-edit', options.right == 'vcard_edit');\n                this.$('.settings-tab[data-block-name=\"tokens\"]').hideIf(this.model.get('auth_type') !== 'x-token');\n                this.$('.settings-tab').removeClass('active');\n                this.$(`.settings-tab[data-block-name=\"${options.block_name}\"]`).addClass('active');\n                this.$('.circle-avatar.dropdown-button').dropdown({\n                    inDuration: 100,\n                    outDuration: 100,\n                    constrainWidth: false,\n                    hover: false,\n                    alignment: 'left'\n                });\n\n                this.updateCSS();\n                return this;\n            },\n\n            updateName: function () {\n                this.$('.name').text(this.model.get('name'));\n                this.updateNameCSS();\n            },\n\n            updateStatus: function () {\n                this.$('.main-info-wrap .status').attr('data-status', this.model.get('status'));\n            },\n\n            updateAvatar: function () {\n                let image = this.model.cached_image;\n                this.$('.circle-avatar').setAvatar(image, this.avatar_size);\n            },\n\n            updateBlocks: function () {\n                let connected = this.model.isConnected();\n                this.$('.main-info-wrap').switchClass('disconnected', !connected);\n                // this.$('.settings-tab[data-block-name=\"xmpp-resources\"]').showIf(connected);\n                this.$('.settings-tab[data-block-name=\"server-info\"]').showIf(connected);\n                this.$('.settings-tab[data-block-name=\"blocklist\"]').showIf(connected);\n                this.$('.settings-tab[data-block-name=\"groups-info\"]').showIf(connected);\n                this.updateGallery();\n                this.updateScrollBar();\n            },\n\n            updateGallery: function () {\n                let connected = this.model.isConnected();\n                this.$('.settings-tab[data-block-name=\"media-gallery\"]').showIf(connected && this.model.get('gallery_token'));\n            },\n\n            updateNameCSS: function () {\n                if (!this.isVisible())\n                    return;\n                let $name = this.$('.name');\n                $name.removeAttr('style');\n                let wrap_width = this.$('.name-wrap').width(),\n                    width = $name.width(),\n                    font_size = 22;\n                while (width > wrap_width && font_size > 12) {\n                    $name.css({'font-size': font_size});\n                    width = $name.width();\n                    font_size -= 2;\n                }\n                $name.css({'margin-left': (wrap_width - width) / 2});\n            },\n\n            chooseAvatar: function () {\n                if (this.model.get('gallery_token') && this.model.get('gallery_url')) {\n                    let avatar_view = new xabber.SetAvatarView();\n                    avatar_view.render({model: this.model});\n                } else\n                    this.$('.main-info-wrap .circle-avatar input').click();\n            },\n\n            openEmojiPanel: function () {\n                let emoji_panel_view = new xabber.EmojiProfileImageView();\n                emoji_panel_view.open({model: this.model});\n            },\n\n            openWebcamPanel: function () {\n                let webcam_panel_view = new xabber.WebcamProfileImageView();\n                webcam_panel_view.open({model: this.model});\n            },\n\n            changeAvatar: function (ev) {\n                let field = ev.target;\n                if (!field.files.length)\n                    return;\n                let file = field.files[0];\n                field.value = '';\n                if (file.size > constants.MAX_AVATAR_FILE_SIZE && !(this.model.get('gallery_token') && this.model.get('gallery_url'))) {\n                    utils.dialogs.error(xabber.getString(\"group_settings__error__avatar_too_large\"));\n                    return;\n                } else if (!file.type.startsWith('image')) {\n                    utils.dialogs.error(xabber.getString(\"group_settings__error__wrong_image\"));\n                    return;\n                }\n                this.$('.circle-avatar').find('.preloader-wrap').addClass('visible').find('.preloader-wrapper').addClass('active');\n                utils.images.getAvatarFromFile(file).done((image, hash, size) => {\n                    if (image) {\n                        this.model.pubAvatar({base64: image, hash: hash, size: size, type: file.type, file: file}, () => {\n                                this.$('.circle-avatar').setAvatar(image, this.avatar_size);\n                                this.$('.circle-avatar').find('.preloader-wrap').removeClass('visible').find('.preloader-wrapper').removeClass('active');\n                            }, () => {\n                                this.$('.circle-avatar').find('.preloader-wrap').removeClass('visible').find('.preloader-wrapper').removeClass('active');\n                                utils.dialogs.error(xabber.getString(\"group_settings__error__wrong_image\"));\n                            });\n                    } else\n                        utils.dialogs.error(xabber.getString(\"group_settings__error__wrong_image\"));\n                });\n            },\n\n            updateCSS: function () {\n                this.updateNameCSS();\n            },\n\n            openChangeStatus: function () {\n                !xabber.change_status_view && (xabber.change_status_view = new xabber.ChangeStatusView());\n                xabber.change_status_view.open(this.model);\n            },\n\n            jumpToBlock: function (ev) {\n                let $tab = $(ev.target).closest('.settings-tab'),\n                    block_name = $tab.data('block-name');\n                if (block_name === 'vcard_edit'){\n                    this.model.showSettings(block_name, 'vcard');\n                    this.$('.settings-tab').removeClass('active');\n                    $tab.addClass('active');\n                }\n                else if (block_name === 'media-gallery'){\n                    this.model.showSettings(null, block_name);\n                    this.model.settings_right.gallery_view.$('.tabs .list-variant:not(.hidden)').first().click();\n                }\n                else\n                    this.model.showSettings(null, block_name);\n            },\n\n            deleteAccount: function () {\n                let dialog_options = [];\n                if (xabber.api_account && xabber.api_account.get('connected')) {\n                    dialog_options = [{name: 'delete_settings',\n                        checked: this.model.settings.get('to_sync'),\n                        text: xabber.getString(\"dialog_delete_account__label_delete_synced_settings\")}];\n                }\n                utils.dialogs.ask(xabber.getString(\"settings_account__button_quit_account\"), xabber.getString(\"dialog_quit_account__confirm\"),\n                    dialog_options, { ok_button_text: xabber.getString(\"button_quit\")}).done((res) => {\n                    if (!res)\n                        return;\n                    if (res.delete_settings && xabber.api_account) {\n                        if (xabber.api_account.get('xmpp_binding') === this.model.get('jid'))\n                            xabber.api_account._call_method('DELETE', '/accounts/current/client-settings/', {jid: this.model.get('jid')});\n                        else\n                            xabber.api_account.delete_settings(this.model.get('jid'));\n                    }\n                    this.model.deleteAccount();\n                });\n            }\n        });\n\n        xabber.AccountSettingsRightView = xabber.BasicView.extend({\n            className: 'account-settings-right-wrap',\n            template: templates.settings_right,\n            ps_selector: '.panel-content',\n\n            events: {\n                \"change .enabled-state input\": \"setEnabled\",\n                \"change .setting-send-chat-states input\": \"setTypingNotification\",\n                \"change .setting-use-omemo input\": \"setEnabledOmemo\",\n                \"click .btn-change-password\": \"showPasswordView\",\n                \"click .btn-reconnect\": \"reconnect\",\n                \"click\": \"hideResources\",\n                \"click .last-auth.resource\": \"showResources\",\n                \"change .sync-account\": \"changeSyncSetting\",\n                \"click .btn-delete-settings\": \"deleteSettings\",\n                \"change .color-scheme input[type=radio][name=account_color]\": \"changeColor\",\n                \"click .token-wrap .btn-revoke-token\": \"revokeXToken\",\n                \"click .tokens .btn-revoke-all-tokens\": \"revokeAllXTokens\",\n                \"click .omemo-info .btn-manage-devices\": \"openDevicesWindow\",\n                \"click .btn-block\": \"openBlockWindow\",\n                \"click .btn-unblock-selected\": \"unblockSelected\",\n                \"click .btn-deselect-blocked\": \"deselectBlocked\",\n                \"click .btn-delete-files\": \"deleteFilesFiltered\",\n                \"click .omemo-info .btn-purge-keys\": \"purgeKeys\"\n            },\n\n            _initialize: function () {\n                // this.resources_view = this.addChild('resources', xabber.AccountResourcesView,\n                //     {model: this.model.resources, el: this.$('.xmpp-resources')[0]});\n                this.vcard_view = this.addChild('vcard', xabber.AccountVCardView,\n                    {model: this.model, el: this.$('.vcard')[0]});\n                this.gallery_view = this.addChild('media-gallery', xabber.AccountMediaGalleryView,\n                    {model: this.model, el: this.$('.media-gallery')[0]});\n                this.$('.account-name .value').text(this.model.get('jid'));\n                this.updateStatus();\n                this.updateView();\n                this.showConnectionStatus();\n                this.updateSynchronizationBlock();\n\n                this.model.resources.on(\"change\", this.updateXTokens, this);\n                this.model.resources.on(\"add\", this.updateXTokens, this);\n                this.model.resources.on(\"destroy\", this.updateXTokens, this);\n                this.model.session.on(\"change:reconnecting\", this.updateReconnectButton, this);\n                this.model.session.on(\"change:conn_feedback\", this.showConnectionStatus, this);\n                this.model.settings.on(\"change:to_sync\", this.updateSyncOption, this);\n                this.model.settings.on(\"change:deleted\", this.updateDelSettingsButton, this);\n                this.model.settings.on(\"change:to_sync change:synced\", this.updateSyncState, this);\n                xabber.api_account && xabber.api_account.on(\"change:connected\", this.updateSynchronizationBlock, this);\n                this.model.on(\"change:enabled\", this.updateEnabled, this);\n                this.model.settings.on(\"change:omemo\", this.updateEnabledOmemo, this);\n                this.model.settings.on(\"change:encrypted_chatstates\", this.updateEncryptedChatstates, this);\n                this.model.on(\"change:status_updated\", this.updateStatus, this);\n                this.model.on(\"activate deactivate\", this.updateView, this);\n                this.model.on(\"change:auth_type\", this.updateView, this);\n                this.model.on(\"destroy\", this.remove, this);\n            },\n\n            render: function (options) {\n                !options.block_name && (options.block_name = 'connection')\n                this.updateEnabledOmemo();\n                this.updateEncryptedChatstates();\n                this.updateEnabled();\n                this.updateXTokens();\n                this.updateView();\n                this.$('.main-resource .client').text(xabber.get('client_name'));\n                this.$('.main-resource .resource').text(this.model.resource);\n                this.$('.main-resource .priority').text(this.model.get('priority'));\n                this.$(`.color-scheme input[type=radio][name=account_color][value=\"${this.model.settings.get('color')}\"]`)\n                    .prop('checked', true);\n                if (options.block_name){\n                    this.$('.settings-block-wrap').addClass('hidden');\n                    this.$('.settings-block-wrap.'+options.block_name).removeClass('hidden');\n                    this.$('.settings-panel-head span.settings-panel-head-title').text(this.$('.settings-block-wrap.'+options.block_name).attr('data-header'));\n                    this.$('.btn-block').switchClass('hidden2', options.block_name != 'blocklist-info');\n                    this.$('.media-gallery-button.btn-more').hideIf(options.block_name != 'media-gallery');\n                    if (options.block_name === 'media-gallery') {\n                        let dropdown_settings = {\n                            inDuration: 100,\n                            outDuration: 100,\n                            constrainWidth: false,\n                            hover: false,\n                            alignment: 'right'\n                        };\n                        this.$('.media-gallery-button.dropdown-button').dropdown(dropdown_settings);\n\n                        this.$('.btn-delete-files-variants').dropdown({\n                            inDuration: 100,\n                            outDuration: 100,\n                            hover: true,\n                            belowOrigin: true,\n                        });\n                    }\n                }\n                this.scrollToChild(this.$('.settings-block-wrap.'+options.block_name));\n                this.$('.panel-content-wrap').removeClass('hidden');\n                if (this.ps_container.length) {\n                    this.ps_container.perfectScrollbar(\n                        _.extend(this.ps_settings || {}, xabber.ps_settings)\n                    );\n                }\n                return this;\n            },\n\n            updateStatus: function () {\n                let account = this.model,\n                    status = account.get('status'),\n                    status_message = account.getStatusMessage();\n                this.$('.main-resource .status').attr('data-status', status);\n                this.$('.main-resource .status-message').text(status_message);\n            },\n\n            updateView: function () {\n                let connected = this.model.isConnected();\n                this.$('.connection-wrap .buttons-wrap .btn-change-password').hideIf(this.model.get('auth_type') === 'x-token');\n                this.$('.connection-wrap .buttons-wrap .btn-reconnect').hideIf(this.model.get('auth_type') === 'x-token');\n                this.updateScrollBar();\n            },\n\n            updateSynchronizationBlock: function () {\n                this.$('.xabber-account-features-wrap').showIf(xabber.api_account && xabber.api_account.get('connected'));\n                this.updateSyncState();\n                this.updateSyncOption();\n                this.updateDelSettingsButton();\n            },\n\n            showResources: function (ev) {\n                this.$(`.token-resource-wrap`).hideIf(true)\n                let resource_id = $(ev.target).attr('data-resource-id');\n                this.$(`.token-resource-wrap[data-resource-id=\"${resource_id}\"]`).hideIf(false)\n            },\n\n            hideResources: function (ev) {\n                if (!($(ev.target).hasClass('last-auth') && $(ev.target).hasClass('resource') || $(ev.target).closest(\".token-resource-wrap\").length > 0))\n                    this.$(`.token-resource-wrap`).hideIf(true)\n            },\n\n            renderAllXTokens: function () {\n                this.$('.panel-content-wrap .tokens .sessions-wrap').html(\"\");\n                $(_.sortBy(this.model.x_tokens_list), 'last_auth').each((idx, token) => {\n                    let pretty_token = {\n                        resource_obj: undefined,\n                        client: token.client,\n                        device: token.device,\n                        token_uid: token.token_uid,\n                        ip: token.ip,\n                        last_auth: pretty_datetime(token.last_auth),\n                        expire: pretty_datetime(token.expire)\n                    };\n                    let resource_obj = this.model.resources.findWhere({ token_uid: token.token_uid });\n                    if (resource_obj)\n                        pretty_token.resource_obj = resource_obj.toJSON();\n                    if (this.model.get('x_token')) {\n                        if (this.model.get('x_token').token_uid == token.token_uid) {\n                            let $cur_token_html = $(templates.current_token_item(pretty_token));\n                            this.$('.panel-content-wrap .tokens .current-session').append($cur_token_html);\n                            return;\n                        }\n                    }\n                    let $token_html = $(templates.token_item(pretty_token));\n                    this.$('.panel-content-wrap .tokens .all-sessions').append($token_html);\n                });\n                if (this.$('.panel-content-wrap .tokens .all-sessions').children().length)\n                    this.$('.panel-content-wrap .tokens .all-sessions-wrap').removeClass('hidden');\n                else\n                    this.$('.panel-content-wrap .tokens .all-sessions-wrap').addClass('hidden');\n            },\n\n            updateXTokens: function () {\n                if (this.model.get('auth_type') !== 'x-token') {\n                    this.$('.panel-content-wrap .tokens').addClass('hidden');\n                    this.$('.panel-content-wrap .tokens .sessions-wrap').children().html(\"\");\n                    return;\n                }\n                this.$('.panel-content-wrap .tokens .sessions-wrap').html(\"\");\n                if (this.model.x_tokens_list && this.model.x_tokens_list.length) {\n                    this.renderAllXTokens();\n                }\n            },\n\n            revokeXToken: function (ev) {\n                let $target = $(ev.target).closest('.token-wrap'),\n                    token_uid = $target.data('token-uid');\n                this.model.revokeXToken([token_uid], () => {\n                    if (this.model.get('x_token'))\n                        if (this.model.get('x_token').token_uid === token_uid) {\n                            this.model.deleteAccount();\n                            return;\n                        }\n                    this.model.getAllXTokens();\n                });\n            },\n\n            revokeAllXTokens: function () {\n                utils.dialogs.ask(xabber.getString(\"settings_account__dialog_terminate_sessions__header\"), xabber.getString(\"terminate_all_sessions_title\"), null, { ok_button_text: xabber.getString(\"button_terminate\")}).done((result) => {\n                    if (result && this.model.x_tokens_list)\n                        this.model.revokeAllXTokens(() => {\n                            this.model.getAllXTokens();\n                        });\n                });\n            },\n\n            updateSyncState: function () {\n                let state;\n                if (!this.model.settings.get('to_sync'))\n                    state = 'off';\n                else\n                    state = this.model.settings.get('synced') ? 'yes' : 'no';\n                this.$('.sync-status').text(xabber.getString(constants.SYNCED_STATUS_DATA[state].tip));\n                let mdiclass = constants.SYNCED_STATUS_DATA[state].icon,\n                    $sync_icon = this.$('.sync-status-icon');\n                $sync_icon.removeClass($sync_icon.attr('data-mdiclass'))\n                    .attr('data-mdiclass', mdiclass).addClass(mdiclass);\n            },\n\n            updateSyncOption: function () {\n                this.$('.sync-account').prop('checked', this.model.settings.get('to_sync'));\n            },\n\n            updateDelSettingsButton: function () {\n                this.$('.btn-delete-settings').hideIf(this.model.settings.get('deleted'));\n            },\n\n            updateEnabled: function () {\n                let enabled = this.model.get('enabled');\n                this.$('.enabled-state input[type=checkbox]').prop('checked', enabled);\n            },\n\n            updateEnabledOmemo: function () {\n                let enabled = this.model.settings.get('omemo'), has_keys = false;\n                if (this.model.omemo) {\n                    has_keys = Object.keys(this.model.omemo.get('prekeys')).length;\n                } else {\n                    let omemo = new xabber.Omemo({id: 'omemo'}, {\n                        account: this.model,\n                        storage_name: xabber.getStorageName() + '-omemo-settings-' + this.model.get('jid'),\n                        fetch: 'before'\n                    });\n                    has_keys = Object.keys(omemo.get('prekeys')).length;\n                    omemo.destroy();\n                }\n                if (_.isUndefined(enabled))\n                    enabled = false;\n                if (enabled && this.model.omemo_enable_view)\n                    this.model.omemo_enable_view.close();\n                this.$('.setting-use-omemo input[type=checkbox]').prop('checked', enabled);\n                this.$('.omemo-settings-wrap .setting-wrap:not(.omemo-enable)').switchClass('hidden', !enabled);\n                this.$('.omemo-settings-wrap .setting-wrap.purge-keys').switchClass('hidden', !has_keys);\n            },\n\n            updateEncryptedChatstates: function () {\n                let enabled = this.model.settings.get('encrypted_chatstates');\n                this.$('.setting-send-chat-states input[type=checkbox]').prop('checked', enabled);\n            },\n\n            updateReconnectButton: function () {\n                this.$('.btn-reconnect').switchClass('disabled', this.model.session.get('reconnecting'));\n            },\n\n            setEnabled: function (ev) {\n                let enabled = this.$('.enabled-state input').prop('checked');\n                this.model.save('enabled', enabled);\n                enabled ? this.model.activate() : this.model.deactivate();\n            },\n\n            setEnabledOmemo: function () {\n                let enabled = this.$('.setting-use-omemo input').prop('checked');\n                this.model.settings.save('omemo', enabled);\n                this.$('.omemo-settings-wrap .setting-wrap:not(.omemo-enable)').switchClass('hidden', !enabled);\n                if (enabled)\n                    this.initOmemo();\n                else\n                    this.destroyOmemo();\n            },\n\n            setTypingNotification: function () {\n                let enabled = this.$('.setting-send-chat-states input').prop('checked');\n                this.model.settings.save('encrypted_chatstates', enabled);\n            },\n\n            initOmemo: function () {\n                this.model.omemo = new xabber.Omemo({id: 'omemo'}, {\n                    account: this.model,\n                    storage_name: xabber.getStorageName() + '-omemo-settings-' + this.model.get('jid'),\n                    fetch: 'before'\n                });\n                setTimeout(() => {\n                    this.model.omemo.onConnected();\n                }, 1000);\n            },\n\n            destroyOmemo: function () {\n                this.model.omemo.destroy();\n                this.model.omemo = undefined;\n            },\n\n            openDevicesWindow: function () {\n                if (this.model.omemo) {\n                    !this.omemo_devices && (this.omemo_devices = new xabber.Fingerprints({model: this.model.omemo}));\n                    this.omemo_devices.open();\n                }\n                else\n                    utils.dialogs.error(xabber.getString(\"omemo__chat__placeholder_encryption_disabled\"));\n            },\n\n            purgeKeys: function () {\n                utils.dialogs.ask(xabber.getString('omemo__dialog_purge_keys__header'), xabber.getString('omemo__dialog_purge_keys__text'),\n                    null, { ok_button_text: xabber.getString('omemo__dialog_purge_keys__button_purge_keys')}).done((result) => {\n                    if (result) {\n                        if (this.model.omemo) {\n                            let device_id = this.model.omemo.get('device_id');\n                            this.model.omemo.save('prekeys', {});\n                            this.model.omemo.bundle && (this.model.omemo.bundle.preKeys = []);\n                            if (this.model.omemo.own_devices[device_id]) {\n                                this.model.omemo.own_devices[device_id].preKeys = [];\n                                this.model.omemo.own_devices[device_id].set({ik: null, fingerprint: null});\n                            }\n                            this.model.getConnectionForIQ().omemo.removeItemFromNode(`${Strophe.NS.OMEMO}:bundles`, device_id);\n                        } else {\n                            let omemo = new xabber.Omemo({id: 'omemo'}, {\n                                account: this.model,\n                                storage_name: xabber.getStorageName() + '-omemo-settings-' + this.model.get('jid'),\n                                fetch: 'before'\n                            });\n                            omemo.save('prekeys', {});\n                            this.model.getConnectionForIQ().omemo.removeItemFromNode(`${Strophe.NS.OMEMO}:bundles`, omemo.get('device_id'));\n                            omemo.destroy();\n                        }\n                        this.$('.omemo-settings-wrap .setting-wrap.purge-keys').switchClass('hidden', true);\n                    }\n                });\n            },\n\n            showConnectionStatus: function () {\n                this.$('.conn-status').text(this.model.session.get('conn_feedback'));\n            },\n\n            showPasswordView: function () {\n                this.model.password_view.show();\n            },\n\n            reconnect: function () {\n                if (this.model.session.get('reconnecting'))\n                    return;\n                this.model.save('enabled', true);\n                if (this.model.connection.connected)\n                    this.model.connection.disconnect();\n                else\n                    this.model.connect();\n            },\n\n            changeSyncSetting: function (ev) {\n                let to_sync = $(ev.target).prop('checked'),\n                    settings = this.model.settings;\n                settings.save('to_sync', to_sync);\n                if (to_sync) {\n                    settings.update_timestamp();\n                    xabber.api_account && xabber.api_account.synchronize_main_settings();\n                }\n            },\n\n            deleteSettings: function () {\n                utils.dialogs.ask(xabber.getString(\"progress_title_delete_settings\"), xabber.getString(\"delete_settings_summary\"),\n                    [{name: 'delete_account', checked: this.model.settings.get('to_sync'),\n                        text: xabber.getString(\"delete_settings__optional_button__delete_synced_account\")}],{ ok_button_text: xabber.getString(\"delete\")}).done((res) => {\n                    if (res) {\n                        if (!res.delete_account) {\n                            this.model.settings.save('to_sync', false);\n                        } else if (!this.model.settings.get('to_sync')) {\n                            this.model.deleteAccount(true);\n                        }\n                        xabber.api_account && xabber.api_account.delete_settings(this.model.get('jid'));\n                    }\n                });\n            },\n\n            changeColor: function (ev) {\n                let value = ev.target.value;\n                this.model.settings.update_settings({color: value});\n            },\n\n            openBlockWindow: function () {\n                utils.dialogs.ask_enter_value(xabber.getString(\"dialog_block_xmpp_address__text\"), null, {modal_class: 'account-add-blocked', input_placeholder_value: xabber.getString(\"dialog_block_xmpp_address__hint_address\")}, { ok_button_text: xabber.getString(\"contact_bar_block\")}).done((result) => {\n                    if (result) {\n                        let contact = this.model.contacts.get(result);\n                        if (contact)\n                            contact.block();\n                        else {\n                            this.model.contacts.blockContact(result);\n                        }\n                    }\n                });\n            },\n\n            unblockSelected: function () {\n                if (this.children && this.children.blocklist)\n                    this.children.blocklist.unblockSelected();\n            },\n\n            deselectBlocked: function () {\n                if (this.children && this.children.blocklist)\n                    this.children.blocklist.deselectBlocked();\n            },\n\n            deleteFilesFiltered: function (ev) {\n                if (this.gallery_view)\n                    this.gallery_view.deleteFilesFiltered(ev);\n            },\n        });\n\n        xabber.StatusMessageWidget = xabber.InputWidget.extend({\n            field_name: 'status-message',\n            placeholder: 'Set custom status',\n\n            bindModelEvents: function () {\n                this.model.on(\"change:status_updated\", this.updateValue, this);\n            },\n\n            getValue: function () {\n                return this.model.getStatusMessage();\n            },\n\n            setValue: function (value) {\n                this.model.setStatus(null, value);\n            }\n        });\n\n        xabber.AccountSettingsItemView = xabber.BasicView.extend({\n            className: 'xmpp-account draggable droppable',\n            template: templates.global_settings_item,\n            avatar_size: constants.AVATAR_SIZES.SETTINGS_ACCOUNT_ITEM,\n\n            events: {\n                \"click .account-info-wrap\": \"showSettings\",\n                \"change .enabled-state input\": \"setEnabled\",\n            },\n\n            _initialize: function () {\n                this.$('.jid').text(this.model.get('jid'));\n                this.updateEnabled();\n                this.updateAvatar();\n                this.updateColorScheme();\n                this.updateSyncState();\n                this.showConnectionStatus();\n                this.model.on(\"change:enabled\", this.updateEnabled, this);\n                this.model.settings.on(\"change:omemo\", this.updateEnabledOmemo, this);\n                this.model.on(\"change:image\", this.updateAvatar, this);\n                this.model.settings.on(\"change:color\", this.updateColorScheme, this);\n                this.model.session.on(\"change:conn_feedback\", this.showConnectionStatus, this);\n                this.$el.on('drag_to', this.onDragTo.bind(this));\n                this.$('.move-account-to-this')\n                    .on('move_xmpp_account', this.onMoveAccount.bind(this));\n                this.model.settings.on(\"change:to_sync\", this.updateSyncState, this);\n            },\n\n            updateAvatar: function () {\n                let image = this.model.cached_image;\n                this.$('.circle-avatar').setAvatar(image, this.avatar_size);\n            },\n\n            updateColorScheme: function () {\n                this.$el.attr('data-color', this.model.settings.get('color'));\n            },\n\n            showConnectionStatus: function () {\n                this.$('.conn-status').text(this.model.session.get('conn_feedback'));\n            },\n\n            updateEnabled: function () {\n                let enabled = this.model.get('enabled');\n                this.$el.switchClass('disabled', !enabled);\n                this.$('.enabled-state input[type=checkbox]').prop('checked', enabled);\n            },\n\n            setEnabled: function (ev) {\n                let enabled = this.$('.enabled-state input').prop('checked');\n                this.model.save('enabled', enabled);\n                enabled ? this.model.activate() : this.model.deactivate();\n            },\n\n            onDragTo: function (ev, drop_elem) {\n                drop_elem && $(drop_elem).trigger('move_xmpp_account', this.model);\n            },\n\n            onMoveAccount: function (ev, account) {\n                this.model.collection.moveBefore(account, this.model);\n            },\n\n            updateSyncState: function () {\n                let connected = xabber.api_account && xabber.api_account.get('connected');\n                this.$('.sync-marker-wrap').showIf(connected);\n                this.$el.find('.sync-marker').showIf(this.model.settings.get('to_sync'));\n            },\n\n            showSettings: function () {\n                this.model.showSettings();\n            }\n        });\n\n        xabber.SettingsAccountsBlockView = xabber.BasicView.extend({\n            _initialize: function () {\n                this.updateList();\n                this.updateSyncState();\n                this.model.on(\"add\", this.updateOneInList, this);\n                this.model.on(\"update_order\", this.updateList, this);\n                this.model.on(\"destroy\", this.onAccountRemoved, this);\n                xabber.api_account && xabber.api_account.on(\"change:connected\", this.updateSyncState, this);\n                this.$('.move-account-to-bottom')\n                    .on('move_xmpp_account', this.onMoveAccountToBottom.bind(this));\n            },\n\n            updateList: function () {\n                _.each(this.children, function (view) { view.detach(); });\n                this.model.each((account) => {\n                    let jid = account.get('jid'), view = this.child(jid);\n                    if (!view) {\n                        view = this.addChild(jid, xabber.AccountSettingsItemView, {model: account});\n                    }\n                    this.$('.no-accounts-tip').before(view.$el);\n                });\n                this.updateHtml();\n                this.parent.updateScrollBar();\n            },\n\n            updateOneInList: function (account) {\n                let jid = account.get('jid'),\n                    view = this.child(jid);\n                if (view)\n                    view.$el.detach();\n                else\n                    view = this.addChild(jid, xabber.AccountSettingsItemView, {model: account});\n                let index = this.model.indexOf(account);\n                if (index === 0)\n                    this.$('.accounts-head-wrap').after(view.$el);\n                else\n                    this.$('.xmpp-account').eq(index - 1).after(view.$el);\n                this.updateHtml();\n                this.parent.updateScrollBar();\n            },\n\n            onAccountRemoved: function (account) {\n                this.removeChild(account.get('jid'));\n                this.updateHtml();\n                this.parent.updateScrollBar();\n            },\n\n            render: function () {\n                this.updateHtml();\n                _.each(this.children, function (view) {\n                    view.updateEnabled();\n                });\n            },\n\n            updateHtml: function () {\n                this.$('.no-accounts-tip').hideIf(this.model.length);\n                this.$('.accounts-head-wrap').showIf(this.model.length);\n                this.parent.$('.settings-tab[data-block-name=\"xmpp-accounts\"] .settings-block-name')\n                    .text(this.model.length === 1 ? xabber.getString(\"account\") : xabber.getString(\"settings__menu_item__xmpp_account\") );\n            },\n\n            updateSyncState: function () {\n                let connected = xabber.api_account && xabber.api_account.get('connected');\n                this.$('.sync-head').showIf(connected);\n                this.$('.sync-marker-wrap').showIf(connected);\n                this.$('.sync-head').hideIf(!connected);\n                this.$('.sync-marker-wrap').hideIf(!connected);\n            },\n\n            onMoveAccountToBottom: function (ev, account) {\n                this.model.moveToBottom(account);\n            }\n        });\n\n        xabber.ChangeStatusView = xabber.BasicView.extend({\n            className: 'modal main-modal change-status-modal',\n            template: templates.change_status,\n\n            events: {\n                \"click .status-values li\": \"changeStatus\",\n                \"click .status-message-wrap .clear-input\": \"clearStatusMessageInput\",\n                \"keyup .status-message\": \"keyUp\",\n                \"change .apply-to-all\": \"changeApplyToAll\"\n            },\n\n            open: function (account) {\n                this.account = account;\n                this.highlightStatus(account.get('status'));\n                this.restoreStatusMessageInput();\n                this.show();\n            },\n\n            highlightStatus: function (status) {\n                this.$('.status-values li[data-value=\"'+status+'\"]').addClass('active')\n                    .siblings().removeClass('active');\n            },\n\n            changeStatus: function (ev) {\n                let status = $(ev.target).closest('li').data('value');\n                this.highlightStatus(status);\n                this.do_change();\n                this.closeModal();\n            },\n\n            restoreStatusMessageInput: function () {\n                let status_message = this.account.get('status_message');\n                this.$('.status-message').val(status_message)\n                    .switchClass('filled', status_message);\n                if (!status_message) {\n                    this.$('.status-message').attr('placeholder', this.account.getStatusMessage());\n                }\n            },\n\n            clearStatusMessageInput: function () {\n                let verbose_status = xabber.getString(this.account.get('status'));\n                this.$('.status-message').val('').attr('placeholder', verbose_status)\n                    .removeClass('filled');\n            },\n\n            keyUp: function (ev) {\n                if (ev.keyCode === constants.KEY_ENTER) {\n                    this.do_change();\n                    this.closeModal();\n                } else {\n                    let value = this.$('.status-message').val();\n                    this.$('.status-message').switchClass('filled', value);\n                }\n            },\n\n            do_change: function () {\n                let status = this.$('.status-values li.active').data('value'),\n                    status_message = this.$('.status-message').val();\n                if (this.apply_to_all) {\n                    xabber.accounts.each(function (account) {\n                        account.setStatus(status, status_message);\n                    });\n                } else {\n                    this.account.setStatus(status, status_message);\n                }\n            },\n\n            changeApplyToAll: function (ev) {\n                this.apply_to_all = $(ev.target).prop('checked');\n            },\n\n            render: function () {\n                this.$el.openModal({\n                    ready: this.onRender.bind(this),\n                    complete: this.close.bind(this)\n                });\n            },\n\n            onRender: function () {\n                Materialize.updateTextFields();\n            },\n\n            onHide: function () {\n                this.$el.detach();\n            },\n\n            close: function () {\n                let value = this.$('.status-message').val();\n                if (!value)\n                    this.do_change();\n                this.closeModal();\n            },\n\n            closeModal: function () {\n                this.$el.closeModal({ complete: this.hide.bind(this) });\n            }\n        });\n\n        xabber.SetAvatarView = xabber.BasicView.extend({\n            className: 'modal main-modal avatar-picker background-panel',\n            template: templates.avatars_gallery,\n            ps_selector: '.modal-content',\n            ps_settings: {theme: 'item-list'},\n\n            events: {\n                \"click .menu-btn\": \"updateActiveMenu\",\n                \"click .library-wrap .image-item\": \"setActiveImage\",\n                'change input[type=\"file\"]': \"onFileInputChanged\",\n                'keyup input.url': \"onInputChanged\",\n                \"click .btn-add\": \"addAvatar\",\n                \"click .btn-cancel\": \"close\"\n            },\n\n            _initialize: function () {\n                this.$('input.url')[0].onpaste = this.onPaste.bind(this);\n            },\n\n            render: function (options) {\n                this.model = options.model;\n                this.createLibrary();\n                this.$('.menu-btn').removeClass('active');\n                this.$('.menu-btn[data-screen-name=\"library\"]').addClass('active');\n                this.$('.modal-header span').text(xabber.getString(\"account_set_avatar_header\"));\n                this.$el.openModal({\n                    ready: () => {\n                        this.$('.modal-content').perfectScrollbar({theme: 'item-list'});\n                    },\n                    complete: this.close.bind(this)\n                });\n                let draggable = this.$('.upload-wrap');\n                draggable[0].ondragenter = function (ev) {\n                    ev.preventDefault();\n                    draggable.addClass('file-drop');\n                };\n                draggable[0].ondragover = function (ev) {\n                    ev.preventDefault();\n                };\n                draggable[0].ondragleave = function (ev) {\n                    if ($(ev.relatedTarget).closest('.upload-wrap').length)\n                        return;\n                    ev.preventDefault();\n                    draggable.removeClass('file-drop');\n                };\n                draggable[0].ondrop = (ev) => {\n                    ev.preventDefault();\n                    ev.stopPropagation();\n                    draggable.removeClass('file-drop');\n                    let files = ev.dataTransfer.files || [], file;\n                    for (let i = 0; i < files.length; i++) {\n                        if (utils.isImageType(files[i].type)) {\n                            file = files[i];\n                            break;\n                        }\n                    }\n                    file && this.addFile(file);\n                };\n            },\n\n            onPaste: function (ev) {\n                let url = ev.clipboardData.getData('text').trim();\n                this.$('.image-preview img')[0].onload = () => {\n                    this.$('.image-preview img').removeClass('hidden');\n                    this.updateActiveButton();\n                };\n                this.$('.image-preview img').addClass('hidden')[0].src = url;\n                this.updateActiveButton();\n            },\n\n            updateActiveMenu: function (ev) {\n                let screen_name = ev.target.getAttribute('data-screen-name');\n                this.$('.menu-btn').removeClass('active');\n                this.$(`.menu-btn[data-screen-name=\"${screen_name}\"]`).addClass('active');\n                this.updateScreen(screen_name);\n            },\n\n            updateScreen: function (name) {\n                this.$('.screen-wrap').addClass('hidden');\n                this.$(`.screen-wrap[data-screen=\"${name}\"]`).removeClass('hidden');\n                this.scrollToTop();\n                this.updateActiveButton();\n            },\n\n            updateActiveButton: function () {\n                let $active_screen = this.$('.screen-wrap:not(.hidden)'),\n                    non_active = true;\n                if ($active_screen.attr('data-screen') == 'library') {\n                    $active_screen.find('div.active').length && (non_active = false);\n                } else {\n                    $active_screen.find('img:not(.hidden)').length && (non_active = false);\n                }\n                this.$('.modal-footer .btn-add').switchClass('non-active', non_active);\n            },\n\n            renderFiles: function (response) {\n                this.$('.library-wrap .preloader-wrapper').remove()\n                if (response.items.length){\n                    this.current_items = response.items\n                    response.items.forEach((item, idx) => {\n                        let img = $(`<div class=\"image-item\"/>`);\n                        img.css('background-image', `url(\"${item.thumbnail.url}\")`);\n                        img.attr('data-src', item.file);\n                        img.attr('data-id', idx);\n                        this.$('.library-wrap').append(img);\n                    });\n                }\n            },\n\n            createLibrary: function () {\n                this.model.testGalleryTokenExpire(() => {\n                    let options = {order_by: '-id'};\n                    if (this.model.get('gallery_token') && this.model.get('gallery_url')) {\n                        this.$('.library-wrap').html(env.templates.contacts.preloader())\n                        $.ajax({\n                            type: 'GET',\n                            headers: {\"Authorization\": 'Bearer ' + this.model.get('gallery_token')},\n                            url: this.model.get('gallery_url') + 'v1/avatar/',\n                            dataType: 'json',\n                            data: options,\n                            success: (response) => {\n                                console.log(response)\n                                this.renderFiles(response)\n                            },\n                            error: (response) => {\n                                this.model.handleCommonGalleryErrors(response)\n                                console.log(response)\n                                this.$('.library-wrap .preloader-wrapper').remove()\n                            }\n                        });\n                    }\n                });\n            },\n\n            setActiveImage: function (ev) {\n                let $target = $(ev.target);\n                if ($target.hasClass('active'))\n                    $target.removeClass('active');\n                else {\n                    this.$('.library-wrap>div').removeClass('active');\n                    $target.addClass('active');\n                }\n                this.updateActiveButton();\n            },\n\n            onFileInputChanged: function (ev) {\n                let target = ev.target, file;\n                for (let i = 0; i < target.files.length; i++) {\n                    if (utils.isImageType(target.files[i].type)) {\n                        file = target.files[i];\n                        break;\n                    }\n                }\n                file && this.addFile(file);\n                $(target).val('');\n            },\n\n            addFile: function (file) {\n                let reader = new FileReader();\n                reader.onload = (e) => {\n                    let image_prev = new Image(),\n                        src = e.target.result;\n                    image_prev.src = src;\n                    this.$('.screen-wrap[data-screen=\"upload\"] img').detach();\n                    this.$('.screen-wrap[data-screen=\"upload\"]').prepend(image_prev);\n                    this.current_file = file;\n                    this.updateActiveButton();\n                };\n                reader.readAsDataURL(file);\n            },\n\n            onInputChanged: function (ev) {\n                if (ev.target.value.trim() == this.$('.image-preview img')[0].src)\n                    return;\n                if (ev.target.value.trim() && ev.keyCode !== constants.KEY_CTRL && ev.keyCode !== constants.KEY_SHIFT && ev.keyCode !== constants.KEY_ARROW_UP && ev.keyCode !== constants.KEY_ARROW_DOWN && ev.keyCode !== constants.KEY_ARROW_RIGHT && ev.keyCode !== constants.KEY_ARROW_LEFT) {\n                    let url = ev.target.value.trim();\n                    this.$('.image-preview img')[0].onload = () => {\n                        this.$('.image-preview img').removeClass('hidden');\n                        this.updateActiveButton();\n                    };\n                    this.$('.image-preview img').addClass('hidden')[0].src = url;\n                    this.updateActiveButton();\n                } else {\n                    this.$('.image-preview img').addClass('hidden')[0].src = \"\";\n                    this.updateActiveButton();\n                }\n            },\n\n            addAvatar: function () {\n                if (this.$('.btn-add').hasClass('non-active'))\n                    return;\n                let image, dfd = new $.Deferred(), $active_screen = this.$('.screen-wrap:not(.hidden)');\n                dfd.done((img, img_from_gallery) => {\n                    if (img_from_gallery){\n                        this.model.pubAvatar(image, () => {\n                            this.current_items = [];\n                            this.close();\n                            this.model.trigger('update_avatar_list');\n                        }, () => {\n                            utils.dialogs.error(xabber.getString(\"group_settings__error__wrong_image\"));\n                        });\n                    } else {\n                        utils.images.getAvatarFromFile(img).done((image, hash, size) => {\n                            if (image) {\n                                this.model.pubAvatar({base64: image, hash: hash, size: size, type: img.type, file: img}, () => {\n                                    this.close();\n                                    this.model.trigger('update_avatar_list');\n                                }, () => {\n                                    utils.dialogs.error(xabber.getString(\"group_settings__error__wrong_image\"));\n                                });\n                            } else\n                                utils.dialogs.error(xabber.getString(\"group_settings__error__wrong_image\"));\n                        });\n                    }\n                });\n                this.$('.modal-preloader-wrap').html(env.templates.contacts.preloader());\n                this.$('.btn-add').addClass('hidden-disabled');\n\n                if ($active_screen.attr('data-screen') == 'library') {\n                    image = this.current_items[$active_screen.find('div.active').attr('data-id')]\n                    image.uploaded = true;\n                    dfd.resolve(image, true);\n                }\n                else if ($active_screen.attr('data-screen') == 'web-address') {\n                    image = $active_screen.find('img:not(.hidden)')[0].src;\n                    this.createFileFromURL(image).then((file) => {\n                        dfd.resolve(file);\n                    }, (e) => {\n                        this.$('.preloader-wrapper').remove();\n                        this.$('.btn-add').removeClass('hidden-disabled');\n                        utils.dialogs.error(xabber.getString(\"group_settings__error__wrong_image\"));\n                    })\n                } else\n                    dfd.resolve(this.current_file);\n            },\n\n            createFileFromURL: async function (url) {\n                let response = await fetch(url);\n                let data = await response.blob();\n                let metadata = {\n                    type: 'image/png'\n                };\n                let file = new File([data], \"avatar.png\", metadata);\n                return file\n            },\n\n            close: function () {\n                this.$el.closeModal({ complete: () => {\n                        this.$el.detach();\n                        this.data.set('visible', false);\n                    }\n                });\n            }\n        });\n\n        xabber.WebcamProfileImageView = xabber.BasicView.extend({\n            className: 'modal main-modal webcam-panel',\n            template: templates.webcam_panel,\n\n            events: {\n                \"click .btn-save\": \"saveAvatar\",\n                \"click .btn-cancel\": \"close\",\n            },\n\n            open: function (options) {\n                this.account = options.model;\n                this.registration = options.registration;\n                this.registration_view = options.registration_view;\n\n                this.width = 171;\n                this.height = 128;\n                this.streaming = false;\n                this.video = null;\n                this.canvas = null;\n                this.photo = null;\n                this.startbutton = null;\n\n                this.show();\n                this.startupStream();\n            },\n\n            render: function () {\n                this.$el.openModal({\n                    complete: this.close.bind(this)\n                });\n            },\n\n            onHide: function () {\n                if (this.video && this.video.srcObject && this.video.srcObject.getTracks()){\n                    let tracks = this.video.srcObject.getTracks()\n                    tracks.forEach(function(track) {\n                        track.stop();\n                    });\n                    this.video.srcObject = null\n                }\n                this.$el.detach();\n\n            },\n\n            close: function () {\n                this.closeModal();\n            },\n\n            closeModal: function () {\n                this.$el.closeModal({ complete: this.hide.bind(this) });\n            },\n\n            startupStream: function (ev) {\n                this.video = this.$('.webcam-video')[0];\n                this.canvas = this.$('#canvas')[0];\n                this.photo = this.$('.webcam-photo')[0];\n                this.startbutton = this.$('.btn-take-photo')[0];\n                navigator.mediaDevices.getUserMedia({video: true, audio: false})\n                    .then((stream) => {\n                        this.video.srcObject = stream;\n                        this.video.play();\n                    })\n                    .catch((err) => {\n                        console.log(\"An error occurred: \" + err);\n                    });\n\n                this.video.addEventListener('canplay', (ev) => {\n                    if (!this.streaming) {\n                        if (isNaN(this.height)) {\n                            this.height = this.width / (4/3);\n                        }\n                        this.video.setAttribute('width', this.width);\n                        this.video.setAttribute('height', this.height);\n                        this.canvas.setAttribute('width', this.width);\n                        this.canvas.setAttribute('height', this.height);\n                        this.streaming = true;\n                    }\n                }, false);\n\n                this.startbutton.addEventListener('click', (ev) =>{\n                    this.takePicture();\n                    ev.preventDefault();\n                }, false);\n\n                this.$('.circle-icon')[0].addEventListener('click', (ev) =>{\n                    if ($(ev.target).closest('.circle-icon').hasClass('disabled'))\n                        return;\n                    this.clearPhoto();\n                    ev.preventDefault();\n                }, false);\n\n                this.clearPhoto();\n\n            },\n\n\n            clearPhoto: function (ev) {\n                let context = this.canvas.getContext('2d');\n                context.fillStyle = \"#AAA\";\n                context.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n                let data = this.canvas.toDataURL('image/png');\n                this.photo.setAttribute('src', data);\n                this.$('.btn-take-photo').hideIf(false)\n                this.$('.btn-save').hideIf(true)\n                this.$('.output').hideIf(true)\n            },\n\n\n            takePicture: function (ev) {\n                let context = this.canvas.getContext('2d');\n                this.$('.btn-take-photo').hideIf(true)\n                this.$('.btn-save').hideIf(false)\n                this.$('.output').hideIf(false)\n                if (this.width && this.height) {\n                    this.canvas.width = this.width;\n                    this.canvas.height = this.height;\n                    context.drawImage(this.video, 0, 0, this.width, this.height);\n                    context.globalCompositeOperation='destination-in';\n                    context.beginPath();\n                    context.arc(this.width/2,this.height/2,this.height/2,0,Math.PI*2);\n                    context.closePath();\n                    context.fill();\n\n                    let data = this.canvas.toDataURL('image/png');\n                    this.photo.setAttribute('src', data);\n                } else {\n                    this.clearPhoto();\n                }\n            },\n\n\n            saveAvatar: function () {\n                let blob = Images.getBlobImage(this.canvas.toDataURL('image/png').replace(/^data:image\\/(png|gif|jpg|webp|jpeg);base64,/, '')),\n                    file = new File([blob], \"avatar.png\", {\n                        type: \"image/png\",\n                    });\n                file.base64 = this.canvas.toDataURL('image/png').replace(/^data:image\\/(png|gif|jpg|webp|jpeg);base64,/, '');\n                if (file && file.base64) {\n                    if (this.registration && this.registration_view){\n                        this.registration_view.avatar = file;\n                        this.registration_view.$('.btn-next').prop('disabled', false);\n                        this.registration_view.$('.circle-avatar').addClass('changed');\n                        this.registration_view.$('.circle-avatar').setAvatar(this.canvas.toDataURL('image/png').replace(/^data:image\\/(png|gif|jpg|webp|jpeg);base64,/, ''), this.member_details_avatar_size);\n                        this.close();\n                    } else {\n                        this.$('.modal-preloader-wrap').html(env.templates.contacts.preloader());\n                        this.$('.btn-save').addClass('hidden-disabled');\n                        this.$('.circle-icon').addClass('disabled');\n                        this.account.pubAvatar(file, () => {\n                            this.close();\n                        }, () => {\n                            utils.dialogs.error(xabber.getString(\"group_settings__error__wrong_image\"));\n                        });\n                    }\n                }\n            },\n        });\n\n        xabber.EmojiProfileImageView = xabber.BasicView.extend({\n            className: 'modal main-modal emoji-panel',\n            template: templates.emoji_panel,\n\n            events: {\n                \"click .profile-image-background-color\": \"changeColor\",\n                \"click .avatar-wrap\": \"openEmojiPicker\",\n                \"click .close-modal\": \"close\",\n                \"click .btn-save\": \"saveAvatar\",\n                \"click .btn-cancel\": \"close\",\n            },\n\n            open: function (options) {\n                this.account = options.model;\n                this.registration = options.registration;\n                this.registration_view = options.registration_view;\n                this.emoji_panel_view = this.addChild('emoji_picker_panel', xabber.EmojiPickerView,{})\n                this.show();\n            },\n\n            render: function () {\n                this.$el.openModal({\n                    complete: this.close.bind(this)\n                });\n            },\n\n            onHide: function () {\n                this.$el.detach();\n            },\n\n            close: function () {\n                this.closeModal();\n            },\n\n            closeModal: function () {\n                this.$el.closeModal({ complete: this.hide.bind(this) });\n            },\n\n            openEmojiPicker: function () {\n                this.emoji_panel_view.open(this);\n            },\n\n            changeColor: function (ev) {\n                let color = $(ev.target).data('value');\n                this.$('.profile-image-background-color').removeClass('chosen-background-color');\n                $(ev.target).addClass('chosen-background-color');\n                this.$('.circle-avatar').attr('class', 'circle-avatar');\n                this.$('.circle-avatar').attr('data-value', color);\n                this.$('.circle-avatar').addClass('ground-color-' + color + '-100');\n            },\n\n            saveAvatar: function (ev) {\n                let blob = Images.getDefaultAvatar(this.$('.chosen-emoji').data('value') ,this.$('.circle-avatar').css( \"background-color\" ), \"bold 96px sans-serif\", 176, 176),\n                    file = new File([blob], \"avatar\", {\n                        type: \"image/png\",\n                    });\n                file.generated = true;\n                file.base64 = blob;\n                if (file && file.base64) {\n                    if (this.registration && this.registration_view){\n                        this.registration_view.avatar = file;\n                        this.registration_view.$('.btn-next').prop('disabled', false);\n                        this.registration_view.$('.circle-avatar').addClass('changed');\n                        this.registration_view.$('.circle-avatar').setAvatar(blob, this.member_details_avatar_size);\n                        xabber._settings.save('main_color', this.$('.circle-avatar').attr('data-value'));\n                        xabber.trigger('update_main_color');\n                        this.close();\n                    } else {\n                        this.$('.modal-preloader-wrap').html(env.templates.contacts.preloader());\n                        this.$('.btn-save').addClass('hidden-disabled');\n                        this.account.pubAvatar(file, () => {\n                            this.close();\n                        }, () => {\n                            utils.dialogs.error(xabber.getString(\"group_settings__error__wrong_image\"));\n                        });\n                    }\n                }\n            },\n        });\n\n        xabber.EmojiPickerView = xabber.BasicView.extend({\n            className: 'modal main-modal emoji-panel emoji-picker',\n            template: templates.emoji_picker,\n\n            events: {\n                \"click .emojis-bottom-tab-selector\": \"pickEmojiTab\",\n                \"click .emoji-picker-emoji\": \"pickEmoji\",\n                \"click .close-modal\": \"close\",\n            },\n\n            open: function () {\n                this.$el.openModal({\n                    complete: this.close.bind(this)\n                });\n                this.readEmojisJSON()\n                this.show();\n            },\n\n            readEmojisJSON: function () {\n                this.emojis = JSON.parse(templates.emojis())\n\n                if (this.emojis.length) {\n                    this.$('.emoji-picker-wrap').html(templates.emoji_picker_tabs({\n                        emojis: this.emojis\n                    }));\n                    this.ps_container = this.$('.emojis-tab');\n                    if (this.ps_container.length) {\n                        this.ps_container.perfectScrollbar(\n                            _.extend(this.ps_settings || {}, xabber.ps_settings)\n                        );\n                    }\n                }\n            },\n\n            render: function () {\n            },\n\n            onHide: function () {\n                this.$el.detach();\n            },\n\n            close: function () {\n                this.closeModal();\n            },\n\n            closeModal: function () {\n                this.$el.closeModal({ complete: this.hide.bind(this) });\n            },\n\n            scrollTo: function (offset) {\n                this.ps_container.each((index) => {\n                    this.ps_container[index].scrollTop = offset;\n                });\n                this.ps_container.perfectScrollbar('update');\n            },\n\n            scrollToTop: function () {\n                this.scrollTo(0);\n            },\n\n            pickEmojiTab: function (ev) {\n                let tab = $(ev.target).data('value');\n                this.$('.emojis-bottom-tab-selector').removeClass('chosen-emoji-selector');\n                $(ev.target).addClass('chosen-emoji-selector');\n                this.$('.emojis-tab').removeClass('chosen-emoji-tab').addClass('hidden');\n                this.$(`.emojis-tab[data-value=\"${tab}\"]`).removeClass('hidden').addClass('chosen-emoji-tab');\n                this.scrollToTop();\n            },\n\n            pickEmoji: function (ev) {\n                let emoji = $(ev.target).closest('.emoji-picker-emoji').data('value');\n                this.parent.$('.chosen-emoji').attr('data-value', emoji).text(emoji);\n                this.close();\n            },\n        });\n\n        xabber.ChangePasswordView = xabber.BasicView.extend({\n            className: 'modal main-modal change-password-modal',\n            template: templates.change_password,\n\n            events: {\n                \"click .btn-change\": \"submit\",\n                \"click .btn-cancel\": \"close\",\n                \"keyup input[name=password]\": \"keyUp\"\n            },\n\n            _initialize: function () {\n                this.$('input[name=jid]').val(this.model.get('jid'));\n                this.$password_input = this.$('input[name=password]');\n                this.data.on(\"change:authentication\", this.updateButtons, this);\n                xabber.on(\"quit\", this.onQuit, this);\n                return this;\n            },\n\n            render: function (options) {\n                options || (options = {});\n                this.is_login = options.login;\n                this.token_invalidated = options.token_invalidated;\n                this.$('.modal-header span').text(this.is_login ? xabber.getString(\"xabber_account__social_links__button_log_in\") : xabber.getString(\"button_set_pass\"));\n                this.$('.btn-cancel').text(this.is_login ? xabber.getString(\"skip\") : xabber.getString(\"cancel\"));\n                this.$('.btn-change').text(this.is_login ? xabber.getString(\"xabber_account__social_links__button_log_in\") : xabber.getString(\"set\"));\n                this.$el.openModal({\n                    use_queue: true,\n                    ready: this.onRender.bind(this),\n                    complete: this.close.bind(this)\n                });\n            },\n\n            onRender: function () {\n                Materialize.updateTextFields();\n                this.authFeedback({});\n                this.$password_input.val('').focus();\n            },\n\n            getActionName: function () {\n                return this.is_login ? xabber.getString(\"login\") : xabber.getString(\"set\")\n            },\n\n            keyUp: function (ev) {\n                ev.keyCode === constants.KEY_ENTER && this.submit();\n            },\n\n            submit: function () {\n                if (this.data.get('authentication')) {\n                    this.cancel();\n                    return;\n                }\n                this.data.set('authentication', true);\n                this.authFeedback({});\n                let jid = this.model.get('jid'),\n                    password = this.$password_input.val();\n                if (!password)\n                    return this.errorFeedback({password: xabber.getString(\"dialog_change_password__error__text_input_pass\")});\n                password = password.trim();\n                this.authFeedback({password: xabber.getString(\"dialog_change_password__feedback__text_auth_with_pass\")});\n                if (this.model.connection.connected) {\n                    this.model.once('deactivate', () => {\n                        this.setPassword(password);\n                    });\n                    this.model.deactivate();\n                } else {\n                    this.setPassword(password);\n                }\n            },\n\n            setPassword: function (password) {\n                this.model.last_msg_timestamp = 0;\n                this.model.save({\n                    auth_type: 'password',\n                    password: utils.utoa(password),\n                    enabled: true\n                });\n                this.model.auth_view = this;\n                this.model.connect();\n            },\n\n            cancel: function () {\n                this.data.set('authentication', false);\n            },\n\n            updateButtons: function () {\n                let authentication = this.data.get('authentication');\n                this.$('.btn-change').text(authentication ? xabber.getString(\"stop\") : this.getActionName());\n            },\n\n            authFeedback: function (options) {\n                this.$password_input.switchClass('invalid', options.password)\n                    .siblings('span.errors').text(options.password || '');\n            },\n\n            errorFeedback: function (options) {\n                this.authFeedback(options);\n                this.data.set('authentication', false);\n            },\n\n            successFeedback: function () {\n                this.data.set('authentication', false);\n                this.closeModal();\n            },\n\n            endAuth: function (account) {\n                this.model.save('is_new', undefined);\n                this.successFeedback(this.model)\n                this.model.auth_view = null;\n            },\n\n            onHide: function () {\n                this.$el.detach();\n            },\n\n            onQuit: function () {\n                this.closeModal();\n            },\n\n            close: function () {\n                if (this.is_login)\n                    this.model.save('enabled', false);\n                if (this.token_invalidated)\n                    this.model.deleteAccount();\n                this.cancel();\n                this.closeModal();\n            },\n\n            closeModal: function () {\n                this.model.auth_view = null;\n                this.$el.closeModal({ complete: this.hide.bind(this) });\n            }\n        });\n\n        xabber.ChangeAccountPasswordView = xabber.BasicView.extend({\n            events: {\n                \"click .btn-change\": \"submit\",\n                \"click .btn-cancel\": \"render\",\n                \"keyup input\": \"keyUp\",\n            },\n\n            _initialize: function () {\n                this.account = this.model\n                this.$old_password_input = this.$('input[name=old_password]');\n                this.$password_input = this.$('input[name=password]');\n                this.$password_confirm_input = this.$('input[name=password_confirm]');\n                return this;\n            },\n\n            render: function (options) {\n                this.authFeedback({});\n                this.$password_input.val('');\n                this.$password_confirm_input.val('');\n                this.$old_password_input.val('').focus();\n            },\n\n            keyUp: function (ev) {\n                ev.keyCode === constants.KEY_ENTER && this.submit();\n            },\n\n            submit: function () {\n                this.authFeedback({});\n                let jid = this.account.get('jid'),\n                    old_password = this.$old_password_input.val(),\n                    password = this.$password_input.val(),\n                    password_confirm = this.$password_confirm_input.val();\n                if (!old_password)\n                    return this.errorFeedback({old_password: xabber.getString(\"dialog_change_password__error__text_input_pass\")});\n                if (!password)\n                    return this.errorFeedback({password: xabber.getString(\"dialog_change_password__error__text_input_pass\")});\n                if (password != password_confirm)\n                    return this.errorFeedback({password_confirm: xabber.getString(\"settings_account__alert_passwords_do_not_match\")});\n                old_password = old_password.trim();\n                this.authFeedback({password_confirm: xabber.getString(\"dialog_change_password__feedback__text_auth_with_pass\")});\n                if (!this.account.change_password_connection_manager) {\n                    this.account.change_password_connection_manager = new Strophe.ConnectionManager(this.account.CONNECTION_URL);\n                    this.account.change_password_connection = this.account.change_password_connection_manager.connection;\n                    this.account.change_password_connection.account = this.account;\n                    this.account.change_password_connection.register.connect_change_password(jid, old_password, this.account.changePasswordCallback.bind(this.account))\n                }\n            },\n\n            authFeedback: function (options) {\n                this.$password_input.switchClass('invalid', options.password)\n                    .siblings('span.errors').text(options.password || '');\n                this.$old_password_input.switchClass('invalid', options.old_password)\n                    .siblings('span.errors').text(options.old_password || '');\n                this.$password_confirm_input.switchClass('invalid', options.password_confirm)\n                    .siblings('span.errors').text(options.password_confirm || '');\n            },\n\n            errorFeedback: function (options) {\n                if (this.account.change_password_connection)\n                    this.account.change_password_connection.disconnect()\n                this.authFeedback(options);\n            },\n\n            successFeedback: function () {\n                if (this.account.change_password_connection)\n                    this.account.change_password_connection.disconnect()\n                this.render();\n            },\n        });\n\n        xabber.AuthView = xabber.BasicView.extend({\n            _initialize: function () {\n                this.$jid_input = this.$('input[name=jid]');\n                this.$password_input = this.$('input[name=password]');\n                this.data.on(\"change:authentication\", this.updateButtons, this);\n                return this;\n            },\n\n            render: function () {\n                this.onRender();\n            },\n\n            onRender: function () {\n                this.account = null;\n                this.authFeedback({});\n                Materialize.updateTextFields();\n                this.$jid_input.val('').focus();\n                this.$password_input.val('');\n                this.updateButtons();\n                this.updateOptions && this.updateOptions();\n            },\n\n            keyUp: function (ev) {\n                ev.keyCode === constants.KEY_ENTER && this.submit();\n            },\n\n            submit: function () {\n                if (this.data.get('authentication')) {\n                    this.cancel();\n                    return;\n                }\n                this.data.set('authentication', true);\n                this.authFeedback({});\n                let jid = this.$jid_input.val(),\n                    password = this.$password_input.val();\n                if (this.data.get('registration')){\n                    let domain = this.$('#new_account_domain').val() || this.$('.xmpp-server-dropdown-wrap .select-xmpp-server .property-value').text();\n                    if (!constants.REGISTRATION_CUSTOM_DOMAIN && !(constants.REGISTRATION_DOMAINS.indexOf(domain) > -1))\n                        return this.errorRegistrationFeedback({domain: xabber.getString(\"account_auth__error__registration_custom_domain\")});\n                    jid = jid + '@' + domain\n                }\n                else if(\n                    (this.$('.input-field-jid .xmpp-server-dropdown-wrap').length && !this.$('.input-field-jid .xmpp-server-dropdown-wrap').hasClass('hidden')) &&\n                    (this.$('#sign_in_domain') && this.$('#sign_in_domain').val() || this.$('.xmpp-server-dropdown-wrap .select-auth-xmpp-server .property-value').text())\n                ){\n                    let domain = this.$('#sign_in_domain').val() || this.$('.xmpp-server-dropdown-wrap .select-auth-xmpp-server .property-value').text();\n                    jid = jid + '@' + domain\n                }\n                if (!jid) {\n                    if (this.data.get('registration')) {\n                        return this.errorRegistrationFeedback({jid: xabber.getString(\"account_auth__error__text_input_username\")});\n                    }\n                    return this.errorFeedback({jid: xabber.getString(\"account_auth__error__text_input_username\")});\n                }\n                jid = jid.trim();\n                if (!password)  {\n                    if (this.data.get('registration')) {\n                        return this.errorRegistrationFeedback({password: xabber.getString(\"dialog_change_password__error__text_input_pass\")});\n                    }\n                    return this.errorFeedback({password: xabber.getString(\"dialog_change_password__error__text_input_pass\")});\n                }\n                if (!this.data.get('registration') && !constants.LOGIN_CUSTOM_DOMAIN && !(constants.LOGIN_DOMAINS.indexOf(Strophe.getDomainFromJid(jid)) > -1))\n                    return this.errorFeedback({jid: xabber.getString(\"account_auth__error__login_custom_domain\")});\n                password = password.trim();\n                let at_idx = jid.indexOf('@');\n                if (at_idx <= 0 || at_idx === jid.length - 1) {\n                    if (this.data.get('registration')) {\n                        return this.errorRegistrationFeedback({jid: xabber.getString(\"account_auth__error__text_wrong_username\")});\n                    }\n                    return this.errorFeedback({jid: xabber.getString(\"account_auth__error__text_wrong_username\")});\n                }\n                jid = Strophe.getBareJidFromJid(jid).toLowerCase();\n                let account = xabber.accounts.get(jid);\n                if (account) {\n                    if (this.data.get('registration')) {\n                        return this.errorRegistrationFeedback({jid: xabber.getString(\"settings_account__alert_account_exists\")});\n                    }\n                    this.errorFeedback({jid: xabber.getString(\"settings_account__alert_account_exists\")});\n                } else {\n                    if (this.data.get('registration'))\n                        this.registerFeedback({registration_success: true, password: xabber.getString(\"account_registration__feedback__text_registration\")});\n                    else\n                        this.authStepperShow();\n                    this.getWebsocketURL(jid, (response) => {\n                        this.account = xabber.accounts.create({\n                            jid: jid,\n                            websocket_connection_url: response || constants.CONNECTION_URL,\n                            password: utils.utoa(password),\n                            is_new: true\n                        }, {auth_view: this});\n\n                        if (this.data.get('registration')) {\n                            this.account.connection.register.connect(jid, this.account.registerCallback.bind(this.account))\n                        }\n                        else\n                            this.account.trigger('start');\n                    });\n                }\n            },\n\n            getWebsocketURL: function (jid, callback) {\n                if (!constants.DISABLE_LOOKUP_WS) {\n                    let domain = Strophe.getDomainFromJid(jid),\n                        request = {\n                            type: 'GET',\n                            url: window.location.protocol + '//' + domain + '/.well-known/host-meta',\n                            dataType: 'xml',\n                            success: (success) => {\n                                let socket_url = $(success).find('Link').attr('href');\n                                if (socket_url)\n                                    callback && callback(socket_url);\n                                else\n                                    callback && callback(null);\n                            },\n                            error: () => {\n                                callback && callback(null);\n                            },\n                            timeout: 5000\n                        };\n                    $.ajax(request);\n                }\n                else\n                    callback && callback(null);\n            },\n\n            cancel: function () {\n                this.data.set('authentication', false);\n                this.onRender();\n                if (this.account) {\n                    this.account.destroy();\n                    this.account = null;\n                }\n            },\n\n            authFeedback: function (options) {\n                this.$jid_input.switchClass('invalid', options.jid)\n                    .siblings('span.errors').text(options.jid || '');\n                this.$password_input.switchClass('invalid', options.password)\n                    .siblings('span.errors').text(options.password || '');\n            },\n\n            errorFeedback: function (options) {\n                this.authFeedback(options);\n                this.data.set('authentication', false);\n            },\n\n            authStepperShow: function (){\n                this.authFeedback({password: xabber.getString(\"account_auth__feedback__text_authentication\")});\n            },\n\n            endAuth: function (account) {\n                this.account.save('is_new', undefined);\n                this.successFeedback(this.account)\n                this.account.auth_view = null;\n            },\n\n            socialAuth: function (ev) {\n                let origin = window.location.href,\n                    provider = $(ev.target).closest('.btn-social').data('provider');\n                if (provider == 'email')\n                    xabber.body.setScreen('login', {'login_screen': 'xabber'});\n                else\n                    window.location.href = constants.XABBER_ACCOUNT_URL + '/social/login/' + provider + '/?origin=' + origin + '&source=Xabber Web';\n            }\n        });\n\n        xabber.XmppLoginPanel = xabber.AuthView.extend({\n            className: 'login-panel',\n            template: templates.xmpp_login,\n\n            events: {\n                \"click .btn-log-in\": \"login\",\n                \"click .btn-sign-up-instead\": \"logoutAndRegister\",\n                \"click .btn-register-form\": \"openRegisterForm\",\n                \"click .btn-login-form\": \"openLoginForm\",\n                \"click .btn-register\": \"register\",\n                \"click .btn-cancel\": \"cancel\",\n                \"click .btn-go-back-menu\": \"openButtonsMenu\",\n                \"click .btn-go-back\": \"openPreviousStep\",\n                \"click .btn-next\": \"openNextStep\",\n                \"click .btn-skip\": \"registerWithoutAvatar\",\n                \"click .btn-finish-log-in\": \"endAuth\",\n                \"keyup input[name=register_nickname]\": \"keyUpNickname\",\n                \"keyup input[name=register_jid]\": \"keyUpJid\",\n                \"keyup input[name=jid]\": \"keyUpLogin\",\n                \"keyup input[name=password]\": \"keyUpLogin\",\n                \"keyup input[name=sign_in_domain]\": \"keyUpLogin\",\n                \"keyup input[name=register_domain]\": \"keyUpDomain\",\n                \"focusout input[name=register_domain]\": \"focusoutDomain\",\n                \"keyup input[name=register_password]\": \"keyUpPassword\",\n                \"change .circle-avatar input\": \"changeAvatar\",\n                \"click .btn-choose-image\": \"chooseAvatar\",\n                \"click .btn-emoji-panel\": \"openEmojiPanel\",\n                \"click .btn-selfie\": \"openWebcamPanel\",\n                \"click #select-xmpp-server .property-variant\": \"changePropertyValueRegistration\",\n                \"click #select-auth-xmpp-server .property-variant\": \"changePropertyValueAuth\",\n            },\n\n            __initialize: function () {\n                this.$nickname_input = this.$('input[name=register_nickname]');\n                this.$domain_input = this.$('input[name=register_domain]');\n                this.data.on(\"change:step\", this.handleRegistrationStep, this);\n                return this;\n            },\n\n            onRender: function () {\n                this.data.set('step', 1)\n                this.account = null;\n                this.stepped_auth = true;\n                this.stepped_auth_complete = false;\n                this.authFeedback({});\n                this.registerFeedback({});\n                Materialize.updateTextFields();\n                this.$('.btn-go-back').hideIf(false);\n                this.$('.btn-skip').hideIf(true)\n                this.$nickname_input.val('');\n                this.$jid_input.val('');\n                this.$password_input.val('');\n                this.$('.circle-avatar').css({'background-image': ''});\n                this.$('.circle-avatar').css({'background-color': ''});\n                this.updateButtons();\n                this.updateDomains();\n                this.updateAuthDomains();\n                let dropdown_settings = {\n                    inDuration: 100,\n                    outDuration: 100,\n                    constrainWidth: false,\n                    hover: false,\n                    alignment: 'left'\n                };\n                this.$('.property-field .select-xmpp-server .caret').dropdown(dropdown_settings);\n                this.$('.property-field .select-xmpp-server .xmpp-server-item-wrap').dropdown(dropdown_settings);\n                this.$('.property-field .select-auth-xmpp-server .caret').dropdown(dropdown_settings);\n                this.$('.property-field .select-auth-xmpp-server .xmpp-server-item-wrap').dropdown(dropdown_settings);\n                this.$('.avatar-wrap.dropdown-button').dropdown(dropdown_settings);\n                this.$('.btn-register-form').hideIf(!constants.REGISTRATION_BUTTON);\n                this.$('.btn-login-form').hideIf(!constants.LOGIN_CUSTOM_DOMAIN && !constants.LOGIN_DOMAINS.length);\n                this.$('.register-form-jid .dropdown-content .set-custom-domain').hideIf(!constants.REGISTRATION_CUSTOM_DOMAIN);\n                this.$('.login-form-jid .dropdown-content .set-custom-domain').hideIf(!constants.LOGIN_CUSTOM_DOMAIN);\n                this.updateOptions && this.updateOptions();\n                this.$('#select-xmpp-server').hideIf(xabber.url_params.rkey)\n                this.$('.select-xmpp-server .caret').hideIf(xabber.url_params.rkey)\n                if (xabber.url_params.anchor == 'signup' || xabber.url_params.rkey)\n                    this.data.set('step', 2)\n                else if (xabber.url_params.anchor == 'signin')\n                    this.data.set('step', 0)\n            },\n\n            openButtonsMenu: function () {\n                this.data.set('step', 1)\n            },\n\n            register: function () {\n                if (this.data.get('registration')) {\n                    this.cancel();\n                    return;\n                }\n                this.data.set('registration', true);\n                this.$jid_input.prop('disabled', true);\n                this.$password_input.prop('disabled', true);\n                this.submit();\n            },\n\n            login: function () {\n                this.submit();\n            },\n\n            keyUpNickname: function (ev) {\n                if(this.$nickname_input.val()){\n                    this.$('.btn-next').prop('disabled', false);\n                }\n                else {\n                    this.$('.btn-next').prop('disabled', true);\n                }\n                if (this.$nickname_input.val() && ev)\n                    ev.keyCode === constants.KEY_ENTER && this.openNextStep();\n            },\n\n            keyUpJid: function (ev) {\n                clearTimeout(this._check_user_timeout);\n                if (!this.$('.btn-next').prop('disabled') && ev && ev.keyCode === constants.KEY_ENTER) {\n                    this.openNextStep();\n                    return;\n                }\n                if (this.$jid_input.val() && this.$jid_input.val().includes('@') && constants.REGISTRATION_CUSTOM_DOMAIN){\n                    this.setCustomDomainRegistration(this.$('.register-form-jid .property-field.xmpp-server-dropdown-wrap .property-value'))\n                    this.$domain_input.val(this.$jid_input.val().split('@')[1]);\n                    this.$jid_input.val(this.$jid_input.val().split('@')[0]);\n                    this.$domain_input.focus();\n                    return;\n                }\n                this.$('.btn-next').prop('disabled', true);\n                if(this.$jid_input.val()){\n                    let regexp_local_part = /^(([^<>()[\\]\\\\.,;:\\s%@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s%@\\\"]+)*)|(\\\".+\\\"))$/,\n                        regexp_domain = /^((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n                        domain = this.$domain_input.val() || this.$('.register-form-jid .xmpp-server-dropdown-wrap .property-value').text();\n                    if (!regexp_local_part.test(this.$jid_input.val()))\n                        return this.registerFeedback({jid: xabber.getString(\"account_add__alert_localpart_invalid\")});\n                    else if (!(regexp_domain.test(domain)))\n                        return this.registerFeedback({domain: xabber.getString(\"account_add__alert_invalid_domain\")});\n                    else\n                        this.registerFeedback({});\n                    if (!constants.REGISTRATION_CUSTOM_DOMAIN && !(constants.REGISTRATION_DOMAINS.indexOf(domain) > -1))\n                        return this.registerFeedback({domain: xabber.getString(\"account_auth__error__registration_custom_domain\")});\n                    this._check_user_timeout = setTimeout(() => {\n                        domain = this.$domain_input.val() || this.$('.register-form-jid .xmpp-server-dropdown-wrap .property-value').text();\n                        this.$('.btn-next').prop('disabled', true);\n                        this._registration_username = this.$jid_input.val()\n                        this._registration_domain = domain\n                        if (domain) {\n                            if (this.auth_connection && this.auth_connection.domain != domain)\n                                this.auth_connection.disconnect()\n                            if (!this.auth_connection) {\n                                this.getWebsocketURL(domain, (response) => {\n                                    this.CONNECTION_URL = response || constants.CONNECTION_URL;\n                                    this.auth_conn_manager = new Strophe.ConnectionManager(this.CONNECTION_URL);\n                                    this.auth_connection = this.auth_conn_manager.connection;\n                                    this.auth_connection.register.connect_check_user(domain, this.checkUserCallback.bind(this))\n                                });\n                            }\n                            else if(this.auth_connection && this.auth_connection.connected) {\n                                this.auth_connection.register._connection._addSysHandler(this.handleRegisterStanza.bind(this.auth_connection.register),\n                                    null, \"iq\", null, null);\n                                this.auth_connection.register._connection.send($iq({type: \"get\", id: uuid(), to: this.auth_connection.register.domain }).c(\"query\",\n                                    {xmlns: Strophe.NS.REGISTER}).c(\"username\").t(this._registration_username.trim()).tree());\n                            }\n                        }\n                        else {\n                            this.registerFeedback({jid: xabber.getString(\"account_add__alert_invalid_domain\")});\n                        }\n                    }, 1000);\n                }\n                else\n                    this.registerFeedback({});\n            },\n\n            keyUpPassword: function (ev) {\n                if(this.$password_input.val()){\n                    this.$('.btn-next').prop('disabled', false);\n                }\n                else {\n                    this.$('.btn-next').prop('disabled', true);\n                }\n                if (this.$password_input.val() && ev)\n                    ev.keyCode === constants.KEY_ENTER && this.openNextStep();\n            },\n\n            keyUpDomain: function () {\n            },\n\n            keyUpLogin: function (ev) {\n                if(this.$jid_input.val() && this.$password_input.val()){\n                    this.$('.btn-log-in').prop('disabled', false);\n                }\n                else {\n                    this.$('.btn-log-in').prop('disabled', true);\n                }\n                this.$('.login-step-wrap').hideIf(true);\n                this.authFeedback({});\n                this.$('.input-field-jid .xmpp-server-dropdown-wrap').hideIf(this.$jid_input.val() && this.$jid_input.val().includes('@') && constants.LOGIN_CUSTOM_DOMAIN)\n                if (this.$jid_input.val() && this.$jid_input.val().includes('@') && constants.LOGIN_CUSTOM_DOMAIN){\n                    this.$('.input-field-jid').addClass('input-field-jid-borders')\n                }else {\n                    this.$('.input-field-jid').removeClass('input-field-jid-borders')\n                }\n                if (ev && this.$jid_input.val() && this.$password_input.val())\n                    ev.keyCode === constants.KEY_ENTER && this.login();\n            },\n\n            focusoutDomain: function () {\n                if(this.$jid_input.val() && (this.$domain_input.val() || this.$('.register-form-jid .xmpp-server-dropdown-wrap .property-value').text()))\n                    this.keyUpJid();\n            },\n\n            handleRegisterStanza: function (stanza) {\n                let i, query, field, username_taken, conn = this._connection;\n                query = stanza.getElementsByTagName(\"query\");\n                if (query.length !== 1) {\n                    conn._changeConnectStatus(Strophe.Status.REGIFAIL, \"unknown\");\n                    return false;\n                }\n                query = query[0];\n                for (i = 0; i < query.childNodes.length; i++) {\n                    field = query.childNodes[i];\n                    if (field.tagName.toLowerCase() === 'instructions') {\n                        conn.register.instructions = Strophe.getText(field);\n                        continue;\n                    } else if (field.tagName.toLowerCase() === 'username') {\n                        if (Strophe.getText(field))\n                            this._supports_check_user = true\n                        continue;\n                    } else if (field.tagName.toLowerCase() === 'registered') {\n                        username_taken = true\n                        continue;\n                    } else if (field.tagName.toLowerCase() === 'x') {\n                        continue;\n                    }\n                    conn.register.fields[field.tagName.toLowerCase()] = Strophe.getText(field);\n                }\n                if (this._supports_check_user){\n                    if (username_taken)\n                        conn._changeConnectStatus(Strophe.Status.CONFLICT, null);\n                    else\n                        conn._changeConnectStatus(Strophe.Status.REGISTERED, null);\n                }\n                else\n                    conn._changeConnectStatus(Strophe.Status.REGIFAIL, \"not-supported\");\n\n                return false;\n            },\n\n            checkUserCallback: function (status, condition) {\n                if (status === Strophe.Status.REGISTER || status === Strophe.Status.REGIFAIL) {\n                    if (!this.$('.select-xmpp-server .property-variant[data-value=\"' + this.auth_connection.register.domain + '\"]').length && constants.REGISTRATION_CUSTOM_DOMAIN) {\n                        $('<div/>', {class: 'field-jid property-variant set-default-domain'})\n                            .text(this.auth_connection.register.domain)\n                            .attr('data-value', this.auth_connection.register.domain)\n                            .insertBefore(this.$('.register-form-jid .dropdown-content .set-custom-domain'));\n                    }\n                    this.$('.select-xmpp-server .input-group-chat-domain').addClass('hidden');\n                    this.$('#new_account_domain').val(\"\");\n                    this.$('.select-xmpp-server .xmpp-server-item-wrap .property-value').text(this.auth_connection.register.domain)\n                        .removeClass('hidden').attr('data-value', this.auth_connection.register.domain);\n                }\n                if (status === Strophe.Status.REGISTER) {\n                    if (this.auth_connection && this.auth_connection.connected) {\n                        this.auth_connection.register._connection._addSysHandler(this.handleRegisterStanza.bind(this.auth_connection.register),\n                            null, \"iq\", null, null);\n                        this.auth_connection.register._connection.send($iq({type: \"get\", id: uuid(), to: this.auth_connection.register.domain }).c(\"query\",\n                            {xmlns: Strophe.NS.REGISTER}).c(\"username\").t(this._registration_username.trim()).tree());\n                    }\n                } else if (status === Strophe.Status.REGISTERED) {\n                    this.registerFeedback({user_success: true, jid: xabber.getString(\"xmpp_login__registration_jid_available\")});\n                    this.$('.btn-next').prop('disabled', false);\n                } else if (status === Strophe.Status.CONFLICT) {\n                    this.registerFeedback({jid: xabber.getString(\"xmpp_login__registration_jid_occupied\")});\n                    this.$('.btn-next').prop('disabled', true);\n                } else if (status === Strophe.Status.CONNFAIL) {\n                    this.registerFeedback({jid: xabber.getString(\"CONNECTION_FAILED\") + ': ' + condition});\n                    this.$('.btn-next').prop('disabled', true);\n                } else if (status === Strophe.Status.REGIFAIL) {\n                    if (condition === 'not-supported'){\n                        this.registerFeedback({});\n                        this.$('.btn-next').prop('disabled', false);\n                    }\n                    else {\n                        this.registerFeedback({jid: xabber.getString(\"xmpp_login__registration_jid_not_supported\")});\n                        this.$('.btn-next').prop('disabled', true);\n                    }\n                    this.auth_connection.disconnect()\n                } else if (status === Strophe.Status.CONNECTING) {\n                    clearTimeout(this._check_user_connection_timeout);\n                        this._check_user_connection_timeout = setTimeout(() => {\n                            if(this.auth_connection && !this.auth_connection.connected){\n                                this.auth_connection._no_response = true\n                                this.auth_connection.disconnect()\n                            }\n                        }, 10000);\n                } else if (status === Strophe.Status.DISCONNECTED) {\n                    if (this.auth_connection && this.auth_connection._no_response) {\n                        this.registerFeedback({jid: xabber.getString(\"account_add__alert_invalid_domain\")});\n                        this.$('.btn-next').prop('disabled', true);\n                    }\n                    this.auth_conn_manager = undefined;\n                    this.auth_connection = undefined;\n                }\n            },\n\n            openPreviousStep: function () {\n                let step = this.data.get('step')\n                if(typeof step === 'number') {\n                    step--;\n                    this.data.set('step', step)\n                }\n            },\n\n            openNextStep: function () {\n                let step = this.data.get('step')\n                if(typeof step === 'number') {\n                    step++;\n                    this.data.set('step', step)\n                }\n            },\n\n            handleRegistrationStep: function () {\n                let step = this.data.get('step')\n                if (step === -1){\n                    this.$(`.server-feature .preloader-wrapper`).addClass('active').addClass('visible');\n                    this.$(`.server-feature .mdi`).hideIf(true);\n                    this.$(`.server-feature`).removeClass('active-feature')\n                    this.$(`.server-feature .mdi`).addClass('.mdi-alert').removeClass('mdi-checkbox-marked-circle')\n                    this.$('.login-form-header').text(xabber.getString(\"signin_server_features\"));\n                    this.$('.login-form-server-features .register-form-step-header').text(xabber.getString(\"signin_checking_features_message\", [this.account.domain]));\n                    this.$('.btn-go-back-menu').hideIf(true);\n                    this.$('.login-form-jid').hideIf(true);\n                    this.$('.login-form-server-features').hideIf(false);\n                    this.$('.btn-log-in').hideIf(true);\n                    this.checkFeaturesStepper();\n                }\n                if (step === 0){\n                    this.$jid_input = this.$('input[name=jid]');\n                    this.$password_input = this.$('input[name=password]');\n                    this.$domain_input = this.$('input[name=sign_in_domain]');\n                    this.$domain_input.val('')\n                    this.$jid_input.val('')\n                    this.$password_input.val('')\n                    this.keyUpLogin();\n                    this.$('.login-step-wrap').hideIf(true);\n                    this.authFeedback({});\n                    this.resetAuthStepper();\n                    this.$('.login-panel-form.xmpp-login-form .buttons-wrap').removeClass('server-features-additional-button')\n                    this.$('.login-form-header').text(xabber.getString(\"title_login_xabber_account\"));\n                    this.$('.btn-go-back-menu').hideIf(false);\n                    this.$('.login-panel-intro').hideIf(true);\n                    this.$('.register-form').hideIf(true);\n                    this.$('.xmpp-login-form').hideIf(false);\n                    this.$('.login-form-jid').hideIf(false);\n                    this.$('.login-form-server-features').hideIf(true);\n                    this.$('.btn-log-in').hideIf(false);\n                    this.$('.btn-finish-log-in').hideIf(true);\n                    this.$('.btn-sign-up-instead').hideIf(true);\n                    this.$jid_input.focus();\n                }\n                else if (step === 1){\n                    this.$('.login-panel-intro').hideIf(false);\n                    this.$('.register-form').hideIf(true);\n                    this.$('.xmpp-login-form').hideIf(true);\n                }\n                else if (step === 2){\n                    this.$jid_input = this.$('input[name=register_jid]');\n                    this.$password_input = this.$('input[name=register_password]');\n                    this.$domain_input = this.$('input[name=register_domain]');\n                    this.keyUpNickname();\n                    this.$('.login-form-header').text(xabber.getString(\"title_register_xabber_account\"));\n                    this.$('.login-form-url').hideIf(false);\n                    this.$('.login-panel-intro').hideIf(true);\n                    this.$('.register-form').hideIf(false);\n                    this.$('.xmpp-login-form').hideIf(true);\n                    this.$('.register-form-nickname').hideIf(false);\n                    this.$('.register-form-jid').hideIf(true);\n                    this.$('.register-form-password').hideIf(true);\n                    this.$('.register-form-picture').hideIf(true);\n                    this.$nickname_input.focus();\n                }\n                else if (step === 3){\n                    if (this.$nickname_input.val()) {\n                        this.$('.login-form-header').text(xabber.getString(\"hint_username\"));\n                        this.$('.register-form-nickname').hideIf(true);\n                        this.$('.register-form-jid').hideIf(false);\n                        this.$('.register-form-password').hideIf(true);\n                        this.$('.register-form-picture').hideIf(true);\n                        this.keyUpJid();\n                        this.$jid_input.focus();\n                        this.$password_input.val('');\n                    }\n                    else {\n                        this.registerFeedback({nickname: xabber.getString(\"dialog_add_circle__error__text_input_name\")});\n                        return this.data.set('step', 2);\n                    }\n\n                }\n                else if (step === 4){\n                    if (this.$jid_input.val()) {\n                        this.$('.login-form-header').text(xabber.getString(\"hint_pass\"));\n                        this.$('.register-form-nickname').hideIf(true);\n                        this.$('.register-form-jid').hideIf(true);\n                        this.$('.register-form-password').hideIf(false);\n                        this.$('.register-form-picture').hideIf(true);\n                        this.keyUpPassword();\n                        this.$password_input.focus();\n                    }\n                    else {\n                        this.registerFeedback({jid: xabber.getString(\"account_auth__error__text_input_username\")});\n                        return this.data.set('step', 3);\n                    }\n\n                }\n                else if (step === 5){\n                    if (this.$password_input.val()) {\n                        this.register();\n                    }\n                    else {\n                        this.registerFeedback({password: xabber.getString(\"dialog_change_password__error__text_input_pass\")});\n                        return this.data.set('step', 4);\n                    }\n                }\n                else if (step === 6){\n                    this.$('.login-form-header').text(xabber.getString(\"xmpp_login__registration_header_avatar\"));\n                    this.$('.login-form-url').hideIf(true);\n                    this.$('.btn-go-back').hideIf(true);\n                    this.$('.btn-skip').hideIf(false)\n                    this.$('.register-form-nickname').hideIf(true);\n                    this.$('.register-form-jid').hideIf(true);\n                    this.$('.register-form-password').hideIf(true);\n                    this.$('.register-form-picture').hideIf(false);\n                    this.$('.btn-next').prop('disabled', true);\n                }\n                else if (step >= 7){\n                    if(this.avatar)\n                        this.account.pubAvatar(this.avatar, () => {\n                        }, () => {\n                            utils.dialogs.error(xabber.getString(\"group_settings__error__wrong_image\"));\n                        });\n                    this.successRegistrationFeedback();\n                }\n            },\n\n            registerWithoutAvatar: function () {\n                this.successRegistrationFeedback();\n            },\n\n            logoutAndRegister: function () {\n                this.account.session.set('delete', true);\n                this.account.deactivate();\n                this.openRegisterForm()\n            },\n\n            openRegisterForm: function () {\n                this.data.set('step', 2)\n            },\n\n            openLoginForm: function () {\n                this.data.set('step', 0)\n            },\n\n            updateButtons: function () {\n                let authentication = this.data.get('authentication');\n                this.$('.btn-log-in').prop('disabled', authentication);\n            },\n\n            updateDomains: function () {\n                let all_servers = constants.REGISTRATION_DOMAINS;\n                if (xabber.url_params.rkey && all_servers.length){\n                    for (let i = all_servers.length - 1; i >= 0; i--) {\n                        if (!sha1(all_servers[i]).substr(0, 10).includes(xabber.url_params.rkey.substr(0, 10))){\n                            all_servers.splice(i, 1)\n                        }\n                    }\n                }\n                this.$('.register-form-jid .field-jid.property-variant').remove()\n                if (all_servers.length)\n                    this.$('.register-form-jid .xmpp-server-dropdown-wrap .field-jid').text(all_servers[0]);\n                else\n                    this.setCustomDomainRegistration(this.$('.register-form-jid .property-field.xmpp-server-dropdown-wrap .property-value'));\n                this.$('.register-form-jid .modal-content .jid-field .set-default-domain').remove();\n\n                for (let i = 0; i < all_servers.length; i++) {\n                    $('<div/>', {class: 'field-jid property-variant set-default-domain'})\n                        .text(all_servers[i])\n                        .attr('data-value', all_servers[i])\n                        .insertBefore(this.$('.register-form-jid .dropdown-content .set-custom-domain'));\n                }\n            },\n\n            updateAuthDomains: function () {\n                let all_servers = constants.LOGIN_DOMAINS;\n\n                this.$('.login-form-jid .field-jid.property-variant').remove()\n                if (all_servers.length)\n                    this.$('.login-form-jid .xmpp-server-dropdown-wrap .field-jid').text(all_servers[0]);\n                else\n                    this.setCustomDomainAuth(this.$('.login-form-jid .property-field.xmpp-server-dropdown-wrap .property-value'));\n                this.$('.login-form-jid .modal-content .jid-field .set-default-domain').remove();\n\n                for (let i = 0; i < all_servers.length; i++) {\n                    $('<div/>', {class: 'field-jid property-variant set-default-domain'})\n                        .text(all_servers[i])\n                        .attr('data-value', all_servers[i])\n                        .insertBefore(this.$('.login-form-jid .dropdown-content .set-custom-domain'));\n                }\n            },\n\n            setCustomDomainRegistration: function ($property_value) {\n                this.$('#new_account_domain').val(\"\");\n                $property_value.addClass('hidden').text(\"\");\n                this.$('.select-xmpp-server .caret').addClass('hidden');\n                this.$('.select-xmpp-server .input-group-chat-domain').removeClass('hidden');\n            },\n\n            setCustomDomainAuth: function ($property_value) {\n                this.$('#sign_in_domain').val(\"\");\n                $property_value.addClass('hidden').text(\"\");\n                this.$('.select-auth-xmpp-server .caret').addClass('hidden');\n                this.$('.select-auth-xmpp-server .input-group-chat-domain').removeClass('hidden');\n            },\n\n            changePropertyValueRegistration: function (ev) {\n                let $property_item = $(ev.target),\n                    $property_value = $property_item.closest('.property-field').find('.property-value');\n                if ($property_item.hasClass('set-custom-domain')) {\n                    this.setCustomDomainRegistration($property_value);\n                    return;\n                }\n                else if ($property_item.hasClass('set-default-domain')) {\n                    this.$('.select-xmpp-server .input-group-chat-domain').addClass('hidden');\n                    this.$('#new_account_domain').val(\"\");\n                }\n                $property_value.text($property_item.text());\n                $property_value.removeClass('hidden').attr('data-value', $property_item.attr('data-value'));\n                this.$('.select-xmpp-server .caret').removeClass('hidden');\n                if(this.$jid_input.val() && (this.$domain_input.val() || this.$('.register-form-jid .xmpp-server-dropdown-wrap .property-value').text()))\n                    this.keyUpJid();\n            },\n\n            changePropertyValueAuth: function (ev) {\n                let $property_item = $(ev.target),\n                    $property_value = $property_item.closest('.property-field').find('.property-value');\n                if ($property_item.hasClass('set-custom-domain')) {\n                    this.setCustomDomainAuth($property_value);\n                    return;\n                }\n                else if ($property_item.hasClass('set-default-domain')) {\n                    this.$('.select-auth-xmpp-server .input-group-chat-domain').addClass('hidden');\n                    this.$('#sign_in_domain').val(\"\");\n                }\n                $property_value.text($property_item.text());\n                $property_value.removeClass('hidden').attr('data-value', $property_item.attr('data-value'));\n                this.$('.select-auth-xmpp-server .caret').removeClass('hidden');\n            },\n\n            chooseAvatar: function () {\n                this.$('.circle-avatar input').click();\n            },\n\n            openEmojiPanel: function () {\n                let emoji_panel_view = new xabber.EmojiProfileImageView();\n                emoji_panel_view.open({model: this.account, registration: true, registration_view: this});\n            },\n\n            openWebcamPanel: function () {\n                let webcam_panel_view = new xabber.WebcamProfileImageView();\n                webcam_panel_view.open({model: this.account, registration: true, registration_view: this});\n            },\n\n            changeAvatar: function (ev) {\n                let field = ev.target;\n                if (!field.files.length)\n                    return;\n                let file = field.files[0];\n                field.value = '';\n                if (file.size > constants.MAX_AVATAR_FILE_SIZE) {\n                    utils.dialogs.error(xabber.getString(\"group_settings__error__avatar_too_large\"));\n                    return;\n                } else if (!file.type.startsWith('image')) {\n                    utils.dialogs.error(xabber.getString(\"group_settings__error__wrong_image\"));\n                    return;\n                }\n\n                utils.images.getAvatarFromFile(file).done((image) => {\n                    if (image) {\n                        file.base64 = image;\n                        this.avatar = file;\n                        this.$('.btn-next').prop('disabled', false);\n                        this.$('.circle-avatar').addClass('changed');\n                        this.$('.circle-avatar').setAvatar(image, this.member_details_avatar_size);\n                    }\n                });\n            },\n\n            successFeedback: function () {\n                this.data.set('step', -1)\n            },\n\n            checkFeaturesStepper: function () {\n                this.$('.server-features-error').text('');\n                let timeout_timer = 1000;\n                setTimeout(() => {\n                    if (this.account.server_features.get(Strophe.NS.MAM)){\n                        this.$(`.server-feature[data-xmlns=\"${Strophe.NS.MAM}\"]`).addClass('active-feature');\n                        this.$(`.server-feature[data-xmlns=\"${Strophe.NS.MAM}\"] .mdi`).hideIf(false).removeClass('.mdi-alert').addClass('mdi-checkbox-marked-circle');\n                    }\n                    else\n                        this.$(`.server-feature[data-xmlns=\"${Strophe.NS.MAM}\"] .mdi`).hideIf(false).addClass('.mdi-alert').removeClass('mdi-checkbox-marked-circle');\n                    this.$(`.server-feature[data-xmlns=\"${Strophe.NS.MAM}\"] .preloader-wrapper`).removeClass('active').removeClass('visible');\n                    setTimeout(() => {\n                        if (this.account.server_features.get(Strophe.NS.SYNCHRONIZATION)){\n                            this.$(`.server-feature[data-xmlns=\"${Strophe.NS.SYNCHRONIZATION}\"]`).addClass('active-feature');\n                            this.$(`.server-feature[data-xmlns=\"${Strophe.NS.SYNCHRONIZATION}\"] .mdi`).hideIf(false).removeClass('.mdi-alert').addClass('mdi-checkbox-marked-circle');\n                        }\n                        else\n                            this.$(`.server-feature[data-xmlns=\"${Strophe.NS.SYNCHRONIZATION}\"] .mdi`).hideIf(false).addClass('.mdi-alert').removeClass('mdi-checkbox-marked-circle');\n                        this.$(`.server-feature[data-xmlns=\"${Strophe.NS.SYNCHRONIZATION}\"] .preloader-wrapper`).removeClass('active').removeClass('visible');\n                        setTimeout(() => {\n                            if (this.account.server_features.get(Strophe.NS.REWRITE)){\n                                this.$(`.server-feature[data-xmlns=\"${Strophe.NS.REWRITE}\"]`).addClass('active-feature');\n                                this.$(`.server-feature[data-xmlns=\"${Strophe.NS.REWRITE}\"] .mdi`).hideIf(false).removeClass('.mdi-alert').addClass('mdi-checkbox-marked-circle');\n                            }\n                            else\n                                this.$(`.server-feature[data-xmlns=\"${Strophe.NS.REWRITE}\"] .mdi`).hideIf(false).addClass('.mdi-alert').removeClass('mdi-checkbox-marked-circle');\n                            this.$(`.server-feature[data-xmlns=\"${Strophe.NS.REWRITE}\"] .preloader-wrapper`).removeClass('active').removeClass('visible');\n                            setTimeout(() => {\n                                if (this.account.server_features.get(Strophe.NS.AUTH_DEVICES)) {\n                                    this.$(`.server-feature[data-xmlns=\"${Strophe.NS.AUTH_DEVICES}\"]`).addClass('active-feature');\n                                    this.$(`.server-feature[data-xmlns=\"${Strophe.NS.AUTH_DEVICES}\"] .mdi`).hideIf(false).removeClass('.mdi-alert').addClass('mdi-checkbox-marked-circle');\n                                }\n                                else\n                                        this.$(`.server-feature[data-xmlns=\"${Strophe.NS.AUTH_DEVICES}\"] .mdi`).hideIf(false).addClass('.mdi-alert').removeClass('mdi-checkbox-marked-circle')\n                                this.$(`.server-feature[data-xmlns=\"${Strophe.NS.AUTH_DEVICES}\"] .preloader-wrapper`).removeClass('active').removeClass('visible');;\n                                setTimeout(() => {\n                                    if (this.account.server_features.get(Strophe.NS.PUBSUB)){\n                                        this.$(`.server-feature[data-xmlns=\"${Strophe.NS.PUBSUB}\"]`).addClass('active-feature');\n                                        this.$(`.server-feature[data-xmlns=\"${Strophe.NS.PUBSUB}\"] .mdi`).hideIf(false).removeClass('.mdi-alert').addClass('mdi-checkbox-marked-circle');\n                                    }\n                                    else\n                                        this.$(`.server-feature[data-xmlns=\"${Strophe.NS.PUBSUB}\"] .mdi`).hideIf(false).addClass('.mdi-alert').removeClass('mdi-checkbox-marked-circle');\n                                    this.$(`.server-feature[data-xmlns=\"${Strophe.NS.PUBSUB}\"] .preloader-wrapper`).removeClass('active').removeClass('visible');\n                                    setTimeout(() => {\n                                        if (this.account.server_features.get(Strophe.NS.HTTP_UPLOAD)){\n                                            this.$(`.server-feature[data-xmlns=\"${Strophe.NS.HTTP_UPLOAD}\"]`).addClass('active-feature');\n                                            this.$(`.server-feature[data-xmlns=\"${Strophe.NS.HTTP_UPLOAD}\"] .mdi`).hideIf(false).removeClass('.mdi-alert').addClass('mdi-checkbox-marked-circle');\n                                        }\n                                        else\n                                            this.$(`.server-feature[data-xmlns=\"${Strophe.NS.HTTP_UPLOAD}\"] .mdi`).hideIf(false).addClass('.mdi-alert').removeClass('mdi-checkbox-marked-circle');\n                                        this.$(`.server-feature[data-xmlns=\"${Strophe.NS.HTTP_UPLOAD}\"] .preloader-wrapper`).removeClass('active').removeClass('visible');\n                                        setTimeout(() => {\n                                            if (constants.RECOMMENDED_DOMAIN && (this.$('.server-feature.active-feature').length != 6)){\n                                                this.$('.server-features-error').text(xabber.getString('signin_not_all_features', [constants.RECOMMENDED_DOMAIN]));\n                                                this.$('.login-panel-form.xmpp-login-form .buttons-wrap').addClass('server-features-additional-button');\n                                                this.$('.btn-sign-up-instead').hideIf(false);\n                                            }\n                                            if (this.$('.server-feature.active-feature').length != 6) {\n                                                this.$('.btn-finish-log-in').text(xabber.getString('signin_proceed_anyway'))\n                                                this.$('.btn-finish-log-in').addClass('btn-main').removeClass('btn-main-filled')\n                                            }\n                                            else {\n                                                this.$('.btn-finish-log-in').text(xabber.getString('xaccount_next'))\n                                                this.$('.btn-finish-log-in').removeClass('btn-main').addClass('btn-main-filled')\n                                            }\n                                            this.$('.btn-finish-log-in').hideIf(false);\n                                        }, timeout_timer);\n                                    }, timeout_timer);\n                                }, timeout_timer);\n                            }, timeout_timer);\n                        }, timeout_timer);\n                    }, timeout_timer);\n                }, timeout_timer);\n            },\n\n            endAuth: function (account) {\n                this.account.save('is_new', undefined);\n                this.data.set('registration', false);\n                this.data.set('authentication', false);\n                xabber.body.setScreen('all-chats', {right: null});\n                this.account.trigger('ready_to_get_roster');\n                this.account.auth_view = null;\n            },\n\n            authFeedback: function (options) {\n                this.$jid_input.switchClass('invalid', options.jid);\n                this.$('.login-form-jid .login-jid-error').text(options.jid || '').showIf(options.jid);\n                this.$password_input.switchClass('invalid', options.password);\n                this.$('.login-form-jid .login-password-error').text(options.password || '').showIf(options.password);\n                this.$('.login-form-jid .register-form-step-description').hideIf(options.password || options.jid);\n            },\n\n            resetAuthStepper: function (){\n                this.$(`.login-step .preloader-wrapper`).addClass('active').addClass('visible');\n                this.$(`.login-step .mdi`).hideIf(true);\n                this.$(`.login-step`).removeClass('active-feature')\n                this.$(`.login-step .mdi`).addClass('mdi-alert-circle').removeClass('mdi-checkbox-marked-circle')\n            },\n\n            authStepperShow: function (){\n                this.$('.login-step-wrap').hideIf(false);\n                this.$(`.login-step`).hideIf(true);\n            },\n\n            authStepperStart: function (){\n                this.$(`.login-step.connecting-step`).hideIf(false);\n                let timeout_timer = 1000;\n                setTimeout(() => {\n                    this.$(`.login-step.connecting-step`).addClass('active-feature');\n                    this.$(`.login-step.connecting-step .preloader-wrapper`).removeClass('active').removeClass('visible');\n                    this.$(`.login-step.connecting-step .mdi`).hideIf(false).removeClass('mdi-alert-circle').addClass('mdi-checkbox-marked-circle');\n                    this.$(`.login-step.credentials-step`).hideIf(false);\n                    setTimeout(() => {\n                        this.$(`.login-step.credentials-step`).addClass('active-feature');\n                        this.$(`.login-step.credentials-step .preloader-wrapper`).removeClass('active').removeClass('visible');\n                        this.$(`.login-step.credentials-step .mdi`).hideIf(false).removeClass('mdi-alert-circle').addClass('mdi-checkbox-marked-circle');\n                        setTimeout(() => {\n                            if (constants.TRUSTED_DOMAINS.indexOf(this.account.connection.domain) > -1){\n                                this.endAuth();\n                            } else {\n                                this.stepped_auth_complete = true\n                                if (this.first_features_received)\n                                    this.successFeedback();\n                            }\n                        },timeout_timer)\n                    },timeout_timer)\n                },timeout_timer)\n            },\n\n            authStepperError: function (auth_error, options){\n                let timeout_timer = 1000;\n                this.$('.login-step-wrap').hideIf(false);\n                this.$(`.login-step.connecting-step`).hideIf(false);\n                setTimeout(() => {\n                    if (auth_error){\n                        this.$(`.login-step.connecting-step`).addClass('active-feature');\n                        this.$(`.login-step.connecting-step .preloader-wrapper`).removeClass('active').removeClass('visible');\n                        this.$(`.login-step.connecting-step .mdi`).hideIf(false).removeClass('mdi-alert-circle').addClass('mdi-checkbox-marked-circle');\n                        this.$(`.login-step.credentials-step`).hideIf(false);\n                    }\n                    else {\n                        this.$(`.login-step.connecting-step .preloader-wrapper`).removeClass('active').removeClass('visible');\n                        this.$(`.login-step.connecting-step .mdi`).hideIf(false);\n                        this.errorFeedback(options);\n                        return;\n                    }\n                    setTimeout(() => {\n                        this.$(`.login-step.credentials-step .preloader-wrapper`).removeClass('active').removeClass('visible');\n                        this.$(`.login-step.credentials-step .mdi`).hideIf(false);\n                        this.errorFeedback(options);\n                    },timeout_timer)\n                },timeout_timer)\n            },\n\n            registerFeedback: function (options) {\n                if(options.user_success) {\n                    this.$('.register-form-jid .register-form-step-error').addClass('available').text(options.jid || '').showIf(options.jid);\n                    this.$jid_input.removeClass('invalid');\n                    this.$('.register-form-jid .register-form-step-description').hideIf(options.jid);\n                }\n                else if(options.registration_success) {\n                    this.$('.register-form-password .register-form-step-error').addClass('available').text(options.password || '').showIf(options.password);\n                    this.$password_input.removeClass('invalid');\n                    this.$('.register-form-password .register-form-step-description').hideIf(options.password);\n                }\n                else {\n                    this.$nickname_input.switchClass('invalid', options.nickname);\n                    this.$('.register-form-nickname.register-form-step-error').text(options.nickname || '').showIf(options.nickname);\n                    this.$('.register-form-nickname .register-form-step-description').hideIf(options.nickname);\n                    this.$jid_input.switchClass('invalid', options.jid);\n                    this.$domain_input.switchClass('invalid', options.domain);\n                    this.$('.register-form-jid .register-form-step-error').removeClass('available').text(options.jid || options.domain || '').showIf(options.jid || options.domain);\n                    this.$('.register-form-jid .register-form-step-description').hideIf(options.jid || options.domain);\n                    this.$password_input.switchClass('invalid', options.password);\n                    this.$('.register-form-password .register-form-step-error').removeClass('available').text(options.password || '').showIf(options.password);\n                    this.$('.register-form-password .register-form-step-description').hideIf(options.password);\n                }\n            },\n\n            errorRegistrationFeedback: function (options) {\n                this.registerFeedback(options);\n                this.data.set('registration', false);\n                this.data.set('authentication', false);\n                this.$jid_input.prop('disabled', false);\n                this.$password_input.prop('disabled', false);\n                if(this.account)\n                    this.account.destroy();\n            },\n\n            successRegistrationFeedback: function () {\n                this.$jid_input.prop('disabled', false);\n                this.$password_input.prop('disabled', false)\n                this.account.trigger('start');\n            },\n        });\n\n\n        xabber.AddAccountView = xabber.XmppLoginPanel.extend({\n            className: 'modal main-modal add-account-modal',\n            template: templates.add_account,\n\n            events: {\n                \"click .login-type\": \"changeLoginType\",\n                \"click .btn-log-in\": \"login\",\n                \"click .btn-cancel\": \"logout\",\n                \"click .btn-go-back-menu\": \"close\",\n                \"click .btn-finish-log-in\": \"endAuth\",\n                \"keyup input[name=jid]\": \"keyUpLogin\",\n                \"keyup input[name=password]\": \"keyUpLogin\",\n                \"keyup input[name=sign_in_domain]\": \"keyUpLogin\",\n                \"click .property-variant\": \"changePropertyValueAuth\"\n            },\n\n            render: function (options) {\n                this.$el.openModal({\n                    ready: this.onRender.bind(this),\n                    complete: this.close.bind(this)\n                });\n            },\n\n            onRender: function () {\n                this.data.set('step', 0)\n                this.account = null;\n                this.stepped_auth = true;\n                this.stepped_auth_complete = false;\n                this.authFeedback({});\n                this.$jid_input = this.$('input[name=jid]');\n                this.$password_input = this.$('input[name=password]');\n                this.$domain_input = this.$('input[name=sign_in_domain]');\n                this.$jid_input.val('')\n                this.$password_input.val('')\n                this.keyUpLogin();\n                this.updateAuthDomains();\n                this.$('.login-step-wrap').hideIf(true);\n                this.resetAuthStepper();\n                this.$('.login-panel-form.xmpp-login-form .buttons-wrap').removeClass('server-features-additional-button')\n                this.$('.modal-header').text(xabber.getString(\"account_add\"));\n                this.$('.login-form-jid').hideIf(false);\n                this.$('.login-form-server-features').hideIf(true);\n                this.$('.btn-log-in').hideIf(false);\n                this.$('.btn-cancel').hideIf(true);\n                this.$('.btn-finish-log-in').hideIf(true);\n                let dropdown_settings = {\n                    inDuration: 100,\n                    outDuration: 100,\n                    constrainWidth: false,\n                    hover: false,\n                    alignment: 'left'\n                };\n                this.$('.property-field .select-auth-xmpp-server .caret').dropdown(dropdown_settings);\n                this.$('.property-field .select-auth-xmpp-server .xmpp-server-item-wrap').dropdown(dropdown_settings);\n                this.$('.login-form-jid .dropdown-content .set-custom-domain').hideIf(!constants.LOGIN_CUSTOM_DOMAIN);\n                Materialize.updateTextFields();\n                this.updateButtons();\n                this.updateOptions && this.updateOptions();\n            },\n\n            handleRegistrationStep: function () {\n                let step = this.data.get('step')\n                if (step === -1){\n                    this.$(`.server-feature .preloader-wrapper`).addClass('active').addClass('visible');\n                    this.$(`.server-feature .mdi`).hideIf(true);\n                    this.$(`.server-feature`).removeClass('active-feature')\n                    this.$(`.server-feature .mdi`).addClass('.mdi-alert').removeClass('mdi-checkbox-marked-circle')\n                    this.$('.modal-header').text(xabber.getString(\"signin_server_features\"));\n                    this.$('.login-form-jid').hideIf(true);\n                    this.$('.login-form-server-features').hideIf(false);\n                    this.$('.btn-log-in').hideIf(true);\n                    this.checkFeaturesStepper();\n                }\n            },\n\n            logout: function () {\n                this.account.session.set('delete', true);\n                this.account.deactivate();\n                this.closeModal();\n            },\n\n            endAuth: function () {\n                this.account.save('is_new', undefined);\n                this.data.set('authentication', false);\n                xabber.body.setScreen('all-chats', {right: null});\n                this.account.trigger('ready_to_get_roster');\n                this.account.auth_view = null;\n                this.closeModal();\n            },\n\n            checkFeaturesStepper: function () {\n                this.$('.server-features-error').text('');\n                let timeout_timer = 1000;\n                setTimeout(() => {\n                    if (this.account.server_features.get(Strophe.NS.MAM)){\n                        this.$(`.server-feature[data-xmlns=\"${Strophe.NS.MAM}\"]`).addClass('active-feature');\n                        this.$(`.server-feature[data-xmlns=\"${Strophe.NS.MAM}\"] .mdi`).hideIf(false).removeClass('.mdi-alert').addClass('mdi-checkbox-marked-circle');\n                    }\n                    else\n                        this.$(`.server-feature[data-xmlns=\"${Strophe.NS.MAM}\"] .mdi`).hideIf(false).addClass('.mdi-alert').removeClass('mdi-checkbox-marked-circle');\n                    this.$(`.server-feature[data-xmlns=\"${Strophe.NS.MAM}\"] .preloader-wrapper`).removeClass('active').removeClass('visible');\n                    setTimeout(() => {\n                        if (this.account.server_features.get(Strophe.NS.SYNCHRONIZATION)){\n                            this.$(`.server-feature[data-xmlns=\"${Strophe.NS.SYNCHRONIZATION}\"]`).addClass('active-feature');\n                            this.$(`.server-feature[data-xmlns=\"${Strophe.NS.SYNCHRONIZATION}\"] .mdi`).hideIf(false).removeClass('.mdi-alert').addClass('mdi-checkbox-marked-circle');\n                        }\n                        else\n                            this.$(`.server-feature[data-xmlns=\"${Strophe.NS.SYNCHRONIZATION}\"] .mdi`).hideIf(false).addClass('.mdi-alert').removeClass('mdi-checkbox-marked-circle');\n                        this.$(`.server-feature[data-xmlns=\"${Strophe.NS.SYNCHRONIZATION}\"] .preloader-wrapper`).removeClass('active').removeClass('visible');\n                        setTimeout(() => {\n                            if (this.account.server_features.get(Strophe.NS.REWRITE)){\n                                this.$(`.server-feature[data-xmlns=\"${Strophe.NS.REWRITE}\"]`).addClass('active-feature');\n                                this.$(`.server-feature[data-xmlns=\"${Strophe.NS.REWRITE}\"] .mdi`).hideIf(false).removeClass('.mdi-alert').addClass('mdi-checkbox-marked-circle');\n                            }\n                            else\n                                this.$(`.server-feature[data-xmlns=\"${Strophe.NS.REWRITE}\"] .mdi`).hideIf(false).addClass('.mdi-alert').removeClass('mdi-checkbox-marked-circle');\n                            this.$(`.server-feature[data-xmlns=\"${Strophe.NS.REWRITE}\"] .preloader-wrapper`).removeClass('active').removeClass('visible');\n                            setTimeout(() => {\n                                if (this.account.server_features.get(Strophe.NS.AUTH_DEVICES)) {\n                                    this.$(`.server-feature[data-xmlns=\"${Strophe.NS.AUTH_DEVICES}\"]`).addClass('active-feature');\n                                    this.$(`.server-feature[data-xmlns=\"${Strophe.NS.AUTH_DEVICES}\"] .mdi`).hideIf(false).removeClass('.mdi-alert').addClass('mdi-checkbox-marked-circle');\n                                }\n                                else\n                                    this.$(`.server-feature[data-xmlns=\"${Strophe.NS.AUTH_DEVICES}\"] .mdi`).hideIf(false).addClass('.mdi-alert').removeClass('mdi-checkbox-marked-circle')\n                                this.$(`.server-feature[data-xmlns=\"${Strophe.NS.AUTH_DEVICES}\"] .preloader-wrapper`).removeClass('active').removeClass('visible');;\n                                setTimeout(() => {\n                                    if (this.account.server_features.get(Strophe.NS.PUBSUB)){\n                                        this.$(`.server-feature[data-xmlns=\"${Strophe.NS.PUBSUB}\"]`).addClass('active-feature');\n                                        this.$(`.server-feature[data-xmlns=\"${Strophe.NS.PUBSUB}\"] .mdi`).hideIf(false).removeClass('.mdi-alert').addClass('mdi-checkbox-marked-circle');\n                                    }\n                                    else\n                                        this.$(`.server-feature[data-xmlns=\"${Strophe.NS.PUBSUB}\"] .mdi`).hideIf(false).addClass('.mdi-alert').removeClass('mdi-checkbox-marked-circle');\n                                    this.$(`.server-feature[data-xmlns=\"${Strophe.NS.PUBSUB}\"] .preloader-wrapper`).removeClass('active').removeClass('visible');\n                                    setTimeout(() => {\n                                        if (this.account.server_features.get(Strophe.NS.HTTP_UPLOAD)){\n                                            this.$(`.server-feature[data-xmlns=\"${Strophe.NS.HTTP_UPLOAD}\"]`).addClass('active-feature');\n                                            this.$(`.server-feature[data-xmlns=\"${Strophe.NS.HTTP_UPLOAD}\"] .mdi`).hideIf(false).removeClass('.mdi-alert').addClass('mdi-checkbox-marked-circle');\n                                        }\n                                        else\n                                            this.$(`.server-feature[data-xmlns=\"${Strophe.NS.HTTP_UPLOAD}\"] .mdi`).hideIf(false).addClass('.mdi-alert').removeClass('mdi-checkbox-marked-circle');\n                                        this.$(`.server-feature[data-xmlns=\"${Strophe.NS.HTTP_UPLOAD}\"] .preloader-wrapper`).removeClass('active').removeClass('visible');\n                                        setTimeout(() => {\n                                            if (constants.RECOMMENDED_DOMAIN && (this.$('.server-feature.active-feature').length != 6)){\n                                                this.$('.server-features-error').text(xabber.getString('signin_not_all_features', [constants.RECOMMENDED_DOMAIN]));\n                                            }\n                                            if (this.$('.server-feature.active-feature').length != 6)\n                                                this.$('.btn-finish-log-in').text(xabber.getString('signin_proceed_anyway'))\n                                            else\n                                                this.$('.btn-finish-log-in').text(xabber.getString('xaccount_next'))\n                                            this.$('.btn-finish-log-in').hideIf(false);\n                                            this.$('.btn-cancel').hideIf(false);\n                                        }, timeout_timer);\n                                    }, timeout_timer);\n                                }, timeout_timer);\n                            }, timeout_timer);\n                        }, timeout_timer);\n                    }, timeout_timer);\n                }, timeout_timer);\n            },\n\n            onHide: function () {\n                this.$el.detach();\n            },\n\n            close: function () {\n                this.cancel();\n                this.closeModal();\n            },\n\n            closeModal: function () {\n                this.$el.closeModal({ complete: this.hide.bind(this) });\n            }\n        });\n\n        xabber.once(\"start\", function () {\n            this.xmpp_login_panel = xabber.login_page.addChild('xmpp_login', this.XmppLoginPanel);\n            this.account_settings = xabber.wide_panel.addChild('account_settings',\n                this.NodeView, {classlist: 'settings-panel account-settings-panel'});\n            this.acc_settings_left = xabber.account_settings.addChild('left',\n                this.Container, {classlist: 'account-settings-left-container'});\n            this.acc_settings_right = xabber.account_settings.addChild('right',\n                this.Container, {classlist: 'account-settings-right-container'});\n\n            this.accounts = new this.Accounts(null, {\n                storage_name: this.getStorageName() + '-accounts'\n            });\n            this.accounts.fetch();\n\n            this.toolbar_view.addChild('accounts', this.ToolbarAccountsBlockView,\n                {model: this.accounts, el: this.toolbar_view.$('.accounts')[0]});\n            this.settings_view.addChild('accounts', this.SettingsAccountsBlockView,\n                {model: this.accounts, el: this.settings_view.$('.xmpp-accounts')[0]});\n\n\n            this.on(\"add_account\", function () {\n                if (!this.add_account_view)\n                    this.add_account_view = new this.AddAccountView();\n                this.add_account_view.show();\n            }, this);\n\n            $(window).bind('beforeunload',function(){\n                xabber.current_voip_call && xabber.current_voip_call.reject();\n                return;\n            });\n\n            window.onbeforeunload = () => {\n                _.each(this.accounts.connected, function (account) {\n                    account.sendPresence('offline');\n                });\n            };\n\n            this.login_page.patchTree = function (tree, options) {\n                let login_screen = options.login_screen || constants.DEFAULT_LOGIN_SCREEN;\n                return login_screen === 'xmpp' ? { xmpp_login: null } : { xabber_login: null };\n            };\n        }, xabber);\n\n        return xabber;\n    };\n}).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack://xabber.web/./src/accounts.js?")},"./src/api-service.js":(module,exports,__webpack_require__)=>{eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n  return function (xabber) {\n    let env = xabber.env,\n        constants = env.constants,\n        templates = env.templates.api_service,\n        utils = env.utils,\n        $ = env.$,\n        _ = env._;\n\n\n    xabber.AccountSettings = Backbone.Model.extend({\n        idAttribute: 'jid',\n\n        defaults: {\n            timestamp: 0,\n            to_sync: false,\n            synced: false,\n            deleted: false\n        },\n\n        update_timestamp: function () {\n            this.save('timestamp', utils.now());\n        },\n\n        update_settings: function (settings) {\n            this.save(_.extend({timestamp: utils.now()}, settings));\n        },\n\n        request_data: function () {\n            return {\n                jid: this.get('jid'),\n                timestamp: this.get('timestamp'),\n                settings: _.omit(this.attributes, [\n                    'jid', 'timestamp', 'order',\n                    'to_sync', 'synced', 'deleted'\n                ])\n            };\n        }\n    });\n\n    xabber.AccountSettingsList = Backbone.CollectionWithStorage.extend({\n        model: xabber.AccountSettings,\n\n        create_from_server: function (settings_item) {\n            let settings = this.create(_.extend({\n                jid: settings_item.jid,\n                timestamp: settings_item.timestamp,\n                to_sync: true,\n                synced: true\n            }, settings_item.settings));\n            this.trigger('add_settings', settings);\n            return settings;\n        }\n    });\n\n    xabber.AccountsOrderTimestamp = Backbone.ModelWithStorage.extend({\n        defaults: {\n            timestamp: 0\n        }\n    });\n\n    xabber.APIAccount = Backbone.ModelWithStorage.extend({\n        defaults: {\n            token: null,\n            sync_all: true\n        },\n\n        _initialize: function (_attrs, options) {\n            this.list = options.settings_list;\n            this.save({connected: false, sync_request: 'silent'});\n            this.on(\"change:connected\", function () {\n                if (this.get('connected')) {\n                    this.fcm_subscribe();\n                } else {\n                    this.fcm_unsubscribe();\n                }\n            }, this);\n            this.on(\"change:token\", function () {\n                if (this.get('token') !== null) {\n                    this.save({sync_all: true,\n                               sync_request: this.list.length ? 'window' : 'silent'});\n                }\n            }, this);\n            this.list.on(\"change:to_sync\", function (item) {\n                if (this.get('sync_all') && !item.get('to_sync')) {\n                    this.save('sync_all', false);\n                }\n            }, this);\n            xabber.on(\"push_message\", function (message) {\n                if (this.get('connected') &&\n                        message.username === this.get('username') &&\n                        message.from_token !== this.get('token') &&\n                        message.action === 'settings_updated') {\n                    this.synchronize_main_settings();\n                    this.synchronize_order_settings();\n                }\n                if (this.get('connected') &&\n                    message.username === this.get('username') &&\n                    message.from_token !== this.get('token') &&\n                    message.action === 'account_updated') {\n                    this.get_settings();\n                }\n            }, this);\n\n            this.ready = new $.Deferred();\n            if (xabber.url_params.social_auth) {\n                let social_auth = xabber.url_params.social_auth;\n                delete xabber.url_params.social_auth;\n                try {\n                    let data = JSON.parse(atob(social_auth));\n                    this.save('token', null);\n                    this.social_login(data);\n                    return;\n                } catch (e) {}\n            }\n            if (xabber.url_params.token) {\n                this.save('token', xabber.url_params.token);\n                delete xabber.url_params.token;\n            }\n            if (this.get('token')) {\n                this.login_by_token();\n            } else {\n                this.ready.resolve();\n            }\n        },\n\n        _call_method: function (method, url, data, callback, errback) {\n            let request = {\n                type: method,\n                url: constants.API_SERVICE_URL + url,\n                headers: {\"Authorization\": \"Token \" + this.get('token')},\n                context: this,\n                contentType: \"application/json\",\n                dataType: 'json',\n                success: (data, textStatus, jqXHR) => {\n                    callback && callback(data);\n                },\n                error: (jqXHR, textStatus, errorThrown) => {\n                    this.onAPIError(jqXHR, errback);\n                }\n            };\n            if (data) {\n                request.data = JSON.stringify(data);\n            }\n            $.ajax(request);\n        },\n\n        add_source: function (data) {\n            return _.extend({\n                source: `${constants.CLIENT_NAME} ${xabber.get('version_number')}`\n            }, data);\n        },\n\n        get_settings: function () {\n            if (this.get('token') !== null) {\n                this._call_method('GET', '/accounts/current/', null,\n                    (data) => {\n                        if (data.account_status === 'registered') {\n                            this.onUserData(data);\n                            this._call_method('GET', '/accounts/current/client-settings/', null,\n                                this.onSettings.bind(this),\n                                this.onSettingsFailed.bind(this)\n                            );\n                        } else {\n                            utils.dialogs.error(xabber.getString(\"xabber_account__sync__error_no_permission_to_sync\"));\n                            this.save({token: null, connected: false});\n                            this.trigger('settings_result', null);\n                        }\n                    },\n                    this.onSettingsFailed.bind(this)\n                );\n            } else {\n                this.trigger('settings_result', null);\n            }\n        },\n\n        delete_settings: function (jid) {\n            if (this.get('connected')) {\n                this._call_method('DELETE', '/accounts/current/client-settings/', {jid: jid},\n                    this.onSettings.bind(this),\n                    this.onSettingsFailed.bind(this)\n                );\n            } else {\n                this.trigger('settings_result', null);\n            }\n        },\n\n        synchronize_main_settings: function () {\n            if (this.get('connected')) {\n                let data = _.map(this.list.where({to_sync: true}), function (settings) {\n                    return settings.request_data();\n                });\n                if (data.length) {\n                    this._call_method('PATCH', '/accounts/current/client-settings/',\n                        {settings_data: data},\n                        this.onSettings.bind(this),\n                        this.onSettingsFailed.bind(this)\n                    );\n                } else {\n                    this.get_settings();\n                }\n            } else {\n                this.trigger('settings_result', null);\n            }\n        },\n\n        synchronize_order_settings: function () {\n            if (this.get('connected') && this.get('sync_all')) {\n                let timestamp = this.list.order_timestamp.get('timestamp');\n                let data = this.list.map(function (settings) {\n                    return {jid: settings.get('jid'), order: settings.get('order')};\n                });\n                this._call_method('PATCH', '/accounts/current/client-settings/',\n                    {order_data: {settings: data, timestamp: timestamp}},\n                    this.onSettings.bind(this),\n                    this.onSettingsFailed.bind(this)\n                );\n            } else {\n                this.trigger('settings_result', null);\n            }\n        },\n\n        fetch_from_server: function (data) {\n            let deleted_list = data.deleted,\n                settings_list = data.settings_data,\n                order_timestamp = data.order_data.timestamp,\n                order_list = data.order_data.settings,\n                list = this.list,\n                sync_all = this.get('sync_all');\n            _.each(deleted_list, (item) => {\n                let settings = list.get(item.jid);\n                if (settings && settings.get('to_sync') &&\n                        settings.get('timestamp') <= item.timestamp) {\n                    settings.trigger('delete_account', true);\n                }\n            });\n            _.each(settings_list, function (settings_item) {\n                let settings = list.get(settings_item.jid);\n                if (settings) {\n                    if (settings.get('to_sync')) {\n                        settings.save(_.extend({\n                            timestamp: settings_item.timestamp,\n                            deleted: false,\n                            synced: true\n                        }, settings_item.settings));\n                    } else {\n                        settings.save('synced', settings_item.timestamp >= settings.get('timestamp'));\n                    }\n                }\n                if (!settings && sync_all) {\n                    settings = list.create_from_server(settings_item);\n                }\n            });\n            if (sync_all) {\n                let order_map = {}, max_order = 1;\n                _.each(order_list, function (order_item) {\n                    order_map[order_item.jid] = order_item.order;\n                    if (order_item.order > max_order) {\n                        max_order = order_item.order;\n                    }\n                });\n                list.order_timestamp.save('timestamp', order_timestamp);\n                list.each((settings) => {\n                    let jid = settings.get('jid'),\n                        order = order_map[jid];\n                    if (!order) {\n                        max_order += 1;\n                        order = max_order;\n                    }\n                    settings.save('order', order);\n                });\n            }\n            this.trigger('settings_result', data);\n            this.save('last_sync', utils.now());\n        },\n\n        onAPIError: function (jqXHR, errback) {\n            let status = jqXHR.status,\n                response = jqXHR.responseJSON;\n            if (status === 403) {\n                this.save({connected: false, token: null});\n                if (response.detail === 'Invalid token') {\n                    if (response.reason === 'not_found') {\n                        // TODO remove only Xabber-related XMPP accounts\n                    } else if (response.reason === 'revoked') {\n                        _.each(this.list.where({to_sync: true}), function (settings) {\n                            settings.trigger('delete_account', true);\n                        });\n                    } else if (response.reason === 'expired'){\n                        utils.dialogs.common(xabber.getString(\"xabber_account__login__dialog_error__header\"), xabber.getString(\"xabber_account__login__dialog_error__text\"),\n                            {ok_button: {text: xabber.getString(\"yes\")}, cancel_button: {text: xabber.getString(\"dialog_version_update__option_not_now\")}}\n                        ).done((result) => {\n                            result && this.trigger('relogin');\n                        });\n                    }\n                }\n            }\n            errback && errback(response, status);\n        },\n\n        _login: function (credentials, callback, errback) {\n            let request = {\n                type: 'POST',\n                url: constants.API_SERVICE_URL + '/accounts/login/',\n                contentType: \"application/json\",\n                dataType: 'json',\n                data: JSON.stringify(this.add_source()),\n                success: callback,\n                error: (jqXHR, textStatus, errorThrown) => {\n                    this.onAPIError(jqXHR, errback);\n                }\n            };\n            if (credentials.token) {\n                request.headers = {\"Authorization\": \"Token \" + credentials.token};\n            } else {\n                let username = credentials.username,\n                    password = credentials.password;\n                request.headers = {\"Authorization\": \"Basic \" + utils.utoa(username+':'+password)};\n            }\n            $.ajax(request);\n        },\n\n        login: function (username, password) {\n            this._login({username: username, password: password}, this.onLogin.bind(this),\n                    this.onLoginFailed.bind(this));\n        },\n\n        login_by_token: function () {\n            this._login({token: this.get('token')}, this.onLoginByToken.bind(this),\n                    this.onLoginByTokenFailed.bind(this));\n        },\n\n        social_login: function (credentials) {\n            $.ajax({\n                type: 'POST',\n                url: constants.API_SERVICE_URL + '/accounts/social_auth/',\n                contentType: \"application/json\",\n                dataType: 'json',\n                data: JSON.stringify(this.add_source(credentials)),\n                success: this.onSocialLogin.bind(this),\n                error: (jqXHR, textStatus, errorThrown) => {\n                    this.onAPIError(jqXHR, this.onSocialLoginFailed.bind(this));\n                }\n            });\n        },\n\n        revoke_token: function () {\n            let token = this.get('token');\n            if (token !== null) {\n                this._call_method('delete', '/accounts/current/tokens/', {token: token});\n            }\n            this.save({connected: false, token: null});\n            this.storage.clear();\n        },\n\n        onLoginByToken: function (data, textStatus, request) {\n            this.save({token: data.token, connected: true, sync_request: 'silent'});\n            this.get_settings();\n            this.ready.resolve();\n        },\n\n        onLoginByTokenFailed: function (response, status) {\n            this.save('connected', false);\n            this.ready.resolve();\n        },\n\n        onLogin: function (data, textStatus, request) {\n            this.save({token: data.token, connected: true});\n            this.get_settings();\n        },\n\n        onLoginFailed: function (response, status) {\n            this.save('connected', false);\n            this.trigger('login_failed', response);\n        },\n\n        onSocialLogin: function (data, textStatus, request) {\n            this.save({token: data.token, connected: true});\n            xabber.body.setScreen('settings');\n            this.ready.resolve();\n        },\n\n        onSocialLoginFailed: function (response, status) {\n            this.save('connected', false);\n            xabber.body.setScreen('settings');\n            utils.dialogs.error(xabber.getString(\"xabber_account__login__error_auth_failed\"));\n            this.ready.resolve();\n        },\n\n        onUserData: function (data) {\n            let name, xmpp_binding_jid;\n            if (data.first_name && data.last_name) {\n                name = data.first_name + ' ' + data.last_name;\n            } else {\n                name = data.username;\n            }\n            if (data.xmpp_binding) {\n                xmpp_binding_jid = data.xmpp_binding.jid;\n            }\n            this.save({username: data.full_id, name: name, linked_email_list: data.email_list, linked_social: data.social_bindings, xmpp_binding: xmpp_binding_jid });\n        },\n\n        onSettings: function (data) {\n            let sync_request = this.get('sync_request');\n            this.save('sync_request', undefined);\n            if (sync_request === 'window') {\n                if (!xabber.sync_settings_view)\n                    xabber.sync_settings_view = new xabber.SyncSettingsView({model: this});\n                this.trigger('open_sync_window', data);\n            } else {\n                this.fetch_from_server(data);\n            }\n        },\n\n        onSettingsFailed: function (response, status) {\n            this.trigger('settings_result', null);\n        },\n\n        logout: function () {\n            utils.dialogs.ask(xabber.getString(\"button_quit\"), xabber.getString(\"logout_summary\"),\n                              [{name: 'delete_accounts', checked: true,\n                                text: xabber.getString(\"xabber_account__dialog_logout__option_delete_accounts\")}], { ok_button_text: xabber.getString(\"button_quit\")}).done((res) => {\n                if (res) {\n                    if (xabber.accounts.connected.length > 0)\n                        _.each(xabber.accounts.connected, (account) => {\n                            account.set('auto_login_xa', false);\n                            account.save('auto_login_xa', false);\n                        });\n                    this.revoke_token();\n                    if (res.delete_accounts) {\n                        _.each(this.list.where({to_sync: true}), (settings) => {\n                            settings.trigger('delete_account', true);\n                        });\n                    }\n                }\n            });\n        },\n\n        start: function () {\n            if (!this.get('connected')) {\n                this.fcm_unsubscribe();\n            }\n            this.get_settings();\n        },\n\n        fcm_subscribe: function () {\n            this._call_method('post', '/fcm/subscription/', {endpoint_key: xabber.cache.endpoint_key});\n        },\n\n        fcm_unsubscribe: function () {\n            $.ajax({\n                type: 'DELETE',\n                url: constants.API_SERVICE_URL + '/fcm/subscription/',\n                contentType: \"application/json\",\n                dataType: 'json',\n                data: JSON.stringify({endpoint_key: xabber.cache.endpoint_key})\n            });\n        }\n    });\n\n    xabber.APIAccountAuthView = xabber.BasicView.extend({\n        _initialize: function () {\n            this.$username_input = this.$('input[name=username]');\n            this.$password_input = this.$('input[name=password]');\n            this.data.on(\"change:authentication\", this.onChangeAuthenticationState, this);\n            return this;\n        },\n\n        onRender: function () {\n            this.authFeedback({});\n            Materialize.updateTextFields();\n            this.$username_input.val('').focus();\n            this.$password_input.val('');\n            this.updateButtons();\n        },\n\n        keyUp: function (ev) {\n            ev.keyCode === constants.KEY_ENTER && this.submit();\n        },\n\n        submit: function () {\n            if (this.data.get('authentication')) {\n                this.cancel();\n                return;\n            }\n            this.data.set('authentication', true);\n            this.authFeedback({});\n            let username = this.$username_input.val(),\n                password = this.$password_input.val();\n            if (!username) {\n                return this.errorFeedback({username: xabber.getString(\"account_auth__error__text_input_username\")});\n            }\n            username = username.trim();\n            if (!password)  {\n                return this.errorFeedback({password: xabber.getString(\"dialog_change_password__error__text_input_pass\")});\n            }\n            password = password.trim();\n            this.authFeedback({password: xabber.getString(\"account_auth__feedback__text_authentication\")});\n            this.model.login(username, password);\n        },\n\n        cancel: function () {\n            this.data.set('authentication', false);\n            this.onRender();\n        },\n\n        authFeedback: function (options) {\n            this.$username_input.switchClass('invalid', options.username)\n                .siblings('span.errors').text(options.username || '');\n            this.$password_input.switchClass('invalid', options.password)\n                .siblings('span.errors').text(options.password || '');\n        },\n\n        errorFeedback: function (options) {\n            this.authFeedback(options);\n            this.data.set('authentication', false);\n        },\n\n        updateButtons: function () {\n            let authentication = this.data.get('authentication');\n            this.$('.btn-log-in').switchClass('disabled', authentication);\n        },\n\n        onChangeAuthenticationState: function () {\n            this.updateButtons();\n            if (this.data.get('authentication')) {\n                this.model.on(\"change:connected\", this.onChangeConnected, this);\n                this.model.on(\"login_failed\", this.onLoginFailed, this);\n            } else {\n                this.model.off(\"change:connected\", this.onChangeConnected, this);\n                this.model.off(\"login_failed\", this.onLoginFailed, this);\n            }\n        },\n\n        onChangeConnected: function () {\n            if (this.model.get('connected')) {\n                this.successFeedback();\n            }\n        },\n\n        onLoginFailed: function (response) {\n            this.errorFeedback({password: (response && response.detail) || xabber.getString(\"connection__error__text_authentication_failed_short\")});\n        },\n\n        socialAuth: function (ev) {\n            let origin = window.location.href,\n                provider = $(ev.target).closest('.btn-social').data('provider');\n            if (provider == 'email') {\n                this.closeModal();\n                xabber.email_auth_view.show();\n                // return;\n            }\n            else\n                window.location.href = constants.XABBER_ACCOUNT_URL + '/social/login/' + provider + '/?origin=' + origin + '&source=Xabber Web';\n        }\n    });\n\n      xabber.XabberLoginByEmailPanel = xabber.APIAccountAuthView.extend({\n          className: 'login-panel add-xabber-account-panel',\n          template: templates.xabber_login_by_email,\n\n          events: {\n              \"click .btn-cancel\": \"close\",\n              \"click .btn-log-in\": \"submit\",\n              \"keyup input[name=password]\": \"keyUp\"\n          },\n\n          render: function () {\n              this.$el.openModal({\n                  opacity: 0.9,\n                  ready: this.onRender.bind(this),\n                  complete: this.close.bind(this)\n              });\n          },\n\n          successFeedback: function () {\n              this.authFeedback({});\n              this.data.set('authentication', false);\n              this.close();\n          },\n\n          onRender: function () {\n              Materialize.updateTextFields();\n              this.$username_input.val('').focus();\n              this.$password_input.val('');\n          },\n\n          close: function (auth) {\n              this.$el.closeModal({ complete: this.hide.bind(this) });\n          }\n      });\n\n    xabber.XabberLoginPanel = xabber.APIAccountAuthView.extend({\n        className: 'login-panel',\n        template: templates.xabber_login,\n\n        events: {\n            \"click .login-type\": \"changeLoginType\",\n            \"click .btn-log-in\": \"submit\",\n            \"click .btn-social\": \"socialAuth\",\n            \"click .btn-escape\": \"openXmppLoginPanel\",\n            \"keyup input[name=password]\": \"keyUp\"\n        },\n\n        render: function () {\n            this.onRender();\n        },\n\n        successFeedback: function () {\n            this.authFeedback({});\n            this.data.set('authentication', false);\n            xabber.body.setScreen('all-chats');\n        },\n\n        changeLoginType: function () {\n            xabber.body.setScreen('login', {'login_screen': 'xmpp'});\n        },\n\n        openXmppLoginPanel: function () {\n            xabber.body.setScreen('login', {'login_screen': 'xmpp'});\n        }\n    });\n\n    xabber.AddAPIAccountView = xabber.APIAccountAuthView.extend({\n        className: 'login-panel add-xabber-account-panel',\n        template: templates.add_xabber_account,\n\n        events: {\n            \"click .account-field .dropdown-content\": \"selectAccount\",\n            \"click .btn-add\": \"loginXabberAccount\",\n            \"keyup input[name=password]\": \"keyUp\",\n            \"click .btn-social\": \"socialAuth\",\n            \"click .btn-cancel\": \"closeModal\"\n        },\n\n        render: function (options) {\n            if (!xabber.accounts.connected.length) {\n                utils.dialogs.error(xabber.getString(\"dialog_add_contact__error__text_no_accounts\"));\n                return;\n            }\n            options || (options = {});\n            let accounts = xabber.accounts.connected,\n                jid = options.jid || '';\n            this.$('input[name=\"username\"]').val(jid).attr('readonly', !!jid)\n                .removeClass('invalid');\n            this.$('.single-acc').showIf(accounts.length === 1);\n            this.$('.multiple-acc').hideIf(accounts.length === 1);\n            this.$('.account-field .dropdown-content').empty();\n            _.each(accounts, (account) => {\n                this.$('.account-field .dropdown-content').append(\n                    this.renderAccountItem(account));\n            });\n            this.bindAccount(accounts[0]);\n            this.$('span.errors').text('');\n            this.$el.openModal({\n                opacity: 0.9,\n                ready: () => {\n                    this.onRender.bind(this);\n                    this.$('.account-field .dropdown-button').dropdown({\n                        inDuration: 100,\n                        outDuration: 100,\n                        constrainWidth: false,\n                        hover: false,\n                        alignment: 'left',\n                    });\n                },\n                complete: this.closeModal.bind(this)\n            });\n            return this;\n        },\n\n        bindAccount: function (account) {\n            this.$('.account-field .dropdown-button .account-item-wrap')\n                .replaceWith(this.renderAccountItem(account));\n        },\n\n        renderAccountItem: function (account) {\n            let $item = $(env.templates.contacts.add_contact_account_item({jid: account.get('jid')}));\n            $item.find('.circle-avatar').setAvatar(account.cached_image, this.avatar_size);\n            return $item;\n        },\n\n        selectAccount: function (ev) {\n            let $item = $(ev.target).closest('.account-item-wrap'),\n                account = xabber.accounts.get($item.data('jid'));\n            this.bindAccount(account);\n            this.loginXabberAccount(account);\n        },\n\n        loginXabberAccount: function (account) {\n            account.set('auto_login_xa', true);\n            account.authXabberAccount();\n            this.closeModal();\n        },\n\n        successFeedback: function () {\n            this.authFeedback({});\n            this.data.set('authentication', false);\n            this.closeModal();\n        },\n\n        onHide: function () {\n            this.$el.detach();\n        },\n\n        closeModal: function () {\n            this.$el.closeModal({ complete: this.hide.bind(this) });\n        }\n    });\n\n    xabber.SyncSettingsView = xabber.BasicView.extend({\n        className: 'modal main-modal sync-settings-modal noselect',\n        template: templates.sync_settings,\n        ps_selector: '.modal-content',\n        avatar_size: constants.AVATAR_SIZES.SYNCHRONIZE_ACCOUNT_ITEM,\n\n        events: {\n            \"click .btn-sync\": \"syncSettings\",\n            \"click .btn-cancel\": \"close\",\n            \"change .sync-all\": \"changeSyncAll\",\n            \"change .sync-one\": \"changeSyncOne\",\n            \"click .sync-icon\": \"changeSyncWay\"\n        },\n\n        _initialize: function () {\n            this.settings = null;\n            this.to_sync_map = null;\n            this.model.on(\"open_sync_window\", this.render, this);\n        },\n\n        render: function (data, options) {\n            this.settings = data;\n            this.sync_all = this.model.get('sync_all');\n            this.accounts = [];\n            this.$el.openModal({\n                ready: this.onRender.bind(this),\n                complete: this.close.bind(this)\n            });\n        },\n\n        onRender: function () {\n            this.$('.accounts-wrap').empty();\n            let list = this.model.list,\n                accounts_map = {},\n                deleted_map = {},\n                settings_map = {},\n                order_map = {};\n            _.each(this.settings.settings_data, function (settings_item) {\n                settings_map[settings_item.jid] = settings_item;\n            });\n            this.settings_map = settings_map;\n            _.each(this.settings.order_data.settings, function (order_item) {\n                order_map[order_item.jid] = order_item.order;\n            });\n            _.each(this.settings.deleted, function (deleted_item) {\n                deleted_map[deleted_item.jid] = deleted_item.timestamp;\n            });\n\n            // Make synchronization list\n            _.each(settings_map, (obj, jid) => {\n                // pick accounts that are present on server only\n                if (!list.get(jid)) {\n                    accounts_map[jid] = _.extend({\n                        jid: jid,\n                        to_sync: this.sync_all,\n                        sync_way: 'from_server'\n                    }, obj);\n                }\n            });\n            list.each((settings) => {\n                let jid = settings.get('jid'),\n                    obj = settings_map[jid],\n                    sync_way;\n                if (_.has(deleted_map, jid)) {\n                    // pick local but deleted from server accounts\n                    sync_way = deleted_map[jid] >= settings.get('timestamp') ? 'delete' : 'to_server';\n                    accounts_map[jid] = _.extend({\n                        sync_way: sync_way,\n                        sync_choose: ['delete', 'to_server']\n                    }, _.omit(settings.attributes, ['order']));\n                    settings.save('synced', false);\n                } else if (obj) {\n                    // pick accounts that are present on both server and client\n                    if (obj.timestamp > settings.get('timestamp')) {\n                        sync_way = 'from_server';\n                    } else if (obj.timestamp < settings.get('timestamp')) {\n                        sync_way = 'to_server';\n                    } else {\n                        sync_way = 'no';\n                    }\n                    accounts_map[jid] = _.extend({\n                        jid: jid,\n                        to_sync: settings.get('to_sync'),\n                        sync_way: sync_way,\n                        sync_choose: sync_way !== 'no' ? ['from_server', 'to_server'] : false\n                    }, obj.settings);\n                    settings.save('synced', sync_way === 'no');\n                } else {\n                    // pick local accounts\n                    accounts_map[jid] = _.extend({\n                        sync_way: 'to_server'\n                    }, _.omit(settings.attributes, ['order']));\n                    settings.save('synced', false);\n                }\n            });\n\n            // fetch server order of accounts and merge it with local order\n            let max_order = _.max(order_map) || 0;\n            _.each(order_map, (order, jid) => {\n                accounts_map[jid].order = order;\n            });\n            list.each((settings) => {\n                let jid = settings.get('jid');\n                if (!accounts_map[jid].order) {\n                    accounts_map[jid].order = (++max_order);\n                }\n            });\n\n            this.accounts_map = accounts_map;\n            this.accounts = _.map(accounts_map, function (value, key) { return value; });\n            // sort merged list by new order value\n            this.accounts.sort(function (acc1, acc2) {\n                return acc1.order - acc2.order;\n            });\n            _.each(this.accounts, this.addAccountHtml.bind(this));\n            this.updateSyncOptions();\n        },\n\n        addAccountHtml: function (settings) {\n            let jid = settings.jid;\n            let $account_el = $(templates.sync_settings_account_item({\n                jid: jid,\n                view: this\n            }));\n            this.$('.accounts-wrap').append($account_el);\n        },\n\n        updateAccountHtml: function (account_wrap) {\n            let $account_wrap = $(account_wrap),\n                jid = $account_wrap.data('jid'),\n                account_item = this.accounts_map[jid];\n            this.sync_all && (account_item.to_sync = true);\n            $account_wrap.switchClass('sync', account_item.to_sync);\n            $account_wrap.find('.sync-one').prop('checked', account_item.to_sync);\n            let sync_way;\n            if (account_item.to_sync) {\n                sync_way = account_item.sync_way;\n            } else if (this.model.list.get(jid)) {\n                sync_way = 'off_local';\n            } else {\n                sync_way = 'off_remote';\n            }\n            let mdiclass = constants.SYNC_WAY_DATA[sync_way].icon,\n                $sync_icon = $account_wrap.find('.sync-icon');\n            $sync_icon.removeClass($sync_icon.attr('data-mdiclass'))\n                .attr('data-mdiclass', mdiclass).addClass(mdiclass);\n            $account_wrap.find('.sync-tip').text(xabber.getString(constants.SYNC_WAY_DATA[sync_way].tip));\n        },\n\n        updateSyncOptions: function () {\n            let list = this.model.list,\n                sync_all = this.sync_all,\n                accounts_map = this.accounts_map;\n            this.$('.sync-all').prop('checked', sync_all ? 'checked' : '');\n            this.$('.sync-one').prop('disabled', sync_all ? 'disabled' : '');\n            this.$('.account-wrap').each((idx, el) => {\n                this.updateAccountHtml(el);\n            });\n        },\n\n        changeSyncAll: function (ev) {\n            let $target = $(ev.target),\n                sync_all = $target.prop('checked');\n            this.sync_all = sync_all;\n            this.$('.sync-one').prop('disabled', sync_all ? 'disabled' : '');\n            if (sync_all) {\n                _.each(this.accounts, (account_item) => {\n                    account_item.to_sync = true;\n                });\n                this.$('.account-wrap').each((idx, el) => {\n                    this.updateAccountHtml(el);\n                });\n            }\n        },\n\n        changeSyncOne: function (ev) {\n            let $target = $(ev.target),\n                value = $target.prop('checked'),\n                $account_wrap = $target.closest('.account-wrap'),\n                jid = $account_wrap.data('jid');\n            this.accounts_map[jid].to_sync = value;\n            this.updateAccountHtml($account_wrap);\n        },\n\n        changeSyncWay: function (ev) {\n            let $account_wrap = $(ev.target).closest('.account-wrap'),\n                jid = $account_wrap.data('jid'),\n                account_item = this.accounts_map[jid];\n            if (!account_item.to_sync || !account_item.sync_choose) {\n                return;\n            }\n            let sync_choose = account_item.sync_choose,\n                idx = sync_choose.indexOf(account_item.sync_way) + 1;\n            if (idx === sync_choose.length) {\n                idx = 0;\n            }\n            account_item.sync_way = sync_choose[idx];\n            this.updateAccountHtml($account_wrap);\n        },\n\n        syncSettings: function () {\n            let list = this.model.list,\n                sync_all = this.sync_all;\n            this.model.save('sync_all', this.sync_all);\n            _.each(this.accounts, function (account_item) {\n                let jid = account_item.jid,\n                    settings = list.get(jid);\n                if (settings) {\n                    settings.save('to_sync', account_item.to_sync);\n                    if (sync_all) {\n                        settings.save('order', account_item.order);\n                    }\n                    let sync_way = account_item.sync_way;\n                    if (sync_way === 'to_server') {\n                        settings.update_timestamp();\n                    } else if (sync_way === 'from_server' || sync_way === 'delete') {\n                        settings.save('timestamp', 0);\n                    }\n                }\n                if (!settings && account_item.to_sync) {\n                    settings = list.create_from_server(\n                        _.omit(account_item, ['sync_way', 'sync_choose']));\n                }\n            });\n            this.model.synchronize_main_settings();\n            this.do_sync = true;\n            this.close();\n        },\n\n        onHide: function () {\n            this.$el.detach();\n            if (xabber.body.isScreen('blank')) {\n                xabber.body.setScreen('all-chats');\n            }\n        },\n\n        close: function () {\n            if (!this.do_sync) {\n                this.model.trigger('settings_result', null);\n            }\n            this.do_sync = null;\n            this.settings = null;\n            this.settings_map = null;\n            this.closeModal();\n        },\n\n        closeModal: function () {\n            this.$el.closeModal({ complete: this.hide.bind(this) });\n        }\n    });\n\n    xabber.APIAccountView = xabber.BasicView.extend({\n        className: 'setting xabber-account',\n        template: templates.xabber_account,\n        avatar_size: constants.AVATAR_SIZES.XABBER_ACCOUNT,\n\n        events: {\n            \"click .account-info-wrap\": \"openAccount\",\n            \"click .btn-login\": \"login\",\n            \"click .btn-logout\": \"logout\",\n            \"click .btn-set-password\": \"setPassword\",\n            \"click .btn-sync-settings\": \"synchronize\",\n            \"click .social-linked-header\": \"changeExpanded\",\n            \"click .btn-unlink\": \"unlinkSocial\",\n            \"click .btn-link\": \"linkSocial\",\n            \"click .btn-verify-email\": \"verifyEmail\"\n        },\n\n        _initialize: function () {\n            this.$el.appendTo(this.parent.$('.settings-block-wrap.xabber-account'));\n            this.$tab = this.parent.$('.xabber-account-tab');\n            this.updateForConnectedStatus();\n            this.default_color = utils.images.getDefaultColor(this.model.get('username'));\n            this.model.on(\"change:username\", this.updateName, this);\n            this.model.on(\"change:name\", this.updateAvatar, this);\n            this.model.on(\"change:connected\", this.updateForConnectedStatus, this);\n            this.model.on(\"change:last_sync\", this.updateLastSyncInfo, this);\n            this.model.on(\"change:linked_email_list\", this.updateSocialBindings, this);\n            this.model.on(\"change:linked_social\", this.updateSocialBindings, this);\n            this.model.on(\"relogin\", this.login, this);\n            this.data.on(\"change:sync\", this.updateSyncButton, this);\n            this.data.on(\"change:expanded\", this.updateExpanded, this);\n            this.data.set('expanded', false);\n        },\n\n        render: function () {\n            this.data.set('sync', false);\n            this.$('span.errors ').html(\"\");\n            this.updateLastSyncInfo();\n            this.updateSocialBindings();\n            this.$('.btn-more').dropdown({\n                inDuration: 100,\n                outDuration: 100,\n                hover: false\n            });\n        },\n\n        changeExpanded: function () {\n            this.data.set('expanded', (this.data.get('expanded')) ? false : true);\n        },\n\n        updateExpanded: function () {\n            let expanded = this.data.get('expanded');\n            this.$('.arrow').switchClass('mdi-chevron-down', expanded);\n            this.$('.arrow').switchClass('mdi-chevron-right', !expanded);\n            this.$('.social-linked-wrap').showIf(expanded);\n        },\n\n        updateSocialBindings: function () {\n            let linked_emails = this.model.get('linked_email_list'),\n                linked_social = this.model.get('linked_social');\n            this.$('.email-linked').remove();\n            this.$('.social-account').each(function (idx, item) {\n                let $social_item = $(item);\n                $social_item.addClass('not-linked');\n                $social_item.find('.synced-info').text(xabber.getString(\"title_not_linked_account\"));\n                $social_item.find('.btn-link').text(xabber.getString(\"action_connect\")).removeClass('btn-unlink');\n            });\n            _.each(linked_emails, (email) => {\n                let email_id = email.id,\n                    email_address = email.email,\n                    is_verified = email.verified,\n                    email_item_html = $(templates.linked_email_item({email_id: email_id, email: email_address, verified: is_verified, color: this.default_color}));\n                email_item_html.insertBefore(this.$('#email.not-linked'));\n            });\n            _.each(linked_social, (social) => {\n                let social_provider = social.provider,\n                    social_name = social.first_name + \" \" + social.last_name;\n                this.$('.'+ social_provider + '-linked').removeClass('not-linked');\n                this.$('.' + social_provider + '-linked .btn-link').text(xabber.getString(\"action_disconnect\")).addClass('btn-unlink');\n                this.$('.'+ social_provider + '-linked .synced-info').html($(`<div class=\"name one-line\">${social_name}</div><div class=\"verified-status one-line\">${xabber.getString(\"title_linked_account\", [social_provider])}</div>`));\n            });\n        },\n\n        linkSocial: function (ev) {\n            if ((this.model.get('token'))&&(!$(ev.target).hasClass('btn-unlink'))) {\n                let social_elem = $(ev.target).closest('.social-linked-item-wrap'),\n                    provider = social_elem.attr('id');\n                if (provider === 'email') {\n                    utils.dialogs.ask_enter_value(xabber.getString(\"xabber_account__dialog_add_email__header\"), null, {input_placeholder_value: xabber.getString(\"xabber_account__dialog_add_email__hint_enter_email\")}, { ok_button_text: xabber.getString(\"action_connect\")}).done((mail) => {\n                        if (mail) {\n                            this.model._call_method('POST', '/accounts/current/email_list/', {email: mail},\n                                (mail_data) => {\n                                    let email_list = this.model.get('linked_email_list');\n                                    email_list.push(mail_data);\n                                    this.model.set('linked_email_list', email_list);\n                                    this.updateSocialBindings();\n                                },\n                                (jqXHR, textStatus, errorThrown) => {\n                                    this.$('span.errors ').text(jqXHR.email[0]);\n                                });\n                        }\n                    });\n                }\n                else {\n                    this.openAccount();\n                }\n            }\n        },\n\n        verifyEmail: function (ev) {\n            let $target = $(ev.target),\n                $email_html = $target.closest('.social-linked-item-wrap'),\n                email_address = $email_html.data('email');\n            utils.dialogs.ask_enter_value(xabber.getString(\"title_email_confirm\"), null, {input_placeholder_value: xabber.getString(\"xabber_account__dialog_confirm_email__hint_enter_code\")}, { ok_button_text: xabber.getString(\"button_confirm\"), resend_button_text: xabber.getString(\"button_resend_link\"), resend_to: email_address}).done((code) => {\n                if (code) {\n                    if (code === email_address) {\n                        this.model._call_method('POST', '/accounts/current/email_list/', {email: code});\n                    }\n                    else {\n                        this.model._call_method('POST', '/accounts/email_confirmation/', {code: code},\n                            (mail_data) => {\n                                let email_list = mail_data.email_list;\n                                this.model.set('linked_email_list', email_list);\n                                this.updateSocialBindings();\n                            }, (jqXHR, textStatus, errorThrown) => {\n                                this.$('span.errors').text(jqXHR.code[0]);\n                            });\n                    }\n                }\n            });\n        },\n\n        unlinkSocial: function (ev) {\n            let $target = $(ev.target);\n            if (!$target.hasClass('btn-verify-email')) {\n                let $social_html = $target.closest('.social-linked-item-wrap');\n                let provider = $social_html.attr('id'),\n                    is_email = $social_html.data('email');\n                if (is_email) {\n                    let email_address = $social_html.data('email');\n                    utils.dialogs.ask(xabber.getString(\"xabber_account__dialog_unlink_email__header\"), xabber.getString(\"title_delete_email\"), null, {ok_button_text: xabber.getString(\"action_disconnect\")}).done((result) => {\n                        if (result) {\n                            this.model._call_method('DELETE', '/accounts/current/email_list/' + $social_html.data('id') + '/', null,\n                                (mail_data) => {\n                                    let email_list = this.model.get('linked_email_list'),\n                                        deleted_mail_index = email_list.indexOf(email_list.find(email => email.id === $social_html.data('id')));\n                                    email_list.splice(deleted_mail_index, 1);\n                                    this.model.set('linked_email_list', email_list);\n                                    this.updateSocialBindings();\n                                }, (jqXHR, textStatus, errorThrown) => {\n                                    this.model.get_settings();\n                                });\n                        }\n                    });\n                }\n                else if (provider !== 'email') {\n                    utils.dialogs.ask(xabber.getString(\"xabber_account__dialog_unlink_social__header\"), xabber.getString(\"title_delete_social\", [provider]), null, {ok_button_text: xabber.getString(\"action_disconnect\")}).done((result) => {\n                        if (result) {\n                            this.model._call_method('POST', '/accounts/current/social_unbind/', {provider: provider},\n                                () => {\n                                    let social_list = this.model.get('linked_social'),\n                                        deleted_social_index = social_list.indexOf(social_list.find(social => social.provider === provider));\n                                    social_list.splice(deleted_social_index, 1);\n                                    this.model.set('linked_social', social_list);\n                                    this.updateSocialBindings();\n                                }, (jqXHR, textStatus, errorThrown) => {\n                                    this.model.get_settings();\n                                });\n                        }\n                    });\n                }\n            }\n        },\n\n        updateName: function () {\n            this.$('.account-info-wrap .name').text(this.model.get('username'));\n            this.default_color = utils.images.getDefaultColor(this.model.get('username'));\n        },\n\n        updateAvatar: function () {\n            let name = this.model.get('name'),\n                image = this.model.get('image') || utils.images.getDefaultAvatar(name);\n            this.$('.circle-avatar').setAvatar(utils.images.getCachedImage(image), this.avatar_size);\n        },\n\n        updateForConnectedStatus: function () {\n            let connected = this.model.get('connected');\n            this.$tab.switchClass('online', connected)\n                     .switchClass('offline', !connected);\n            this.$('.linked-social-accounts-and-emails').showIf(connected);\n            this.$('.account-info-wrap').showIf(connected);\n            this.$('.sync-wrap').showIf(connected);\n            if (connected) {\n                this.updateName();\n                this.updateAvatar();\n                this.updateSyncButton();\n                this.updateLastSyncInfo();\n            }\n            this.$('.btn-login').hideIf(connected);\n            this.$('.btn-more').showIf(connected);\n        },\n\n        updateSyncButton: function () {\n            let sync = this.data.get('sync');\n            this.$('.btn-sync .button').hideIf(sync);\n            this.$('.btn-sync .preloader-wrapper').showIf(sync);\n        },\n\n        updateLastSyncInfo: function () {\n            let last_sync = this.model.get('last_sync');\n            if (last_sync) {\n                let time_delta = utils.now() - last_sync;\n                this.$('.last-sync-info').text(xabber.getString(\"xabber_account__last_sync__text\", [env.moment(env.moment.now() - 1000*time_delta).fromNow()]));\n            } else {\n                this.$('.last-sync-info').text(xabber.getString(\"xabber_account__last_sync__not_synced\"));\n            }\n        },\n\n        synchronize: function () {\n            if (!this.data.get('sync')) {\n                this.data.set('sync', true);\n                this.model.once(\"settings_result\", function () {\n                    this.data.set('sync', false);\n                }, this);\n                this.model.save('sync_request', 'window');\n                this.model.get_settings();\n            }\n        },\n\n        login: function () {\n            if (xabber.add_api_account_view && xabber.accounts.connected.length > 1)\n                xabber.add_api_account_view.show();\n            else {\n                let account = xabber.accounts.connected[0];\n                if (account) {\n                    account.set('auto_login_xa', true);\n                    account.authXabberAccount();\n                }\n            }\n        },\n\n        logout: function () {\n            this.model.logout();\n        },\n\n        onPasswordResetFailed: function () {\n            utils.dialogs.error(xabber.getString(\"password_reset_need_email\"));\n        },\n\n        setPassword: function () {\n            let email_list = this.model.get('linked_email_list');\n            if (email_list) {\n                let verified_email = email_list.find(mail => mail.verified === true);\n                if (email_list.indexOf(verified_email) != -1) {\n                    $.ajax({\n                        type: 'POST',\n                        url: constants.API_SERVICE_URL + '/accounts/password_reset_request/',\n                        contentType: \"application/json\",\n                        dataType: 'json',\n                        data: JSON.stringify({email: verified_email.email}),\n                        success: () => {\n                            utils.dialogs.notify(xabber.getString(\"button_reset_pass\"), xabber.getString(\"password_reset_success\", [verified_email.email]));\n                        },\n                        error: this.onPasswordResetFailed.bind(this)\n                    });\n                }\n                else\n                    this.onPasswordResetFailed();\n            }\n            else\n                this.onPasswordResetFailed();\n        },\n\n        openAccount: function () {\n            utils.openWindow(constants.XABBER_ACCOUNT_URL + '/?token=' + this.model.get('token'));\n        }\n    });\n\n\n    xabber.once(\"start\", function () {\n            this.account_settings_list = new this.AccountSettingsList(null, {\n                storage_name: this.getStorageName() + '-account-settings'\n            });\n            this.account_settings_list.fetch();\n            this.account_settings_list.order_timestamp = new this.AccountsOrderTimestamp(\n                {id: 'accounts-order-timestamp'},\n                {storage_name: this.getStorageName(), fetch: 'after'}\n            );\n        if (constants.ENABLE_XABBER_ACCOUNT) {\n            this.api_account = new this.APIAccount({id: 'api-account'},\n                {\n                    storage_name: this.getStorageName(), fetch: 'before',\n                    settings_list: this.account_settings_list\n                });\n        }\n\n            this.xabber_login_panel = xabber.login_page.addChild(\n                'xabber_login', this.XabberLoginPanel, {model: this.api_account});\n\n        if (constants.ENABLE_XABBER_ACCOUNT) {\n            this.settings_view.addChild('api-account', this.APIAccountView,\n                {model: this.api_account});\n\n            this.add_api_account_view = new this.AddAPIAccountView({model: this.api_account});\n            this.email_auth_view = new xabber.XabberLoginByEmailPanel({\n                parent: this.add_api_account_view,\n                model: this.api_account\n            });\n        }\n    }, xabber);\n\n    return xabber;\n  };\n}).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack://xabber.web/./src/api-service.js?")},"./src/chats.js":(module,exports,__webpack_require__)=>{eval("/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ \"./node_modules/console-browserify/index.js\");\n/* provided dependency */ var WaveSurfer = __webpack_require__(/*! wavesurfer */ \"./node_modules/wavesurfer/dist/wavesurfer.js\");\n/* provided dependency */ var Quill = __webpack_require__(/*! Quill */ \"./node_modules/quill/quill.js\")[\"default\"];\n/* provided dependency */ var slug = __webpack_require__(/*! slug */ \"./node_modules/slug/slug.js\");\nvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n  return function (xabber) {\n    let env = xabber.env,\n        constants = env.constants,\n        templates = env.templates.chats,\n        utils = env.utils,\n        $ = env.$,\n        $iq = env.$iq,\n        $msg = env.$msg,\n        Strophe = env.Strophe,\n        _ = env._,\n        moment = env.moment,\n        uuid = env.uuid,\n        Images = utils.images,\n        Emoji = utils.emoji,\n        pretty_date = (timestamp) => { return utils.pretty_date(timestamp, (xabber.settings.language == 'ru-RU' || xabber.settings.language == 'default' && xabber.get(\"default_language\") == 'ru-RU') && 'dddd, D MMMM YYYY')},\n        pretty_datetime = (timestamp) => { return utils.pretty_datetime(timestamp, (xabber.settings.language == 'ru-RU' || xabber.settings.language == 'default' && xabber.get(\"default_language\") == 'ru-RU') && 'D MMMM YYYY HH:mm:ss')};\n\n    xabber.Message = Backbone.Model.extend({\n        idAttribute: 'unique_id',\n\n        defaults: function () {\n            let msgid = uuid();\n            return {\n                msgid: msgid,\n                unique_id: msgid,\n                type: 'main',\n                state: constants.MSG_PENDING\n            };\n        },\n\n        initialize: function () {\n            let time = this.get('time'), attrs = {};\n            if (time) {\n                attrs.timestamp = Number(moment(time));\n            } else {\n                attrs.timestamp = moment.now();\n                attrs.time = moment(attrs.timestamp).format();\n            }\n            if (!this.get('origin_id'))\n                (this.isSenderMe() && !this.get('synced_from_server') && !this.get('carbon_copied') && !this.get('is_archived')) && this.set('origin_id', this.get('msgid'));\n            this.updateUniqueId();\n            this.set(attrs);\n            this.on(\"change:origin_id stanza_id archived_id\", this.updateUniqueId, this);\n        },\n\n        updateUniqueId: function () {\n            this.set('unique_id', this.get('origin_id') || this.get('stanza_id') || this.get('archived_id') || this.get('msgid'));\n        },\n\n        getText: function () {\n            let forwarded_message = this.get('forwarded_message');\n            if (forwarded_message && forwarded_message.length) {\n                return forwarded_message[0].get('message');\n            }\n            return this.get('message');\n        },\n\n        getState: function () {\n            return constants.MSG_STATE[this.get('state')];\n        },\n\n        getVerboseState: function () {\n            let state = xabber.getString(constants.MSG_VERBOSE_STATE[this.get('state')]);\n            if (this.account) {\n                if (!this.account.isOnline())\n                    state = xabber.getString(\"account_is_offline\");\n            }\n            else if (!this.collection.account.isOnline())\n                state = xabber.getString(\"account_is_offline\");\n            return state;\n        },\n\n        isSenderMe: function () {\n            if (this.account)\n                return this.account.get('jid') === this.get('from_jid');\n            else if (this.collection.account)\n                return this.collection.account.get('jid') === this.get('from_jid');\n            else\n                false;\n        }\n    });\n\n    xabber.MessagesBase = Backbone.Collection.extend({\n        model: xabber.Message,\n    });\n\n      xabber.SearchedMessages = xabber.MessagesBase.extend({\n          comparator: 'timestamp',\n\n          initialize: function () {\n              this.collections = [];\n              this.on(\"add\", _.bind(this.updateInCollections, this, 'add'));\n              this.on(\"change\", _.bind(this.updateInCollections, this, 'change'));\n          },\n\n          addCollection: function (collection) {\n              this.collections.push(collection);\n          },\n\n          updateInCollections: function (event, contact) {\n              _.each(this.collections, function (collection) {\n                  collection.update(contact, event);\n              });\n          }\n      });\n\n      xabber.Messages = Backbone.Collection.extend({\n        model: xabber.Message,\n        comparator: 'timestamp',\n\n        initialize: function (models, options) {\n            this.account = options.account;\n        },\n\n        createInvitationFromStanza: function ($message, options) {\n            options = options || {};\n            let $invite_item = $message.find('invite'),\n                full_jid = $invite_item.attr('jid') || $message.attr('from'),\n                $delay = options.delay || $message.children('delay'),\n                from_jid = Strophe.getBareJidFromJid(full_jid),\n                body = $message.children('body').text(),\n                markable = $message.find('markable').length > 0,\n                msgid = $message.attr('id'),\n                archive_id = $message.children('archived').attr('id'),\n                origin_id = $message.children('origin-id').attr('id'),\n                unique_id = origin_id || options.stanza_id || archive_id || msgid,\n                message = unique_id && this.get(unique_id),\n                $group_info = $message.children('x[xmlns=\"' + Strophe.NS.GROUP_CHAT + '\"]'),\n                is_private_invitation,\n                group_info_attributes = {};\n\n            if (message)\n                return message;\n\n            if (!from_jid)\n                return;\n\n            let attrs = {\n                xml: options.xml || $message[0],\n                carbon_copied: options.carbon_copied && !options.is_archived,\n                markable: markable,\n                msgid: msgid,\n                is_forwarded: options.is_forwarded,\n                forwarded_message: options.forwarded_message || null,\n                from_jid: from_jid,\n                origin_id: origin_id,\n                stanza_id: options.stanza_id,\n                archive_id: archive_id,\n                contact_stanza_id: options.contact_stanza_id,\n                is_archived: options.is_archived\n            };\n\n            $delay.length && (attrs.time = $delay.attr('stamp'));\n            options.synced_msg && (attrs.synced_invitation_from_server = true);\n            body && (attrs.message = body);\n\n            let contact = this.account.contacts.mergeContact({jid: Strophe.getBareJidFromJid(from_jid), group_chat: true}),\n                chat = this.account.chats.getChat(contact);\n            contact.set('in_roster', false);\n            contact.getVCard();\n            if ($group_info.length) {\n                let name = $group_info.find('name').text(),\n                    model = $group_info.find('membership').text(),\n                    privacy = $group_info.find('privacy').text(),\n                    searchable = $group_info.find('index').text(),\n                    parent_chat = $group_info.find('parent-chat').text(),\n                    description = $group_info.find('description').text();\n                name && (group_info_attributes.name = name);\n                model && (group_info_attributes.model = name);\n                privacy && (group_info_attributes.privacy = privacy);\n                searchable && (group_info_attributes.searchable = searchable);\n                description && (group_info_attributes.description = description);\n                parent_chat.length && (is_private_invitation = true);\n                is_private_invitation && contact.set('private_chat', true);\n                privacy === 'incognito' && contact.set('incognito_chat', true);\n                let prev_group_info = contact.get('group_info') || {};\n                _.extend(prev_group_info, group_info_attributes);\n                contact.set('group_info', prev_group_info);\n            }\n\n            let invite_msg = chat.messages.createSystemMessage(_.extend(attrs, {\n                from_jid: from_jid,\n                auth_request: true,\n                invite: true,\n                private_invite: is_private_invitation || false,\n                is_accepted: false,\n                silent: false,\n                message: $message.find('reason').text()\n            }));\n            return invite_msg;\n        },\n\n        createFromStanza: function ($message, options) {\n            options || (options = {});\n            let $delay = options.delay || $message.children('delay'),\n                full_jid = $message.attr('from') || options.from_jid,\n                from_jid = Strophe.getBareJidFromJid(full_jid),\n                body = $message.children('body').length ? $message.children('body').text() : $message.children('envelope').children('content').children('body').text(),\n                markable = $message.find('markable').length > 0,\n                archive_id = $message.children('archived').attr('id'),\n                origin_id = $message.children('origin-id').attr('id'),\n                msgid = $message.attr('id'),\n                unique_id = origin_id || options.stanza_id || archive_id || msgid,\n                message = unique_id && this.get(unique_id);\n\n            if (options.replaced) {\n                let conversation = $message.children('replace').attr('conversation');\n                if ($message.children('replace').children('message').children(`encrypted[xmlns=\"${Strophe.NS.SYNCHRONIZATION_OLD_OMEMO}\"]`).length)\n                    return;\n                if ($message.children('replace').children('message').children(`encrypted[xmlns=\"${Strophe.NS.OMEMO}\"]`).length && this.account.omemo && !options.forwarded) {\n                    this.account.omemo.receiveChatMessage($message, _.extend(options, {from_jid: conversation, conversation: conversation}));\n                    return;\n                }\n                $message = $message.children('replace').children('message');\n                body = $message.children('body').length ? $message.children('body').text() : $message.children('envelope').children('content').children('body').text();\n                let sid = $message.children('stanza-id').first().attr('id');\n                message = this.find(m => m.get('stanza_id') === sid || m.get('contact_stanza_id') === sid);\n                if (!message)\n                    return;\n                from_jid = message.get('from_jid');\n                msgid = message.get('msgid');\n                let xml = message.get('xml');\n                xml.innerHTML = $message[0].innerHTML;\n                options.xml = xml;\n                options.forwarded_message = message.get('forwarded_message');\n            }\n\n            if (message && !options.replaced && !options.context_message && !options.searched_message && !options.pinned_message && !options.participant_message && !options.echo_msg && !options.is_searched)\n                return message;\n\n            let attrs = {\n                    xml: options.xml || $message[0],\n                    original_message: body,\n                    carbon_copied: options.carbon_copied && !options.is_archived,\n                    markable: markable,\n                    msgid: msgid,\n                    is_forwarded: options.is_forwarded,\n                    forwarded_message: options.forwarded_message || null,\n                    from_jid: from_jid,\n                    contact_stanza_id: options.contact_stanza_id,\n                    is_archived: options.is_archived\n                },\n                mentions = [], blockquotes = [], markups = [], mutable_content = [], files = [], images = [], videos = [], locations = [], link_references = [];\n\n            options.encrypted && _.extend(attrs, {encrypted: true});\n            options.hasOwnProperty('is_trusted') && _.extend(attrs, {is_trusted: options.is_trusted});\n            let references = $message.children(`reference[xmlns=\"${Strophe.NS.REFERENCE}\"]`).length ?\n                $message.children(`reference[xmlns=\"${Strophe.NS.REFERENCE}\"]`) :\n                $message.children('envelope').children('content').children(`reference[xmlns=\"${Strophe.NS.REFERENCE}\"]`)\n\n            references.each((idx, reference) => {\n                let $reference = $(reference),\n                    type = $reference.attr('type'),\n                    begin = parseInt($reference.attr('begin')),\n                    end = parseInt($reference.attr('end'));\n                if (type === 'decoration') {\n                    if ($reference.children(`mention[xmlns=\"${Strophe.NS.MARKUP}\"]`).length) {\n                        let $mention = $reference.children(`mention[xmlns=\"${Strophe.NS.MARKUP}\"]`),\n                            target = $mention.text(),\n                            is_gc = $mention.attr('node') === Strophe.NS.GROUP_CHAT ? true : false;\n                        mentions.push({start: begin, end: end, target: target, is_gc: is_gc});\n                    } else {\n                        let markup = [];\n                        $reference.children().each((i, child_ref) => {\n                            if (constants.MARKUP_TAGS.indexOf(child_ref.tagName) > -1 && $(child_ref).attr('xmlns') === Strophe.NS.MARKUP) {\n                                if (child_ref.tagName === 'link')\n                                    markup.push({type: child_ref.tagName, uri: $(child_ref).text()});\n                                else if (child_ref.tagName === 'quote') {\n                                    blockquotes.push({start: begin, end: end});\n                                } else\n                                    markup.push(child_ref.tagName);\n                            }\n                        });\n                        markup.length && markups.push({start: begin, end: end, markup: markup});\n                    }\n                } else if (type === 'mutable') {\n                    let $geolocation = $reference.children(`geoloc[xmlns=\"${Strophe.NS.GEOLOC}\"]`).first(),\n                        loc_attrs = {};\n                    if ($geolocation.children('lat').text() && $geolocation.children('lon').text()){\n                        loc_attrs = {\n                            lat: $geolocation.children('lat').text(),\n                            lon: $geolocation.children('lon').text()\n                        }\n                        locations.push(loc_attrs);\n                        mutable_content.push({ start: begin, end: end, type: 'geolocation'});\n                    };\n                    if ($reference.children(`ogp[xmlns=\"${Strophe.NS.OGP}\"]`).length) {\n                        let $ogp = $reference.children(`ogp[xmlns=\"${Strophe.NS.OGP}\"]`).first(),\n                            link_reference_attrs = {};\n                        if ($ogp.length) {\n                            link_reference_attrs = {\n                                site: $ogp.children('meta[property=\"og:site_name\"]').attr('content'),\n                                type: $ogp.children('meta[property=\"og:type\"]').attr('content'),\n                                url: $ogp.children('meta[property=\"og:url\"]').attr('content'),\n                                description: $ogp.children('meta[property=\"og:description\"]').attr('content'),\n                                title: $ogp.children('meta[property=\"og:title\"]').attr('content'),\n                                image: $ogp.children('meta[property=\"og:image\"]').attr('content'),\n                                image_width: $ogp.children('meta[property=\"og:image:width\"]').attr('content'),\n                                image_height: $ogp.children('meta[property=\"og:image:height\"]').attr('content'),\n                                video_url: $ogp.children('meta[property=\"og:video:url\"]').attr('content'),\n                                original_text: $ogp.attr('url'),\n                                start: begin,\n                                end: end,\n                            }\n                            link_references.push(link_reference_attrs);\n                            mutable_content.push({start: begin, end: end, type: 'link_reference'});\n                        };\n                    }\n                    let $file_sharing = $reference.find(`file-sharing[xmlns=\"${Strophe.NS.FILES}\"]`).first();\n                    if ($reference.children('forwarded').length)\n                        mutable_content.push({ start: begin, end: end, type: 'forward'});\n                    else if ($file_sharing.length) {\n                        let type = $file_sharing.parent(`voice-message[xmlns=\"${Strophe.NS.VOICE_MESSAGE}\"]`).length ? 'voice' : 'file',\n                            $file = $file_sharing.children('file'), file_attrs = {}, sources = [];\n                        mutable_content.push({ start: begin, end: end, type: type});\n                        $file_sharing.children('sources').children('uri').each((i, uri) => {sources.push($(uri).text());});\n                        file_attrs = {\n                            name: $file.children('name').text(),\n                            hash: $file.children(`hash[xmlns=\"${Strophe.NS.HASH}\"]`).text(),\n                            size: $file.children('size').text(),\n                            type: $file.children('media-type').text(),\n                            duration: $file.children('duration').text(),\n                            description: $file.children('desc').text(),\n                            height: $file.children('height').text(),\n                            width: $file.children('width').text(),\n                            thumbnail: $file.children('thumbnail-uri').text(),\n                            id: $file.children('gallery-id').text(),\n                            voice: type === 'voice',\n                            sources: sources\n                        };\n                        if (sources[0].indexOf('aescbc') == 0) {\n                            let uri = sources[0].replace(/^aescbc/, 'https'),\n                                key = utils.fromBase64toArrayBuffer(uri.slice(uri.length - 64));\n                            uri = uri.slice(0, uri.length - 64 - 1);\n                            _.extend(file_attrs, {sources: [uri], key: key});\n                            attrs.has_encrypted_files = true;\n                        }\n                        if (this.getFileType($file.children('media-type').text()) === 'image')\n                            images.push(file_attrs);\n                        else if (this.getFileType($file.children('media-type').text()) === 'video')\n                            videos.push(file_attrs);\n                        else\n                            files.push(file_attrs);\n                    }\n                } else if (type === 'data') {}\n            });\n\n            $message.children('x[xmlns=\"' + Strophe.NS.GROUP_CHAT + '\"]').each((idx, x_elem) => {\n                let $reference = $(x_elem).children(`reference[type=\"mutable\"][xmlns=\"${Strophe.NS.REFERENCE}\"]`),\n                    $user = $reference.children(`user[xmlns=\"${Strophe.NS.GROUP_CHAT}\"]`).first();\n                    if ($reference.length) {\n                        let begin = parseInt($reference.attr('begin')),\n                            end = parseInt($reference.attr('end'));\n                        mutable_content.push({start: begin, end: end, type: 'groupchat'});\n                        let user_id = $user.attr('id'),\n                            user_jid = $user.children('jid').text();\n                        _.extend(attrs, {\n                            user_info: {\n                                id: user_id,\n                                jid: user_jid,\n                                nickname: $user.children('nickname').text() || user_jid || user_id,\n                                role: $user.children('role').text(),\n                                avatar: $user.children(`metadata[xmlns=\"${Strophe.NS.PUBSUB_AVATAR_METADATA}\"]`).children('info').attr('id'),\n                                avatar_url: $user.children(`metadata[xmlns=\"${Strophe.NS.PUBSUB_AVATAR_METADATA}\"]`).children('info').attr('url'),\n                                badge: $user.children('badge').text()\n                            },\n                            from_jid: user_jid || user_id,\n                            groupchat_jid: Strophe.getBareJidFromJid(options.is_sender ? $message.attr('to') : $message.attr('from'))\n                        });\n                    }\n            });\n\n            blockquotes.length && (attrs.blockquotes = blockquotes);\n            mentions.length && (attrs.mentions = mentions);\n            markups.length && (attrs.markups = markups);\n            images.length && (attrs.images = images);\n            videos.length && (attrs.videos = videos);\n            files.length && (attrs.files = files);\n            locations.length && (attrs.locations = locations);\n            link_references.length && (attrs.link_references = link_references);\n            attrs.mutable_content = mutable_content;\n            if (!attrs.mutable_content.length)\n                attrs.forwarded_message = null;\n\n            options.stanza_id && (attrs.stanza_id = options.stanza_id);\n            origin_id && (attrs.origin_id = origin_id);\n            archive_id && (attrs.archive_id = archive_id);\n\n            (options.replaced || mentions.length) && (attrs.mentions = mentions);\n            (options.replaced || markups.length) && (attrs.markups = markups);\n            (options.replaced || files.length) && (attrs.files = files);\n            (options.replaced || images.length) && (attrs.images = images);\n            (options.replaced || videos.length) && (attrs.videos = videos);\n            (options.replaced || link_references.length) && (attrs.link_references = link_references);\n\n            if ($message.children(`x[xmlns=\"${Strophe.NS.GROUP_CHAT}#system-message\"]`).length) {\n                attrs.type = 'system';\n                attrs.participants_version = $message.children(`x[xmlns=\"${Strophe.NS.GROUP_CHAT}#system-message\"]`).attr('version');\n            }\n\n            if ($message.children(`x[xmlns=\"${Strophe.NS.DATAFORM}\"]`).length &&\n                $message.children(`x[xmlns=\"${Strophe.NS.DATAFORM}\"]`).find('field[var=\"FORM_TYPE\"][type=\"hidden\"] value').text() === Strophe.NS.WEBCHAT) {\n                let addresses = [];\n                $message.children(`addresses[xmlns=\"${Strophe.NS.ADDRESS}\"]`).children('address').each((idx, address) => {\n                    let $address = $(address);\n                    addresses.push({type: $address.attr('type'), jid: $address.attr('jid')});\n                });\n                attrs.data_form = _.extend(this.account.parseDataForm($message.children(`x[xmlns=\"${Strophe.NS.DATAFORM}\"]`)), {addresses: addresses});\n            }\n\n            body && (body = utils.slice_pretty_body(body, mutable_content));\n\n            if (!attrs.forwarded_message && body.removeEmoji() === \"\")\n                attrs.only_emoji = Array.from(body).length;\n\n            attrs.message = body;\n\n            options.echo_msg && ($delay = $message.children('time'));\n            $delay.length && (attrs.time = $delay.attr('stamp'));\n            (attrs.carbon_copied || from_jid == this.account.get('jid') && (options.is_archived || options.synced_msg)) && (attrs.state = constants.MSG_SENT);\n            options.synced_msg && (attrs.synced_from_server = true);\n            options.missed_history && (attrs.missed_msg = true);\n            if (options.echo_msg) {\n                attrs.state = constants.MSG_DELIVERED;\n                attrs.timestamp = Number(moment(attrs.time));\n                attrs.from_jid = this.account.get('jid');\n            }\n            (options.context_message || options.participant_message || options.searched_message || options.is_searched) && (attrs.state = constants.MSG_ARCHIVED);\n\n            if (options.pinned_message)\n                return this.account.pinned_messages.create(attrs);\n\n            if (options.participant_message)\n                return this.account.participant_messages.create(attrs);\n\n            if (options.searched_message) {\n                options.query && (attrs.query = options.query);\n                options.searched_in_contact_messages && (attrs.searched_in_contact_messages = options.searched_in_contact_messages)\n                return this.account.searched_messages.create(attrs);\n            }\n\n            if (options.context_message)\n                return this.account.context_messages.create(attrs);\n\n            if ((options.echo_msg || options.replaced) && message) {\n                message.set(attrs);\n                if (options.replaced)\n                    return;\n            }\n\n            if (options.is_searched) {\n                let msg_contact = Strophe.getBareJidFromJid($message.attr('from'));\n                (msg_contact === this.account.get('jid')) && (msg_contact = Strophe.getBareJidFromJid($message.attr('to')));\n                message = xabber.all_searched_messages.create(attrs);\n                message.contact = this.account.contacts.mergeContact(msg_contact);\n                message.account = this.account;\n                return message;\n            }\n\n            message = this.create(attrs);\n\n            (options.encrypted && options.is_unread) && message.set('is_unread', true);\n\n            return message;\n        },\n\n          decryptFile: async function (uri, key) {\n              return new Promise((resolve, reject) => {\n                  fetch(uri).then((r) => {\n                      r.blob().then((blob) => {\n                          let filereader = new FileReader();\n                          filereader.onloadend = () => {\n                              let arrayBuffer = filereader.result,\n                                  exportedMasterKey = key.slice(0, 32),\n                                  HMACData = key.slice(32);\n                              utils.AES.decrypt(exportedMasterKey, HMACData, arrayBuffer).then((enc_file) => {\n                                  resolve(enc_file);\n                              });\n                          };\n                          filereader.readAsArrayBuffer(blob);\n                      });\n                  }).catch(() => {\n                      resolve(null)\n                  });\n              });\n          },\n\n        getFilename: function (url_media) {\n            let idx = url_media.lastIndexOf(\"/\");\n            return url_media.substr(idx + 1, url_media.length - 1);\n        },\n\n        getFileType: function(full_type) {\n            let end_idx = (full_type.indexOf(\"/\") > -1) ? full_type.indexOf(\"/\") : full_type.length,\n                type = full_type.slice(0, end_idx);\n            return type;\n        },\n\n        createSystemMessage: function (attrs) {\n            return this.create(_.extend({\n                type: 'system',\n                silent: true,\n                state: constants.MSG_DISPLAYED\n            }, attrs));\n        }\n    });\n\n      xabber.JingleMessage = Backbone.Model.extend({\n          defaults: {\n              duration: 0,\n              contact_full_jid: \"\",\n              session_id: 0,\n              audio: true,\n              volume_on: true,\n              video_in: false,\n              video_screen: false,\n              state: 0\n          },\n\n          initialize: function (attrs, options) {\n              attrs = attrs || {};\n              attrs.video_live = attrs.video_live || false;\n              attrs.video = attrs.video_live;\n              this.contact = options.contact;\n              this.account = this.contact.account;\n              this.registerIqHandler();\n              this.audio_notifiation = xabber.playAudio(attrs.call_initiator ? xabber.settings.sound_on_call : xabber.settings.sound_on_dialtone, true);\n              this.modal_view = new xabber.JingleMessageView({model: this});\n              this.conn = new RTCPeerConnection({\n                  iceServers: [\n                      {\n                          urls: \"stun:stun.l.google.com:19302\"\n                      },\n                      {\n                          urls: \"stun:stun01.pool-01.fckrkn202102.cyou:3478\"\n                      },\n                  ].concat(constants.TURN_SERVERS_LIST),\n                  sdpSemantics: 'unified-plan'\n              });\n              this.$remote_video_el = $('<video autoplay class=\"webrtc-remote-video\"/>');\n              this.$remote_audio_el = $('<audio autoplay class=\"webrtc-remote-audio hidden\"/>');\n              this.$local_video = this.modal_view.$el.find('.webrtc-local-video');\n              this.current_timer = 0;\n              this.conn.onconnectionstatechange = this.onChangeConnectionState.bind(this);\n              this.set(attrs);\n              this.get('in') && this.updateStatus(xabber.getString(\"dialog_jingle_message__status_calling\"));\n              this.onChangedMediaType();\n              this.conn.ontrack = (ev) => {\n                  this.remote_stream = ev.streams[0];\n                  this.modal_view.$el.find('.webrtc-remote-audio')[0].srcObject = ev.streams[0];\n              };\n              this._waiting_timeout = setTimeout(() => {\n                  (!this.get('state') && this.get('status') === 'calling' && this.get('call_initiator') === this.account.get('jid')) && this.reject();\n              }, constants.JINGLE_WAITING_TIME * 1000);\n              this.conn.onicecandidate = this.onIceCandidate.bind(this);\n              this.conn.oniceconnectionstatechange = this.onChangeIceConnectionState.bind(this);\n              this.on('change:audio', this.setEnabledAudioTrack, this);\n              this.on('change:video', this.onChangedVideoValue, this);\n              this.on('change:video_live', this.setEnabledVideoTrack, this);\n              this.on('change:video_screen', this.setEnabledScreenShareVideoTrack, this);\n              this.on('change:video_in', this.onChangedRemoteVideo, this);\n              this.on('change:volume_on', this.onChangedVolume, this);\n              this.on('destroy', this.onDestroy, this);\n          },\n\n          registerIqHandler: function () {\n              this.account.connection.deleteHandler(this.iq_handler);\n              this.iq_handler = this.account.connection.addHandler((iq) => {\n                      this.onIQ(iq);\n                      return true;\n                  }, null, 'iq', 'set');\n\n          },\n\n          updateStatus: function (status) {\n              this.modal_view.updateStatusText(status);\n          },\n\n          updateTimer: function () {\n              this.updateStatus(utils.pretty_duration(++this.current_timer));\n          },\n\n          startTimer: function () {\n              this.updateTimer();\n              clearInterval(this.call_timer);\n              this.call_timer = setInterval(() => {\n                  this.updateTimer();\n              }, 1000);\n          },\n\n          onConnected: function () {\n              this.get('video_live') && this.onChangedVideoValue();\n              xabber.stopAudio(this.audio_notifiation);\n              setTimeout(() => {\n                  this.set('status', 'connected');\n                  xabber.trigger('update_jingle_button');\n                  this.updateStatus();\n                  this.startTimer();\n              }, 1000);\n          },\n\n          onChangeConnectionState: function (ev) {\n              let peer_conn = ev.target,\n                  conn_state = peer_conn.connectionState;\n              if (conn_state === 'connected') {\n                  this.onConnected();\n              } else {\n                  this.updateStatus(utils.pretty_name(conn_state) + '...');\n                  if (conn_state === \"failed\") {\n                      clearTimeout(this._timeout_failed);\n                      this._timeout_failed = setTimeout(() => {\n                          if (peer_conn.connectionState === 'failed' || peer_conn.connectionState === 'disconnected') {\n                              this.set('status', conn_state);\n                              xabber.trigger('update_jingle_button');\n                              this.reject();\n                              this.destroy();\n                              this.updateStatus(xabber.getString(\"dialog_jingle_message__status_network_error\"));\n                              xabber.current_voip_call = null;\n                          }\n                      }, 40000);\n                      peer_conn.restartIce();\n                  }\n                  if (conn_state === 'disconnected') {\n                      this.set('status', conn_state);\n                      xabber.trigger('update_jingle_button');\n                      this.destroy();\n                      xabber.current_voip_call = null;\n                  }\n              }\n          },\n\n          onIceCandidate: function (ice) {\n              if (!ice || !ice.candidate || !ice.candidate.candidate)\n                  return;\n              this.sendCandidate(ice.candidate);\n          },\n\n          onChangeIceConnectionState: function (ev) {\n              let peer_conn = ev.target,\n                  conn_state = peer_conn.iceConnectionState;\n              if (conn_state === \"failed\") {\n                  clearTimeout(this._timeout_failed);\n                  this._timeout_failed = setTimeout(() => {\n                      if (peer_conn.iceConnectionState === 'failed' || peer_conn.connectionState === 'disconnected') {\n                          this.set('status', conn_state);\n                          xabber.trigger('update_jingle_button');\n                          this.reject();\n                          this.destroy();\n                          this.updateStatus(xabber.getString(\"dialog_jingle_message__status_network_error\"));\n                          xabber.current_voip_call = null;\n                      }\n                  }, 40000);\n                  peer_conn.restartIce();\n              }\n              if (conn_state === \"connected\")\n                  !this.conn.connectionState && this.onConnected();\n          },\n\n          onChangedMediaType: function () {\n              this.$local_video.switchClass('hidden', !this.get('video'));\n          },\n\n          onChangedRemoteVideo: function () {\n              let incoming_video = this.get('video_in');\n              if (incoming_video) {\n                  this.$remote_video_el[0].srcObject = this.remote_stream;\n                  this.modal_view.$el.find('.webrtc-remote-audio').replaceWith(this.$remote_video_el);\n                  this.modal_view.$el.switchClass('multiple-videos', this.get('video') && this.get('video_in'));\n              }\n              else {\n                  this.$remote_audio_el[0].srcObject = this.remote_stream;\n                  this.modal_view.$el.find('.webrtc-remote-video').replaceWith(this.$remote_audio_el);\n              }\n              this.modal_view.$el.find('.default-screen').switchClass('hidden', incoming_video);\n              this.onChangedVolume();\n          },\n\n          onChangedVolume: function () {\n              if (this.get('volume_on')) {\n                  this.modal_view.$el.find('.webrtc-remote-audio')[0] && (this.modal_view.$el.find('.webrtc-remote-audio')[0].muted = false);\n                  this.modal_view.$el.find('.webrtc-remote-video')[0] && (this.modal_view.$el.find('.webrtc-remote-video')[0].muted = false);\n              }\n              else {\n                  this.modal_view.$el.find('.webrtc-remote-audio')[0] && (this.modal_view.$el.find('.webrtc-remote-audio')[0].muted = true);\n                  this.modal_view.$el.find('.webrtc-remote-video')[0] && (this.modal_view.$el.find('.webrtc-remote-video')[0].muted = true);\n              }\n          },\n\n          setEnabledAudioTrack: function () {\n              this.local_stream.getAudioTracks()[0].enabled = this.get('audio');\n          },\n\n          setEnabledVideoTrack: function () {\n              let value = this.get('video_live'),\n                  default_video = this.conn.getSenders().find(sender => sender.track && (sender.track.default || sender.track.screen));\n              value && this.set('video_screen', false);\n              (default_video && value) && this.createVideoStream();\n              (!default_video && this.local_stream) && (this.local_stream.getVideoTracks()[0].enabled = value);\n              this.set('video', value || this.get('video_screen'));\n          },\n\n          onDestroy: function () {\n              clearTimeout(this._waiting_timeout);\n              clearInterval(this.call_timer);\n              clearTimeout(this._timeout_failed);\n              xabber.stopAudio(this.audio_notifiation);\n              this.account.connection.deleteHandler(this.iq_handler);\n              this.stopTracks();\n              this.conn.close();\n          },\n\n          setEnabledScreenShareVideoTrack:  function () {\n              let value = this.get('video_screen'),\n                  default_video = this.conn.getSenders().find(sender => sender.track && !sender.track.screen);\n              value && this.set('video_live', false);\n              (default_video && value) && this.createScreenShareVideoStream();\n              (!default_video && this.local_stream) && (this.local_stream.getVideoTracks()[0].enabled = value);\n              this.set('video', value || this.get('video_live'));\n          },\n\n          onChangedVideoValue: function () {\n              let video_state = this.get('video') ? 'enable' : 'disable';\n              this.sendVideoStreamState(video_state);\n              this.onChangedMediaType();\n          },\n\n          createScreenShareVideoStream: function () {\n              navigator.mediaDevices.getDisplayMedia({video: true}).then((media_stream) => {\n                  this.$local_video[0].srcObject = media_stream;\n                  media_stream.getVideoTracks().forEach((track) => {\n                      _.extend(track, {screen: true});\n                      this.local_stream.addTrack(track);\n                      this.conn.addTrack(track, this.local_stream);\n                      this.conn.getSenders().find(sender => !sender.track || sender.track && sender.track.kind === 'video').replaceTrack(track);\n                  });\n              });\n          },\n\n          sendVideoStreamState: function (state) {\n              let $iq_video = $iq({to: this.get('contact_full_jid'), type: 'set'})\n                  .c('query', {xmlns: Strophe.NS.JINGLE_MSG})\n                  .c('video', {state: state, id: this.get('session_id')});\n              this.account.sendIQFast($iq_video);\n          },\n\n          onIQ: function (iq) {\n              let $incoming_iq = $(iq),\n                  $jingle_initiate = $incoming_iq.find('jingle[action=\"session-initiate\"]'),\n                  $jingle_accept = $incoming_iq.find('jingle[action=\"session-accept\"]'),\n                  $jingle_info = $incoming_iq.find('jingle[action=\"session-info\"]'),\n                  $jingle_video = $incoming_iq.find(`query[xmlns=\"${Strophe.NS.JINGLE_MSG}\"] video`),\n                  from_jid = $incoming_iq.attr('from'),\n                  $result_iq = $iq({to: from_jid, type: 'result', id: $incoming_iq.attr('id')});\n              if ($jingle_initiate.length) {\n                  if ($jingle_initiate.attr('sid') !== this.get('session_id'))\n                      return;\n                  let offer_sdp = $jingle_initiate.find(`description[xmlns=\"${Strophe.NS.JINGLE_RTP}\"]`).text();\n                  offer_sdp && this.conn.setRemoteDescription(new RTCSessionDescription({type: 'offer', sdp: offer_sdp}));\n                  this.acceptSession(offer_sdp);\n                  this.account.sendIQFast($result_iq);\n              }\n              if ($jingle_accept.length) {\n                  if ($jingle_accept.attr('sid') !== this.get('session_id'))\n                      return;\n                  let answer_sdp = $jingle_accept.find(`description[xmlns=\"${Strophe.NS.JINGLE_RTP}\"]`).text();\n                  answer_sdp && this.conn.setRemoteDescription(new RTCSessionDescription({type: 'answer', sdp: answer_sdp}));\n                  this.account.sendIQFast($result_iq);\n              }\n              if ($jingle_info.length) {\n                  if ($jingle_info.attr('sid') !== this.get('session_id'))\n                      return;\n                  let candidate = $jingle_info.find('candidate');\n                  candidate.length && this.conn.addIceCandidate(new RTCIceCandidate({candidate: candidate.text(), sdpMLineIndex: candidate.attr('sdpMLineIndex'), sdpMid: candidate.attr('sdpMid')}));\n                  this.account.sendIQFast($result_iq);\n              }\n              if ($jingle_video.length) {\n                  let session_id = $jingle_video.attr('id');\n                  if (session_id === this.get('session_id')) {\n                      let video_state = $jingle_video.attr('state');\n                      if (video_state === 'enable')\n                          this.set('video_in', true);\n                      if (video_state === 'disable')\n                          this.set('video_in', false);\n                  }\n                  this.account.sendIQFast($result_iq);\n              }\n          },\n\n          startCall: function () {\n              this.set('call_initiator', this.account.get('jid'));\n              this.createAudioStream();\n              this.get('video_live') && this.createVideoStream();\n              this.propose();\n          },\n\n          createAudioStream: function () {\n              navigator.mediaDevices.getUserMedia({audio: true}).then((media_stream) => {\n                  this.local_stream = media_stream;\n                  this.$local_video[0].srcObject = media_stream;\n                  let video_track = this.initVideoTrack();\n                  this.local_stream.addTrack(video_track);\n                  this.conn.addTrack(video_track, this.local_stream);\n                  media_stream.getAudioTracks().forEach(track => this.conn.addTrack(track, this.local_stream));\n              });\n          },\n\n          createVideoStream: function () {\n              navigator.mediaDevices.getUserMedia({video: true}).then((media_stream) => {\n                  this.$local_video[0].srcObject = media_stream;\n                  media_stream.getVideoTracks().forEach((track) => {\n                      this.local_stream.addTrack(track);\n                      this.conn.addTrack(track, this.local_stream);\n                      this.conn.getSenders().find(sender => !sender.track || sender.track && sender.track.kind === 'video').replaceTrack(track);\n                  });\n              });\n          },\n\n          stopTracks: function () {\n              this.local_stream && this.local_stream.getTracks().forEach((track) => {\n                  track.stop();\n                  this.local_stream.removeTrack(track);\n              });\n          },\n\n          propose: function () {\n              this.updateStatus(xabber.getString(\"dialog_jingle_message__status_search\"));\n              let $propose_msg = $msg({type: 'chat', to: this.contact.get('jid')})\n                  .c('propose', {xmlns: Strophe.NS.JINGLE_MSG, id: this.get('session_id')})\n                  .c('description', {xmlns: Strophe.NS.JINGLE_RTP, media: 'audio'}).up().up()\n                  .c('store', {xmlns: Strophe.NS.HINTS}).up()\n                  .c('markable').attrs({'xmlns': Strophe.NS.CHAT_MARKERS}).up()\n                  .c('body').t(xabber.getString(\"jingle__text_body_message\")).up()\n                  .c('origin-id', {id: uuid(), xmlns: 'urn:xmpp:sid:0'});\n              this.account.sendMsg($propose_msg);\n          },\n\n          accept: function () {\n              let $accept_msg = $msg({type: 'chat', to: this.get('contact_full_jid') || this.contact.get('jid')})\n                  .c('accept', {xmlns: Strophe.NS.JINGLE_MSG, id: this.get('session_id')}).up()\n                  .c('store', {xmlns: Strophe.NS.HINTS}).up()\n                  .c('markable').attrs({'xmlns': Strophe.NS.CHAT_MARKERS}).up()\n                  .c('origin-id', {id: uuid(), xmlns: 'urn:xmpp:sid:0'});\n              this.set('jingle_start', moment.now());\n              this.account.sendMsg($accept_msg);\n              xabber.stopAudio(this.audio_notifiation);\n              this.set('status', 'connecting');\n              xabber.trigger('update_jingle_button');\n              this.updateStatus(xabber.getString(\"dialog_jingle_message__status_connecting\"));\n              this.audio_notifiation = xabber.playAudio(xabber.settings.sound_on_connection, true);\n          },\n\n          reject: function (reason) {\n              if (this.get('status') === 'disconnected' || this.get('status') === 'disconnecting')\n                  return;\n              let $reject_msg = $msg({type: 'chat', to: this.get('contact_full_jid') || this.contact.get('jid')})\n                  .c('reject', {xmlns: Strophe.NS.JINGLE_MSG, id: this.get('session_id')});\n              if (this.get('jingle_start')) {\n                  let end = moment.now(),\n                      duration = Math.round((end - this.get('jingle_start'))/1000),\n                      call_attrs = {initiator: this.get('call_initiator')};\n                  if (this.call_timer)\n                      _.extend(call_attrs, {start: moment(this.get('jingle_start')).format(), end: moment(end).format(), duration: duration});\n                  reason && (call_attrs.reason = reason);\n                  $reject_msg.c('call', call_attrs).up();\n              }\n              $reject_msg.up().c('store', {xmlns: Strophe.NS.HINTS}).up()\n                  .c('markable').attrs({'xmlns': Strophe.NS.CHAT_MARKERS}).up()\n                  .c('origin-id', {id: uuid(), xmlns: 'urn:xmpp:sid:0'});\n              this.account.sendMsg($reject_msg);\n              this.createSystemMessage($reject_msg);\n              this.set('status', 'disconnected');\n              xabber.trigger('update_jingle_button');\n              this.destroy();\n              xabber.current_voip_call = null;\n          },\n\n          createSystemMessage: function (message) {\n              let $message = $(message.nodeTree),\n                  chat = this.account.chats.getChat(this.contact),\n                  time = $message.find('call').attr('end');\n              if (time) {\n                  let duration = $message.find('call').attr('duration'),\n                      initiator = $message.find('call').attr('initiator');\n                  chat.messages.createSystemMessage({\n                      from_jid: this.account.get('jid'),\n                      session_id: $message.find('reject').attr('id'),\n                      message: xabber.getString(((initiator && initiator === this.account.get('jid')) ? \"jingle__system_message__outgoing_call\" : \"jingle__system_message__incoming_call\"), [utils.pretty_duration(duration)])\n                  });\n              }\n              else {\n                  chat.messages.createSystemMessage({\n                      from_jid: this.account.get('jid'),\n                      session_id: $message.find('reject').attr('id'),\n                      message: xabber.getString(\"jingle__system_message__cancelled_call\")\n                  });\n              }\n          },\n\n          initVideoTrack: function () {\n              let canvas = Object.assign(document.createElement(\"canvas\"), {width: 320, height: 240});\n              let ctx = canvas.getContext('2d');\n              ctx.fillRect(0, 0, canvas.width, canvas.height);\n              let p = ctx.getImageData(0, 0, canvas.width, canvas.height);\n              requestAnimationFrame(function draw(){\n                  for (let i = 0; i < p.data.length; i++)\n                      p.data[i++] = p.data[i++] = p.data[i++] = 1;\n                  ctx.putImageData(p, 0, 0);\n                  requestAnimationFrame(draw);\n              });\n              return _.extend(canvas.captureStream(60).getTracks()[0], {default: true});\n          },\n\n          initSession: function () {\n              navigator.mediaDevices.getUserMedia({audio: true}).then((media_stream) => {\n                  this.local_stream = media_stream;\n                  this.$local_video[0].srcObject = media_stream;\n                  let video_track = this.initVideoTrack();\n                  this.local_stream.addTrack(video_track);\n                  this.conn.addTrack(video_track, this.local_stream);\n                  media_stream.getAudioTracks().forEach(track => this.conn.addTrack(track, this.local_stream));\n                  return this.conn.createOffer({offerToReceiveAudio:true, offerToReceiveVideo: true});\n              }).then((offer) => {\n                      this.set('session_initiator', this.account.get('jid'));\n                      this.conn.setLocalDescription(offer).then(() => {\n                          let offer_sdp = offer.sdp,\n                              $iq_offer_sdp = $iq({to: this.get('contact_full_jid'), type: 'set'})\n                              .c('jingle', {xmlns: Strophe.NS.JINGLE, action: 'session-initiate', initiator: this.account.get('jid'), sid: this.get('session_id')})\n                              .c('content', {creator: 'initiator', name: 'voice'})\n                              .c('description', {xmlns: Strophe.NS.JINGLE_RTP, media: 'audio'})\n                              .c('sdp').t(offer_sdp).up().up()\n                              .c('security', {xmlns: Strophe.NS.JINGLE_SECURITY_STUB});\n                          this.account.sendIQFast($iq_offer_sdp);\n                      });\n              });\n          },\n\n          sendCandidate: function (candidate) {\n              let $iq_candidate = $iq({to: this.get('contact_full_jid'), type: 'set'})\n                  .c('jingle', {xmlns: Strophe.NS.JINGLE, action: 'session-info', initiator: this.get('session_initiator'), sid: this.get('session_id')})\n                  .c('content', {creator: 'initiator', name: 'voice'})\n                  .c('description', {xmlns: Strophe.NS.JINGLE_RTP, media: 'audio'}).up()\n                  .c('transport', {xmlns: Strophe.NS.JINGLE_TRANSPORTS_ICE})\n                  .c('candidate', {sdpMLineIndex: candidate.sdpMLineIndex, sdpMid: candidate.sdpMid }).t(candidate.candidate);\n              this.account.sendIQFast($iq_candidate);\n          },\n\n          acceptSession: async function () {\n              this.set('session_initiator', this.contact.get('jid'));\n              this.conn.createAnswer().then((answer) => {\n                  this.conn.setLocalDescription(answer).then(() => {\n                      let answer_sdp = answer.sdp,\n                          $iq_answer_sdp = $iq({to: this.get('contact_full_jid'), type: 'set'})\n                              .c('jingle', {xmlns: Strophe.NS.JINGLE, action: 'session-accept', initiator: this.contact.get('jid'), sid: this.get('session_id')})\n                              .c('content', {creator: 'initiator', name: 'voice'})\n                              .c('description', {xmlns: Strophe.NS.JINGLE_RTP, media: 'audio'})\n                              .c('sdp').t(answer_sdp).up().up()\n                              .c('security', {xmlns: Strophe.NS.JINGLE_SECURITY_STUB});\n                      this.account.sendIQFast($iq_answer_sdp);\n                  });\n              });\n          }\n      });\n\n      xabber.Chat = Backbone.Model.extend({\n        defaults: {\n            opened: true,\n            active: false,\n            display: false,\n            displayed_sent: false,\n            last_displayed_id: 0,\n            last_delivered_id: 0,\n            unread: 0,\n            timestamp: 0,\n            const_unread: 0,\n            encrypted: false\n        },\n\n        initialize: function (attrs, options) {\n            this.contact = options.contact;\n            this.sync_created = options.sync_created;\n            this.account = this.contact ? this.contact.account : options.account;\n            let jid = this.contact ? this.contact.get('jid') : attrs.jid;\n            this.set({\n                id: attrs && attrs.id || this.contact.hash_id,\n                jid: jid\n            });\n            (attrs && attrs.type === 'encrypted') && this.set('encrypted', true);\n            if (attrs && attrs.type === 'saved') {\n                this.set('saved', true);\n                this.account.on('remove_saved_chat', this.onContactDestroyed, this);\n            }\n            this.retraction_version = 0;\n            if (this.contact) {\n                this.set('group_chat', this.contact.get('group_chat'));\n                this.contact.on(\"destroy\", this.onContactDestroyed, this);\n                this.contact.on(\"change:group_chat\", this.onChangedContact, this);\n            } else {\n                this.set({'group_chat': false, 'name': attrs.name});\n            }\n            this.messages = new xabber.Messages(null, {account: this.account});\n            this.messages_unread = new xabber.Messages(null, {account: this.account});\n            this.item_view = new xabber.ChatItemView({model: this});\n            this.plyr_players = [];\n            this.on(\"get_retractions_list\", this.getAllMessageRetractions, this);\n            this.on(\"change:timestamp\", this.onChangedTimestamp, this);\n        },\n\n        onChangedTimestamp: function () {\n            if (this.get('timestamp') != this.get('cached_timestamp'))\n                this.cacheChat();\n        },\n\n\n        isMuted: function () {\n              if (this.get('muted') && (this.get('muted') < (Date.now() / 1000)))\n                  this.set('muted', false)\n              return this.get('muted')\n        },\n\n        cacheChat: function () {\n            let jid = this.get('jid'),\n                last_message = this.last_message ? _.clone(this.last_message).get('xml') : null;\n            if (_.isUndefined(last_message))\n                return;\n            let attrs = {\n                jid: this.get('encrypted') ? `${jid}:encrypted` : jid,\n                timestamp: this.get('timestamp'),\n                last_displayed_id: this.get('last_displayed_id'),\n                last_delivered_id: this.get('last_delivered_id'),\n                last_message: last_message ? last_message.outerHTML : null\n            };\n            this.account.cached_chats.putChat(attrs);\n        },\n\n          onChangedContact: function () {\n              let changed = this.contact.changed;\n              if (_.has(changed, 'group_chat'))\n                  this.set('group_chat', this.contact.get('group_chat'));\n              if (_.has(changed, 'blocked'))\n                  this.set('blocked', this.contact.get('blocked'));\n          },\n\n        recountUnread: function () {\n            this.set('unread', this.messages_unread.length);\n            if (this.contact && this.get('archived') && this.isMuted()) {\n            }\n            else {\n                xabber.toolbar_view.recountAllMessageCounter();\n            }\n        },\n\n        onContactDestroyed: function () {\n            this.resetUnread();\n            this.destroy();\n        },\n\n        resetUnread: function () {\n            let unread = this.get('unread');\n            if (unread > 0) {\n                this.set('unread', 0);\n                xabber.recountAllMessageCounter(unread);\n                xabber.toolbar_view.recountAllMessageCounter(unread);\n            }\n        },\n\n        searchMessages: function (query, callback) {\n            this.messages_view = new xabber.SearchedMessagesView({\n                query_text: query,\n                model: this\n            });\n            this.messages_view.messagesRequest({}, () => {\n                xabber.body.setScreen('all-chats', {\n                    right: 'searched_messages',\n                    model: this\n                });\n            });\n        },\n\n        sendDataForm: function (message, variable) {\n            let data_form = message.get('data_form');\n            if (!data_form)\n                return;\n            let msg = $msg({type: 'chat'});\n            data_form.fields.forEach((field) => {\n                if (field.type  === 'boolean') {\n                    if (field.var === variable)\n                        field.values = [true];\n                    else\n                        field.values = [false];\n                }\n            });\n            msg = this.account.addDataFormToStanza(msg, data_form);\n            data_form.addresses.forEach((address) => {\n                if (address.type === 'replyto')\n                    $(msg.nodeTree).attr('to', address.jid);\n                this.account.sendMsg(msg);\n            });\n        },\n\n        setStanzaId: function (unique_id, stanza_id) {\n            let message = this.messages.get(unique_id),\n                origin_id = message.get('origin_id');\n            message.set('stanza_id', stanza_id);\n            if (!message.get('origin_id'))\n                this.item_view.content.$(`.chat-message[data-uniqueid=\"${stanza_id}\"]`).data('uniqueid', stanza_id)[0].setAttribute('data-uniqueid', stanza_id);\n            if (this.get('encrypted'))\n                this.account.omemo && this.account.omemo.updateMessage({stanza_id, origin_id}, this.contact);\n        },\n\n        getCallingAvailability: function (to, session_id, callback) {\n            let iq = $iq({to: to, type: 'get'})\n                .c('query', {xmlns: Strophe.NS.JINGLE_MSG})\n                .c('session', {id: session_id});\n            this.account.sendIQFast(iq, callback);\n        },\n\n        sendReject: function (options) {\n            !options && (options = {});\n            let msg_to = options.to || this.contact.get('jid'),\n                $reject_msg = $msg({\n                    type: 'chat',\n                    to: msg_to\n                })\n                    .c('reject', {xmlns: Strophe.NS.JINGLE_MSG, id: options.session_id})\n                    .c('call', {reason: options.reason}).up().up()\n                    .c('store', {xmlns: Strophe.NS.HINTS}).up()\n                    .c('markable').attrs({'xmlns': Strophe.NS.CHAT_MARKERS}).up()\n                    .c('origin-id', {id: uuid(), xmlns: 'urn:xmpp:sid:0'});\n            this.account.sendMsg($reject_msg);\n        },\n\n        initIncomingCall: function (full_jid, session_id) {\n            if (!xabber.get('audio')) {\n                this.messages.createSystemMessage({\n                    from_jid: this.account.get('jid'),\n                    message: xabber.getString(\"jingle__system_message__no_devices_to_answer\")\n                });\n                return;\n            }\n            xabber.current_voip_call = new xabber.JingleMessage({contact_full_jid: full_jid, session_id: session_id, call_initiator: this.contact.get('jid')}, {contact: this.contact, });\n            xabber.current_voip_call.modal_view.show({status: 'in'});\n            xabber.trigger('update_jingle_button');\n            if (xabber.body.screen.get('name') === 'all-chats' && !xabber.body.screen.get('right') && this.item_view)\n                this.item_view.open();\n        },\n\n        endCall: function (status) {\n            status && xabber.current_voip_call.set('status', status);\n            xabber.trigger('update_jingle_button');\n            xabber.current_voip_call.destroy();\n            xabber.current_voip_call = null;\n            xabber.trigger('update_jingle_button');\n        },\n\n        getAllMessageRetractions: function () {\n            if (!this.contact.get('group_chat'))\n                return;\n            let retractions_query = $iq({type: 'get', to: this.contact.get('jid')})\n                .c('query', {xmlns: Strophe.NS.REWRITE, version: this.retraction_version});\n            this.account.sendIQFast(retractions_query);\n        },\n\n        receiveMessage: function ($message, options) {\n            let from_bare_jid = Strophe.getBareJidFromJid($message.attr('from')),\n                carbon_copied = options.carbon_copied;\n            // searching chat marker message\n            let $marker = $message.children(`[xmlns=\"${Strophe.NS.CHAT_MARKERS}\"]`),\n                $receipt_request = $message.children(`request[xmlns=\"${Strophe.NS.RECEIPTS}\"]`),\n                $receipt_response = $message.children(`received[xmlns=\"${Strophe.NS.RECEIPTS}\"]`),\n                $jingle_msg_propose = $message.children(`propose[xmlns=\"${Strophe.NS.JINGLE_MSG}\"]`),\n                $jingle_msg_accept = $message.children(`accept[xmlns=\"${Strophe.NS.JINGLE_MSG}\"]`),\n                $jingle_msg_reject = $message.children(`reject[xmlns=\"${Strophe.NS.JINGLE_MSG}\"]`);\n            if ($jingle_msg_propose.length && !options.searched_message) {\n                if (carbon_copied && (from_bare_jid == this.account.get('jid'))) {\n                    return;\n                }\n                if (options.is_archived || options.synced_msg)\n                    return;\n                else {\n                    let session_id = $jingle_msg_propose.attr('id'),\n                        iq_to = $message.attr('from');\n                    this.getCallingAvailability(iq_to, session_id, () => {\n                        if (xabber.current_voip_call) {\n                            let reason = from_bare_jid === Strophe.getBareJidFromJid(xabber.current_voip_call.get('contact_full_jid')) ? 'device_busy' : 'busy';\n                            this.sendReject({session_id: session_id, reason: reason});\n                            this.messages.createSystemMessage({\n                                from_jid: this.account.get('jid'),\n                                message: xabber.getString(\"jingle__system_message__cancelled_call\")\n                            });\n                            return;\n                        }\n                        this.initIncomingCall(iq_to, session_id);\n                    });\n                }\n            }\n            if ($jingle_msg_accept.length) {\n                if (options.is_archived || options.synced_msg)\n                    return;\n                if (xabber.current_voip_call && xabber.current_voip_call.get('session_id') === $jingle_msg_accept.attr('id')) {\n                    if (carbon_copied)\n                        this.endCall();\n                    else {\n                        !xabber.current_voip_call.get('state') && xabber.current_voip_call.set('state', constants.JINGLE_MSG_ACCEPT);\n                        xabber.trigger('update_jingle_button');\n                        let jingle_start = $jingle_msg_accept.find('time').attr('stamp');\n                        jingle_start = jingle_start ? Number(moment(jingle_start)) : moment.now();\n                        xabber.current_voip_call.set('jingle_start', jingle_start);\n                        !xabber.current_voip_call.get('contact_full_jid') && xabber.current_voip_call.set('contact_full_jid', $message.attr('from'));\n                        xabber.stopAudio(xabber.current_voip_call.audio_notifiation);\n                        xabber.current_voip_call.set('status', 'connecting');\n                        xabber.trigger('update_jingle_button');\n                        xabber.current_voip_call.updateStatus(xabber.getString(\"dialog_jingle_message__status_connecting\"));\n                        xabber.current_voip_call.audio_notifiation = xabber.playAudio(xabber.settings.sound_on_connection);\n                    }\n                }\n            }\n            if ($jingle_msg_reject.length) {\n                if (this.messages.filter(m => m.get('session_id') === $jingle_msg_reject.attr('id')).length)\n                    return;\n                let time = options.delay && options.delay.attr('stamp') || $message.find('delay').attr('stamp') || $message.find('time').attr('stamp'), message, msg_text = \"\";\n                if ($jingle_msg_reject.children('call').length) {\n                    let duration = $jingle_msg_reject.children('call').attr('duration'),\n                        initiator = $jingle_msg_reject.children('call').attr('initiator');\n                    if (duration && initiator)\n                        msg_text =xabber.getString(((initiator && initiator === this.account.get('jid')) ? \"jingle__system_message__outgoing_call\" : \"jingle__system_message__incoming_call\"), [utils.pretty_duration(duration)]);\n                    else\n                        msg_text =  xabber.getString(\"jingle__system_message__cancelled_call\");\n                }\n                else\n                    msg_text =  xabber.getString(\"jingle__system_message__cancelled_call\");\n                options.is_unread && (options.reject_contact_stanza_id = options.contact_stanza_id);\n                message = this.messages.createSystemMessage({\n                    from_jid: this.account.get('jid'),\n                    time: time,\n                    session_id: $jingle_msg_reject.attr('id'),\n                    stanza_id: options.stanza_id,\n                    contact_stanza_id: options.reject_contact_stanza_id,\n                    is_unread: options.is_unread,\n                    message: msg_text\n                });\n                if (options.is_archived || options.synced_msg)\n                    return message;\n                if (xabber.current_voip_call && xabber.current_voip_call.get('session_id') === $jingle_msg_reject.attr('id')) {\n                    xabber.stopAudio(xabber.current_voip_call.audio_notifiation);\n                    let busy_audio = xabber.playAudio('busy');\n                    setTimeout(() => {\n                        xabber.stopAudio(busy_audio);\n                    }, 1500);\n                    this.endCall($jingle_msg_reject.children('call').attr('reason') == 'device_busy' ? 'device_busy' : $jingle_msg_reject.children('call').attr('reason') == 'busy' ? 'busy' : 'disconnected');\n                }\n                return message;\n            }\n            if (!options.is_archived) {\n                let $stanza_id, $contact_stanza_id;\n                $message.children('stanza-id').each((idx, stanza_id) => {\n                    stanza_id = $(stanza_id);\n                    if ($message.children(`x[xmlns=\"${Strophe.NS.GROUP_CHAT}\"]`).length) {\n                        if (stanza_id.attr('by') === from_bare_jid) {\n                            !$stanza_id && ($stanza_id = stanza_id);\n                            $contact_stanza_id = stanza_id;\n                        }\n                        else\n                            $stanza_id = stanza_id;\n                    }\n                    else {\n                        if (stanza_id.attr('by') === from_bare_jid)\n                            $contact_stanza_id = stanza_id;\n                        else\n                            $stanza_id = stanza_id;\n                    }\n                });\n                (!options.stanza_id && $stanza_id) && (options.stanza_id = $stanza_id.attr('id'));\n                (!options.contact_stanza_id && $contact_stanza_id) && (options.contact_stanza_id = $contact_stanza_id.attr('id'));\n            }\n            if ($marker.length) {\n                let marker_tag = $marker[0].tagName.toLowerCase();\n                if ((marker_tag === 'markable') && !options.is_mam && !options.is_archived && !carbon_copied && (!options.synced_msg || options.synced_msg && options.is_unread)) {\n                    this.sendMarker($message.attr('id'), 'received', options.stanza_id, options.contact_stanza_id);\n                    this.get('saved') && this.sendMarker($message.attr('id'), 'displayed', options.stanza_id, options.contact_stanza_id);\n                }\n                if ((marker_tag !== 'markable') && !carbon_copied) {\n                    this.receiveMarker($message, marker_tag, carbon_copied);\n                    return;\n                }\n                if ((marker_tag === 'displayed') && carbon_copied)\n                    this.receiveCarbonsMarker($marker);\n            }\n\n            if ($receipt_request.length && !options.is_mam && !options.is_archived && !carbon_copied && (!options.synced_msg || options.synced_msg && options.is_unread))\n                this.sendDeliveryReceipt($message);\n\n            if ($receipt_response.length)\n                this.receiveDeliveryReceipt($message);\n\n            if (!$message.find('body').length || $jingle_msg_propose.length || $jingle_msg_accept.length || $jingle_msg_reject.length) {\n                if (this.get('saved'))\n                    return;\n                let view = xabber.chats_view.child(this.contact.hash_id);\n                if (!view.content)\n                    view.content = new xabber.ChatContentView({chat_item: view});\n                if (view && view.content)\n                    view.content.receiveNoTextMessage($message, carbon_copied);\n                return;\n            }\n\n            if ($message.find('invite').length) {\n                if (from_bare_jid === this.account.get('jid'))\n                    return;\n                let group_jid = $message.find('invite').attr('jid') || $message.find('message').attr('from'),\n                    contact = this.account.contacts.get(group_jid), chat;\n                if (contact)\n                    if (contact.get('subscription') == 'both')\n                        return;\n                if (this.account.connection && this.account.connection.do_synchronization) {\n                    if (options.synced_msg || !options.synced_msg && !options.is_archived)\n                        return this.messages.createInvitationFromStanza($message, options);\n                } else {\n                    let iq = $iq({type: 'get'}).c('blocklist', {xmlns: Strophe.NS.BLOCKING});\n                    this.account.sendIQFast(iq, (iq) => {\n                            let items = $(iq).find('item'),\n                                current_timestamp = Number(moment($message.find('delay').attr('stamp') || $message.find('time').attr('stamp') || (options.delay) && Number(moment(options.delay.attr('stamp'))) || moment.now())),\n                                last_blocking_timestamp,\n                                has_blocking = false;\n                            if (items.length > 0) {\n                                items.each((idx, item) => {\n                                    let $item = $(item),\n                                        item_jid = $item.attr('jid'), blocking_timestamp = \"\";\n                                    if (item_jid.indexOf(group_jid) > -1) {\n                                        has_blocking = true;\n                                        blocking_timestamp = item_jid.substr(item_jid.lastIndexOf(\"/\") + 1, item_jid.length - group_jid.length);\n                                        if (!blocking_timestamp) {\n                                            last_blocking_timestamp = \"\";\n                                            return false;\n                                        } else if (!last_blocking_timestamp || last_blocking_timestamp < blocking_timestamp)\n                                            last_blocking_timestamp = blocking_timestamp;\n                                    }\n                                });\n                            }\n                            if (_.isUndefined(last_blocking_timestamp) || last_blocking_timestamp && last_blocking_timestamp < current_timestamp)\n                                return this.messages.createInvitationFromStanza($message, options);\n                        }, () => {\n                            return this.messages.createInvitationFromStanza($message, options);\n                        });\n                }\n            }\n            else\n                return this.messages.createFromStanza($message, options);\n        },\n\n        getMessageContext: function (unique_id, options) {\n            options = options || {};\n            let messages = options.mention && this.account.messages || options.searched_messages && this.account.searched_messages || options.message && xabber.all_searched_messages || this.account.messages,\n                message = messages.get(unique_id);\n            if (message) {\n                if (options.searched_messages)\n                    message.set('searched_message', false);\n                let stanza_id = message.get('stanza_id');\n                this.messages_view = new xabber.MessageContextView({\n                    contact: this.contact,\n                    mention_context: options.mention,\n                    model: this,\n                    stanza_id_context: stanza_id,\n                    encrypted: options.encrypted\n                });\n                this.account.context_messages.add(message);\n                this.messages_view.messagesRequest({after: stanza_id}, () => {\n                    let screen = 'all-chats';\n                    if (options.mention)\n                        screen = 'mentions';\n                    else if (options.message)\n                        screen = xabber.body.screen.get('name');\n                    xabber.body.setScreen(screen, {\n                        right: 'message_context',\n                        model: this,\n                    }, {\n                        right_contact_save: true\n                    });\n                });\n            }\n        },\n\n        sendDeliveryReceipt: function ($message) {\n            let $delivery_msg = $msg({\n                to: this.contact.get('jid'),\n                type: 'chat',\n                id: uuid()})\n                .c('received', { xmlns: Strophe.NS.RECEIPTS, id: $message.attr('id')});\n            this.account.sendMsg($delivery_msg);\n        },\n\n        sendMarker: function (msg_id, status, stanza_id, contact_stanza_id) {\n            status || (status = 'displayed');\n            let stanza = $msg({\n                to: this.get('jid'),\n                type: 'chat',\n                id: uuid()\n            }).c(status).attrs({\n                xmlns: Strophe.NS.CHAT_MARKERS,\n                id: msg_id || stanza_id || contact_stanza_id || \"\"\n            });\n            stanza_id && stanza.c('stanza-id', {xmlns: 'urn:xmpp:sid:0', id: stanza_id, by: this.account.get('jid')}).up();\n            (!this.get('saved') && contact_stanza_id) && stanza.c('stanza-id', {xmlns: 'urn:xmpp:sid:0', id: contact_stanza_id, by: this.contact.get('jid')}).up();\n            this.account.sendMsg(stanza);\n        },\n\n        receiveMarker: function ($message, tag, carbon_copied) {\n            let $displayed = $message.find('displayed'),\n                $received = $message.find('received'),\n                error = $message.attr('type') === 'error';\n            if (error || !$displayed.length && !$received.length)\n                return;\n            let marked_msg_id = $displayed.attr('id') || $received.attr('id'),\n                marked_stanza_id = $displayed.find(`stanza-id[by=\"${this.account.get('jid')}\"]`).attr('id') || $received.find(`stanza-id[by=\"${this.account.get('jid')}\"]`).attr('id'),\n                msg = this.account.messages.find(m => marked_stanza_id && (m.get('stanza_id') === marked_stanza_id || m.get('contact_stanza_id') === marked_stanza_id) || m.get('msgid') === marked_msg_id);\n            if (!msg) {\n                let enc_chat =  this.account.chats.get(`${this.id}:encrypted`),\n                    enc_msg = enc_chat && enc_chat.messages.find(m => marked_stanza_id && (m.get('stanza_id') === marked_stanza_id || m.get('contact_stanza_id') === marked_stanza_id) || m.get('msgid') === marked_msg_id);\n                if (enc_msg)\n                    enc_chat.receiveMarker($message, tag, carbon_copied);\n                return;\n            }\n            if (msg.isSenderMe()) {\n                if ($received.length) {\n                    let msg_state = msg.get('state');\n                    if (msg_state === constants.MSG_ERROR){\n                        msg.set('state', constants.MSG_DELIVERED)\n                        return;\n                    }\n                    if (msg_state !== constants.MSG_DISPLAYED) {\n                        let delivered_time = $received.children('time').attr('stamp');\n                        if (delivered_time) {\n                            msg.set('time', pretty_datetime(delivered_time));\n                            msg.set('timestamp', Number(delivered_time));\n                        }\n                    }\n                    this.setMessagesDelivered(msg.get('timestamp'));\n                } else {\n                    let msg_state = msg.get('state');\n                    if (msg_state === constants.MSG_ERROR){\n                        msg.set('state', constants.MSG_DISPLAYED)\n                        return;\n                    }\n                    this.setMessagesDisplayed(msg.get('timestamp'));\n                }\n            } else {\n                msg.set('is_unread', false);\n            }\n        },\n\n        setMessagesDelivered: function (timestamp) {\n            !timestamp && (timestamp = moment.now());\n            let undelivered_messages = this.messages.filter(message => message.isSenderMe() && (message.get('timestamp') <= timestamp) && (message.get('state') > constants.MSG_PENDING) && (message.get('state') < constants.MSG_DELIVERED));\n            if (!undelivered_messages.length) {\n                let chat =  this.account.chats.get(this.id + ':encrypted');\n                chat && (undelivered_messages = chat.messages.filter(message => message.isSenderMe() && (message.get('timestamp') <= timestamp) && (message.get('state') > constants.MSG_PENDING) && (message.get('state') < constants.MSG_DELIVERED)));\n            }\n            undelivered_messages.forEach(message => message.set('state', constants.MSG_DELIVERED));\n        },\n\n        setMessagesDisplayed: function (timestamp) {\n            !timestamp && (timestamp = moment.now());\n            let undelivered_messages = this.messages.filter(message => message.isSenderMe() && (message.get('timestamp') <= timestamp) && (message.get('state') > constants.MSG_PENDING) && (message.get('state') < constants.MSG_DISPLAYED));\n            if (!undelivered_messages.length) {\n                let chat =  this.account.chats.get(this.id + ':encrypted');\n                chat && (undelivered_messages = chat.messages.filter(message => message.isSenderMe() && (message.get('timestamp') <= timestamp) && (message.get('state') > constants.MSG_PENDING) && (message.get('state') < constants.MSG_DISPLAYED)));\n            }\n            undelivered_messages.forEach(message => message.set('state', constants.MSG_DISPLAYED));\n        },\n\n        receiveCarbonsMarker: function ($marker) {\n            let stanza_id = $marker.children(`stanza-id[by=\"${this.account.get('jid')}\"]`).attr('id'),\n                msg_id = $marker.attr('id'),\n                msg = this.messages.find(m => stanza_id && (m.get('stanza_id') === stanza_id || m.get('contact_stanza_id') === stanza_id) || m.get('msgid') === msg_id), msg_idx;\n            msg && (msg_idx = this.messages.indexOf(msg));\n            if (!msg) {\n                let enc_chat =  this.account.chats.get(this.id + ':encrypted'),\n                    enc_msg = enc_chat && enc_chat.messages.find(m => stanza_id && (m.get('stanza_id') === stanza_id || m.get('contact_stanza_id') === stanza_id) || m.get('msgid') === msg_id);\n                if (enc_msg)\n                    enc_chat.receiveCarbonsMarker($marker);\n                return;\n            }\n            if (msg_idx > -1) {\n                this.set('const_unread', 0);\n                for (let i = msg_idx; i >= 0; i--) {\n                    let message = this.messages.models[i];\n                    message.set('is_unread', false);\n                }\n            }\n            else {\n                let unread_msg = this.messages_unread.find(m => m.get('stanza_id') === stanza_id || m.get('contact_stanza_id') === stanza_id || m.get('msgid') === msg_id);\n                unread_msg && unread_msg.set('is_unread', false);\n            }\n        },\n\n        receiveDeliveryReceipt: function ($message) {\n            let $received = $message.find('received'),\n                delivered_origin_id = $received.attr('id'),\n                delivered_stanza_id = $received.children(`stanza-id[by=\"${this.account.get('jid')}\"]`).attr('id'),\n                msg = this.account.messages.get(delivered_origin_id || delivered_stanza_id);\n            if (!msg)\n                return;\n            msg.isSenderMe() && msg.set('state', constants.MSG_DELIVERED);\n        },\n\n        onPresence: function (type) {\n            let jid = this.get('jid');\n            if (!this.contact.get('group_chat') && !this.contact.get('in_roster')) {\n                if (type === 'subscribe') {\n                    this.messages.createSystemMessage({\n                        from_jid: jid,\n                        auth_request: true,\n                        message: xabber.getString(\"action_subscription_received\")\n                    });\n                }\n            }\n        },\n\n        onRosterPush: function (type) {\n            let jid = this.get('jid');\n            // not used\n            if (type === 'remove')\n                this.messages.createSystemMessage({\n                    from_jid: jid,\n                    silent: false,\n                    message: xabber.getString(\"action_contact_deleted\")\n                });\n\n        },\n\n        retractMessages: function (msgs, group_chat, symmetric) {\n            let msgs_responses = 0, count = msgs.length, dfd = new $.Deferred();\n            dfd.done((num) => {\n                if (num === 0) {\n                    utils.dialogs.error(xabber.getString(\"groupchat_you_have_no_permissions_to_do_it\"));\n                }\n                else if (num !== msgs.length) {\n                    utils.dialogs.error(xabber.getString(\"groupchat_you_have_no_permissions_to_do_it\"));\n                }\n            });\n            $(msgs).each((idx, item) => {\n                let stanza_id = item.get('stanza_id'),\n                    contact_stanza_id = item.get('contact_stanza_id');\n                if (stanza_id || contact_stanza_id) {\n                    let iq_retraction = $iq({type: 'set', to: group_chat ? (this.contact.get('full_jid') || this.contact.get('jid')) : this.account.get('jid')})\n                        .c('retract-message', {id: (this.get('group_chat') && contact_stanza_id || stanza_id), xmlns: Strophe.NS.REWRITE, symmetric: symmetric, by: this.account.get('jid')});\n                    this.account.sendIQFast(iq_retraction, (success) => {\n                            this.item_view.content.removeMessage(item);\n                            msgs_responses++;\n                            (msgs_responses === msgs.length) && dfd.resolve(count);\n                        }, (error) => {\n                            msgs_responses++;\n                            if ($(error).find('not-allowed').length)\n                                count--;\n                            (msgs_responses === msgs.length) && dfd.resolve(count);\n                        });\n                }\n            });\n        },\n\n        retractMessagesByUser: function (user_id) {\n            let iq_retraction = $iq({type: 'set', to: this.contact.get('full_jid') || this.contact.get('jid')})\n                .c('retract-user', {id: user_id, xmlns: Strophe.NS.REWRITE, symmetric: true});\n            this.account.sendIQFast(iq_retraction, (success) => {\n                let user_msgs = this.messages.filter(msg => msg.get('user_info') && (msg.get('user_info').id == user_id));\n                $(user_msgs).each((idx, msg) => {\n                    this.item_view.content.removeMessage(msg);\n                });\n            }, (error) => {\n                if ($(error).find('not-allowed').length)\n                    utils.dialogs.error(xabber.getString(\"groupchat_you_have_no_permissions_to_do_it\"));\n            });\n        },\n\n        retractAllMessages: function (symmetric, callback, errback) {\n            let is_group_chat = this.get('group_chat'),\n                iq_retraction = $iq({type: 'set', to: is_group_chat ? (this.contact.get('full_jid') || this.contact.get('jid')) : this.account.get('jid')}),\n                retract_attrs = {xmlns: Strophe.NS.REWRITE, symmetric: symmetric};\n            !is_group_chat && (retract_attrs.conversation = this.get('jid'));\n            this.get('encrypted') && (retract_attrs.type = 'encrypted');\n            iq_retraction.c('retract-all', retract_attrs);\n            this.account.sendIQFast(iq_retraction, (iq_response) => {\n                let all_messages = this.messages.models;\n                $(all_messages).each((idx, msg) => {\n                    this.item_view.content.removeMessage(msg);\n                });\n                callback && callback();\n            }, (error) => {\n                if ($(error).find('not-allowed').length)\n                    utils.dialogs.error(xabber.getString(\"groupchat_you_have_no_permissions_to_do_it\"));\n                errback && errback();\n            });\n        },\n\n        showBlockedRequestMessage: function () {\n            if (this.messages.length)\n                this.messages.createSystemMessage({\n                    from_jid: this.account.get('jid'),\n                    message: xabber.getString(\"action_contact_blocked\"),\n                    time: this.messages.last().get('time')\n                });\n        },\n\n        muteChat: function (muted_seconds) {\n            let muted = this.isMuted(),\n                is_muted = muted && muted !== '0' ? true : false,\n                muted_value = is_muted ? '' : '0';\n            if (muted_seconds || muted_seconds === '')\n                muted_value = muted_seconds;\n            let conversation_options = {\n                jid: this.contact.get('jid'),\n                mute: muted_value,\n                type: this.get('sync_type') ? this.get('sync_type') : this.getConversationType(this)\n            },\n            iq = $iq({type: 'set', to: this.account.get('jid')})\n                .c('query', {xmlns: Strophe.NS.SYNCHRONIZATION})\n                .c('conversation', conversation_options);\n            this.account.sendIQFast(iq);\n        },\n\n        getConversationType: function (chat) {\n            if(chat.get('encrypted'))\n                return Strophe.NS.SYNCHRONIZATION_OMEMO;\n            if(chat.contact.get('group_chat'))\n                return Strophe.NS.GROUP_CHAT;\n            return Strophe.NS.SYNCHRONIZATION_REGULAR_CHAT\n        },\n\n        deleteFromSynchronization: function (callback, errback) {\n            let conversation_options = {jid: this.get('jid'), status: 'deleted', type: this.get('sync_type') ? this.get('sync_type') : this.getConversationType(this) };\n            this.account.cached_sync_conversations.removeFromCachedConversations(conversation_options.jid +  '/' + conversation_options.type);\n            let iq = $iq({type: 'set', to: this.account.get('jid')})\n                .c('query', {xmlns: Strophe.NS.SYNCHRONIZATION})\n                .c('conversation', conversation_options);\n            this.account.sendIQFast(iq, (success) => {\n                callback && callback(success);\n            }, (error) => {\n                errback && errback(error);\n            });\n        }\n    });\n\n    xabber.ChatItemView = xabber.BasicView.extend({\n        className: 'chat-item list-item',\n        template: templates.chat_item,\n        avatar_size: constants.AVATAR_SIZES.CHAT_ITEM,\n\n        events: {\n            'click': 'openByClick'\n        },\n\n        _initialize: function () {\n            this.account = this.model.account;\n            this.contact = this.model.contact;\n            this.message_counter = 0;\n            this.$el.attr('data-id', this.model.id);\n            if (!this.model.sync_created)\n                this.content = new xabber.ChatContentView({chat_item: this});\n            this.updateName();\n            this.updateStatus();\n            this.updateCounter();\n            this.updateAvatar();\n            this.updateMutedState();\n            this.updatePinned();\n            this.updateArchivedState();\n            this.updateColorScheme();\n            this.updateGroupChats();\n            this.updateIcon();\n            this.updateEncrypted();\n            this.updateChatError();\n            this.model.on(\"change:active\", this.updateActiveStatus, this);\n            this.model.on(\"change:unread\", this.updateCounter, this);\n            this.model.on(\"change:encrypted\", this.updateEncrypted, this);\n            this.model.on(\"change:const_unread\", this.updateCounter, this);\n            this.model.on(\"change:pinned\", this.updatePinned, this);\n            this.model.on(\"change:archived\", this.updateArchivedState, this);\n            this.model.on(\"change:muted\", this.updateMutedState, this);\n            this.model.on(\"open\", this.open, this);\n            this.model.on(\"remove_opened_chat\", this.onClosed, this);\n            this.model.messages.on(\"add\", this.updateChatCard, this);\n            this.model.messages.on(\"destroy\", this.onMessageRemoved, this);\n            this.model.messages.on(\"change:state\", this.onChangedMessageState, this);\n            if (this.contact) {\n                this.updateIncomingSubscription();\n                this.contact.on(\"change:name\", this.updateName, this);\n                this.contact.on(\"change:invitation\", this.updateIncomingSubscription, this);\n                this.contact.on(\"change:subscription\", this.updateIncomingSubscription, this);\n                this.contact.on(\"change:subscription_request_in\", this.updateIncomingSubscription, this);\n                this.contact.on(\"change:subscription_request_out\", this.updateIncomingSubscription, this);\n                this.contact.on(\"change:status\", this.updateStatus, this);\n                this.contact.on(\"change:private_chat\", this.updateIcon, this);\n                this.contact.on(\"change:invitation\", this.updateIcon, this);\n                this.contact.on(\"change:incognito_chat\", this.updateIcon, this);\n                this.contact.on(\"change:image\", this.updateAvatar, this);\n                this.contact.on(\"change:blocked\", this.onBlocked, this);\n                this.contact.on(\"change:group_chat\", this.updateGroupChats, this);\n                this.contact.on(\"change:in_roster\", this.updateAcceptedStatus, this);\n                this.contact.on(\"remove_invite\", this.removeInvite, this);\n                this.contact.on(\"update_trusted\", this.updateEncryptedColor, this);\n            }\n            this.$el.switchClass('saved-chat', this.model.get('saved'));\n            this.$el.find('.circle-avatar').switchClass('ground-color-700', this.model.get('saved'));\n            this.model.get('saved') && this.$el.find('.circle-avatar').html(env.templates.svg['saved-messages']());\n            this.account.settings.on(\"change:color\", this.updateColorScheme, this);\n        },\n\n        updateChatCard: function (msg) {\n            if (this.content){\n                return;\n            }\n            if (this.message_counter == 0 ){\n                this.message_counter++;\n                return\n            }\n            this.content = new xabber.ChatContentView({ chat_item: this, new_message: msg });\n            this.updateLastMessage(msg);\n            return;\n        },\n\n        onChangedMessageState: function (message) {\n            if (message.get('state') === constants.MSG_DISPLAYED && this.model.get('last_displayed_id') < message.get('stanza_id')) {\n                this.model.set('last_displayed_id', message.get('stanza_id'));\n                this.model.set('last_delivered_id', message.get('stanza_id'));\n            } else if (message.get('state') === constants.MSG_DELIVERED && this.model.get('last_delivered_id') < message.get('stanza_id')) {\n                this.model.set('last_delivered_id', message.get('stanza_id'));\n            }\n            if (this.content) {\n                let $message = this.content.$(`.chat-message[data-uniqueid=\"${message.get('unique_id')}\"]`),\n                    $elem = $message.find('.msg-delivering-state');\n                $elem.attr({\n                    'data-state': message.getState(),\n                    'title': message.getVerboseState()\n                });\n                ($elem.attr('data-state') === constants.MSG_STATE[constants.MSG_ERROR]) && $elem.dropdown({\n                    inDuration: 100,\n                    outDuration: 100,\n                    constrainWidth: false,\n                    hover: false,\n                    alignment: 'left'\n                });\n            }\n            if (message === this.model.last_message) {\n                this.updateLastMessage();\n            }\n            this.updateChatError();\n        },\n\n        updateName: function () {\n            if (this.model.get('saved')) {\n                this.$('.chat-title').text(xabber.getString(\"saved_messages__header\"));\n                return;\n            }\n            this.$('.chat-title').text(this.contact.get('name'));\n        },\n\n        updateStatus: function () {\n            if (this.model.get('saved'))\n                return;\n            let status = this.contact.get('status');\n            this.$('.status').attr('data-status', status);\n            this.$('.chat-icon').attr('data-status', status);\n        },\n\n        updateActiveStatus: function () {\n            this.$el.switchClass('active', this.model.get('active'));\n        },\n\n        updateAcceptedStatus: function () {\n            let in_roster = this.contact.get('in_roster');\n            if (in_roster)\n                this.model.set('is_accepted', true);\n        },\n\n        onBlocked: function () {\n            this.updateIcon();\n            this.$el.switchClass('blocked', this.model.get('blocked'));\n        },\n\n        updateCounter: function () {\n            let unread = this.model.get('unread') + this.model.get('const_unread');\n            this.$('.msg-counter').showIf(unread).text(unread || '');\n            this.updateTextClipping();\n        },\n\n        updateIncomingSubscription: function () {\n            this.$('.msg-incoming-subscription').showIf(this.contact.get('invitation') || (this.contact.get('subscription_request_in') && this.contact.get('subscription') != 'both'));\n            this.updateTextClipping();\n        },\n\n        updateChatError: function () {\n            let error_msgs = this.model.messages.filter(m => m.get('state') === -1)\n            this.$('.msg-chat-error').showIf(error_msgs.length);\n            this.updateTextClipping();\n        },\n\n        updateTextClipping: function () {\n            let indicators_count = this.$('.chat-item-notifications-wrap').children(':not(.hidden)').length;\n            this.$('.last-msg').switchClass('triple-indicators', indicators_count === 3)\n            this.$('.last-msg').switchClass('quad-indicators', indicators_count === 4)\n        },\n\n        updateAvatar: function () {\n            if (this.model.get('saved'))\n                return;\n            let image = this.contact.cached_image;\n            this.$('.circle-avatar').setAvatar(image, this.avatar_size);\n        },\n\n        updateEncrypted: function () {\n            this.$el.switchClass('encrypted', this.model.get('encrypted'));\n        },\n\n        updatePinned: function () {\n            let is_pinned = this.model.get('pinned');\n            this.$('.pinned-icon').showIf(is_pinned && is_pinned !== '0');\n            if (is_pinned)\n                xabber.chats_view.updateChatPosition(this.model);\n        },\n\n        updateEncryptedColor: function (encrypted) {\n            this.$el.attr('data-trust', encrypted);\n        },\n\n        updateIcon: function () {\n            if (!this.contact)\n                return;\n            this.$('.chat-icon').addClass('hidden');\n            let ic_name = this.contact.getIcon();\n            ic_name && this.$('.chat-icon').removeClass('hidden group-invite blocked').switchClass(ic_name, (ic_name == 'group-invite' || ic_name == 'server' || ic_name == 'blocked')).html(env.templates.svg[ic_name]());\n        },\n\n        updateMutedState: function () {\n            if (!this.contact)\n                return;\n            this.$('.msg-counter').switchClass('muted-chat-counter', this.model.isMuted());\n            this.$('.muted-icon').switchClass('mdi-bell-off', (this.model.isMuted() > 4800000000)).switchClass('mdi-bell-sleep', (this.model.isMuted() <= 4800000000));\n            this.$('.muted-icon').showIf(this.model.isMuted());\n        },\n\n        updateArchivedState: function () {\n            if (!this.contact)\n                return;\n            let archived = this.model.get('archived');\n            if (archived || (!archived && xabber.toolbar_view.$('.active').hasClass('archive-chats')))\n                this.$el.detach();\n            if (archived && xabber.toolbar_view.$('.active').hasClass('archive-chats') || !archived && !xabber.toolbar_view.$('.active').hasClass('archive-chats'))\n                xabber.chats_view.updateChatPosition(this.model);\n        },\n\n        updateGroupChats: function () {\n            if (!this.contact)\n                return;\n            let is_group_chat = this.contact.get('group_chat');\n            this.$('.status').hideIf(is_group_chat);\n            this.$('.chat-icon').showIf(is_group_chat);\n            this.updateIcon();\n            if (is_group_chat) {\n                this.$el.addClass('group-chat');\n                this.model.set('group_chat', true);\n            }\n        },\n\n        updateColorScheme: function () {\n            let color = this.account.settings.get('color');\n            this.$el.attr('data-color', color);\n        },\n\n        onMessageRemoved: function (msg) {\n            if (this.model.last_message === msg) {\n                let last_message;\n                for (let idx = this.model.messages.length-1; idx >= 0; idx--) {\n                    last_message = this.model.messages.at(idx);\n                    if (!last_message.get('silent'))\n                        break;\n                }\n                this.model.last_message = last_message;\n                this.updateLastMessage();\n            }\n            this.deletePlayersFromMessage(msg);\n        },\n\n        deletePlayersFromMessage: function (message) {\n            let players = []\n            message.get('msg_player_videos') && (players = players.concat(message.get('msg_player_videos')));\n            message.get('msg_player_audios') && (players = players.concat(message.get('msg_player_audios')));\n            if (players.length){\n                if (xabber.current_plyr_player){\n                    let is_current_player = xabber.current_plyr_player.is_popup ?\n                        players.includes(xabber.current_plyr_player.chat_item.model.plyr_players[xabber.current_plyr_player.player_index])\n                        : players.includes(xabber.current_plyr_player);\n\n                    if (is_current_player){\n                        xabber.plyr_players.forEach((item) => {\n                            if (item.$audio_elem){\n                                if (item.$audio_elem.voice_message)\n                                    item.$audio_elem.voice_message.stopTime()\n                            }\n                            else\n                                item.stop();\n                        })\n                        if (xabber.current_plyr_player.is_popup && xabber.plyr_player_popup){\n                            xabber.plyr_player_popup.closePopup();\n                        } else {\n                            xabber.current_plyr_player = null;\n                            xabber.trigger('plyr_player_updated');\n                        }\n                    }\n                }\n                this.model.plyr_players = this.model.plyr_players.filter((obj) => !players.includes(obj));\n                xabber.plyr_players = xabber.plyr_players.filter((obj) => !players.includes(obj));\n                xabber.trigger('plyr_player_updated');\n            }\n        },\n\n        updateEmptyChat: function () {\n            let msg_time = this.model.get('timestamp'),\n                is_empty = Number(this.model.get('last_delivered_id')) || Number(this.model.get('last_displayed_id')) || Number(this.model.get('last_read_msg'));\n            this.$('.last-msg').html(xabber.getString(is_empty ? \"recent_chat__last_message_retracted\" : \"no_messages\").italics());\n            this.$('.last-msg-date').text(utils.pretty_short_datetime_recent_chat(msg_time))\n                .attr('title', pretty_datetime(msg_time));\n        },\n\n        updateEncryptedChat: function () {\n            let msg_time = this.model.get('timestamp');\n            this.$('.last-msg').html(xabber.getString(\"recent_chat__decrypting_messages\").italics());\n            this.$('.last-msg-date').text(utils.pretty_short_datetime_recent_chat(msg_time))\n                .attr('title', pretty_datetime(msg_time));\n        },\n\n        updateLastMessage: function (msg) {\n            msg || (msg = this.model.last_message);\n            if (!msg) {\n                !this.model.messages.length && this.updateEmptyChat();\n                return;\n            }\n            let msg_time = msg.get('time'),\n                timestamp = msg.get('timestamp'), msg_from = \"\",\n                forwarded_message = msg.get('forwarded_message'),\n                msg_files = msg.get('files') || [],\n                msg_images = msg.get('images') || [],\n                msg_locations = msg.get('locations') || [],\n                msg_text = forwarded_message ? (msg.get('message') || xabber.getQuantityString(\"forwarded_messages_count\", forwarded_message.length).italics()) : msg.getText(),\n                msg_user_info = msg.get('user_info') || msg.isSenderMe() && this.contact && this.contact.my_info && this.contact.my_info.attributes || {};\n            msg.get('videos') && msg.get('videos').length && (msg_files = msg_files.concat(msg.get('videos')));\n            this.model.set({timestamp: timestamp});\n            if (this.model.get('group_chat'))\n                msg_from = msg_user_info.nickname || msg_user_info.jid || (msg.isSenderMe() ? this.account.get('name') : msg.get('from_jid')) || \"\";\n            msg_from && (msg_from = $('<span class=text-color-700/>').text(msg_from + ': '));\n            if (msg_files.length || msg_images.length || msg_locations.length) {\n                let $colored_span = $('<span class=\"text-color-500\"/>');\n                if (msg.get('type') === 'file_upload') {\n                    msg_images = msg_files.filter(f => f && f.type && utils.isImageType(f.type));\n                    msg_files = msg_files.filter(f => f && !(f.type && utils.isImageType(f.type)));\n                }\n                if (msg_files.length && msg_images.length)\n                    msg_text = $colored_span.text(xabber.getString(\"recent_chat__last_message__attachments\", [msg_files.length + msg_images.length]));\n                else {\n                    if (msg_files.length == 1 && (msg_files[0].is_audio || msg_files[0].voice))\n                        msg_text = $colored_span.text(`${xabber.getString(\"voice_message\")}, ` + utils.pretty_duration(msg_files[0].duration));\n                    else if (msg_files.length > 0) {\n                        let total_size = 0;\n                        msg_files.forEach((f) => {total_size+=Number(f.size)});\n                        msg_text = $colored_span.text(xabber.getQuantityString(\"recent_chat__last_message__files\", msg_files.length) + (total_size > 0 ? `, ${utils.pretty_size(total_size)}` : \"\"));\n                    }\n                    if (msg_images.length > 0) {\n                        let total_size = 0;\n                        msg_images.forEach((f) => {total_size+=Number(f.size)});\n                        msg_text = $colored_span.text(xabber.getQuantityString(\"recent_chat__last_message__images\", msg_images.length) + (total_size > 0 ? `, ${utils.pretty_size(total_size)}` : \"\"));\n                    }\n                    if (msg_locations.length > 0) {\n                        msg_text = $colored_span.text(xabber.getQuantityString(\"recent_chat__last_message__locations\", msg_locations.length));\n                    }\n                }\n                this.$('.last-msg').html(\"\").append(msg_from).append(msg_text);\n            }\n            else {\n                if (msg.get('type') == 'system') {\n                    msg_from = \"\";\n                    if (msg.get('invite'))\n                        msg_text = xabber.getString(\"groupchat_invitation_to_group_chat\", [(this.contact && this.contact.get('incognito_chat')) ? 'incognito' : 'public']);\n                    msg.get('private_invite') && (msg_text = xabber.getString(\"recent_chat__last_message__private_invitation\"));\n                    if (this.model.get('group_chat'))\n                        msg_text = $('<i/>').text(msg_text);\n                    else\n                        msg_text = $('<span class=text-color-500/>').text(msg_text);\n                    this.$('.last-msg').html(msg_text);\n                    if (msg.get('auth_request')){\n                        xabber.toolbar_view.recountAllMessageCounter();\n                    }\n                }\n                else {\n                    if (forwarded_message) {\n                        if (msg.get('message')) {\n                            msg_text = msg.get('message');\n                            this.$('.last-msg').text(msg_text);\n                        }\n                        else {\n                            let first_forwarded_msg = forwarded_message[0];\n                            if (first_forwarded_msg.get('message')) {\n                                let fwd_msg_files = first_forwarded_msg.get('files') || [],\n                                    fwd_msg_images = first_forwarded_msg.get('images') || [],\n                                    fwd_msg_locations = first_forwarded_msg.get('locations') || [];\n                                first_forwarded_msg.get('videos') && first_forwarded_msg.get('videos').length && (fwd_msg_files = fwd_msg_files.concat(first_forwarded_msg.get('videos')));\n                                if (fwd_msg_files.length || fwd_msg_images.length || fwd_msg_locations.length) {\n                                    let $colored_span = $('<span class=\"text-color-500\"/>');\n                                    if (msg.get('type') === 'file_upload') {\n                                        fwd_msg_images = fwd_msg_files.filter(f => f.type && utils.isImageType(f.type));\n                                        fwd_msg_files = fwd_msg_files.filter(f => !(f.type && utils.isImageType(f.type)));\n                                    }\n                                    if (fwd_msg_files.length && fwd_msg_images.length)\n                                        msg_text = $colored_span.text(xabber.getString(\"recent_chat__last_message__attachments\", [fwd_msg_files.length + fwd_msg_images.length]));\n                                    else {\n                                        if (fwd_msg_files.length == 1 && (fwd_msg_files[0].is_audio || fwd_msg_files[0].voice))\n                                            msg_text = $colored_span.text(`${xabber.getString(\"voice_message\")}, ` + utils.pretty_duration(fwd_msg_files[0].duration));\n                                        else if (fwd_msg_files.length > 0) {\n                                            let total_size = 0;\n                                            fwd_msg_files.forEach((f) => {total_size+=Number(f.size)});\n                                            msg_text = $colored_span.text(xabber.getQuantityString(\"recent_chat__last_message__files\", fwd_msg_files.length) + (total_size > 0 ? `, ${utils.pretty_size(total_size)}` : \"\"));\n                                        }\n                                        if (fwd_msg_images.length > 0) {\n                                            let total_size = 0;\n                                            fwd_msg_images.forEach((f) => {total_size+=Number(f.size)});\n                                            msg_text = $colored_span.text(xabber.getQuantityString(\"recent_chat__last_message__images\", fwd_msg_images.length) + (total_size > 0 ? `, ${utils.pretty_size(total_size)}` : \"\"));\n                                        }\n                                        if (fwd_msg_locations.length > 0) {\n                                            msg_text = $colored_span.text(xabber.getQuantityString(\"recent_chat__last_message__locations\", fwd_msg_locations.length));\n                                        }\n                                    }\n                                    if (this.model.get('group_chat')) {\n                                        this.$('.last-msg').html(\"\").append(msg_from).append('» ').append(msg_text);\n                                    } else {\n                                        this.$('.last-msg').html(\"» \").append(msg_text);\n                                    }\n                                } else if (this.model.get('group_chat')) {\n                                    msg_text = first_forwarded_msg.get('message');\n                                    msg_text = '» ' + msg_text;\n                                    this.$('.last-msg').text(msg_text);\n                                } else {\n                                    msg_text = first_forwarded_msg.get('message');\n                                    this.$('.last-msg').text(msg_text);\n                                    msg_from = '» ';\n                                }\n                            }\n                            else {\n                                if (forwarded_message.length === 1) {\n                                    let fwd_msg_txt = xabber.getQuantityString(\"forwarded_messages_count\", forwarded_message.length).slice(2)\n                                    fwd_msg_txt = fwd_msg_txt.charAt(0).toUpperCase() + fwd_msg_txt.slice(1)\n                                    msg_text = $('<i/>').text(fwd_msg_txt);\n                                    this.$('.last-msg').html('» ').append(msg_text);\n                                }\n                                else {\n                                    msg_text = $('<i/>').text(xabber.getQuantityString(\"forwarded_messages_count\", forwarded_message.length));\n                                    this.$('.last-msg').html('» ').append(msg_text);\n                                }\n                            }\n                        }\n                    }\n                    else {\n                        msg_text = msg.getText();\n                        this.$('.last-msg').text(msg_text);\n                    }\n                }\n                this.$('.last-msg').prepend(msg_from);\n            }\n            this.$el.emojify('.last-msg', {emoji_size: 16}).hyperlinkify({decode_uri: true});\n            this.$('.last-msg-date').text(utils.pretty_short_datetime_recent_chat(msg_time))\n                .attr('title', pretty_datetime(msg_time));\n            this.$('.msg-delivering-state').showIf(msg.get('type') !== 'system' && msg.isSenderMe() && (msg.get('state') !== constants.MSG_ARCHIVED))\n                .attr('data-state', msg.getState());\n        },\n\n        openByClick: function () {\n            this.open();\n        },\n\n        open: function (options) {\n            if (!this.content){\n                this.content = new xabber.ChatContentView({chat_item: this});\n            }\n            options || (options = {right_contact_save: true, clear_search: false});\n            xabber.chats_view.openChat(this, options);\n            this.content.bottom.click_counter = 0;\n            this.content.bottom.setDefaultPlaceholder();\n        },\n\n        removeInvite: function (options) {\n            if (!this.account.server_features.get(Strophe.NS.REWRITE))\n                return;\n            options || (options = {});\n            let msgs = _.clone(this.model.messages.models);\n            this.model.set({'last_archive_id': undefined, 'first_archive_id': undefined});\n            msgs.forEach((item) => {\n                if (item.get('invite')) {\n                    let iq_retraction = $iq({type: 'set', to: this.account.get('jid')})\n                        .c('retract-message', {\n                            id: item.get('stanza_id'),\n                            xmlns: Strophe.NS.REWRITE,\n                            symmetric: false,\n                            by: this.account.get('jid')\n                        });\n                    this.account.sendIQFast(iq_retraction);\n                    item && this.content.removeMessage(item);\n                }\n            });\n            this.model.recountUnread();\n            delete this.contact.attributes.invitation;\n            this.updateIcon();\n        },\n\n        onClosed: function () {\n            this.parent.onChatRemoved(this.model, {soft: true});\n        }\n    });\n\n      xabber.MessagesView = xabber.BasicView.extend({\n          template: templates.chat_content,\n          ps_selector: '.chat-content',\n          ps_settings: {\n              wheelPropagation: true\n          },\n          avatar_size: constants.AVATAR_SIZES.CHAT_MESSAGE,\n\n          _initialize: function (options) {\n              this.model = options.model;\n              this.contact = options.contact;\n              this.account = this.model.account;\n              let color = this.account.settings.get('color');\n              this.$el.attr('data-color', color);\n              this.$search_form = this.$('.search-form-header');\n              this.loading_history = false;\n              this.history_loaded = false;\n              this.first_msg_id = 0;\n              this.last_msg_id = 0;\n              this._scrolltop = this.getScrollTop();\n              this.ps_container.on(\"ps-scroll-up ps-scroll-down\", this.onScroll.bind(this));\n              this.chat_content = options.chat_content || this.model.item_view.content;\n              let wheel_ev = this.defineMouseWheelEvent();\n              this.$el.on(wheel_ev, this.onMouseWheel.bind(this));\n              this.$('.back-to-bottom').click(this.backToBottom.bind(this));\n          },\n\n          defineMouseWheelEvent: function () {\n              if (!_.isUndefined(window.onwheel)) {\n                  return \"wheel\";\n              } else if (!_.isUndefined(window.onmousewheel)) {\n                  return \"mousewheel\";\n              } else {\n                  return \"MozMousePixelScroll\";\n              }\n          },\n\n          keyupSearch: function (ev) {\n              if (ev.keyCode === constants.KEY_ENTER) {\n                  let query = this.$search_form.find('input').val();\n                  this.model.searchMessages(query, (messages) => {\n                  });\n              }\n              if (ev.keyCode === constants.KEY_ESCAPE && !xabber.body.screen.get('right_contact')) {\n                  this.chat_content.head.renderSearchPanel();\n              }\n          },\n\n          onMouseWheel: function (ev) {\n              this.$('.back-to-bottom').hideIf(this.isScrolledToBottom());\n          },\n\n          onClickMessage:function (ev) {\n              this.chat_content.onClickMessage(ev);\n          },\n\n          onClickLink:function (ev) {\n              this.chat_content.onClickLink(ev);\n          },\n\n          onClickLocationLink:function (ev) {\n              this.chat_content.onClickLocationLink(ev);\n          },\n\n          onClickLocation:function (ev) {\n              this.chat_content.onClickLocation(ev);\n          },\n\n          onHoverLocation:function (ev) {\n              this.chat_content.onHoverLocation(ev);\n          },\n\n          onScroll: function () {\n              this.$('.back-to-bottom').hideIf(this.isScrolledToBottom());\n              this._prev_scrolltop = this._scrolltop || 0;\n              this._scrolltop = this.getScrollTop();\n              if (!this.history_loaded && !this.loading_history && (this._scrolltop < this._prev_scrolltop) && (this._scrolltop < 100 || this.getPercentScrolled() < 0.1)) {\n                  this.loading_history = true;\n                  this.messagesRequest({before: this.first_msg_id}, () => {\n                      this.loading_history = false;\n                  });\n              }\n          },\n\n          backToBottom: function () {\n              this.openChat();\n              this.scrollToBottom();\n              this.$('.back-to-bottom').hideIf(this.isScrolledToBottom());\n          },\n\n          messagesRequest: function () {},\n\n          emptyChat: function () {\n              this.$('.chat-content').html($('<span class=\"error\"/>').text(xabber.getString(\"no_messages\")));\n          },\n\n          openChat: function () {\n              this.model.item_view.open({right_contact_save: true, clear_search: false});\n          },\n\n          addMessageHTML: function ($message, index, last_index) {\n              let scrolled_from_top,\n                  scrolled_from_bottom = this.getScrollBottom();\n              if (index === 0)\n                  $message.prependTo(this.$('.chat-content'));\n              else\n                  $message.insertAfter(this.$('.chat-message').eq(index - 1));\n              if (index === last_index)\n                  scrolled_from_top = this.getScrollTop();\n              let $next_message = $message.nextAll('.chat-message').first();\n              this.chat_content.updateMessageInChat($message[0]);\n              if ($next_message.length) {\n                  this.chat_content.updateMessageInChat($next_message[0]);\n              }\n              this.chat_content.initPopup($message);\n              if (scrolled_from_top)\n                  this.scrollTo(scrolled_from_top);\n              else\n                  this.scrollTo(this.ps_container[0].scrollHeight - this.ps_container[0].offsetHeight - scrolled_from_bottom);\n              return $message;\n          }\n\n      });\n\n      xabber.MessageContextView = xabber.MessagesView.extend({\n          className: 'chat-content-wrap messages-context-wrap',\n\n          events: {\n              'click .chat-message': 'onClickMessage',\n              'click .chat-msg-location-content': 'onClickLocation',\n              'mouseover .chat-msg-location-content.no-title': 'onHoverLocation',\n              'click .mdi-link-variant': 'onClickLink',\n              'click .msg-copy-location' : 'onClickLocationLink',\n              \"keyup .messages-search-form\": \"keyupSearch\"\n          },\n\n          __initialize: function (options) {\n              options = options || {};\n              this.stanza_id = options.stanza_id_context;\n              this.encrypted = options.encrypted;\n              this.mention_context = options.mention_context;\n              if (!this.model.item_view.content)\n                  this.chat_content = new xabber.ChatContentView({chat_item: this.model.item_view});\n              this.$history_feedback = this.$('.load-history-feedback');\n              this.account.context_messages = new xabber.Messages(null, {account: this.account});\n              this.account.context_messages.on(\"change:last_replace_time\", this.chat_content.updateMessage, this);\n              this.account.context_messages.on(\"add\", this.addMessage, this);\n              xabber.on('plyr_player_updated', this.onUpdatePlyr, this);\n          },\n\n          render: function () {\n              this.scrollToTop();\n              this.onUpdatePlyr();\n              this.$('.back-to-bottom').hideIf(this.isScrolledToBottom());\n              this.encrypted && this.$el.attr('data-trust', true)\n          },\n\n          onMouseWheel: function (ev) {\n              if (!this.loading_history)\n                  if (ev.originalEvent.deltaY < 0) {\n                      if (!this.first_history_loaded) {\n                          this.loading_history = true;\n                          this.messagesRequest({before: this.first_msg_id}, () => {\n                              this.loading_history = false;\n                          });\n                      }\n                  }\n                  else {\n                      if (!this.last_history_loaded) {\n                          this.loading_history = true;\n                          this.messagesRequest({after: this.last_msg_id}, () => {\n                              this.loading_history = false;\n                          });\n                      }\n                  }\n              this.$('.back-to-bottom').hideIf(this.isScrolledToBottom());\n          },\n\n          onScroll: function () {\n              this.$('.back-to-bottom').hideIf(this.isScrolledToBottom());\n              this._prev_scrolltop = this._scrolltop || 0;\n              this._scrolltop = this.getScrollTop();\n              this._scrollbottom = this.getScrollBottom();\n\n              if (!this.loading_history)\n                  if (!this.first_history_loaded && (this._scrolltop < this._prev_scrolltop) && (this._scrolltop < 100 || this.getPercentScrolled() < 0.1)) {\n                      this.loading_history = true;\n                      this.showHistoryFeedback();\n                      this.messagesRequest({before: this.first_msg_id}, () => {\n                          this.loading_history = false;\n                          this.hideHistoryFeedback();\n                      });\n                  }\n                  else {\n                      if (!this.last_history_loaded && (this._scrolltop > this._prev_scrolltop) && (this._scrollbottom < 100 || this.getPercentScrolled() > 0.9)) {\n                          this.loading_history = true;\n                          this.showHistoryFeedback();\n                          this.messagesRequest({after: this.last_msg_id}, () => {\n                              this.loading_history = false;\n                              this.hideHistoryFeedback();\n                          });\n                      }\n                  }\n          },\n\n          showHistoryFeedback: function () {\n              this.$history_feedback.text(xabber.getString(\"loading_history\")).removeClass('hidden');\n          },\n\n          hideHistoryFeedback: function () {\n              this.$history_feedback.addClass('hidden');\n          },\n\n          messagesRequest: function (query, callback) {\n              let messages = [],\n                  options = query || {},\n                  queryid = uuid();\n              !options.max && (options.max = xabber.settings.mam_messages_limit);\n              !options.after && !options.before && (options.before = '');\n              let handler = this.account.connection.addHandler((message) => {\n                  let $msg = $(message);\n                  if ($msg.find('result').attr('queryid') === queryid)\n                      messages.push(message);\n                  return true;\n              }, Strophe.NS.MAM);\n              this.chat_content.MAMRequest(options, (success, messages, rsm) => {\n                      this.account.connection.deleteHandler(handler);\n                      rsm && (this.first_msg_id = rsm.first) && (this.last_msg_id = rsm.last);\n                      if (options.after && (messages.length < options.max))\n                          this.last_history_loaded = true;\n                      if (options.before && (messages.length < options.max))\n                          this.first_history_loaded = true;\n                      $(messages).each((idx, message) => {\n                          let $message = $(message);\n                          this.account.chats.receiveChatMessage($message, {context_message: true});\n                      });\n                      callback && callback();\n                  }, () => {\n                      this.account.connection.deleteHandler(handler);\n                  }\n              );\n          },\n\n          addMessage: function (message) {\n              if (message.get('auth_request'))\n                  return;\n              if (this.mention_context && (message.get('stanza_id') === this.stanza_id)) {} else message.set('is_archived', true);\n              let $message = this.chat_content.buildMessageHtml(message).addClass('context-message'),\n                  index = this.account.context_messages.indexOf(message);\n              if (message.get('stanza_id') === this.stanza_id) {\n                  $message.addClass('message-from-context');\n                  setTimeout(() => {\n                      $message.removeClass('message-from-context')\n                  }, 3000);\n              }\n              this.addMessageHTML($message, index, this.account.context_messages.findLastIndex());\n          },\n\n          onUpdatePlyr: function (ev) {\n              this.$('.plyr-video-container').removeClass('active-plyr-container');\n              if (xabber.current_plyr_player && xabber.current_plyr_player.player_item) {\n                  let $message = this.$(`.chat-message[data-uniqueid=\"${xabber.current_plyr_player.message_unique_id}\"]`);\n                  if ($message.length) {\n                      $message.find(`.plyr-video-container[data-message-id=\"${xabber.current_plyr_player.player_item.message_id}\"]`).addClass('active-plyr-container');\n                  }\n              }\n          },\n      });\n\n      xabber.SearchedMessagesView = xabber.MessagesView.extend({\n          className: 'chat-content-wrap searched-messages-wrap',\n\n          events: {\n              'click .chat-message': 'onClickMessage',\n              'click .chat-msg-location-content': 'onClickLocation',\n              'mouseover .chat-msg-location-content.no-title': 'onHoverLocation',\n              'click .mdi-link-variant': 'onClickLink',\n              'click .msg-copy-location' : 'onClickLocationLink',\n              \"click .btn-cancel-searching\": \"openChat\",\n              \"keyup .messages-search-form\": \"keyupSearch\"\n          },\n\n          __initialize: function (options) {\n              this.query_text = options.query_text;\n              this.account.searched_messages = new xabber.Messages(null, {account: this.account});\n              this.account.searched_messages.on(\"change:last_replace_time\", this.chat_content.updateMessage, this);\n              this.account.searched_messages.on(\"add\", this.addMessage, this);\n              return this;\n          },\n\n          render: function () {\n              this.$search_form.find('input').val(this.query_text);\n              this.$search_form.slideToggle(10, () => {\n                  if (this.$search_form.css('display') !== 'none')\n                      this.$search_form.find('input').focus();\n                  this.scrollToBottom();\n              });\n              this.$('.back-to-bottom').hideIf(this.isScrolledToBottom());\n          },\n\n          messagesRequest: function (query, callback) {\n              let messages = [],\n                  options = query || {},\n                  queryid = uuid();\n              _.extend(options, {\n                  max: xabber.settings.mam_messages_limit,\n                  before: query.before || '',\n                  var: [{var: 'withtext', value: this.query_text}]\n              });\n              let handler = this.account.connection.addHandler((message) => {\n                  let $msg = $(message);\n                  if ($msg.find('result').attr('queryid') === queryid)\n                      messages.push(message);\n                  return true;\n              }, Strophe.NS.MAM);\n              this.chat_content.MAMRequest(options, (success, messages, rsm) => {\n                      this.account.connection.deleteHandler(handler);\n                      rsm && (this.first_msg_id = rsm.first);\n                      if (!messages.length && !this.account.searched_messages.length) {\n                          this.emptyChat();\n                      }\n                      if (messages.length < options.max)\n                          this.history_loaded = true;\n                      $(messages).each((idx, message) => {\n                          let $message = $(message);\n                          this.account.chats.receiveChatMessage($message, {searched_message: true});\n                      });\n                      callback && callback();\n                  }, () => {\n                      this.account.connection.deleteHandler(handler);\n                  }\n              );\n          },\n\n          addMessage: function (message) {\n              if (message.get('auth_request'))\n                  return;\n              message.set('is_archived', true);\n              let $message = this.chat_content.buildMessageHtml(message).addClass('searched-message'),\n                  index = this.account.searched_messages.indexOf(message);\n              this.addMessageHTML($message, index);\n          }\n      });\n\n      xabber.ContactSearchedMessagesView = xabber.MessagesView.extend({\n          template: templates.chat_content_contact,\n          ps_settings: {\n              wheelPropagation: true\n          },\n          avatar_size: constants.AVATAR_SIZES.CHAT_MESSAGE,\n          className: 'chat-content-wrap searched-messages-wrap',\n\n          events: {\n              'click .chat-message': 'onClickMessage',\n              'click .chat-msg-location-content': 'onClickLocation',\n              'mouseover .chat-msg-location-content.no-title': 'onHoverLocation',\n              'click .mdi-link-variant': 'onClickLink',\n              'click .msg-copy-location' : 'onClickLocationLink',\n              \"click .btn-cancel-searching\": \"openChat\",\n              \"keyup .messages-search-form\": \"keyupSearch\",\n              \"click .close-search-icon\": \"clearSearch\",\n              'click .btn-back': 'hideSearch'\n          },\n\n          _initialize: function (options) {\n              this.model = options.model;\n              this.contact = options.contact;\n              this.account = this.model.account;\n              this.$search_form = this.$('.search-form-header');\n              this.timer = null;\n              this.loading_history = false;\n              this.history_loaded = false;\n              this.first_msg_id = 0;\n              this.last_msg_id = 0;\n              this.chat_content = options.chat_content || this.model.item_view.content;\n              this.parent.model.set('search_hidden', true)\n              return this;\n          },\n\n          render: function () {\n              if (this.account.searched_messages)\n                  this.searched_messages = this.account.searched_messages\n              this.account.searched_messages = new xabber.Messages(null, {account: this.account});\n              if (this.searched_messages)\n                  this.account.searched_messages.add(this.searched_messages.toJSON(), {silent : true});\n              this.account.searched_messages.on(\"add\", this.addMessage, this);\n              if (this.parent.model.get('saved_search_panel')) {\n                  this.$el.html(this.parent.model.get('saved_search_panel'));\n                  this.model.set('saved_search_panel', undefined);\n              }\n              else {\n                  this.emptyChat();\n                  this.$el.html(this.template());\n                  this.emptyChat();\n                  if (this.parent.model.get('search_hidden'))\n                      this.hideSearch();\n              }\n              this.ps_container = this.$('.search-messages-content-wrap');\n              if (this.ps_container.length) {\n                  this.ps_container.perfectScrollbar(\n                      _.extend(this.ps_settings || {}, xabber.ps_settings)\n                  );\n              }\n              this.$search_form = this.$('.search-form-header');\n              if (this.parent.model.get('saved_search_panel')) {\n                  this.$search_form.find('input').focus();\n                  if (this.parent.model.get('saved_search_panel_scroll'))\n                      this.scrollTo(this.parent.model.get('saved_search_panel_scroll'));\n              }\n          },\n\n          clearSearch: function () {\n              this.$search_form.find('input').val('');\n              this.emptyChat();\n          },\n\n\n          keyupSearch: function (ev) {\n              this.$('.close-search-icon').hideIf(!this.$search_form.find('input').val());\n              if (ev.keyCode === constants.KEY_ENTER) {\n                  this.emptyChat();\n                  let query = this.$search_form.find('input').val();\n                  this.$('.preloader-wrap').hideIf(false);\n                  this.loading_timestamp = Number(moment.now());\n                  this.messagesRequest(query, this.loading_timestamp, undefined, [], (messages, rsm) => {\n                  });\n              }\n          },\n\n          emptyChat: function () {\n              if (this.account.searched_messages)\n                  this.account.searched_messages.reset();\n              this.$('.chat-content').html('');\n              this.$('.messages-count').hideIf(true);\n              this.$('.preloader-wrap').hideIf(true);\n              this.$('.search-results').hideIf(true);\n              this.$('.close-search-icon').hideIf(true);\n          },\n\n          messagesRequest: function (query, timestamp, rsm, loaded_messages, callback) {\n              if(!query || this.loading_timestamp != timestamp) {\n                  this.emptyChat();\n                  return true;\n              }\n              let messages = [],\n                  options = {},\n                  queryid = uuid();\n              _.extend(options, {\n                  max: xabber.settings.mam_messages_limit,\n                  var: [{var: 'withtext', value: query}]\n              });\n              if (rsm && rsm.last)\n                  _.extend(options, {\n                      after: rsm.last,\n                  });\n              let handler = this.account.connection.addHandler((message) => {\n                  let $msg = $(message);\n                  if ($msg.find('result').attr('queryid') === queryid)\n                      messages.push(message);\n                  return true;\n              }, Strophe.NS.MAM);\n              this.chat_content.MAMRequest(options, (success, messages, rsm) => {\n                      this.account.connection.deleteHandler(handler);\n                      rsm && (this.first_msg_id = rsm.first);\n                      if (!messages.length && !this.account.searched_messages.length) {\n                          this.emptyChat();\n                      }\n                      if (messages.length < options.max)\n                          this.history_loaded = true;\n                      loaded_messages = loaded_messages.concat(messages)\n                      if (messages.length == options.max)\n                          this.messagesRequest(query, timestamp, rsm, loaded_messages, (messages, rsm) => {});\n                      else if (loaded_messages.length == rsm.count) {\n                          if (rsm.count != 0) {\n                              let message_count = rsm.count;\n                              this.emptyChat()\n                              // list.sort((a, b) => (a.color > b.color) ? 1 : -1)\n                              $(loaded_messages).each((idx, message) => {\n                                  let $message = $(message),\n                                      $jingle_msg_propose = $message.find(`propose[xmlns=\"${Strophe.NS.JINGLE_MSG}\"]`);\n                                  if ($jingle_msg_propose.length)\n                                      message_count--;\n                                  this.account.chats.receiveChatMessage($message, {\n                                      searched_message: true,\n                                      searched_in_contact_messages: true,\n                                      query: query\n                                  });\n                              });\n                              this.$('.messages-count').hideIf(!message_count);\n                              this.$('.close-search-icon').hideIf(!message_count);\n                              this.$('.search-results').hideIf(message_count);\n                              this.$('.messages-count').text(xabber.getQuantityString(\"searched_messages_count\", message_count));\n                          }\n                          else {\n                              this.emptyChat();\n                              this.$('.close-search-icon').hideIf(false);\n                              this.$('.search-results').hideIf(false);\n                          }\n\n                      }\n                      callback && callback(messages, rsm);\n                  }, () => {\n                      this.account.connection.deleteHandler(handler);\n                  }\n              );\n          },\n\n          addMessageHTML: function ($message, index, last_index) {\n              $message.prependTo(this.$('.chat-content'));\n              if (index === last_index)\n                  scrolled_from_top = this.getScrollTop();\n              let $next_message = $message.nextAll('.chat-message').first();\n              // this.chat_content.updateMessageInChat($message[0]);\n              // if ($next_message.length) {\n              //     this.chat_content.updateMessageInChat($next_message[0]);\n              // }\n              // this.chat_content.initPopup($message);\n              return $message;\n          },\n\n          addMessage: function (message) {\n              if (!this.parent.model.get('search_hidden')) {\n                  if (message.get('auth_request') || !message.get('searched_in_contact_messages'))\n                      return;\n                  message.set('is_archived', true);\n                  message.set('searched_message', true);\n                  let $message = this.chat_content.buildMessageHtml(message).addClass('searched-message'),\n                      index = this.account.searched_messages.indexOf(message);\n                  this.chat_content.showMessageAuthor($message);\n                  this.addMessageHTML($message, index);\n              }\n          },\n\n          hideSearch: function (ev) {\n              this.parent.model.set('search_hidden', true);\n              this.$('.search-input').val('')\n              this.emptyChat();\n              if (this.parent.ps_container.length) {\n                  this.parent.ps_container.perfectScrollbar(\n                      _.extend(this.parent.ps_settings || {}, xabber.ps_settings)\n                  );\n              }\n              this.$('.search-wrap').hideIf(this.parent.model.get('search_hidden'))\n          },\n\n          onClickMessage: function (ev) {\n              let $elem = $(ev.target),\n                  $msg = $elem.closest('.chat-message');\n              this.parent.model.set('saved_search_panel_scroll', this.ps_container[0].scrollTop);\n              this.ps_container.perfectScrollbar('destroy');\n              this.parent.model.set('saved_search_panel', this.$el.clone());\n              this.model.getMessageContext($msg.data('uniqueid'), {searched_messages: true});\n          }\n      });\n\n      xabber.ParticipantMessagesView = xabber.MessagesView.extend({\n          className: 'chat-content-wrap participant-messages-wrap',\n\n          events: {\n              'click .chat-message': 'onClickMessage',\n              'click .chat-msg-location-content': 'onClickLocation',\n              'mouseover .chat-msg-location-content.no-title': 'onHoverLocation',\n              'click .mdi-link-variant': 'onClickLink',\n              'click .msg-copy-location' : 'onClickLocationLink',\n              'click .btn-cancel-selection' : 'openChat',\n              'click .btn-retract-messages' : 'retractMessages',\n              \"keyup .messages-search-form\": \"keyupSearch\"\n          },\n\n          __initialize: function (options) {\n              this.participant = options.participant;\n              this.member_jid = this.participant.jid;\n              this.member_id = this.participant.id;\n              this.member_nickname = this.participant.nickname;\n              this.account.participant_messages = new xabber.Messages(null, {account: this.account});\n              this.account.participant_messages.on(\"add\", this.addMessage, this);\n              this.account.participant_messages.on(\"change:last_replace_time\", this.chat_content.updateMessage, this);\n              this.ps_container.on(\"ps-scroll-y\", this.onScrollY.bind(this));\n              return this;\n          },\n\n          render: function () {\n              this.$('.chat-content').css('height', 'calc(100% - 32px)');\n              this.$('.participant-messages-header .messages-by-header .participant-nickname').text(this.member_nickname);\n              this.$('.participant-messages-header').removeClass('hidden');\n              this.scrollToBottom();\n              this.$('.back-to-bottom').hideIf(this.isScrolledToBottom());\n          },\n\n          onScrollY: function () {\n\n          },\n\n          retractMessages: function () {\n              utils.dialogs.ask(xabber.getString(\"dialog_delete_user_messages__header\"), xabber.getString(\"dialog_delete_user_messages__confirm\", [(this.member_nickname || this.member_jid || this.member_id)]),\n                  null, { ok_button_text: xabber.getString(\"delete\")}).done((result) => {\n                  if (result) {\n                      if (this.member_id) {\n                          this.chat_content.model.retractMessagesByUser(this.member_id, () => {\n                              this.emptyChat();\n                          });\n                      }\n                  }\n              });\n          },\n\n          messagesRequest: function (query, callback) {\n              let messages = [],\n                  options = query || {},\n                  member_id = this.member_id,\n                  queryid = uuid();\n              _.extend(options, {\n                  max: xabber.settings.mam_messages_limit,\n                  before: query.before || '',\n                  var: [{var: 'with', value: member_id}]\n              });\n              let handler = this.account.connection.addHandler((message) => {\n                  let $msg = $(message);\n                  if ($msg.find('result').attr('queryid') === queryid) {\n                      messages.push(message);\n                  }\n                  return true;\n              }, Strophe.NS.MAM);\n              this.chat_content.MAMRequest(options,\n                  (success, messages, rsm) => {\n                      this.account.connection.deleteHandler(handler);\n                      rsm && (this.first_msg_id = rsm.first);\n                      if (!messages.length && !this.account.participant_messages.length) {\n                          this.emptyChat();\n                      }\n                      if (messages.length < options.max)\n                          this.history_loaded = true;\n                      $(messages).each((idx, message) => {\n                          let $message = $(message);\n                          this.account.chats.receiveChatMessage($message, {participant_message: true});\n                      });\n                      callback && callback();\n                  }, () => {\n                      this.account.connection.deleteHandler(handler);\n                  }\n              );\n          },\n\n          addMessage: function (message) {\n              if (message.get('auth_request'))\n                  return;\n              message.set('is_archived', true);\n              let $message = this.chat_content.buildMessageHtml(message).addClass('participant-message'),\n                  index = this.account.participant_messages.indexOf(message);\n              this.addMessageHTML($message, index);\n          }\n      });\n\n      xabber.SubscriptionButtonsView = xabber.BasicView.extend({\n          template: templates.subscription_buttons,\n\n          events: {\n              \"click .btn-decline\": \"declineSubscription\",\n              \"click .btn-allow\": \"allowSubscription\",\n              \"click .btn-add\": \"addContact\",\n              \"click .btn-subscribe\": \"addContact\",\n              \"click .btn-block\": \"blockContact\"\n          },\n\n          _initialize: function (options) {\n              this.$el.html(this.template());\n              this.contact = options.contact;\n              this.contact.on(\"change:subscription\", this.render, this);\n              this.contact.on(\"change:in_roster\", this.render, this);\n              this.contact.on(\"change:blocked\", this.render, this);\n              this.contact.on(\"change:subscription_request_in\", this.render, this);\n              this.contact.on(\"change:subscription_request_out\", this.render, this);\n          },\n\n          render: function () {\n              this.$el.closest('.chat-content-wrap').children('.chat-content').removeClass('with-before');\n              if (this.contact.get('group_chat')) {\n                  this.$el.addClass('hidden');\n                  return;\n              }\n              let subscription = this.contact.get('subscription'),\n                  in_request = this.contact.get('subscription_request_in'),\n                  in_roster = this.contact.get('in_roster'),\n                  out_request = this.contact.get('subscription_request_out');\n              this.$('.button').removeClass('hidden');\n              this.$('.subscription-info').text(\"\");\n              this.$el.addClass('hidden');\n              if (subscription === 'both' || this.contact.get('blocked'))\n                  return;\n              else if (subscription === 'to' && in_request || (subscription === 'none' && in_request && in_roster)) {\n                  this.$('.subscription-info').text(xabber.getString(\"subscription_status_in_request_incoming\"));\n                  this.$('.button:not(.btn-allow)').addClass('hidden');\n              } else if (!out_request && !in_roster && !in_request && (subscription === 'from' || subscription === 'none')) {\n                  this.$('.subscription-info').text(xabber.getString(\"chat_subscribe_request_outgoing\"));\n                  this.$('.button:not(.btn-subscribe)').addClass('hidden');\n              } else if (subscription === undefined || subscription === 'none' && in_request) {\n                  this.$('.button:not(.btn-add):not(.btn-block)').addClass('hidden');\n              } else {\n                  return;\n              }\n              this.$el.removeClass('hidden');\n              this.$el.closest('.chat-content-wrap').children('.chat-content').addClass('with-before');\n          },\n\n          hideElement: function () {\n              this.$el.addClass('hidden');\n              this.$el.closest('.chat-content-wrap').children('.chat-content').removeClass('with-before');\n          },\n\n          declineSubscription: function () {\n              this.contact.declineSubscribe();\n              this.contact.set('subscription_request_in', false);\n              this.hideElement();\n          },\n\n          allowSubscription: function () {\n              this.contact.acceptRequest();\n              this.hideElement();\n          },\n\n          addContact: function () {\n              if (this.contact.get('subscription') === undefined)\n                  this.contact.pushInRoster(null, () => {\n                      this.sendAndAskSubscription();\n                  });\n              else\n                  this.sendAndAskSubscription();\n              this.hideElement();\n          },\n\n          sendAndAskSubscription: function () {\n              this.contact.askRequest();\n              this.contact.acceptRequest();\n          },\n\n          blockContact: function () {\n              this.contact.blockRequest();\n              this.hideElement();\n          }\n      });\n\n      xabber.ChatContentView = xabber.BasicView.extend({\n        className: 'chat-content-wrap',\n        template: templates.chat_content,\n        ps_selector: '.chat-content',\n        ps_settings: {\n            wheelPropagation: true\n        },\n        avatar_size: constants.AVATAR_SIZES.CHAT_MESSAGE,\n\n        events: {\n            'mousedown .chat-message': 'onTouchMessage',\n            'click .chat-message': 'onClickMessage',\n            'click .chat-msg-location-content': 'onClickLocation',\n            'mouseover .chat-msg-location-content.no-title': 'onHoverLocation',\n            'click .mdi-link-variant' : 'onClickLink',\n            'click .msg-copy-location' : 'onClickLocationLink',\n            'click .pinned-message' : 'showPinnedMessage',\n            \"keyup .messages-search-form\": \"keyupSearch\",\n            \"click .btn-cancel-searching\": \"cancelSearch\",\n            \"click .back-to-bottom\": \"backToBottom\",\n            \"click .btn-retry-send-message\": \"retrySendMessage\",\n            \"click .btn-delete-message\": \"removeFileErrorMessage\",\n            \"click .encryption-warning\": \"openDevicesWindow\"\n        },\n\n        _initialize: function (options) {\n            this.chat_item = options.chat_item;\n            this.current_day_indicator = null;\n            this._pending_avatars = [];\n            this.account = this.chat_item.account;\n            this.model = this.chat_item.model;\n            this.contact = this.model.contact;\n            this.head = this.model.get('saved') ? new xabber.SavedChatHeadView({content: this}) : new xabber.ChatHeadView({content: this});\n            this.bottom = new xabber.ChatBottomView({content: this});\n            this.$history_feedback = this.$('.load-history-feedback');\n            this.$pinned_message = this.$('.pinned-message');\n            this.$search_form = this.$('.search-form-header');\n            this.$el.attr('data-id', this.model.id);\n            this.updateContentColorScheme();\n            if (this.model.sync_created && this.model.last_message){\n                this.onMessage(this.model.last_message);\n                if (options.new_message){\n                    this.onMessage(options.new_message);\n                    this.onChangedReadState(options.new_message);\n                }\n            }\n            this._scrolltop = this.getScrollTop();\n            let wheel_ev = this.defineMouseWheelEvent();\n            this.$el.on(wheel_ev, this.onMouseWheel.bind(this));\n            this.ps_container.on(\"ps-scroll-up ps-scroll-down\", this.onScroll.bind(this));\n            this.ps_container.on(\"ps-scroll-y\", this.onScrollY.bind(this));\n            this.model.on(\"change:active\", this.onChangedActiveStatus, this);\n            this.model.on(\"load_last_history\", this.loadLastHistory, this);\n            this.model.on(\"get_missed_history\", this.requestMissedMessages, this);\n            this.model.messages.on(\"add\", this.onMessage, this);\n            this.model.messages.on(\"change:is_unread\", this.onChangedReadState, this);\n            this.model.messages.on(\"change:timestamp\", this.onChangedMessageTimestamp, this);\n            this.model.messages.on(\"change:trusted\", this.onTrustedChanged, this);\n            this.model.messages.on(\"change:last_replace_time\", this.updateMessage, this);\n            if (this.contact) {\n                this.subscription_buttons = new xabber.SubscriptionButtonsView({contact: this.contact, el: this.$('.subscription-buttons-wrap')[0]});\n                this.contact.on(\"change:blocked\", this.updateBlockedState, this);\n                this.contact.on(\"change:subscription\", this.onSubscriptionChange, this);\n                this.contact.on(\"change:group_chat\", this.updateGroupChat, this);\n                this.contact.on(\"remove_from_blocklist\", this.loadLastHistory, this);\n                this.account.contacts.on(\"change:name\", this.updateName, this);\n                this.account.contacts.on(\"change:image\", this.updateAvatar, this);\n            }\n            this.account.on(\"change\", this.updateMyInfo, this);\n            this.account.settings.on(\"change:color\", this.updateContentColorScheme, this);\n            xabber.on('plyr_player_updated', this.onUpdatePlyr, this);\n            this.account.dfd_presence.done(() => {\n                !this.account.connection.do_synchronization && this.loadLastHistory();\n            });\n            return this;\n        },\n\n          render: function () {\n              this.cancelSearch();\n              this.scrollToBottom();\n              this.onScroll();\n              this.updateContactStatus();\n              this.updateWaveforms();\n              this.onUpdatePlyr();\n              if (this.contact) {\n                  this.contact.get('group_chat') && this.updatePinnedMessage();\n                  this.subscription_buttons.render();\n              }\n          },\n\n          openDevicesWindow: function () {\n              let peer = this.account.omemo.getPeer(this.contact.get('jid'));\n              peer.fingerprints.open();\n          },\n\n        defineMouseWheelEvent: function () {\n            if (!_.isUndefined(window.onwheel)) {\n                return \"wheel\";\n            } else if (!_.isUndefined(window.onmousewheel)) {\n                return \"mousewheel\";\n            } else {\n                return \"MozMousePixelScroll\";\n            }\n        },\n\n        updateMyInfo: function () {\n            let changed = this.account.changed;\n            if (_.has(changed, 'name')) this.updateMyName();\n            if (_.has(changed, 'status')) this.updateMyStatus();\n            if (_.has(changed, 'image')) this.updateMyAvatar();\n        },\n\n        updateContentColorScheme: function () {\n            let color = this.account.settings.get('color');\n            this.$el.attr('data-color', color);\n            this.head.$el.attr('data-color', color);\n            this.bottom.$el.attr('data-color', color);\n        },\n\n          onTrustedChanged: function (message) {\n              let trusted = message.get('trusted'),\n                  $message = this.$('.chat-message[data-uniqueid=\"' + message.get('unique_id') + '\"]');\n              (trusted === null) && (trusted = 'none');\n              $message.attr('data-trust', trusted);\n          },\n\n        updateGroupChat: function () {\n            this._loading_history = false;\n            this.model.set('history_loaded', false);\n        },\n\n        onSubscriptionChange: function () {\n            let subscription = this.contact.get('subscription');\n            if (subscription === 'both'&& this.contact.get('group_chat')){\n                this.updateGroupChat();\n                this.loadPreviousHistory();\n            }\n        },\n\n        cancelSearch: function () {\n            this.$search_form.hide().find('input').val(\"\");\n        },\n\n        updateContactStatus: function () {\n            if (this.head.$('.contact-status').attr('data-status') == 'offline' && this.contact.get('last_seen')) {\n                let seconds = (moment.now() - this.contact.get('last_seen'))/1000,\n                    new_status = xabber.pretty_last_seen(seconds);\n                this.contact.set({status_message: new_status });\n            }\n        },\n\n        updateWaveforms: function () {\n            this.model.plyr_players.forEach(function(item) {\n                if (item.$audio_elem)\n                    if (item.$audio_elem.voice_message)\n                        item.$audio_elem.voice_message.drawBuffer();\n            });\n        },\n\n        updatePinnedMessage: function () {\n            let $pinned_message = this.contact.get('pinned_message');\n            this.contact.renderPinnedMessage($pinned_message, this.$pinned_message);\n        },\n\n        onChangedVisibility: function () {\n            if (this.isVisible()) {\n                this.model.set({display: true, active: true});\n                this.onScroll();\n                this.readMessages();\n            } else {\n                this.model.set({display: false});\n            }\n        },\n\n        onChangedActiveStatus: function () {\n            let active = this.model.get('active');\n            this.sendChatState(active ? 'active' : 'inactive');\n            if (this.model.get('group_chat')) {\n                if (active)\n                    this.contact.sendPresent();\n                else\n                    this.contact.sendNotPresent();\n            }\n        },\n\n        updateName: function (contact) {\n            let name = contact.get('name'),\n                jid = contact.get('jid');\n            if (contact === this.contact) {\n                this.$(`.chat-message.with-author[data-from=\"${jid}\"]`).each(function () {\n                    $(this).find('.chat-msg-author').text(name);\n                });\n            } else {\n                this.$(`.fwd-message.with-author[data-from=\"${jid}\"]`).each(function () {\n                    $(this).find('.fwd-msg-author').text(name);\n                });\n            }\n        },\n\n        updateAvatar: function (contact) {\n            let image = contact.cached_image,\n                jid = contact.get('jid');\n            if (contact === this.contact) {\n                this.$(`.chat-message.with-author[data-from=\"${jid}\"]`).each(function () {\n                    $(this).find('.left-side .circle-avatar').setAvatar(\n                            image, this.avatar_size);\n                });\n            } else {\n                this.$(`.fwd-message.with-author[data-from=\"${jid}\"]`).each(function () {\n                    $(this).find('.fwd-left-side .circle-avatar').setAvatar(\n                            image, this.avatar_size);\n                });\n            }\n        },\n\n        updateMyStatus: function () {\n            let text;\n            if (!this.account.isOnline()) {\n                text = xabber.getString(\"connection_status__you_are_offline\");\n            }\n            this.bottom.showChatNotification(text || '', true);\n        },\n\n        updateMyName: function () {\n            let name = this.account.get('name'),\n                jid = this.account.get('jid');\n            this.$(`.chat-message.with-author[data-from=\"${jid}\"]`).each(function () {\n                $(this).find('.chat-msg-author').text(name);\n            });\n            this.$(`.fwd-message.with-author[data-from=\"${jid}\"]`).each(function () {\n                $(this).find('.fwd-msg-author').text(name);\n            });\n        },\n\n        updateMyAvatar: function () {\n            let image = this.account.cached_image,\n                jid = this.account.get('jid');\n            this.$(`.chat-message.with-author[data-from=\"${jid}\"]`).each(function () {\n                $(this).find('.left-side .circle-avatar').setAvatar(\n                        image, this.avatar_size);\n            });\n            this.$(`.fwd-message.with-author[data-from=\"${jid}\"]`).each(function () {\n                $(this).find('.fwd-left-side .circle-avatar').setAvatar(\n                        image, this.avatar_size);\n            });\n        },\n\n        updateBlockedState: function () {\n            if (this.model.get('blocked'))\n                this.model.showBlockedRequestMessage();\n            if (this.isVisible()) {\n                xabber.body.setScreen(xabber.body.screen.get('name'), {right: 'chat', chat_item: this.chat_item, blocked: this.model.get('blocked')});\n                this.updateScrollBar();\n            }\n        },\n\n        readMessages: function (timestamp) {\n            let unread_messages = _.clone(this.model.messages_unread.models);\n            if (unread_messages.length) {\n                let msg = unread_messages[unread_messages.length - 1];\n                this.model.sendMarker(msg.get('msgid'), 'displayed', msg.get('stanza_id'), msg.get('contact_stanza_id'));\n            }\n            this.model.set('const_unread', 0);\n            _.each(unread_messages, (msg) => {\n                if (!timestamp || msg.get('timestamp') <= timestamp) {\n                    msg.set('is_unread', false);\n                }\n            });\n            if (this.model.last_message && this.model.last_message.get('is_unread') && !unread_messages.length){\n                let msg = this.model.last_message;\n                this.model.sendMarker(msg.get('msgid'), 'displayed', msg.get('stanza_id'), msg.get('contact_stanza_id'));\n                msg.set('is_unread', false);\n            }\n            else if (this.model.last_message && this.model.last_message.get('auth_request') && this.model.messages.length){\n                let messages = _.clone(this.model.messages.models),\n                    msg = messages[messages.length - 2];\n                if (msg && msg.get('is_unread')) {\n                    this.model.sendMarker(msg.get('msgid'), 'displayed', msg.get('stanza_id'), msg.get('contact_stanza_id'));\n                    msg.set('is_unread', false);\n                }\n            }\n        },\n\n        onMouseWheel: function (ev) {\n            if (ev.originalEvent.deltaY < 0)\n                this.loadPreviousHistory();\n            this.$('.back-to-bottom').hideIf(this.isScrolledToBottom());\n        },\n\n        keyupSearch: function (ev) {\n            if (ev.keyCode === constants.KEY_ENTER) {\n                let query = this.$search_form.find('input').val();\n                this.model.searchMessages(query, (messages) => {});\n            }\n            if (ev.keyCode === constants.KEY_ESCAPE && !xabber.body.screen.get('right_contact')) {\n                this.head.renderSearchPanel();\n            }\n        },\n\n        onScrollY: function () {\n            if (this._scrolltop === 0 && this.$('.subscription-buttons-wrap').hasClass('hidden')) {\n                this.$('.fixed-day-indicator-wrap').css('opacity', 1);\n                this.current_day_indicator = pretty_date(parseInt(this.$('.chat-content').children().first().data('time')));\n                this.showDayIndicator(this.current_day_indicator);\n            }\n            this.$('.back-to-bottom').hideIf(this.isScrolledToBottom());\n        },\n\n        onScroll: function () {\n            if (!this.isVisible())\n                return;\n            this.$('.back-to-bottom').hideIf(this.isScrolledToBottom());\n            let $chatday_indicator = this.$('.chat-day-indicator'),\n                $messages = this.$('.chat-message'),\n                indicator_idx = undefined,\n                opacity_value;\n            this._prev_scrolltop = this._scrolltop || 0;\n            this._scrolltop = this.getScrollTop();\n            $chatday_indicator.each((idx, indicator) => {\n                if (this.$('.subscription-buttons-wrap').hasClass('hidden')) {\n                    if (this._scrolltop < this._prev_scrolltop) {\n                        if ((indicator.offsetTop <= this._scrolltop) && (indicator.offsetTop >= this._scrolltop - 30)) {\n                            indicator_idx = idx;\n                            opacity_value = 0;\n                            return false;\n                        }\n                        if ((indicator.offsetTop >= this._scrolltop) && (indicator.offsetTop <= this._scrolltop - 30)) {\n                            indicator_idx = idx && (idx - 1);\n                            opacity_value = 1;\n                            return false;\n                        }\n                    }\n                    else {\n                        if ((indicator.offsetTop <= this._scrolltop + 30) && (indicator.offsetTop >= this._scrolltop)) {\n                            indicator_idx = idx && (idx - 1);\n                            opacity_value = 0;\n                            return false;\n                        }\n                        if ((indicator.offsetTop >= this._scrolltop - 30) && (indicator.offsetTop <= this._scrolltop)) {\n                            indicator_idx = idx;\n                            opacity_value = 1;\n                            return false;\n                        }\n                    }\n                }\n                else if (!$(indicator).hasClass('fixed-day-indicator-wrap')) {\n                    if (this._scrolltop < this._prev_scrolltop) {\n                        if ((indicator.offsetTop >= this._scrolltop + 30) && (indicator.offsetTop <= this._scrolltop + 62)) {\n                            indicator_idx = idx;\n                            opacity_value = 0;\n                            return false;\n                        }\n                        if ((indicator.offsetTop >= this._scrolltop) && (indicator.offsetTop <= this._scrolltop + 62)) {\n                            indicator_idx = idx;\n                            opacity_value = 1;\n                            return false;\n                        }\n                    }\n                    else {\n                        if ((indicator.offsetTop <= this._scrolltop + 62) && (indicator.offsetTop >= this._scrolltop + 30)) {\n                            indicator_idx = idx && (idx - 1);\n                            opacity_value = 0;\n                            return false;\n                        }\n                        if ((indicator.offsetTop >= this._scrolltop - 62) && (indicator.offsetTop <= this._scrolltop + 30)) {\n                            indicator_idx = idx;\n                            opacity_value = 1;\n                            return false;\n                        }\n                    }\n                }\n            });\n            if (indicator_idx) {\n                this.$('.fixed-day-indicator-wrap').css('opacity', opacity_value);\n                this.current_day_indicator = pretty_date(parseInt($($chatday_indicator[indicator_idx]).attr('data-time')));\n            }\n            else {\n                $messages.each((idx, msg) => {\n                    if ((msg.offsetTop + $(msg).height() > this._scrolltop) && (msg.offsetTop < this._scrolltop)) {\n                        indicator_idx = idx;\n                        opacity_value = 1;\n                        return false;\n                    }\n                });\n                if (indicator_idx) {\n                    this.$('.fixed-day-indicator-wrap').css('opacity', opacity_value);\n                    this.current_day_indicator = pretty_date(parseInt($($messages[indicator_idx]).attr('data-time')));\n                }\n                else if (!this.$('.subscription-buttons-wrap').hasClass('hidden') && this._scrolltop == 0){\n                    opacity_value = 0;\n                    this.$('.fixed-day-indicator-wrap').css('opacity', opacity_value);\n                }\n            }\n            if (this.current_day_indicator !== null) {\n                this.showDayIndicator(this.current_day_indicator);\n            }\n            if (this._scrolltop < this._prev_scrolltop &&\n                (this._scrolltop < 100 || this.getPercentScrolled() < 0.1)) {\n                this.loadPreviousHistory();\n            }\n        },\n\n        backToBottom: function () {\n            this.scrollToBottom();\n        },\n\n        MAMRequest: function (options, callback, errback) {\n            let account = this.account,\n                is_fast = options.fast && account.fast_connection && !account.fast_connection.disconnecting && account.fast_connection.authenticated && account.fast_connection.connected && account.get('status') !== 'offline',\n                conn = is_fast ? account.fast_connection : account.connection,\n                contact = this.contact,\n                is_saved = this.model.get('saved'),\n                messages = [], queryid = uuid(),\n                is_groupchat = contact && contact.get('group_chat'), success = true, iq;\n            delete options.fast;\n            if (is_groupchat)\n                iq = $iq({type: 'set', to: contact.get('full_jid') || contact.get('jid')});\n            else\n                iq = $iq({type: 'set'});\n            iq.c('query', {xmlns: Strophe.NS.MAM, queryid: queryid})\n                    .c('x', {xmlns: Strophe.NS.DATAFORM, type: 'submit'})\n                    .c('field', {'var': 'FORM_TYPE', type: 'hidden'})\n                    .c('value').t(Strophe.NS.MAM).up().up();\n            if (this.account.server_features.get(Strophe.NS.ARCHIVE) && this.model.get('encrypted'))    {\n                iq.c('field', {'var': `{${Strophe.NS.ARCHIVE}}filter_encrypted`})\n                    .c('value').t(this.model.get('encrypted')).up().up();\n            }\n            if (!is_groupchat)\n                iq.c('field', {'var': 'with'})\n                    .c('value').t(this.model.get('jid')).up().up();\n            if (options.var)\n                options.var.forEach((opt_var) => {\n                    iq.c('field', {'var': opt_var.var})\n                        .c('value').t(opt_var.value).up().up();\n                });\n            iq.up().cnode(new Strophe.RSM(options).toXML());\n            let deferred = new $.Deferred();\n            account.chats.onStartedMAMRequest(deferred);\n            deferred.done(function () {\n                console.log(iq)\n                console.log(conn)\n                console.log(conn.connected)\n                let connected_deferred = new $.Deferred();\n                connected_deferred.done(function() {\n                    let handler = conn.addHandler(function (message) {\n                        if ((contact && is_groupchat == contact.get('group_chat')) || is_saved) {\n                            let $msg = $(message);\n                            if ($msg.find('result').attr('queryid') === queryid) {\n                                messages.push(message);\n                            }\n                        }\n                        else {\n                            messages = [];\n                            success = false;\n                        }\n                        return true;\n                    }, Strophe.NS.MAM);\n                    let callb = function (res) {\n                        console.log(iq);\n                        console.log(res);\n                        console.log(messages);\n                        conn.deleteHandler(handler);\n                        handler = null;\n                        account.chats.onCompletedMAMRequest(deferred);\n                        let $fin = $(res).find(`fin[xmlns=\"${Strophe.NS.MAM}\"]`);\n                        if ($fin.length && $fin.attr('queryid') === queryid) {\n                            let rsm = new Strophe.RSM({xml: $fin.find('set')[0]});\n                            rsm.complete = ($fin.attr('complete') === 'true') ? true : false;\n                            callback && callback(success, messages, rsm);\n                        }\n                    },\n                    errb = function (err) {\n                        conn.deleteHandler(handler);\n                        handler = null;\n                        xabber.error(\"MAM error\");\n                        xabber.error(err);\n                        account.chats.onCompletedMAMRequest(deferred);\n                        errback && errback(err);\n                    };\n                    account.once('send_pending_messages', () => {\n                        console.log('send_pending_archive_iq');\n                        console.log(iq);\n                        if (Boolean(handler)) {\n                            let pending_deferred = new $.Deferred();\n                            account.chats.onStartedMAMRequest(pending_deferred);\n                            conn.deleteHandler(handler);\n                            conn = is_fast && account.fast_connection ? account.fast_connection : account.connection;\n                            pending_deferred.done(function() {\n                                console.log('initiated pending archive iq');\n                                console.log(iq)\n                                console.log(conn)\n                                console.log(conn.connected)\n                                let connected_pending_deferred = new $.Deferred();\n                                connected_pending_deferred.done(function() {\n                                    handler = conn.addHandler(function (message) {\n                                        if ((contact && is_groupchat == contact.get('group_chat')) || is_saved) {\n                                            let $msg = $(message);\n                                            if ($msg.find('result').attr('queryid') === queryid) {\n                                                messages.push(message);\n                                            }\n                                        }\n                                        else {\n                                            messages = [];\n                                            success = false;\n                                        }\n                                        return true;\n                                    }, Strophe.NS.MAM);\n                                    if (is_fast)\n                                        account.sendFast(iq, callb, errb);\n                                    else\n                                        account.sendIQ(iq, callb, errb);\n                                });\n                                if (conn.connected)\n                                    connected_pending_deferred.resolve();\n                                else {\n                                    let _pending_time = 1,\n                                    _interval = setInterval(() => {\n                                        if (conn.connected || _pending_time >= 11){\n                                            clearInterval(_interval);\n                                            connected_pending_deferred.resolve();\n                                        }\n                                        _pending_time += 1;\n                                    }, 1000);\n                                }\n                            });\n                        }\n                    })\n                    if (is_fast)\n                        account.sendFast(iq, callb, errb);\n                    else\n                        account.sendIQ(iq, callb, errb);\n\n                });\n                if (conn.connected)\n                    connected_deferred.resolve();\n                else {\n                    let _pending_time = 1,\n                    _interval = setInterval(() => {\n                        if (conn.connected || _pending_time >= 11){\n                            clearInterval(_interval);\n                            connected_deferred.resolve();\n                        }\n                        _pending_time += 1;\n                    }, 1000);\n                }\n            });\n        },\n\n        getMessageArchive: function (query, options) {\n            if (options.previous_history) {\n                if (this._loading_history || this.model.get('history_loaded')) {\n                    return;\n                }\n                this._loading_history = true;\n                clearTimeout(this._load_history_timeout);\n                this._load_history_timeout = setTimeout(() => {\n                    this._loading_history = false;\n                }, 60000);\n                this.showHistoryFeedback();\n            }\n            let account = this.model.account, counter = 0;\n                this.MAMRequest(query, (success, messages, rsm) => {\n                        clearTimeout(this._load_history_timeout);\n                        this._loading_history = false;\n                        this.hideHistoryFeedback();\n                        if (options.missed_history && !rsm.complete && (rsm.count > messages.length))\n                            this.getMessageArchive({after: rsm.last}, {missed_history: true});\n                        if (this.model.get('group_chat')) {\n                            if (this.contact && !this.contact.my_info)\n                                this.contact.getMyInfo();\n                        }\n                        else {\n                            if (this.contact && !this.contact.get('last_seen') && !this.contact.get('server'))\n                                this.contact.getLastSeen();\n                        }\n                        if ((messages.length < query.max) && success) {\n                            this.model.set('history_loaded', true);\n                        }\n                        if (options.previous_history || !this.model.get('first_archive_id')) {\n                            rsm.first && this.model.set('first_archive_id', rsm.first);\n                        }\n                        if (options.last_history || !this.model.get('last_archive_id')) {\n                            rsm.last && this.model.set('last_archive_id', rsm.last);\n                        }\n                        _.each(messages, function (message) {\n                            let loaded_message = account.chats.receiveChatMessage(message,\n                                _.extend({is_archived: true}, options)\n                            );\n                            if (loaded_message) counter++;\n                        });\n                        if (options.previous_history && !this.model.get('displayed_sent') && this.model.messages.length) {\n                            let last_msg = this.model.messages.models[this.model.messages.length - 1];\n                            if (last_msg)\n                                if (!last_msg.isSenderMe() && this.model.get('active') && this.model.get('display')) {\n                                    this.model.sendMarker(last_msg.get('msgid'), 'displayed', last_msg.get('stanza_id'), last_msg.get('contact_stanza_id'));\n                                    this.model.set('displayed_sent', true);\n                                }\n                        }\n                        if ((counter === 0) && options.last_history && !this.model.get('history_loaded')) {\n                            this.getMessageArchive(_.extend(query, {\n                                max: xabber.settings.mam_messages_limit,\n                                before: this.model.get('first_archive_id') || ''\n                            }), {previous_history: true});\n                        }\n                    }, (err) => {\n                        if (options.previous_history) {\n                            this._loading_history = false;\n                            this.showHistoryFeedback(true);\n                        }\n                    }\n                );\n        },\n\n        requestMissedMessages: function (timestamp) {\n            if (!timestamp)\n                return;\n            let query = {};\n            query.var = [{var: 'start', value: moment(timestamp).format()}];\n            this.getMessageArchive(query, {missed_history: true});\n        },\n\n        loadLastHistory: function () {\n            if (!xabber.settings.load_history) {\n                return;\n            }\n            let last_archive_id = this.model.get('last_archive_id'),\n                query = {};\n            if (last_archive_id) {\n                query.after = last_archive_id;\n            } else {\n                query.before = '';\n                query.max = xabber.settings.mam_messages_limit_start;\n            }\n            this.getMessageArchive(query, {last_history: true});\n        },\n\n        loadPreviousHistory: function () {\n            if (this.contact) {\n                if (!xabber.settings.load_history || (!this.contact.get('subscription') || this.contact.get('subscription') !== 'both') && this.contact.get('group_chat')) {\n                    return;\n                }\n            }\n            this.getMessageArchive({\n                    fast: true,\n                    max: xabber.settings.mam_messages_limit,\n                    before: this.model.get('first_archive_id') || '' },\n                {previous_history: true\n                });\n        },\n\n        showHistoryFeedback: function (is_error) {\n            if (this._load_history_feedback_timeout) {\n                clearTimeout(this._load_history_feedback_timeout);\n                this._load_history_feedback_timeout = null;\n            }\n            let text = xabber.getString(is_error ? \"loading_archived_messages_error\" : \"loading_history\");\n            this.$history_feedback.text(text).removeClass('hidden');\n            if (is_error) {\n                this._load_history_feedback_timeout = setTimeout(\n                    this.hideHistoryFeedback.bind(this), 5000);\n            }\n        },\n\n        showDayIndicator: function (text) {\n            this.$('.fixed-day-indicator').text(text);\n            this.$('.fixed-day-indicator-wrap').removeClass('hidden');\n        },\n\n        showPinnedMessage: function (ev) {\n            if ($(ev.target).hasClass('close'))\n                this.unpinMessage();\n            else {\n                let pinned_message = this.contact.get('pinned_message'),\n                    msg = this.buildMessageHtml(pinned_message),\n                    pinned_msg_modal = new xabber.ExpandedMessagePanel({account: this.account, chat_content: this});\n                pinned_msg_modal.$el.attr('data-color', this.account.settings.get('color'));\n                this.updateMessageInChat(msg);\n                this.initPopup(msg);\n                pinned_msg_modal.open(msg);\n            }\n        },\n\n        imageOnload: function ($message) {\n            let $image_container = $message.find('.img-content'),\n                $copy_link_icon = $message.find('.mdi-link-variant');\n            $image_container.css('background-image', 'none');\n            $copy_link_icon.attr({\n                'data-image': 'true'\n            });\n        },\n\n        videoOnload: function ($message) {\n            let $image_container = $message.find('.img-content'),\n                $copy_link_icon = $message.find('.mdi-link-variant');\n            $copy_link_icon.attr({\n                'data-image': 'true'\n            });\n            this.initPlyrEmbedPlayer($message);\n        },\n\n        locationOnload: function ($message) {\n            let $copy_location_div = $message.find('.msg-copy-location-content');\n            $copy_location_div.html(env.templates.svg['map-marker-outline']());\n            $copy_location_div.attr({\n                'data-location': 'true'\n            });\n        },\n\n        unpinMessage: function () {\n            let iq = $iq({type: 'set', to: this.contact.get('full_jid') || this.contact.get('jid')})\n                .c('update', {xmlns: Strophe.NS.GROUP_CHAT})\n                .c('pinned-message');\n            this.account.sendIQFast(iq, () => {}, (error) => {\n                if ($(error).find('error not-allowed').length)\n                    utils.dialogs.error(xabber.getString(\"groupchat_you_have_no_permissions_to_do_it\"));\n            });\n        },\n\n        hideHistoryFeedback: function () {\n            this.$history_feedback.addClass('hidden');\n        },\n\n        receiveNoTextMessage: function ($message, carbon_copied) {\n            let from_jid = Strophe.getBareJidFromJid($message.attr('from')),\n                to_jid = Strophe.getBareJidFromJid($message.attr('to')),\n                is_sender = from_jid === this.account.get('jid'),\n                $chat_state = $message.find(`[xmlns=\"${Strophe.NS.CHATSTATES}\"]`);\n            if ($chat_state.length) {\n                if (!is_sender) {\n                    let $subtype = $chat_state.children('subtype');\n                    if ($subtype.attr('type') == 'encrypted') {\n                        let view = xabber.chats_view.child(`${this.contact.hash_id}:encrypted`);\n                        if (view && view.content)\n                            view.content.showChatState($chat_state[0].tagName.toLowerCase());\n                    } else\n                        this.showChatState($chat_state[0].tagName.toLowerCase(), $subtype.attr('type'), $subtype.attr('mime-type'));\n                }\n            }\n        },\n\n        showChatState: function (state, type, mime_type) {\n            clearTimeout(this._chatstate_show_timeout);\n            let message, name = this.contact.get('name');\n            if (state === 'composing') {\n                if (type) {\n                    this._current_composing_msg = {type: type};\n                    if (type === 'upload') {\n                        let file_type = mime_type ? utils.pretty_file_type_with_article(mime_type) : null;\n                        mime_type && (this._current_composing_msg.mime_type = mime_type);\n                        message = file_type ? xabber.getString(\"chat_state_composing_upload_filetype\", [file_type]) : xabber.getString(\"chat_state_composing_upload\");\n                        this._chatstate_show_timeout = setTimeout(() => {\n                            this.showChatState();\n                        }, constants.CHATSTATE_TIMEOUT_PAUSED_AUDIO);\n                    } else {\n                        if (type === 'voice')\n                            message = xabber.getString(\"chat_state_composing_voice\");\n                        if (type === 'video')\n                            message = xabber.getString(\"chat_state_composing_video\");\n                        this._chatstate_show_timeout = setTimeout(() => {\n                            this.showChatState('paused', type);\n                        }, constants.CHATSTATE_TIMEOUT_PAUSED_AUDIO);\n                    }\n                }\n                else {\n                    this._current_composing_msg = undefined;\n                    message = xabber.getString(\"chat_state_composing\");\n                    this._chatstate_show_timeout = setTimeout(() => {\n                        this.showChatState();\n                    }, constants.CHATSTATE_TIMEOUT_PAUSED);\n                }\n            } else if (state === 'paused') {\n                this.showChatState();\n                return;\n            } else {\n                this.bottom.showChatNotification('');\n                this.chat_item.updateLastMessage();\n                return;\n            }\n            if (message)\n                this.bottom.showChatNotification(`${this.contact.get('name')} ${message}`);\n            else\n                this.bottom.showChatNotification();\n            this.chat_item.$('.last-msg').text(message);\n            this.chat_item.$('.last-msg-date').text(utils.pretty_short_datetime())\n                .attr('title', pretty_datetime());\n            this.chat_item.$('.msg-delivering-state').addClass('hidden');\n        },\n\n        updateMentions: function (message) {\n            if (message.get('mentions')) {\n                message.get('mentions').forEach((mention) => {\n                    let mention_target = mention.target || \"\";\n                    if (this.contact.get('group_chat') || message.get('groupchat_jid')) {\n                        let id = mention_target.match(/\\?id=\\w*/),\n                            jid = mention_target.match(/\\?jid=.*/);\n                        if (id && this.contact.my_info) {\n                            mention_target = id[0].slice(4);\n                            (mention_target === this.contact.my_info.get('id')) && (mention.me = true);\n                        }\n                        else if (jid) {\n                            mention_target = jid[0].slice(5);\n                            (mention_target === this.account.get('jid')) && (mention.me = true);\n                        }\n                    }\n                    else {\n                        mention_target = mention_target.slice(5);\n                        if (mention_target === this.account.get('jid'))\n                            mention.me = true;\n                    }\n                });\n            }\n        },\n\n        onMessage: function (message) {\n            this.updateMentions(message);\n            this.account.messages.add(message);\n            let is_scrolled_to_bottom = this.isScrolledToBottom(),\n                scrolled_from_bottom = this.getScrollBottom();\n            if (!_.isUndefined(message.get('is_accepted'))) {\n                this.model.set('is_accepted', false);\n            }\n            this.model.set('opened', true);\n            if (!message.get('is_archived') && message.get('stanza_id'))\n                this.model.set('last_archive_id', message.get('stanza_id'));\n\n            if (message.get('participants_version')) {\n                if (this.contact.participants && this.contact.participants.version < message.get('participants_version'))\n                    this.contact.trigger('update_participants');\n            }\n\n            let $message = this.addMessage(message);\n\n            if (message.get('type') === 'file_upload') {\n                if (this.account.get('gallery_token') && this.account.get('gallery_url'))\n                    this.startGalleryUploadFile(message, $message);\n                else\n                    this.startUploadFile(message, $message);\n            }\n\n            if (this.isVisible()) {\n                if (is_scrolled_to_bottom || message.get('submitted_here')) {\n                    this.scrollToBottom();\n                } else {\n                    this.updateScrollBar();\n                    this.scrollTo(this.ps_container[0].scrollHeight - this.ps_container[0].offsetHeight - scrolled_from_bottom);\n                }\n            }\n\n            if (!(message.get('synced_from_server') || message.get('is_archived'))) {\n                if (!(message.isSenderMe() || message.get('silent') || ((message.get('type') === 'system') && !message.get('auth_request')))) {\n                    message.set('is_unread', !(this.model.get('display') && xabber.get('focused')));\n                    if (!message.get('is_unread'))\n                        this.model.sendMarker(message.get('msgid'), 'displayed', message.get('stanza_id'), message.get('contact_stanza_id'));\n                    if (!xabber.get('focused')) {\n                        if (this.model.get('saved') || this.model.isMuted())\n                            message.set('muted', true);\n                        else if (!message.get('synced_invitation_from_server'))\n                            this.notifyMessage(message);\n                    }\n                    this.model.setMessagesDisplayed(message.get('timestamp'));\n                }\n                if (this.contact && this.model.get('archived'))\n                    if (this.model.isMuted())\n                        message.set('archived', true);\n                    else {\n                        this.head.archiveChat();\n                        this.model.set('archived', false);\n                    }\n                if (this.model.get('saved')) {\n                    message.set('muted', true);\n                    message.set('state', constants.MSG_DISPLAYED);\n                }\n            }\n\n            if (message.get('attention')) {\n                this.attentionMessage(message);\n            }\n\n            if (message.isSenderMe()) {\n                if (!message.get('is_archived') && !message.get('missed_msg'))\n                    this.readMessages(message.get('timestamp'));\n                if (this.model.get('last_displayed_id') >= message.get('stanza_id') && message.get('stanza_id') !== message.get('origin_id'))\n                    message.set('state', constants.MSG_DISPLAYED);\n                else if (message.get('stanza_id') !== message.get('origin_id') && (this.model.get('last_delivered_id') >= message.get('stanza_id') || message.get('is_archived')))\n                    message.set('state', constants.MSG_DELIVERED);\n            }\n\n            if (message.get('private_invite') || message.get('invite')) {\n                if (!(this.contact.invitation && this.contact.invitation.message.get('timestamp') > message.get('timestamp')))\n                    this.contact.invitation = new xabber.GroupchatInvitationView({model: this.contact, message: message});\n                this.model.contact.set('invitation', true);\n                this.model.get('active') && this.model.contact.trigger('open_chat', this.model.contact);\n                message.set('is_unread', false);\n            }\n\n            let last_message = this.model.last_message;\n            if (!last_message || message.get('timestamp') >= last_message.get('timestamp')) {\n                this.model.last_message = message;\n                this.chat_item.updateLastMessage();\n            }\n            if (message.get('mentions')) {\n                message.get('mentions').forEach((mention) => {\n                    let mention_target = mention.target || \"\",\n                        id = mention_target.match(/\\?id=\\w*/),\n                        jid = mention_target.match(/\\?jid=.*/);\n                    if (id)\n                        mention_target = id[0].slice(4);\n                    else if (jid)\n                        mention_target = jid[0].slice(5);\n                    else\n                        mention_target = \"\";\n                    if (this.contact.my_info)\n                        (mention_target === this.contact.my_info.get('id')) && this.account.mentions.create(null, {message: message, contact: this.contact});\n                    else if (this.contact.get('group_chat')) {\n                        if (this._pending_my_info) {\n                            this._pending_my_info.done(() => {\n                                (mention_target === this.contact.my_info.get('id')) && this.account.mentions.create(null, {message: message, contact: this.contact});\n                                this._pending_my_info = null;\n                            });\n                        }\n                        else {\n                            this._pending_my_info = new $.Deferred();\n                            this.contact.getMyInfo(() => {\n                                (mention_target === this.contact.my_info.get('id')) && this.account.mentions.create(null, {\n                                    message: message,\n                                    contact: this.contact\n                                });\n                                this._pending_my_info.resolve();\n                            });\n                        }\n                    }\n                    (mention_target === this.account.get('jid') || mention_target === \"\") && this.account.mentions.create(null, {message: message, contact: this.contact});\n                });\n            }\n        },\n\n\n          decryptImages: function (message, force) {\n            let scrolled_from_bottom = this.getScrollBottom(),\n                unique_id = message.get('unique_id');\n              if (this.model.get('encrypted') || message.get('encrypted') || force) {\n                  let images = message.get('images') || [];\n                  if (images.length) {\n                      images.forEach((img) => {\n                          let source = img.sources[0];\n                          if (!img.key)\n                              return;\n                          this.model.messages.decryptFile(source, img.key).then((result) => {\n                              if (result === null)\n                                  return;\n                              let $msg = [];\n                              if (this.model.messages_view && xabber.body.screen.get('right') === 'message_context')\n                                  $msg = this.model.messages_view.$(`.chat-message[data-uniqueid=\"${unique_id}\"] img[src=\"${source}\"]`);\n                              else\n                                  $msg = this.$(`.chat-message[data-uniqueid=\"${unique_id}\"] img[src=\"${source}\"]`);\n                              if ($msg.length) {\n                                  $msg[0].src = result;\n                                  $msg[0].onload = () => {\n                                      if (!scrolled_from_bottom)\n                                          this.scrollToBottom();\n                                      else\n                                          this.scrollTo(this.ps_container[0].scrollHeight - scrolled_from_bottom);\n                                  };\n                                  $msg.attr('data-mfp-src', result);\n                              }\n                          });\n                      });\n                  }\n                  let fwd_msgs = message.get('forwarded_message') || [];\n                  fwd_msgs.forEach((fwd_msg) => {\n                      let fwd_images = fwd_msg.get('images') || [],\n                          fwd_unique_id = fwd_msg.get('unique_id');\n                      fwd_images.forEach((img) => {\n                          let source = img.sources[0];\n                          if (!img.key)\n                              return;\n                          this.model.messages.decryptFile(source, img.key).then((result) => {\n                              if (result === null)\n                                  return;\n                              let $msg = this.$(`.chat-message[data-uniqueid=\"${unique_id}\"] .fwd-message[data-uniqueid=\"${fwd_unique_id}\"] img[src=\"${source}\"]`);\n                              if ($msg.length) {\n                                  $msg[0].src = result;\n                                  $msg[0].onload = () => {\n                                      if (!scrolled_from_bottom)\n                                          this.scrollToBottom();\n                                      else\n                                          this.scrollTo(this.ps_container[0].scrollHeight - scrolled_from_bottom);\n                                  };\n                                  $msg.attr('data-mfp-src', result);\n                              }\n                          });\n                      });\n                  });\n              }\n          },\n\n        addMessage: function (message) {\n            let $message = this.buildMessageHtml(message),\n                index = this.model.messages.indexOf(message);\n            if (index === 0) {\n                $message.prependTo(this.$('.chat-content'));\n            } else {\n                $message.insertAfter(this.$('.chat-message').eq(index - 1));\n            }\n            let $next_message = $message.nextAll('.chat-message').first();\n            this.updateMessageInChat($message[0]);\n            if ($next_message.length) {\n                this.updateMessageInChat($next_message[0]);\n            }\n            this.initPopup($message);\n            this.bottom.showChatNotification();\n            return $message;\n        },\n\n        initPopup: function ($message) {\n            let $one_image = $message.find('.uploaded-img'),\n                $collage_image = $message.find('.uploaded-img-for-collage');\n            if ($one_image.length) {\n                $one_image.each((idx, item) => {\n                    this.initMagnificPopup($(item));\n                });\n            }\n            if ($collage_image.length) {\n                this.initZoomGallery($message);\n            }\n        },\n\n        getImagesInformation: function (msg) {\n            let images = msg.get('images'),\n                servers = [];\n            if (!images)\n                return;\n            images.forEach((img) => {\n                let server = new URL(img.sources[0]).hostname;\n                img.pretty_size = utils.pretty_size(img.size)\n                servers.push(server);\n            });\n            servers = [...new Set(servers)]\n\n            return {images, servers};\n        },\n\n        initMagnificPopup: function ($elem) {\n            let self = this;\n            $elem.magnificPopup({\n                type: 'image',\n                closeOnContentClick: true,\n                fixedContentPos: true,\n                mainClass: 'mfp-no-margins mfp-with-zoom',\n                image: {\n                    verticalFit: true,\n                    titleSrc: function(item) {\n                        return '<a class=\"image-source-link\" href=\"'+item.el.attr('src')+'\" target=\"_blank\">' + self.model.messages.getFilename(item.el.attr('src')) + '</a>' + ' ' + item.el.attr('title');\n                    }\n                },\n                zoom: {\n                    enabled: true,\n                    duration: 300\n                }\n            });\n        },\n\n        initZoomGallery: function ($message) {\n            let self = this;\n            $message.find('.zoom-gallery').magnificPopup({\n                delegate: 'img',\n                type: 'image',\n                closeOnContentClick: false,\n                closeBtnInside: false,\n                mainClass: 'mfp-with-zoom mfp-img-mobile',\n                image: {\n                    verticalFit: true,\n                    titleSrc: function(item) {\n                        return '<a class=\"image-source-link\" href=\"'+item.el.attr('src')+'\" target=\"_blank\">' + self.model.messages.getFilename(item.el.attr('src')) + '</a>' + ' ' + item.el.attr('title');\n                    }\n                },\n                gallery: {\n                    enabled: true\n                },\n                zoom: {\n                    enabled: true,\n                    duration: 300,\n                    opener: function(element) {\n                        return element;\n                    }\n                }\n            });\n        },\n\n        updateMessage: function (item) {\n            let $message, images = item.get('images'), emoji = item.get('only_emoji'), $new_message,\n                files =  item.get('files');\n            if (item instanceof xabber.Message) {\n                this.updateMentions(item);\n                $new_message = this.buildMessageHtml(item);\n                $message = this.$(`.chat-message[data-uniqueid=\"${item.get('unique_id')}\"]`);\n            }\n            else\n                return;\n            $message.replaceWith($new_message)\n            $message = this.$(`.chat-message[data-uniqueid=\"${item.get('unique_id')}\"]`);\n            this.updateMessageInChat($message[0]);\n            this.initPopup($message);\n            this.bottom.showChatNotification();\n\n            if (item.get('data_form')) {\n                let data_form = utils.render_data_form(item.get('data_form'));\n                $message.find('.chat-msg-content').append(data_form);\n            }\n            let short_datetime = utils.pretty_short_datetime(item.get('last_replace_time')),\n                datetime = moment(item.get('last_replace_time')).format('D MMMM, YYYY HH:mm:ss'),\n                new_title = `${pretty_datetime(item.get('time'))} ${xabber.getString(\"edited\", [moment(item.get('timestamp')).startOf('day').isSame(moment(item.get('last_replace_time')).startOf('day')) ? short_datetime : datetime])}`;\n            $message.find('.msg-time').prop('title', new_title);\n            $message.find('.edited-info').removeClass('hidden').text(xabber.getString(\"chat_screen__message__label_edited\")).prop('title', new_title);\n        },\n\n        removeMessage: function (item) {\n            let message, $message, $message_in_chat;\n            if (item instanceof xabber.Message) {\n                message = item;\n                $message_in_chat = this.$(`.chat-message[data-uniqueid=\"${item.get('unique_id')}\"]`);\n                (this.bottom.content_view) && ($message = this.bottom.content_view.$(`.chat-message[data-uniqueid=\"${item.get('unique_id')}\"]`));\n            } else {\n                $message = item;\n                if (!$message.length) return;\n                message = this.model.messages.get($message.data('uniqueid'));\n            }\n            message && message.destroy();\n            if ($message_in_chat) {\n                this.removeMessageFromDOM($message_in_chat);\n            }\n            if ($message && ($message !== $message_in_chat))\n                this.removeMessageFromDOM($message);\n        },\n\n        removeMessageFromDOM: function ($message) {\n            if (($message.hasClass('with-author')) && (!$message.next().hasClass('with-author'))) {\n                let avatar = $message.find('.circle-avatar')[0];\n                $message.next().addClass('with-author');\n                $message.next().find('.circle-avatar').replaceWith(avatar);\n            }\n            $message.prev('.chat-day-indicator').remove();\n            $message.remove();\n            this.bottom.manageSelectedMessages();\n            if (!this._clearing_history) {\n                this.updateScrollBar();\n            }\n        },\n\n        clearHistory: function () {\n            let dialog_options = [],\n                dialog_message = this.contact.get('group_chat') ? xabber.getString(\"clear_group_chat_history_dialog_message\") : xabber.getString(\"clear_chat_history_dialog_message\"),\n                is_group_chat = this.contact.get('group_chat') ? true : false;\n            this._clearing_history = true;\n            if (this.account.server_features.get(Strophe.NS.REWRITE)) {\n                utils.dialogs.ask(xabber.getString(\"clear_history\"), dialog_message,\n                    dialog_options, {ok_button_text: xabber.getString(\"clear_chat_history_dialog_button\")}).done((res) => {\n                    if (!res) {\n                        this._clearing_history = false;\n                        return;\n                    }\n                    this.model.retractAllMessages(is_group_chat, () => {\n                        this._clearing_history = false;\n                        this.chat_item.updateLastMessage();\n                        this.updateScrollBar();\n                    }, () => {\n                        this._clearing_history = false;\n                    });\n                });\n            }\n            else {\n                utils.dialogs.ask(xabber.getString(\"clear_history\"), `${dialog_message}\\n${xabber.getString(\"dialog_clear_chat_history__warning_deletion_not_supported\", [this.account.domain]).fontcolor('#E53935')})`,\n                    dialog_options, {ok_button_text: xabber.getString(\"clear_chat_history_dialog_button\")}).done((res) => {\n                    if (!res) {\n                        this._clearing_history = false;\n                        return;\n                    }\n                    let msgs = _.clone(this.model.messages.models);\n                    msgs.forEach((item) => { this.removeMessage(item); });\n                });\n            }\n        },\n\n        renderVoiceMessage: function (element, file_url, chat) {\n            let not_expanded_msg = element.innerHTML,\n                unique_id = 'waveform' + moment.now(),\n                $elem = $(element),\n                $msg_element = $elem.closest('.link-file');\n            chat = chat || this.model;\n            $elem.addClass('voice-message-rendering').html($(templates.messages.audio_file_waveform({waveform_id: unique_id})));\n            let aud = this.createAudio(file_url, $elem.find('#' + unique_id));\n\n            aud.on('ready', () => {\n                let duration = Math.round(aud.getDuration());\n                $elem.find('.voice-msg-total-time').text(utils.pretty_duration(duration));\n                aud.play();\n            });\n\n            aud.on('error', () => {\n                $elem.removeClass('voice-message-rendering');\n                element.innerHTML = not_expanded_msg;\n                aud.unAll();\n                $elem.find('.voice-message-play').get(0).remove();\n                utils.callback_popup_message(xabber.getString(\"jingle__error__audio_not_supported\"), 3000);\n            });\n\n            aud.on('play', () => {\n                $msg_element.addClass('playing');\n                let is_popup;\n                xabber.current_plyr_player && (is_popup = xabber.current_plyr_player.is_popup);\n                xabber.current_plyr_player = chat.plyr_players.find(item => item.$audio_elem === $msg_element[0]);//переделать на выбор из всех\n                xabber.current_plyr_player && (xabber.current_plyr_player.chat_item = chat.item_view);\n                xabber.current_plyr_player && (xabber.current_plyr_player.is_popup = is_popup);\n                let other_players = xabber.plyr_players.filter(other => other != xabber.current_plyr_player);\n                other_players.forEach(function(other) {\n                    if (other.$audio_elem){\n                        if (other.$audio_elem.voice_message)\n                            other.$audio_elem.voice_message.stopTime();\n                    }\n                });\n                (xabber.plyr_player_popup && xabber.plyr_player_popup.player) && xabber.plyr_player_popup.player.stop();\n                (!xabber.current_plyr_player && xabber.plyr_player_popup) && xabber.plyr_player_popup.closePopup();\n                let timerId = setInterval(function() {\n                    let cur_time = Math.round(aud.getCurrentTime());\n                    if (aud.isPlaying())\n                        $elem.find('.voice-msg-current-time').text(utils.pretty_duration(cur_time));\n                    else\n                        clearInterval(timerId);\n                }, 100);\n                xabber.trigger('plyr_player_updated');\n            });\n\n            aud.on('finish', () => {\n                $msg_element.removeClass('playing');\n            });\n\n            aud.on('pause', () => {\n                $msg_element.removeClass('playing');\n                xabber.trigger('plyr_player_updated');\n            });\n\n            aud.stopTime = () => {\n                aud.stop()\n                $elem.find('.voice-msg-current-time').text(utils.pretty_duration(0));\n            };\n\n            $elem.find('.voice-message-volume')[0].onchange = () => {\n                aud.setVolume($elem.find('.voice-message-volume').val()/100);\n            };\n            return aud;\n        },\n\n        createImageGrid: function (attrs) {\n            let template_for_images;\n            if (attrs.images.length > 6) {\n                let tpl_name = 'template-for-6',\n                    hidden_images = attrs.images.length - 5;\n                !xabber.settings.load_media && (tpl_name = 'hidden-template-for-6')\n                template_for_images = $(templates.messages[tpl_name](attrs));\n                template_for_images.find('.last-image').addClass('hidden-images');\n                template_for_images.find('.image-counter').text('+' + hidden_images);\n            }\n            else {\n                let tpl_name = 'template-for-' + attrs.images.length;\n                !xabber.settings.load_media && (tpl_name = 'hidden-template-for-' + attrs.images.length)\n                template_for_images = $(templates.messages[tpl_name](attrs));\n            }\n            if (!xabber.settings.load_media) {\n                template_for_images.find('img').removeClass('uploaded-img-for-collage popup-img').addClass('unloaded-img')\n            }\n            return template_for_images;\n        },\n\n        buildMessageHtml: function (message) {\n            let attrs = _.clone(message.attributes),\n                is_sender = (message instanceof xabber.Message) ? message.isSenderMe() : false,\n                user_info = attrs.user_info || {}, username,\n                images = attrs.images,\n                videos = attrs.videos,\n                emoji = message.get('only_emoji'),\n                files =  attrs.files,\n                locations =  attrs.locations,\n                link_references =  attrs.link_references,\n                is_video = Boolean(videos && videos.length),\n                is_image = Boolean(images && images.length),\n                is_location = locations ? true : false,\n                is_file = files ? true : false,\n                is_audio = false,\n                template_for_images,\n                avatar_id = user_info.avatar,\n                avatar_url = user_info.avatar_url,\n                role = user_info.role,\n                badge = user_info.badge,\n                from_id = user_info.id,\n                has_encrypted_files = attrs.has_encrypted_files,\n                audio_player_list = [];\n\n            username = user_info.nickname || this.model.get('saved') && this.account.get('name') || (attrs.from_jid === this.contact.get('jid') && this.contact.get('name'));\n            if (!username) {\n                if (is_sender) {\n                    if (this.model.get(\"group_chat\")) {\n                        if (this.contact.my_info)\n                            username = this.contact.my_info.get('nickname');\n                        else if (this.contact)\n                            this.contact.getMyInfo(() => {\n                                username = this.contact.my_info.get('nickname');\n                                if ($message) {\n                                    $message.children(\".msg-wrap\").find(\".chat-msg-author-wrap .chat-msg-author\").text(Strophe.xmlescape(username));\n                                }\n                            });\n                        else\n                            username = this.account.get('name');\n                    } else\n                        username = this.account.get('name');\n                } else {\n                    username = this.account.contacts.get(attrs.from_jid) ? this.account.contacts.get(attrs.from_jid).get('name') : attrs.from_jid;\n                }\n            }\n            username = Strophe.xmlescape(username || \"\");\n\n            if (is_sender && this.model.get('group_chat')) {\n                if (this.contact.my_info) {\n                    role = this.contact.my_info.get('role');\n                    badge = this.contact.my_info.get('badge');\n                }\n            }\n            _.extend(attrs, {\n                username: username,\n                state: (message instanceof xabber.Message) ? message.getState() : 'sent',\n                verbose_state: (message instanceof xabber.Message) ? message.getVerboseState() : 'sent',\n                time: pretty_datetime(attrs.time),\n                short_time: utils.pretty_time(attrs.time),\n                avatar_id: avatar_id,\n                avatar_url: avatar_url,\n                is_image: is_image,\n                is_video: is_video,\n                is_file: is_file,\n                is_location: is_location,\n                files: files,\n                locations: locations,\n                link_references: link_references,\n                role: utils.pretty_name(role),\n                badge: badge,\n                from_id: from_id\n            });\n            attrs.encrypted = attrs.encrypted || this.model.get('encrypted');\n\n            if (attrs.type === 'system') {\n                let tpl_name = attrs.invite ? 'group_request' : 'system';\n                return $(templates.messages[tpl_name](attrs));\n            }\n\n            if (is_image) {\n                if (images.length > 1) {\n                    template_for_images = this.createImageGrid(attrs);\n                }\n            }\n\n            let classes = [\n                attrs.forwarded_message && 'forwarding',\n                (attrs.encrypted || this.model.get('encrypted')) ? 'encrypted' : \"\"\n            ];\n\n            let markup_body = utils.markupBodyMessage(message), $message;\n            if (attrs.searched_message){\n                let myRegexp = new RegExp('(.{0,12})(' + attrs.query + ')(.{0,12})','gmius'),\n                    matching_markup = myRegexp.exec(markup_body);\n                if (matching_markup) {\n                    if (matching_markup[1].length == 12)\n                        matching_markup[1] = '...' + matching_markup[1].substring(1);\n                    if (matching_markup[3].length == 12)\n                        matching_markup[3] = matching_markup[3].substring(0, matching_markup[3].length - 1) + '...';\n                    markup_body = matching_markup[1] + '<span class=\"mention ground-color-100\">' + matching_markup[2] + '</span>' + matching_markup[3];\n                    markup_body = markup_body.replace(/\\n/g, \" \");;\n                }\n            }\n\n            if (this.model.get('saved') && !markup_body.length && attrs.forwarded_message && attrs.forwarded_message.length == 1) {\n                $message = $(templates.messages.saved_main(_.extend(attrs, {\n                    classlist: classes.join(' ')\n                })));\n            } else if (attrs.searched_message)\n                $message = $(templates.messages.searched(_.extend(attrs, {\n                    is_sender: is_sender,\n                    message: markup_body,\n                    msg_time: utils.pretty_short_datetime_recent_chat(attrs.time),\n                    classlist: classes.join(' ')\n                })));\n            else if (attrs.type === 'file_upload')\n                $message = $(templates.messages.file_upload(_.extend(attrs, {\n                    is_sender: is_sender,\n                    message: markup_body,\n                    classlist: classes.join(' ')\n                })));\n            else\n                $message = $(templates.messages.main(_.extend(attrs, {\n                    is_sender: is_sender,\n                    message: markup_body,\n                    classlist: classes.join(' ')\n                })));\n\n            if (attrs.hasOwnProperty('is_trusted'))\n                $message.attr('data-trust', attrs.is_trusted);\n\n            if (is_image) {\n                if (images.length > 1) {\n                    $message.find('.chat-msg-media-content').html(template_for_images);\n                    !xabber.settings.load_media && $message.find('.img-content-template').first().append($('<div class=\"img-privacy-warning\"/>').text(xabber.getString(\"load_image_privacy_warning\")))\n                }\n                if (images.length == 1) {\n                    let $img_html = this.createImage(images[0]),\n                        img_content = this.createImageContainer(images[0]);\n                    $img_html.onload = () => {\n                        this.imageOnload($message);\n                    };\n                    $message.find('.chat-msg-media-content').html($(img_content).html($img_html));\n                    !xabber.settings.load_media && $message.find('.img-content').append($('<div class=\"img-privacy-warning\"/>').text(xabber.getString(\"load_image_privacy_warning\")))\n                    this.updateScrollBar();\n                }\n            }\n            if (is_video) {\n                let video_content = this.createVideoContainer();\n                $message.find('.chat-msg-media-content').append(video_content);\n                videos.forEach((video) => {\n                    let video_el = this.createVideo(video);\n                    $message.find('.video-content').append(video_el);\n                });\n                this.videoOnload($message);\n                $message.removeClass('file-upload noselect');\n            }\n\n            if (is_file && attrs.type !== 'file_upload') {\n                if (files.length > 0) {\n                    let file_attrs = _.clone(files),\n                        template_for_file_content;\n                    $(file_attrs).each((idx, file) => {\n                        let copied_attrs = _.clone(file_attrs[idx]);\n                        if (file.type) {\n                            if (file.voice)\n                                is_audio = true;\n                            else\n                                is_audio = false;\n                        }\n                        ((file_attrs.length === 1) && is_audio) && (file.name = xabber.getString(\"voice_message\"));\n                        let mdi_icon_class = utils.file_type_icon(file.type);\n                        _.extend(copied_attrs, { is_audio: is_audio, duration: utils.pretty_duration(copied_attrs.duration), mdi_icon: mdi_icon_class, size: utils.pretty_size(copied_attrs.size) });\n                        template_for_file_content = is_audio ? $(templates.messages.audio_file(copied_attrs)) : $(templates.messages.file(copied_attrs));\n                        $message.find('.chat-msg-media-content').append(template_for_file_content);\n                        if (is_audio && $message.find('.link-file').length) {\n                            let audio_player = {$audio_elem : $message.find('.link-file')[0]};\n                            audio_player.msg_time = $message.attr('data-time');\n                            audio_player.author = username;\n                            audio_player.message_unique_id = $message.attr('data-uniqueid');\n                            if (attrs.from_jid === this.account.get('jid')) {\n                                if (this.model.get('group_chat')) {\n                                    if (this.contact.my_info) {\n                                        audio_player.contact_avatar = this.contact.my_info.get('b64_avatar');\n                                        if (!audio_player.contact_avatar) {\n                                            if (this.account.cached_image)\n                                                audio_player.contact_avatar = this.account.cached_image;\n                                            !audio_player.contact_avatar && (audio_player.contact_avatar = Images.getDefaultAvatar(this.contact.my_info.get('nickname')));\n                                        } else\n                                            audio_player.contact_avatar = Images.getCachedImage(audio_player.contact_avatar);\n                                    }\n                                }\n                                if (!audio_player.contact_avatar)\n                                    audio_player.contact_avatar = this.account.cached_image;\n                            } else {\n                                if (this.model.get('group_chat')) {\n                                    let author = $message.find('.msg-wrap .chat-msg-author').text();\n                                    audio_player.contact_avatar = Images.getDefaultAvatar(author);\n                                }\n                                else {\n                                    let author = this.account.contacts.get($message.data('from')) || $message.find('.msg-wrap .chat-msg-author').text() || $message.data('from');\n                                    audio_player.contact_avatar = author.cached_image || Images.getDefaultAvatar(author);\n                                }\n                            }\n                            if (!this.model.plyr_players.filter(obj => { return (obj.message_unique_id === audio_player.message_unique_id)}).length) {\n                                this.model.plyr_players = this.model.plyr_players.concat([audio_player]).sort((a, b) => a.msg_time - b.msg_time);\n                                xabber.plyr_players = xabber.plyr_players.concat([audio_player]);\n                                audio_player_list = audio_player_list.concat([audio_player]);\n                            } else {\n                                audio_player_list = message.get('msg_player_audios');\n                            }\n                            xabber.trigger('plyr_player_updated');\n                        }\n                    });\n                }\n            }\n\n            if (is_file && attrs.type === 'file_upload') {\n                let images = [];\n                $(files).each((idx, file_) => {\n                    file_.upload_id = idx;\n                    if (utils.isImageType(file_.type)) {\n                        file_.sources = [utils.isImageType(file_.type) ? file_.key ? file_.image_prev.src : window.URL.createObjectURL(new Blob([file_])) : null,];\n                        images.push(file_);\n                    }\n                });\n                if (images.length > 0) {\n                    if (images.length > 1) {\n                        let template_for_images;\n                        if (images.length > 6) {\n                            let tpl_name = 'template-for-6',\n                                hidden_images = images.length - 5;\n                            template_for_images = $(templates.messages[tpl_name]({images}));\n                            template_for_images.find('.last-image').addClass('hidden-images');\n                            template_for_images.find('.image-counter').text('+' + hidden_images);\n                        }\n                        else {\n                            let tpl_name = 'template-for-' + images.length;\n                            template_for_images = $(templates.messages[tpl_name]({images}));\n                        }\n                        template_for_images.addClass('unuploaded-images');\n                        $(templates.messages.loading_circle()).insertAfter(template_for_images.find('img'));\n                        $message.find('.chat-msg-media-content.chat-main-upload-media').prepend(template_for_images);\n                    } else {\n                        let $img_html = this.createImage(images[0]),\n                            img_content = this.createImageContainer(images[0]),\n                            maxHeight = 400,\n                            maxWidth = (xabber.main_panel.$el.width() * 0.715 - 176) * 0.7,\n                            imgHeight = images[0].height,\n                            imgWidth = images[0].width;\n                        maxWidth = maxWidth > 400 ? 400 : maxWidth;\n                        if (imgHeight && imgWidth) {\n                            if (imgWidth > maxWidth) {\n                                imgHeight = imgHeight * (maxWidth/imgWidth);\n                                imgWidth = maxWidth;\n                            }\n                            if (imgHeight > maxHeight) {\n                                imgWidth = imgWidth * (maxHeight/imgHeight);\n                                imgHeight = maxHeight;\n                            }\n                        }\n                        imgWidth = imgWidth ? imgWidth : 200;\n                        imgHeight = imgHeight ? imgHeight : 200;\n                        $(img_content).addClass('unuploaded-images');\n                        $(img_content).attr('data-upload-file-id', images[0].upload_id);\n                        $(img_content).css({\n                            width: imgWidth,\n                            height: imgHeight,\n                            'max-height': maxHeight,\n                            'max-width': maxWidth,\n                        });\n                        $(img_content).html($img_html)\n                        $(img_content).append(templates.messages.loading_circle());\n                        $message.find('.chat-msg-media-content.chat-main-upload-media').prepend(img_content);\n                    }\n                }\n                if (files.length > 0) {\n                    $(files).each((idx, item) => {\n                        if (images.includes(item))\n                            return;\n                        let file_attrs = {\n                                name: item.name,\n                                type: item.type,\n                                upload_id: item.upload_id,\n                            },\n                            template_for_file_content;\n                        _.extend(file_attrs, {size: utils.pretty_size(item.size)});\n                        template_for_file_content = $(templates.messages.file_loading(file_attrs));\n                        template_for_file_content.find('.file-loading-container').html(templates.messages.loading_circle());\n                        $message.find('.chat-msg-media-content.chat-main-upload-media').append(template_for_file_content);\n                    });\n                }\n            }\n            if (is_location) {\n                if (locations.length > 0) {\n                    let location_attrs = _.clone(locations),\n                        template_for_location_content;\n                    $(location_attrs).each((idx, location) => {\n                        let copied_attrs = _.clone(location_attrs[idx]);\n                        _.extend(copied_attrs, { id: '_' + Math.random().toString(36).substr(2, 9)});\n                        if (xabber.settings.mapping_service){\n                            template_for_location_content = $(templates.messages.location(copied_attrs));\n                            $message.find('.chat-msg-location-content').attr('lon', copied_attrs.lon);\n                            $message.find('.chat-msg-location-content').attr('lat', copied_attrs.lat);\n                            $message.find('.chat-msg-location-content').append(template_for_location_content);\n                            this.locationOnload($message);\n                        } else {\n                            $message.find('.chat-msg-content').append('<a class=\"location-link\" href=\"geo:' + copied_attrs.lat + ',' + copied_attrs.lon + '\">' + xabber.getString(\"recent_chat__last_message__locations_plural_0\") + '</a>');\n                        }\n                    });\n                }\n            }\n\n            if (link_references && link_references.length > 0) {\n                let link_references_attrs = _.clone(link_references),\n                    template_for_link_reference_content,\n                    youtube_url_regexp = new RegExp('^((?:https?:)?\\\\/\\\\/)?((?:www|m)\\\\.)?((?:youtube(-nocookie)?\\\\.com|youtu.be))(\\\\/(?:[\\\\w\\\\-]+\\\\?v=|embed\\\\/|v\\\\/)?)([\\\\w\\\\-]+)(\\\\S+)?$', 'i'),\n                    vimeo_url_regexp = /(?:www\\.|player\\.)?vimeo.com\\/(?:channels\\/(?:\\w+\\/)?|groups\\/(?:[^\\/]*)\\/videos\\/|album\\/(?:\\d+)\\/video\\/|video\\/|)(\\d+)(?:[a-zA-Z0-9_\\-]+)?/i;\n                $(link_references_attrs).each((idx, link) => {\n                    let copied_attrs = _.clone(link_references_attrs[idx]);\n                    copied_attrs.domain = copied_attrs.url ? utils.getDomainFromUrl(copied_attrs.url) : copied_attrs.site_name;\n                    if (copied_attrs.original_text && !/^https?:\\/\\//i.test(copied_attrs.original_text))\n                        copied_attrs.original_text = 'http://' + copied_attrs.original_text;\n                    if (link_references_attrs[idx].type && link_references_attrs[idx].type.includes('video') && link_references_attrs[idx].video_url && (youtube_url_regexp.test(link_references_attrs[idx].video_url) || vimeo_url_regexp.test(link_references_attrs[idx].video_url))){\n                        copied_attrs.video_url = link_references_attrs[idx].video_url.replace(\"autoplay=1&\", \"\");\n                        copied_attrs.is_video = true;\n                        youtube_url_regexp.test(link_references_attrs[idx].video_url) && (copied_attrs.provider = 'youtube');\n                        vimeo_url_regexp.test(link_references_attrs[idx].video_url) && (copied_attrs.provider = 'vimeo');\n                    } else\n                        copied_attrs.is_video = false;\n                    template_for_link_reference_content = $(templates.messages.link_reference_chat(copied_attrs));\n                    $message.find('.chat-msg-link-reference-content').append(template_for_link_reference_content);\n                });\n            }\n\n            if (message.get('data_form')) {\n                let data_form = utils.render_data_form(message.get('data_form'));\n                $message.find('.chat-msg-content').append(data_form);\n            }\n\n            if (attrs.forwarded_message && !attrs.searched_message) {\n                $(attrs.forwarded_message).each((idx, fwd_msg) => {\n                    is_sender = fwd_msg.isSenderMe();\n                    attrs = _.clone(fwd_msg.attributes);\n                    let is_image_forward = Boolean(attrs.images && attrs.images.length),\n                        images_forward = is_image_forward ? _.clone(attrs.images) : undefined,\n                        $img_html_forward,\n                        is_forward_video = Boolean(attrs.videos && attrs.videos.length),\n                        is_forward_file = Boolean(attrs.files && attrs.files.length),\n                        is_forward_location = Boolean(attrs.locations && attrs.locations.length),\n                        is_fwd_voice_message,\n                        user_info = attrs.user_info || {},\n                        avatar_id = user_info.avatar,\n                        avatar_url = user_info.avatar_url,\n                        role = utils.pretty_name(user_info.role),\n                        badge = user_info.badge,\n                        from_id = user_info.id,\n                        from_jid = attrs.from_jid;\n                    !has_encrypted_files && (has_encrypted_files = attrs.has_encrypted_files);\n                    if (is_sender) {\n                        username = Strophe.xmlescape(user_info.nickname || this.account.get('name'));\n                    } else {\n                        username = Strophe.xmlescape(user_info.nickname || user_info.id || this.account.contacts.mergeContact({jid: from_jid}).get('name'));\n                    }\n\n                    let fwd_markup_body = utils.markupBodyMessage(fwd_msg);\n\n                    let $f_message = $(templates.messages.forwarded(_.extend(attrs, {\n                        time: pretty_datetime(attrs.time),\n                        short_time: utils.pretty_short_month_date(attrs.time),\n                        username: username,\n                        avatar_id: avatar_id,\n                        avatar_url: avatar_url,\n                        message: fwd_markup_body,\n                        is_file: is_forward_file,\n                        is_location: is_forward_location,\n                        is_audio: is_fwd_voice_message,\n                        role: role,\n                        badge: badge,\n                        from_id: from_id\n                    })));\n\n                    if (this.model.get('saved') && $message.hasClass('saved-main')) {\n                        $f_message.append($message.children('.right-side').clone());\n                    }\n\n                    if (fwd_msg.get('forwarded_message')) {\n                        let fwd_messages_count = fwd_msg.get('forwarded_message').length,\n                            fwd_messages_link = xabber.getQuantityString(\"forwarded_messages_count\", fwd_messages_count);\n                        $f_message.children('.msg-wrap').children('.fwd-msgs-block').append($('<a/>', {class: 'collapsed-forwarded-message', 'data-uniqueid': attrs.unique_id}).text(fwd_messages_link));\n                    }\n\n                    if (is_image_forward) {\n                        if (images_forward.length > 1) {\n                            template_for_images = this.createImageGrid(attrs);\n                            $f_message.find('.chat-msg-media-content').html(template_for_images);\n                            !xabber.settings.load_media && $f_message.find('.img-content-template').first().append($('<div class=\"img-privacy-warning\"/>').text(xabber.getString(\"load_image_privacy_warning\")))\n                        }\n                        if (images_forward.length == 1) {\n                            $img_html_forward = this.createImage(images_forward[0]);\n                            $img_html_forward.onload = () => {\n                                this.imageOnload($message);\n                            };\n                            let img_content_forward = this.createImageContainer(images_forward[0]);\n                            $f_message.find('.chat-msg-media-content').html($(img_content_forward).html($img_html_forward));\n                            !xabber.settings.load_media && $f_message.find('.img-content').append($('<div class=\"img-privacy-warning\"/>').text(xabber.getString(\"load_image_privacy_warning\")))\n                        }\n                    }\n                    if (is_forward_video) {\n                        let video_content = this.createVideoContainer();\n                        $f_message.find('.chat-msg-media-content').append(video_content);\n                        attrs.videos.forEach((video) => {\n                            let video_el = this.createVideo(video);\n                            $f_message.find('.video-content').append(video_el);\n                        });\n                        this.videoOnload($message);\n                        $f_message.removeClass('file-upload noselect');\n                    }\n\n                    if (is_forward_file) {\n                        if (attrs.files.length > 0) {\n                            let file_attrs = _.clone(attrs.files),\n                                template_for_file_content;\n                            $(file_attrs).each((idx, file) => {\n                                let copied_attrs = _.clone(file_attrs[idx]);\n                                if (file.type) {\n                                    if (file.voice)\n                                        is_audio = true;\n                                    else\n                                        is_audio = false;\n                                }\n                                ((file_attrs.length === 1) && is_audio) && (file.name = xabber.getString(\"voice_message\"));\n                                let mdi_icon_class = utils.file_type_icon(file.type);\n                                _.extend(copied_attrs, { is_audio: is_audio, duration: utils.pretty_duration(copied_attrs.duration), mdi_icon: mdi_icon_class, size: utils.pretty_size(copied_attrs.size)});\n                                template_for_file_content = is_audio ? $(templates.messages.audio_file(copied_attrs)) : $(templates.messages.file(copied_attrs));\n                                $f_message.find('.chat-msg-media-content').append(template_for_file_content);\n                                if (is_audio && $f_message.find('.link-file').length) {\n                                    let audio_player = {$audio_elem : $f_message.find('.link-file')[0]};\n                                    audio_player.msg_time = $message.attr('data-time');\n                                    audio_player.author = username;\n                                    audio_player.message_unique_id = $message.attr('data-uniqueid');\n                                    if (is_sender) {\n                                        if (this.model.get('group_chat')) {\n                                            if (this.contact.my_info) {\n                                                audio_player.contact_avatar = this.contact.my_info.get('b64_avatar');\n                                                if (!audio_player.contact_avatar)\n                                                    audio_player.contact_avatar = this.account.cached_image || Images.getDefaultAvatar(this.contact.my_info.get('nickname'));\n                                                else\n                                                    audio_player.contact_avatar = Images.getCachedImage(audio_player.contact_avatar);\n                                            }\n                                        }\n                                        if (!audio_player.contact_avatar)\n                                            audio_player.contact_avatar = this.account.cached_image;\n                                    } else if (this.account.contacts.mergeContact({jid: from_jid})) {\n                                        let contact = this.account.contacts.mergeContact({jid: from_jid})\n                                        audio_player.contact_avatar = contact.cached_image || (this.model.get('group_chat') ? Images.getDefaultAvatar($f_message.find('.msg-wrap .fwd-msg-author').text()) : Images.getDefaultAvatar(contact));\n                                    }\n                                    if (!this.model.plyr_players.filter(obj => { return (obj.message_unique_id === audio_player.message_unique_id)}).length) {\n                                        this.model.plyr_players = this.model.plyr_players.concat([audio_player]).sort((a, b) => a.msg_time - b.msg_time);\n                                        xabber.plyr_players = xabber.plyr_players.concat([audio_player]);\n                                        audio_player_list = audio_player_list.concat([audio_player]);\n                                    } else {\n                                        audio_player_list = message.get('msg_player_audios');\n                                    }\n                                    xabber.trigger('plyr_player_updated');\n                                }\n                            });\n                        }\n                    }\n                    if (is_forward_location) {\n                        if (attrs.locations.length > 0) {\n                            let location_attrs = _.clone(attrs.locations),\n                                template_for_location_content;\n                            $(location_attrs).each((idx, location) => {\n                                let copied_attrs = _.clone(location_attrs[idx]);\n                                _.extend(copied_attrs, { id: '_fwd' + Math.random().toString(36).substr(2, 9) });\n                                if (xabber.settings.mapping_service){\n                                    template_for_location_content = $(templates.messages.location(copied_attrs));\n                                    $f_message.find('.chat-msg-location-content').attr('lon', copied_attrs.lon);\n                                    $f_message.find('.chat-msg-location-content').attr('lat', copied_attrs.lat);\n                                    $f_message.find('.chat-msg-location-content').append(template_for_location_content);\n                                } else {\n                                    $f_message.find('.chat-msg-content').append('<a class=\"location-link\" href=\"geo:' + copied_attrs.lat + ',' + copied_attrs.lon + '\">' + xabber.getString(\"recent_chat__last_message__locations_plural_0\") + '</a>');\n                                }\n                            });\n                        }\n                    }\n                    if (attrs.link_references && attrs.link_references.length > 0) {\n                        let link_references_attrs = _.clone(attrs.link_references),\n                            template_for_link_reference_content,\n                            youtube_url_regexp = new RegExp('^((?:https?:)?\\\\/\\\\/)?((?:www|m)\\\\.)?((?:youtube(-nocookie)?\\\\.com|youtu.be))(\\\\/(?:[\\\\w\\\\-]+\\\\?v=|embed\\\\/|v\\\\/)?)([\\\\w\\\\-]+)(\\\\S+)?$', 'i'),\n                            vimeo_url_regexp = /(?:www\\.|player\\.)?vimeo.com\\/(?:channels\\/(?:\\w+\\/)?|groups\\/(?:[^\\/]*)\\/videos\\/|album\\/(?:\\d+)\\/video\\/|video\\/|)(\\d+)(?:[a-zA-Z0-9_\\-]+)?/i;\n                        $(link_references_attrs).each((idx, link) => {\n                            let copied_attrs = _.clone(link_references_attrs[idx]);\n                            copied_attrs.domain = copied_attrs.url ? utils.getDomainFromUrl(copied_attrs.url) : copied_attrs.site_name;\n                            if (copied_attrs.original_text && !/^https?:\\/\\//i.test(copied_attrs.original_text))\n                                copied_attrs.original_text = 'http://' + copied_attrs.original_text;\n                            if (link_references_attrs[idx].type && link_references_attrs[idx].type.includes('video') && link_references_attrs[idx].video_url && (youtube_url_regexp.test(link_references_attrs[idx].video_url) || vimeo_url_regexp.test(link_references_attrs[idx].video_url))){\n                                copied_attrs.video_url = link_references_attrs[idx].video_url.replace(\"autoplay=1&\", \"\");\n                                copied_attrs.is_video = true;\n                                youtube_url_regexp.test(link_references_attrs[idx].video_url) && (copied_attrs.provider = 'youtube');\n                                vimeo_url_regexp.test(link_references_attrs[idx].video_url) && (copied_attrs.provider = 'vimeo');\n                            } else\n                                copied_attrs.is_video = false;\n                            template_for_link_reference_content = $(templates.messages.link_reference_chat(copied_attrs));\n                            $f_message.find('.chat-msg-link-reference-content').append(template_for_link_reference_content);\n                        });\n                    }\n                    if (fwd_msg.get('data_form')) {\n                        let data_form = utils.render_data_form(fwd_msg.get('data_form'));\n                        $f_message.find('.chat-msg-content').append(data_form);\n                    }\n                    $message.children('.msg-wrap').length ? $message.children('.msg-wrap').children('.fwd-msgs-block').append($f_message) : $message.children('.fwd-msgs-block').append($f_message);\n                });\n                this.updateScrollBar();\n                if (this.model.get('saved') && $message.hasClass('saved-main')) {\n                    $message.children('.right-side').remove();\n                }\n            }\n            else\n                $message.find('.fwd-msgs-block').remove();\n\n            if (attrs.encrypted || this.model.get('encrypted') || has_encrypted_files) {\n                this.decryptImages(message, has_encrypted_files);\n            }\n\n            if (attrs.searched_message) {\n                let msg_text = '';\n                msg_text = (attrs.forwarded_message) ? (xabber.getQuantityString(\"forwarded_messages_count\", attrs.forwarded_message.length)) : '';\n                if (is_file && is_image && files.length && images.length)\n                    msg_text = xabber.getString(\"recent_chat__last_message__attachments\", [files.length + images.length]);\n                else {\n                    if (is_file && files.length == 1 && (files[0].is_audio || files[0].voice))\n                        msg_text = `${xabber.getString(\"voice_message\")}, ` + utils.pretty_duration(files[0].duration);\n                    else if (is_file && files.length > 0) {\n                        let total_size = 0;\n                        files.forEach((f) => {\n                            total_size += Number(f.size)\n                        });\n                        msg_text = xabber.getQuantityString(\"recent_chat__last_message__files\", files.length) + (total_size > 0 ? `, ${utils.pretty_size(total_size)}` : \"\");\n                    }\n                    if (is_image && images.length > 0) {\n                        let total_size = 0;\n                        images.forEach((f) => {\n                            total_size += Number(f.size)\n                        });\n                        msg_text = xabber.getQuantityString(\"recent_chat__last_message__images\", images.length) + (total_size > 0 ? `, ${utils.pretty_size(total_size)}` : \"\");\n                    }\n                    if (is_location && locations.length > 0) {\n                        msg_text = xabber.getQuantityString(\"recent_chat__last_message__locations\", locations.length);\n                    }\n                }\n                if (msg_text)\n                    $message.find('.chat-msg-content').text(msg_text)\n            }\n            message.set('msg_player_audios', audio_player_list);\n            return $message.hyperlinkify({selector: '.chat-text-content', embed_video: true}).emojify('.chat-text-content', {tag_name: 'div', emoji_size: utils.emoji_size(emoji)}).emojify('.chat-msg-author-badge', {emoji_size: 16});\n        },\n\n        getDateIndicator: function (date) {\n            let day_date = moment(date).startOf('day');\n            return $('<div class=\"chat-day-indicator one-line noselect\"' + (this.model.get('encrypted') ? (' data-trust=\"' + (this.bottom.$el.attr('data-trust') || this.bottom.$el.attr('data-contact-trust')) + '\"') : \"\") + ' data-time=\"'+\n                day_date.format('x')+'\">'+pretty_date(day_date)+'</div>');\n        },\n\n        initPlyrEmbedPlayer: function ($msg) {\n            let message = this.model.messages.get($msg.data('uniqueid')),\n                msg_players = [];\n            $msg.find('.plyr-video-container:not(.no-load)').each((idx, item) => {\n                if ($(item).hasClass('no-load'))\n                    return;\n                let existing_player = this.model.plyr_players.filter(obj => { return (obj.message_id === idx && obj.message_unique_id === $msg.attr('data-uniqueid'))}),\n                    player;\n                if (existing_player.length){\n                    player = existing_player[0]\n                    msg_players = msg_players.concat([player]);\n                } else {\n                    player = {video_src: $(item).attr('data-src')}\n                    player.provider = $(item).attr('data-provider');\n                    player.msg_time = $msg.attr('data-time');\n                    player.chat_item = this.model.item_view;\n                    player.message_id = idx;\n                    player.message_unique_id = $msg.attr('data-uniqueid');\n                    this.model.plyr_players = this.model.plyr_players.concat([player]).sort((a, b) => a.msg_time - b.msg_time);\n                    xabber.plyr_players = xabber.plyr_players.concat([player]);\n                    msg_players = msg_players.concat([player]);\n                }\n                $(item).attr('data-message-id', player.message_id);\n                $(item).addClass('no-load');\n                if (xabber.current_plyr_player && xabber.current_plyr_player.player_item)\n                    if (xabber.current_plyr_player.player_item.message_id === player.message_id && xabber.current_plyr_player.player_item.message_unique_id === player.message_unique_id)\n                        $(item).addClass('active-plyr-container');\n            });\n            msg_players.length && message.set('msg_player_videos', msg_players);\n            xabber.trigger('plyr_player_updated');\n        },\n\n        hideMessageAuthor: function ($msg) {\n            $msg.removeClass('with-author');\n        },\n\n        showMessageAuthor: function ($msg) {\n            if ($msg.hasClass('system'))\n                return;\n            $msg.addClass('with-author');\n            let image, $avatar = $msg.find('.left-side .circle-avatar'),\n                from_jid = $msg.data('from');\n            if (from_jid === this.account.get('jid')) {\n                if (this.model.get('group_chat')) {\n                    if (this.contact.my_info) {\n                        image = this.contact.my_info.get('b64_avatar');\n                        if (!image) {\n                            if (this.account.cached_image)\n                                image = this.account.cached_image;\n                            !image && (image = Images.getDefaultAvatar(this.contact.my_info.get('nickname')));\n                        } else\n                            image = Images.getCachedImage(image);\n                    }\n                }\n                if (!image)\n                    image = this.account.cached_image;\n            } else {\n                if (this.model.get('group_chat')) {\n                    let author = $msg.find('.msg-wrap .chat-msg-author').text();\n                    image = Images.getDefaultAvatar(author);\n                }\n                else {\n                    let author = this.account.contacts.get($msg.data('from')) || $msg.find('.msg-wrap .chat-msg-author').text() || $msg.data('from');\n                    image = author.cached_image || Images.getDefaultAvatar(author);\n                }\n            }\n            $avatar.setAvatar(image, this.avatar_size);\n            if ($msg.data('avatar')) {\n                if ($msg.data('from-id')) {\n                    if (this.account.chat_settings.getHashAvatar($msg.data('from-id')) == $msg.data('avatar') && (this.account.chat_settings.getB64Avatar($msg.data('from-id')))) {\n                        $avatar.setAvatar(this.account.chat_settings.getB64Avatar($msg.data('from-id')), this.avatar_size);\n                    }\n                    else {\n                        let pending_avatar = this._pending_avatars.find(a => a.hash == $msg.data('avatar'));\n                        if (pending_avatar) {\n                            pending_avatar.dfd.done((data_avatar) => {\n                                $avatar.setAvatar(data_avatar, this.avatar_size);\n                                let idx = this._pending_avatars.indexOf(pending_avatar);\n                                if (idx > -1)\n                                    this._pending_avatars.splice(idx, 1);\n                            });\n                        } else {\n                            if($msg.data('avatar-url')){\n                                $avatar.setAvatar($msg.data('avatar-url'), this.avatar_size);\n                                this.account.chat_settings.updateCachedAvatars($msg.data('from-id'), $msg.data('avatar'), $msg.data('avatar-url'));\n                            }\n                            else\n                            {\n                                let node = Strophe.NS.PUBSUB_AVATAR_DATA + '#' + $msg.data('from-id'), dfd = new $.Deferred();\n                                this._pending_avatars.push({hash: $msg.data('avatar'), dfd: dfd});\n                                this.contact.getAvatar($msg.data('avatar'), node, (data_avatar) => {\n                                    $avatar.setAvatar(data_avatar, this.avatar_size);\n                                    this.account.chat_settings.updateCachedAvatars($msg.data('from-id'), $msg.data('avatar'), data_avatar);\n                                    dfd.resolve(data_avatar);\n                                });\n\n                            }\n                        }\n                    }\n                }\n            }\n        },\n\n        hideFwdMessageAuthor: function ($msg) {\n            $msg.removeClass('with-author');\n        },\n\n        showFwdMessageAuthor: function ($fwd_message) {\n            if (!$fwd_message.length)\n                return;\n            $fwd_message.addClass('with-author');\n            let image,\n                $avatar = $fwd_message.find('.circle-avatar'),\n                from_jid = $fwd_message.data('from'),\n                is_sender = (from_jid === this.account.get('jid')),\n                contact = this.account.contacts.get(from_jid) || from_jid;\n            if (is_sender) {\n                if (this.model.get('group_chat')) {\n                    if (this.contact.my_info) {\n                        image = this.contact.my_info.get('b64_avatar');\n                        if (!image)\n                            image = this.account.cached_image || Images.getDefaultAvatar(this.contact.my_info.get('nickname'));\n                        else\n                            image = Images.getCachedImage(image);\n                    }\n                }\n                if (!image)\n                    image = this.account.cached_image;\n            } else if (contact) {\n                image = contact.cached_image || (this.model.get('group_chat') ? Images.getDefaultAvatar($fwd_message.find('.msg-wrap .fwd-msg-author').text()) : Images.getDefaultAvatar(contact));\n            }\n            $avatar.setAvatar(image, this.avatar_size);\n            $avatar.removeClass('hidden');\n            if ($fwd_message.data('avatar')) {\n                if ($fwd_message.data('from-id')) {\n                    if ((this.account.chat_settings.getHashAvatar($fwd_message.data('from-id')) == $fwd_message.data('avatar')) && (this.account.chat_settings.getB64Avatar($fwd_message.data('from-id')))) {\n                        $avatar.setAvatar(this.account.chat_settings.getB64Avatar($fwd_message.data('from-id')), this.avatar_size);\n                    }\n                    else {\n                        if($fwd_message.data('avatar-url')){\n                            $avatar.setAvatar($fwd_message.data('avatar-url'), this.avatar_size);\n                            this.account.chat_settings.updateCachedAvatars($fwd_message.data('from-id'), $fwd_message.data('avatar'), $fwd_message.data('avatar-url'));\n                        }\n                        else {\n                            let node = Strophe.NS.PUBSUB_AVATAR_DATA + '#' + $fwd_message.data('from-id');\n                            this.contact && this.contact.getAvatar($fwd_message.data('avatar'), node, (data_avatar) => {\n                                $avatar.setAvatar(data_avatar, this.avatar_size);\n                                this.account.chat_settings.updateCachedAvatars($fwd_message.data('from-id'), $fwd_message.data('avatar'), data_avatar);\n                            });\n                        }\n                    }\n                }\n            }\n        },\n\n        updateMessageInChat: function (msg_elem) {\n            let $msg = $(msg_elem);\n            $msg.prev('.chat-day-indicator').remove();\n            if ($msg.find('.plyr-video-container').length) {\n                this.initPlyrEmbedPlayer($msg);\n            }\n            let $prev_msg = $msg.prevAll('.chat-message').first();\n            if (!$prev_msg.length) {\n                this.getDateIndicator($msg.data('time')).insertBefore($msg);\n                this.showMessageAuthor($msg);\n                $msg.find('.fwd-message').each((idx, fwd_msg_item) => {\n                    this.showFwdMessageAuthor($(fwd_msg_item));\n                });\n                return;\n            }\n            if ($msg.find('.data-form').length) {\n                this.showMessageAuthor($msg);\n                return;\n            }\n            let is_system = $prev_msg.hasClass('system'),\n                is_same_sender = ($msg.data('from') === $prev_msg.data('from')),\n                is_same_date = moment($msg.data('time')).startOf('day')\n                        .isSame(moment($prev_msg.data('time')).startOf('day'));\n            if (!is_same_date) {\n                this.getDateIndicator($msg.data('time')).insertBefore($msg);\n                this.showMessageAuthor($msg);\n            } else if (is_system || !is_same_sender || $prev_msg.hasClass('saved-main')) {\n                this.showMessageAuthor($msg);\n            } else {\n                this.hideMessageAuthor($msg);\n            }\n            if ($msg.hasClass('forwarding')) {\n                let $fwd_message = $msg.find('.fwd-message');\n                $fwd_message.each((idx, fwd_msg_item) => {\n                    let $fwd_msg_item = $(fwd_msg_item),\n                        $prev_fwd_message = (idx > 0) ? $fwd_msg_item.prev() : [];\n                    $fwd_msg_item.switchClass('hide-date', is_same_date && $prev_fwd_message.length);\n                    $fwd_msg_item.removeClass('hide-time');\n                    if ($prev_fwd_message.length) {\n                        let is_same_fwded_sender = ($fwd_msg_item.data('from') === $prev_fwd_message.data('from'));\n                        if (is_same_fwded_sender) {\n                            this.hideFwdMessageAuthor($fwd_msg_item);\n                        } else {\n                            this.showFwdMessageAuthor($fwd_msg_item);\n                        }\n                    } else {\n                        this.showMessageAuthor($msg);\n                        this.showFwdMessageAuthor($fwd_msg_item);\n                    }\n                });\n            }\n        },\n\n        notifyMessage: function (message) {\n            if (xabber.settings.notifications && ((xabber.settings.notifications_private && !this.model.get('group_chat')) || (xabber.settings.notifications_group && this.model.get('group_chat')))) {\n                let notification_text;\n                if ((this.model.get('group_chat') && xabber.settings.message_preview_group) || (!this.model.get('group_chat') && xabber.settings.message_preview_private))\n                    notification_text = message.getText();\n                else\n                    notification_text = xabber.getString(\"notification__text_sent_a_message\");\n                let notification = xabber.popupNotification({\n                    title: this.contact.get('name'),\n                    text: notification_text,\n                    icon: this.contact.cached_image.url\n                });\n                notification.onclick = () => {\n                    window.focus();\n                    this.model.trigger('open');\n                };\n            }\n            if (xabber.settings.group_sound && xabber.settings.notifications_group && this.model.get('group_chat')) {\n                let sound;\n                if (message.get('auth_request')) {\n                    sound = xabber.settings.sound_on_auth_request;\n                } else {\n                    sound = xabber.settings.sound_on_group_message;\n                }\n                xabber.playAudio(sound, false, xabber.settings.notifications_volume);\n            }\n            else if (xabber.settings.private_sound && xabber.settings.notifications_private && !this.model.get('group_chat')) {\n                let sound;\n                if (message.get('auth_request')) {\n                    sound = xabber.settings.sound_on_auth_request;\n                } else {\n                    sound = xabber.settings.sound_on_private_message;\n                }\n                xabber.playAudio(sound, false, xabber.settings.notifications_volume);\n            }\n            xabber.recountAllMessageCounter();\n        },\n\n          attentionMessage: function () {\n              let notification = xabber.popupNotification({\n                  title: this.contact.get('name'),\n                  text: xabber.getString(\"chats_attention\"),\n                  icon: this.contact.cached_image.url\n              });\n              notification.onclick = () => {\n                  window.focus();\n                  this.model.trigger('open');\n              };\n              let sound = xabber.settings.sound_on_attention;\n              xabber.playAudio(sound);\n          },\n\n        sendMessage: function (message) {\n            let body = message.get('message'),\n                legacy_body = '',\n                mutable_content = [],\n                forwarded_message = message.get('forwarded_message'),\n                unique_id = message.get('unique_id'),\n                msg_id = message.get('msgid'),\n                link_references = message.get('link_references'),\n                stanza = $msg({\n                    to: this.model.get('jid'),\n                    type: 'chat',\n                    id: msg_id\n                });\n\n            if (forwarded_message) {\n                legacy_body = [];\n                $(forwarded_message).each((idx, fwd_msg) => {\n                    let legacy_fwd_msg = Array.from(_.escape(_.unescape(this.bottom.createTextMessage([fwd_msg], \">\"))) + ((idx === forwarded_message.length - 1 && !body.length) ? \"\" : '\\n')),\n                        idx_begin = legacy_body.length,\n                        fwd = $(fwd_msg.get('xml')).clone(),\n                        idx_end = legacy_body.concat(legacy_fwd_msg).length;\n                    if (!fwd.attr('from'))\n                        fwd.attr('from', this.account.get('jid'));\n                    stanza.c('reference', {\n                        xmlns: Strophe.NS.REFERENCE,\n                        type: 'mutable',\n                        begin: idx_begin,\n                        end: idx_end\n                    })\n                        .c('forwarded', {xmlns: 'urn:xmpp:forward:0'})\n                        .c('delay', {\n                            xmlns: 'urn:xmpp:delay',\n                            stamp: fwd_msg.get('time')\n                        }).up().cnode(fwd[0]).up().up().up();\n                    legacy_body = legacy_body.concat(legacy_fwd_msg);\n                    mutable_content.push({\n                        start: idx_begin,\n                        end: idx_end,\n                        type: 'forward'\n                    });\n                });\n                body = _.unescape(legacy_body.join(\"\")) + body;\n            }\n\n            if (message.get('mentions') && message.get('mentions').length) {\n                message.get('mentions').forEach((mention) => {\n                    let mention_attrs = {xmlns: Strophe.NS.MARKUP};\n                    mention.is_gc && (mention_attrs.node = Strophe.NS.GROUP_CHAT);\n                    stanza.c('reference', {\n                        xmlns: Strophe.NS.REFERENCE,\n                        begin: mention.start + legacy_body.length,\n                        end: mention.end + legacy_body.length,\n                        type: 'decoration',\n                    })\n                        .c('mention', mention_attrs).t(mention.target).up().up();\n                });\n            }\n\n            if (message.get('markups')) {\n                message.get('markups').forEach((markup) => {\n                    stanza.c('reference', {\n                        xmlns: Strophe.NS.REFERENCE,\n                        begin: markup.start + legacy_body.length,\n                        end: markup.end + legacy_body.length,\n                        type: 'decoration'\n                    });\n                    for (let idx in markup.markup) {\n                        stanza.c(markup.markup[idx], {xmlns: Strophe.NS.MARKUP}).up();\n                    }\n                    stanza.up();\n                });\n            }\n\n            if (message.get('blockquotes')) {\n                message.get('blockquotes').forEach((blockquote) => {\n                    stanza.c('reference', {\n                        xmlns: Strophe.NS.REFERENCE,\n                        begin: blockquote.start + legacy_body.length,\n                        end: blockquote.end + legacy_body.length,\n                        type: 'decoration'\n                    })\n                        .c('quote', {xmlns: Strophe.NS.MARKUP}).up().up();\n                });\n            }\n\n            if (message.get('type') == 'file_upload') {\n                let files = message.get('files') || [],\n                    images = message.get('images') || [],\n                    videos = message.get('videos') || [],\n                    all_files = files.concat(images);\n                all_files = all_files.concat(videos)\n                all_files.forEach((file, idx) => {\n                    (idx === 0) && (body += '\\n');\n                    legacy_body = file.sources[0] + ((idx != all_files.length - 1) ? '\\n' : \"\");\n                    let start_idx = Array.from(_.escape(body)).length,\n                        end_idx = start_idx + legacy_body.length;\n                    stanza.c('reference', {\n                        xmlns: Strophe.NS.REFERENCE,\n                        type: 'mutable',\n                        begin: start_idx,\n                        end: end_idx\n                    });\n                    file.voice && stanza.c('voice-message', {xmlns: Strophe.NS.VOICE_MESSAGE});\n                    stanza.c('file-sharing', {xmlns: Strophe.NS.FILES}).c('file');\n                    file.type && stanza.c('media-type').t(file.type).up();\n                    file['id'] && stanza.c('gallery-id').t(file['id']).up();\n                    file.thumbnail && stanza.c('thumbnail-uri').t(file.thumbnail).up();\n                    file.created && stanza.c('created').t(file.created).up();\n                    file.name && stanza.c('name').t(file.name).up();\n                    file.size && stanza.c('size').t(file.size).up();\n                    file.height && stanza.c('height').t(file.height).up();\n                    file.width && stanza.c('width').t(file.width).up();\n                    file.duration && stanza.c('duration').t(file.duration).up();\n                    file.description && stanza.c('desc').t(file.description).up();\n                    stanza.up().c('sources');\n                    file.sources.forEach((u) => {\n                        if (file.key)\n                            u = u.replace(/^(https|http)/, 'aescbc') + '#' + utils.ArrayBuffertoBase64(file.key);\n                        stanza.c('uri').t(u).up();\n                    });\n                    stanza.up().up().up();\n                    file.voice && stanza.up();\n                    body += legacy_body;\n                    mutable_content.push({start: start_idx, end: end_idx});\n                });\n                message.set({type: 'main'});\n            }\n\n            if (link_references && link_references.length) {\n                link_references.forEach((link_reference, idx) => {\n                    if (link_reference.start === -1) {\n                        link_reference.start = Array.from(_.escape(body)).length;\n                        body = body + '\\n' + link_reference.original_text;\n                        link_reference.end = link_reference.start + link_reference.original_text.length + 1;\n                    }\n                    stanza.c('reference', {\n                        xmlns: Strophe.NS.REFERENCE,\n                        begin: link_reference.start,\n                        end: link_reference.end,\n                        type: 'mutable',\n                    }).c('ogp', { xmlns: Strophe.NS.OGP, url: link_reference.original_text });\n                    link_reference.site && stanza.c('meta', { property: 'og:site_name', content: link_reference.site}).up();\n                    link_reference.type && stanza.c('meta', { property: 'og:type', content: link_reference.type}).up();\n                    link_reference.title && stanza.c('meta', { property: 'og:title', content: link_reference.title}).up();\n                    link_reference.url && stanza.c('meta', { property: 'og:url', content: link_reference.url}).up();\n                    link_reference.description && stanza.c('meta', { property: 'og:description', content: link_reference.description}).up();\n                    link_reference.image && stanza.c('meta', { property: 'og:image', content: link_reference.image}).up();\n                    link_reference.image_width && stanza.c('meta', { property: 'og:image:width', content: link_reference.image_width}).up();\n                    link_reference.image_height && stanza.c('meta', { property: 'og:image:height', content: link_reference.image_height}).up();\n                    link_reference.video_url && stanza.c('meta', { property: 'og:video:url', content: link_reference.video_url}).up();\n                    stanza.up().up();\n                    mutable_content.push({start: link_reference.start, end: link_reference.end});\n                });\n            }\n\n            mutable_content.length && message.set({mutable_content: mutable_content});\n\n            this.account._pending_messages.push({chat_hash_id: this.model.id, unique_id: unique_id});\n\n            message.set('original_message', body);\n            body && stanza.c('body').t(body).up();\n            stanza.c('markable').attrs({'xmlns': Strophe.NS.CHAT_MARKERS}).up()\n                .c('origin-id', {id: msg_id, xmlns: 'urn:xmpp:sid:0'}).up();\n            message.set({xml: $(stanza.tree()).clone()[0]});\n            if (message.get('state') === constants.MSG_ERROR) {\n                stanza.c('retry', {xmlns: Strophe.NS.DELIVERY}).up();\n                message.set('state', constants.MSG_PENDING);\n            }\n            if (stanza.toString().length >= constants.STANZA_MAX_SIZE) {\n                utils.dialogs.error(xabber.getString(\"message__error_big_stanza\"));\n                this.removeMessage(message);\n                return;\n            }\n            if (message.get('encrypted') && this.account.omemo) {\n                stanza.c('envelope', {xmlns: Strophe.NS.SCE}).c('content')\n                if ($(stanza.tree()).children('body').length) {\n                    stanza.cnode($(stanza.tree()).children('body')[0]).attrs({'xmlns': Strophe.NS.CLIENT}).up()\n                    $(stanza.tree()).children('body').detach()\n                }\n                if ($(stanza.tree()).children('reference').length) {\n                    $(stanza.tree()).children('reference').each((idx, reference) => {\n                        stanza.cnode($(stanza.tree()).children('reference')[idx]).up()\n                    });\n                    $(stanza.tree()).children('reference').detach()\n                }\n                stanza.up().c('rpad').t('0'.repeat(200).slice(1, Math.floor((Math.random() * 198) + 1))).up()\n                stanza.c('from', {jid: this.account.get('jid')}).up().up()\n                this.account.omemo.encrypt(this.contact, stanza).then((msg) => {\n                    if (msg) {\n                        stanza = msg.message;\n                        message.set('trusted', msg.is_trusted);\n                    }\n                    let msg_sending_timestamp = moment.now();\n                    this.account.sendFast(stanza, this.msgCallback.bind(this, msg_sending_timestamp, message));\n                });\n                return;\n            } else {\n                let msg_sending_timestamp = moment.now();\n                this.account.sendFast(stanza, this.msgCallback.bind(this, msg_sending_timestamp, message));\n            }\n        },\n\n          msgCallback: function (msg_sending_timestamp, message) {\n              this.bottom.click_counter = 0;\n              this.bottom.setDefaultPlaceholder();\n              if (!this.model.get('group_chat') && !this.account.server_features.get(Strophe.NS.DELIVERY)) {\n                  setTimeout(() => {\n                      if ((this.account.last_stanza_timestamp > msg_sending_timestamp) && (message.get('state') === constants.MSG_PENDING)) {\n                          message.set('state', constants.MSG_SENT);\n                      } else {\n                          this.account.connection.ping.ping(this.account.get('jid'), () => {\n                              (message.get('state') === constants.MSG_PENDING) && message.set('state', constants.MSG_SENT);\n                          });\n                          setTimeout(() => {\n                              if ((this.account.last_stanza_timestamp < msg_sending_timestamp) && (message.get('state') === constants.MSG_PENDING))\n                                  message.set('state', constants.MSG_ERROR);\n                          }, 5000);\n                      }\n                  }, 1000);\n              }\n              else {\n                  let _pending_time = 5, was_reconnecting;\n                  this.account.session.once('change:reconnecting', () => {\n                      console.log('change reconnecting');\n                      console.log(this.account.session.get('reconnecting'));\n                      was_reconnecting = true;\n                  })\n                  let _interval = setInterval(() => {\n                      console.log(was_reconnecting);\n                      if (_pending_time >= 10 && message.get('state') === constants.MSG_PENDING && !was_reconnecting){\n                          console.log('ping on message pending');\n                          this.account.connection.ping.ping(this.account.get('jid'), () => {},  () => {\n                              console.log('message initiated reconnection');\n                              console.log(message);\n                              this.account.connection.disconnect();\n                          }, 5000);\n                      }\n                      if (((this.account.last_stanza_timestamp < msg_sending_timestamp) && (_pending_time > 40) && (message.get('state') === constants.MSG_PENDING) || (_pending_time > 40)) && !was_reconnecting) {\n                          message.set('state', constants.MSG_ERROR);\n                          clearInterval(_interval);\n                      }\n                      else if (message.get('state') !== constants.MSG_PENDING)\n                          clearInterval(_interval);\n                      _pending_time += 10;\n                  }, 10000);\n              }\n          },\n\n        initJingleMessage: function (media_type) {\n            xabber.current_voip_call && xabber.current_voip_call.destroy();\n            media_type = media_type || {};\n            media_type = media_type.video ? 'video' : 'audio';\n            let session_id = uuid();\n            xabber.current_voip_call = new xabber.JingleMessage({session_id: session_id, video_live: media_type === 'video'}, {contact: this.contact});\n            xabber.current_voip_call.startCall();\n            xabber.current_voip_call.modal_view.show({status: constants.JINGLE_MSG_PROPOSE});\n            xabber.trigger('update_jingle_button');\n        },\n\n        saveForwardedMessage: function (msg) {\n            let forwarded_message = null;\n            if ($(msg).get('forwarded_message')) {\n                forwarded_message = $(msg).get('forwarded_message');\n                if (this.account.forwarded_messages.indexOf(forwarded_message) < 0) {\n                    forwarded_message = this.saveForwardedMessage(forwarded_message);\n                }\n            }\n            msg = this.account.forwarded_messages.create(_.extend({\n                is_forwarded: true,\n                forwarded_message: forwarded_message\n            }, msg.attributes));\n            return msg;\n        },\n\n        onSubmit: function (text, fwd_messages, options) {\n            // send forwarded messages before\n            options = options || {};\n            let attrs = {\n                from_jid: this.account.get('jid'),\n                message: text,\n                mentions: options.mentions,\n                blockquotes: options.blockquotes,\n                markups: options.markup_references,\n                files: options.attached_files,\n                link_references: options.link_references,\n                encrypted: this.model.get('encrypted'),\n                submitted_here: true,\n                forwarded_message: null\n            }, _dfd_info = new $.Deferred();\n            _dfd_info.done(() => {\n                if (!fwd_messages.length && !(attrs.files && attrs.files.length) && !(attrs.link_references && attrs.link_references.length) && text.removeEmoji() === \"\")\n                    attrs.only_emoji = Array.from(text).length;\n                if (fwd_messages.length) {\n                    let new_fwd_messages = [];\n                    _.each(fwd_messages, (msg) => {\n                        if (this.account.forwarded_messages.indexOf(msg) < 0) {\n                            msg = this.saveForwardedMessage(msg);\n                        }\n                        new_fwd_messages.push(msg);\n                    });\n                    attrs.forwarded_message = new_fwd_messages;\n                    if (attrs.files && attrs.files.length) {\n                        attrs.type = 'file_upload';\n                        this.account.server_features.get(Strophe.NS.HTTP_UPLOAD) && (attrs.upload_service = this.account.server_features.get(Strophe.NS.HTTP_UPLOAD).get('from'));\n                        this.model.messages.create(attrs);\n                    } else {\n                        let message = this.model.messages.create(attrs);\n                        this.sendMessage(message);\n                    }\n                } else if (attrs.files && attrs.files.length) {\n                    attrs.type = 'file_upload';\n                    this.account.server_features.get(Strophe.NS.HTTP_UPLOAD) && (attrs.upload_service = this.account.server_features.get(Strophe.NS.HTTP_UPLOAD).get('from'));\n                    this.model.messages.create(attrs);\n                } else if (text || (attrs.link_references && attrs.link_references.length)) {\n                    let message = this.model.messages.create(attrs);\n                    this.sendMessage(message);\n                }\n                if (this.contact && this.model.get('archived') && !this.model.isMuted()) {\n                    message.set('muted', false);\n                    this.head.archiveChat();\n                    this.model.set('archived', false);\n                    xabber.chats_view.updateScreenAllChats();\n                }\n                if (this.model.get('group_chat') && xabber.toolbar_view.$('.active').hasClass('chats'))\n                    if (this.contact && !this.model.isMuted() && !this.model.get('archived'))\n                        xabber.chats_view.updateScreenAllChats();\n                xabber.chats_view.scrollToTop();\n                xabber.chats_view.clearSearch();\n            });\n\n            if (this.contact && this.contact.get(\"group_chat\") && !this.contact.my_info)\n                this.contact.getMyInfo(() => {\n                    _dfd_info.resolve();\n                });\n            else\n                _dfd_info.resolve();\n        },\n\n        addFileMessage: function (files, is_voice) {\n            let new_files = [], file_counter = 0;\n            if (this.model.messages_view)\n                if (this.model.messages_view.data.get('visible'))\n                    this.model.messages_view.openChat();\n            if (files.length > 10 && !(this.account.get('gallery_token') && this.account.get('gallery_url'))) {\n                utils.dialogs.error(xabber.getString(\"too_many_files_at_once\"));\n                return;\n            }\n            let http_upload_service = this.account.server_features.get(Strophe.NS.HTTP_UPLOAD);\n            if (!http_upload_service && !(this.account.get('gallery_token') && this.account.get('gallery_url'))) {\n                utils.dialogs.error(xabber.getString(\"error_file_upload_not_support\", [this.account.domain]));\n                return;\n            }\n            let deferred_all = new $.Deferred();\n            deferred_all.done((data) => {\n                if (is_voice) {\n                    this.model.messages.create({\n                        from_jid: this.account.get('jid'),\n                        type: 'file_upload',\n                        files: data,\n                        encrypted: this.model.get('encrypted'),\n                        upload_service: http_upload_service.get('from'),\n                        message: '',\n                        submitted_here: true\n                    });\n                } else\n                    this.bottom.addFileSnippets(data);\n            });\n            $(files).each((idx, file) => {\n                if (utils.isImageType(file.type)) {\n                    let reader = new FileReader(), deferred = new $.Deferred();\n                    Images.compressImage(file).done((image) => {\n                        reader.readAsDataURL(image);\n                        deferred.done((data) => {\n                            if (data) {\n                                image.height = data.height;\n                                image.width = data.width;\n                            }\n                            if (data.encrypted_file)\n                                new_files.push(data.encrypted_file);\n                            else\n                                new_files.push(image);\n                            file_counter++;\n                            if (file_counter === files.length)\n                                deferred_all.resolve(new_files);\n                        });\n                    });\n                    reader.onload = (e) => {\n                        if (this.model.get('encrypted')) {\n                            this.encryptFile(e.target.result).then((encrypted) => {\n                                let key = encrypted.keydata,\n                                    new_file = new File([encrypted.payload], uuid().replace(/-/g, \"\"), {type: file.type});\n                                new_file.key = key;\n                                if (new_file.type === 'image/svg+xml') {\n                                    deferred.resolve({encrypted_file: new_file,key: key});\n                                } else {\n                                    let image_prev = new Image();\n                                    image_prev.onload = function () {\n                                        let height = this.height,\n                                            width = this.width;\n                                        new_file.image_prev = image_prev;\n                                        deferred.resolve({height: height, width: width, encrypted_file: new_file, key: key});\n                                    };\n                                    image_prev.src = e.target.result;\n                                }\n                            });\n                        } else {\n                            if (file.type === 'image/svg+xml') {\n                                deferred.resolve({});\n                            } else {\n                                let image_prev = new Image();\n                                image_prev.onload = function () {\n                                    let height = this.height,\n                                        width = this.width;\n                                    deferred.resolve({height: height, width: width});\n                                };\n                                image_prev.src = e.target.result;\n                            }\n                        }\n                    };\n                }\n                else {\n                    if (this.model.get('encrypted')) {\n                        let reader = new FileReader();\n                        reader.onload = (e) => {\n                            this.encryptFile(e.target.result).then((encrypted) => {\n                                let key = encrypted.keydata,\n                                    encrypted_file = new File([encrypted.payload], uuid().replace(/-/g, \"\"), {type: file.type});\n                                file.voice && (encrypted_file.voice = true);\n                                file.duration && (encrypted_file.duration = file.duration);\n                                encrypted_file.key = key;\n                                new_files.push(encrypted_file);\n                                file_counter++;\n                                if (file_counter === files.length)\n                                    deferred_all.resolve(new_files);\n                            });\n                        };\n                        reader.readAsDataURL(file);\n                    } else {\n                        new_files.push(file);\n                        file_counter++;\n                        if (file_counter === files.length)\n                            deferred_all.resolve(new_files);\n                    }\n                }\n            });\n        },\n\n        startUploadFile: function (message, $message) {\n            $message.emojify('.chat-msg-author-badge', {emoji_size: 16});\n            $message.find('.repeat-upload').hide();\n            $message.find('.status').hide();\n            $message.find('.progress').show();\n            $message.find('.mdi-center-loading-indicator').removeClass('mdi-check').addClass('mdi-close');\n            $message.find('.mdi-center-loading-indicator').removeClass('hidden');\n            $message.find('.dropdown-content.retry-send-message').addClass('hidden');\n            $message.find('.msg-delivering-state').addClass('no-click');\n            let files_count = 0;\n            $(message.get('files')).each((idx, file) => {\n                let enc_file = new File([file], file.name);\n                enc_file.key && (delete enc_file.key);\n                let iq = $iq({type: 'get', to: message.get('upload_service')})\n                        .c('request', {xmlns: Strophe.NS.HTTP_UPLOAD})\n                        .c('filename').t(enc_file.name).up()\n                        .c('size').t(enc_file.size).up()\n                        .c('content-type').t(enc_file.type).up(),\n                    deferred = new $.Deferred(), self = this;\n                this.account.sendIQFast(iq,\n                    function (result) {\n                        let $slot = $(result).find(`slot[xmlns=\"${Strophe.NS.HTTP_UPLOAD}\"]`);\n                        deferred.resolve({\n                            get_url: $slot.find('get').text(),\n                            put_url: $slot.find('put').text()\n                        });\n                    },\n                    function (err) {\n                        let error_text = $(err).find(`error text[xml\\\\:lang=\"${xabber._settings.get('language')}\"]`).text(),\n                            error_type = $(err).find('error').attr('type');\n                        !error_text && (error_text = $(err).find(`error text`).text());\n                        self.onFileNotUploaded(message, $message, error_text, 'xmpp');\n                    }\n                );\n                let msg_sending_timestamp = moment.now(), _pending_time = 10, _interval = setInterval(() => {\n                    if ((this.account.last_stanza_timestamp < msg_sending_timestamp) && (_pending_time > 20) && (message.get('state') === constants.MSG_PENDING) || (_pending_time > 20)) {\n                        message.set('state', constants.MSG_ERROR);\n                        clearInterval(_interval);\n                    }\n                    else if (message.get('state') !== constants.MSG_PENDING)\n                        clearInterval(_interval);\n                    _pending_time += 10;\n                }, 10000);\n                deferred.done((data) => {\n                    clearInterval(_interval);\n                    let xhr = new XMLHttpRequest(),\n                        $bar = $message.find('.progress');\n                    $message.find('div[data-upload-file-id=\"' + file.upload_id + '\"] .circle-wrap .mdi-close').click(() => {\n                        xhr.abort();\n                    });\n                    xhr.onabort = () => {\n                        this.removeMessage($message);\n                    };\n                    xhr.upload.onprogress = (event) => {\n                        let percentage = event.loaded / event.total;\n                        $message.find('div[data-upload-file-id=\"' + file.upload_id + '\"] .circle-percent-text').text(parseInt((100 * percentage)) + '%');\n                        $message.find('div[data-upload-file-id=\"' + file.upload_id + '\"] .preloader-path-new').css({ 'stroke-dasharray': '' + (150 * percentage) + ', 149.825'});\n                    };\n                    xhr.onload = xhr.onerror = function () {\n                        if (this.status === 201) {\n                            message.get('files')[idx].url = data.get_url;\n                            files_count++;\n                            if (files_count == message.get('files').length) {\n                                self.onFileUploaded(message, $message);\n                            }\n                        } else {\n                            self.onFileNotUploaded(message, $message, this.responseText, 'http');\n                        }\n                    };\n                    if ($message.data('cancel')) {\n                        xhr.abort();\n                    } else {\n                        xhr.open(\"PUT\", data.put_url, true);\n                        xhr.send(enc_file);\n                    }\n                });\n            });\n        },\n\n        startGalleryUploadFile: function (message, $message) {\n            $message.emojify('.chat-msg-author-badge', {emoji_size: 16});\n            message.set('files', message.get('files').filter((element) => { return element != null}) );\n            let files_count = 0,\n                cancelled_files_count = 0,\n                self = this,\n                is_error = false,\n                xhr_requests = [],\n                msg_files_count = message.get('files').length;\n            $message.find('.mdi-center-loading-indicator').removeClass('mdi-check').addClass('mdi-close');\n            $message.find('.uploaded-file').removeClass('uploaded-file');\n            $message.find('.mdi-center-loading-indicator').removeClass('hidden');\n            $message.find('.dropdown-content.retry-send-message').addClass('hidden');\n            $message.find('.msg-delivering-state').addClass('no-click');\n            $(message.get('files')).each((idx, file) => {\n                if (is_error)\n                    return;\n                if (file.key) {\n                    file = new File([file], file.name);\n                    delete file.key\n                }\n                let msg_sending_timestamp = moment.now(), _pending_time = 10, _interval = setInterval(() => {\n                    if ((this.account.last_stanza_timestamp < msg_sending_timestamp) && (_pending_time > 20) && (message.get('state') === constants.MSG_PENDING) || (_pending_time > 20)) {\n                        message.set('state', constants.MSG_ERROR);\n                        clearInterval(_interval);\n                    }\n                    else if (message.get('state') !== constants.MSG_PENDING)\n                        clearInterval(_interval);\n                    _pending_time += 10;\n                }, 10000);\n\n                let formData = new FormData();\n                formData.append('file', file, file.name);\n                if (file.duration)\n                    formData.append('duration', file.duration);\n                if (file.voice)\n                    formData.append('media_type', file.type + '+voice');\n                else\n                    formData.append('media_type', file.type);\n                clearInterval(_interval);\n                message.get('files')[idx].is_errored = false;\n                let xhr = new XMLHttpRequest(),\n                    $bar = $message.find('.progress');\n                xhr.formData = formData;\n                xhr_requests = xhr_requests.concat([xhr]);\n                xhr.arrayIndex = xhr_requests.indexOf(xhr);\n                $message.find('div[data-upload-file-id=\"' + file.upload_id + '\"] .circle-wrap .mdi-close').one(\"click\",() => {\n                    cancelled_files_count++;\n                    if (xhr.is_uploading)\n                        xhr.abort();\n                    else {\n                        if ((msg_files_count - cancelled_files_count) == 0) {\n                            message.set('files', []);\n                            self.bottom.setEditedMessageAttachments(message, true);\n                            self.bottom.setRedactedUploadMessage(message);\n                            self.removeMessage($message);\n                        } else {\n                            xhr.is_cancelled = true;\n                            $message.find('.unuploaded-file[data-upload-file-id=\"' + file.upload_id + '\"]').remove();\n                            $message.find('div[data-upload-file-id=\"' + file.upload_id + '\"] .circle-wrap').remove();\n                            message.get('files')[idx] = null;\n                        }\n                    }\n                });\n                xhr.upload.onprogress = (event) => {\n                    let percentage = event.loaded / event.total;\n                    $message.find('div[data-upload-file-id=\"' + file.upload_id + '\"] .circle-percent-text').text(parseInt((100 * percentage)) + '%');\n                    $message.find('div[data-upload-file-id=\"' + file.upload_id + '\"] .preloader-path-new').css({ 'stroke-dasharray': '' + (150 * percentage) + ', 149.825'});\n                };\n                xhr.onload = xhr.onerror = xhr.onabort = function () {\n                    if (this.status === 200) {\n                        $message.find('div[data-upload-file-id=\"' + file.upload_id + '\"] .mdi-center-loading-indicator').addClass('mdi-check').removeClass('mdi-close');\n                        let response = JSON.parse(this.response)\n                        message.get('files')[idx].id = response.id;\n                        message.get('files')[idx].created_at = response.created_at;\n                        (response.thumbnail && response.thumbnail.url) && (message.get('files')[idx].thumbnail = response.thumbnail.url);\n                        message.get('files')[idx].url = response.file;\n                        files_count++;\n                        $message.find('div[data-upload-file-id=\"' + file.upload_id + '\"]').addClass('uploaded-file');\n                        while (xhr_requests[files_count] && xhr_requests[files_count].is_cancelled){\n                            files_count++;\n                        }\n                        if (files_count == message.get('files').length) {\n                            self.onFileUploaded(message, $message);\n                        } else if (xhr_requests[files_count]){\n                            self.account.testGalleryTokenExpire(() => {\n                                if (!is_error) {\n                                    xhr_requests[files_count].open(\"POST\", self.account.get('gallery_url') + 'v1/files/upload/', true);\n                                    xhr_requests[files_count].setRequestHeader(\"Authorization\", 'Bearer ' + self.account.get('gallery_token'))\n                                    xhr_requests[files_count].is_uploading = true;\n                                    xhr_requests[files_count].send(xhr_requests[files_count].formData);\n                                }\n                            });\n                        }\n                    } else {\n                        if (this.status === 0 && is_error)\n                            return;\n                        if ((msg_files_count - cancelled_files_count) == 0 && this.status === 0){\n                            message.set('files', []);\n                            self.bottom.setEditedMessageAttachments(message, true);\n                            self.bottom.setRedactedUploadMessage(message);\n                            self.removeMessage($message);\n                        } else {\n                            let response_text;\n                            self.account.handleCommonGalleryErrors(this.response)\n                            if (this.status === 500)\n                                response_text = this.statusText;\n                            else if (this.status === 400)\n                                response_text = JSON.parse(this.response).error;\n                            else if (this.status === 0) {\n                                $message.find('.unuploaded-file[data-upload-file-id=\"' + file.upload_id + '\"]').remove();\n                                $message.find('div[data-upload-file-id=\"' + file.upload_id + '\"] .circle-wrap').remove();\n                            };\n                            (this.status === 0) && (message.get('files')[idx] = null);\n                            files_count++;\n                            if (this.status != 0) {\n                                if (!$message.find('div[data-upload-file-id=\"' + file.upload_id + '\"]').closest('.img-content-template.hidden').length){\n                                    $message.find('div[data-upload-file-id=\"' + file.upload_id + '\"] .circle-percent-text').text(response_text);\n                                    $message.find('div[data-upload-file-id=\"' + file.upload_id + '\"] .mdi-alert-circle').removeClass('hidden');\n                                    $message.find('div[data-upload-file-id=\"' + file.upload_id + '\"] .mdi-alert-circle').prop('title', response_text);\n                                    $message.find('div[data-upload-file-id=\"' + file.upload_id + '\"] .mdi-center-loading-indicator').addClass('hidden');\n                                    $message.find('div[data-upload-file-id=\"' + file.upload_id + '\"]').addClass('upload-error');\n                                    $message.find('div[data-upload-file-id=\"' + file.upload_id + '\"]').css({ 'border-color': '#EF9A9A'});\n                                } else {\n                                    $message.find('.hidden-images .circle-percent-text').text(response_text);\n                                    $message.find('.hidden-images .mdi-alert-circle').removeClass('hidden');\n                                    $message.find('.hidden-images .mdi-alert-circle').prop('title', response_text);\n                                    $message.find('.hidden-images .mdi-center-loading-indicator').addClass('hidden');\n                                    $message.find('.hidden-images').addClass('upload-error');\n                                    $message.find('.hidden-images').css({ 'border-color': '#EF9A9A'});\n                                }\n                                message.get('files')[idx].is_errored = true;\n                                is_error = true;\n                                $(xhr_requests).each((idx, request) => {\n                                    request.abort();\n                                })\n                                self.onFileNotUploaded(message, $message, response_text);\n                            }\n                            else if (files_count == msg_files_count) {\n                                self.onFileUploaded(message, $message);\n                            } else {\n                                while (xhr_requests[files_count] && xhr_requests[files_count].is_cancelled){\n                                    files_count++;\n                                }\n                                if (files_count == msg_files_count) {\n                                    self.onFileUploaded(message, $message);\n                                } else {\n                                    self.account.testGalleryTokenExpire(() => {\n                                        if (!is_error) {\n                                            xhr_requests[files_count].open(\"POST\", self.account.get('gallery_url') + 'v1/files/upload/', true);\n                                            xhr_requests[files_count].setRequestHeader(\"Authorization\", 'Bearer ' + self.account.get('gallery_token'))\n                                            xhr_requests[files_count].is_uploading = true;\n                                            xhr_requests[files_count].send(xhr_requests[files_count].formData);\n                                        }\n                                    });\n                                }\n                            }\n                        }\n                    }\n                };\n            });\n            if (xhr_requests.length){\n                if ($message.data('cancel')) {\n                    xhr_requests[0].abort();\n                } else {\n                    this.account.testGalleryTokenExpire(() => {\n                        if (!is_error) {\n                            xhr_requests[0].open(\"POST\", this.account.get('gallery_url') + 'v1/files/upload/', true);\n                            xhr_requests[0].setRequestHeader(\"Authorization\", 'Bearer ' + this.account.get('gallery_token'))\n                            xhr_requests[0].is_uploading = true;\n                            xhr_requests[0].send(xhr_requests[0].formData);\n                        }\n                    });\n                }\n            }\n\n        },\n\n          encryptFile: async function (file) {\n            return await utils.AES.encrypt(file);\n          },\n\n        onFileUploaded: function (message, $message) {\n            $message.find('.dropdown-content.retry-send-message').removeClass('hidden');\n            $message.find('.msg-delivering-state').removeClass('no-click');\n            message.set('files', message.get('files').filter((element) => { return element != null}) );\n            let files = message.get('files'),\n                self = this, is_audio = false,\n                images = [], files_ = [], videos = [];\n            if (!files.length)\n                this.onFileNotUploaded(message, $message)\n            $(files).each((idx, file_) => {\n                let file_new_format = {\n                    name: file_.name,\n                    type: file_.type,\n                    size: file_.size,\n                    description: file_.description || '',\n                    sources: [file_.url]\n                };\n                file_.key && (file_new_format.key = file_.key);\n                file_.voice && (file_new_format.voice = true);\n                if (this.account.get('gallery_token') && this.account.get('gallery_url')){\n                    _.extend(file_new_format, { id: file_.id, created: file_.created_at, thumbnail: file_.thumbnail });\n                }\n                if (utils.isImageType(file_.type)) {\n                    _.extend(file_new_format, { width: file_.width, height: file_.height });\n                    images.push(file_new_format);\n                }\n                else if (utils.isVideoType(file_.type)) {\n                    _.extend(file_new_format, { duration: file_.duration});\n                    videos.push(file_new_format);\n                }\n                else {\n                    _.extend(file_new_format, { duration: file_.duration});\n                    files_.push(file_new_format);\n                }\n            });\n            $message.find('.unuploaded-images').remove();\n            $message.find('.unuploaded-file').remove();\n            //  loaded and send image\n            if (images.length > 0) {\n                if (images.length > 1) {\n                    let template_for_images;\n                    if (images.length > 6) {\n                        let tpl_name = 'template-for-6',\n                            hidden_images = images.length - 5;\n                        !xabber.settings.load_media && (tpl_name = 'hidden-template-for-6')\n                        template_for_images = $(templates.messages[tpl_name]({images}));\n                        template_for_images.find('.last-image').addClass('hidden-images');\n                        template_for_images.find('.image-counter').text('+' + hidden_images);\n                    }\n                    else {\n                        let tpl_name = 'template-for-' + images.length;\n                        !xabber.settings.load_media && (tpl_name = 'hidden-template-for-' + images.length)\n                        template_for_images = $(templates.messages[tpl_name]({images}));\n                    }\n                    if (!xabber.settings.load_media) {\n                        template_for_images.find('img').removeClass('uploaded-img-for-collage popup-img').addClass('unloaded-img')\n                    }\n                    $message.removeClass('file-upload noselect');\n                    $message.find('.chat-msg-media-content .chat-file-info').remove();\n                    $message.find('.chat-msg-media-content.chat-main-upload-media').append(template_for_images);\n                    !xabber.settings.load_media && $message.find('.chat-msg-media-content.chat-main-upload-media .img-content-template').first().append($('<div class=\"img-privacy-warning\"/>').text(xabber.getString(\"load_image_privacy_warning\")))\n                }\n                else {\n                    let img = this.createImage(images[0]),\n                        img_content = self.createImageContainer(images[0]);\n                    img.onload = () => {\n                        this.imageOnload($message);\n                    };\n                    $message.removeClass('file-upload noselect');\n                    $message.find('.chat-msg-media-content .chat-file-info').remove();\n                    $message.find('.chat-msg-media-content.chat-main-upload-media').append(img_content);\n                    $message.find('.chat-msg-media-content.chat-main-upload-media .img-content').html(img);\n                    !xabber.settings.load_media && $message.find('.chat-msg-media-content.chat-main-upload-media .img-content').append($('<div class=\"img-privacy-warning\"/>').text(xabber.getString(\"load_image_privacy_warning\")))\n                }\n            }\n            if (videos.length > 0) {\n                let video_content = this.createVideoContainer();\n                $message.find('.chat-msg-media-content.chat-main-upload-media').find('.chat-file-info').remove();\n                $message.find('.chat-msg-media-content.chat-main-upload-media').append(video_content);\n                videos.forEach((video) => {\n                    let video_el = this.createVideo(video);\n                    $message.find('.video-content').append(video_el);\n                });\n                this.videoOnload($message);\n                $message.removeClass('file-upload noselect');\n            }\n            if (files_.length > 0) {\n                $message.removeClass('file-upload noselect');\n                $(files_).each((idx, item) => {\n                    if (!idx && !images.length){\n                        $message.find('.chat-msg-media-content.chat-main-upload-media').find('.chat-file-info').remove();\n                        $message.find('.chat-msg-media-content.chat-main-upload-media').removeClass('chat-file-content');\n                    }\n                    if (item.type) {\n                        if (item.voice)\n                            is_audio = true;\n                        else\n                            is_audio = false;\n                    }\n                    let file_attrs = {\n                            name: item.name,\n                            type: item.type,\n                            sources: item.sources\n                        },\n                        template_for_file_content,\n                        mdi_icon_class = utils.file_type_icon(item.type);\n                    ((files_.length === 1) && is_audio) && (file_attrs.name = xabber.getString(\"voice_message\"));\n                    _.extend(file_attrs, {size: utils.pretty_size(item.size), is_audio: is_audio, duration: utils.pretty_duration(item.duration), mdi_icon: mdi_icon_class});\n                    template_for_file_content = is_audio ? $(templates.messages.audio_file(file_attrs)) : $(templates.messages.file(file_attrs));\n                    $message.find('.chat-msg-media-content.chat-main-upload-media').append(template_for_file_content);\n                    if (is_audio && $message.find('.link-file').length) {\n                        let audio_player = {$audio_elem : $message.find('.link-file')[0]};\n                        audio_player.msg_time = $message.attr('data-time');\n                        audio_player.author = $message.find('.chat-msg-author').text();\n                        audio_player.message_unique_id = $message.attr('data-uniqueid');\n                        if (this.model.get('group_chat')) {\n                            if (this.contact.my_info) {\n                                audio_player.contact_avatar = this.contact.my_info.get('b64_avatar');\n                                if (!audio_player.contact_avatar) {\n                                    if (this.account.cached_image)\n                                        audio_player.contact_avatar = this.account.cached_image;\n                                    !audio_player.contact_avatar && (audio_player.contact_avatar = Images.getDefaultAvatar(this.contact.my_info.get('nickname')));\n                                } else\n                                    audio_player.contact_avatar = Images.getCachedImage(audio_player.contact_avatar);\n                            }\n                        }\n                        if (!audio_player.contact_avatar)\n                            audio_player.contact_avatar = this.account.cached_image;\n                        if (!this.model.plyr_players.filter(obj => { return (obj.message_unique_id === audio_player.message_unique_id)}).length) {\n                            this.model.plyr_players = this.model.plyr_players.concat([audio_player]).sort((a, b) => a.msg_time - b.msg_time);\n                            xabber.plyr_players = xabber.plyr_players.concat([audio_player]);\n                        }\n                        message.set('msg_player_audios', [audio_player])\n                        xabber.trigger('plyr_player_updated');\n                    }\n                });\n            }\n            this.initPopup($message);\n            message.set('images', images);\n            message.set('videos', videos);\n            message.set('files', files_);\n            if ((message.get('encrypted') || this.model.get('encrypted')) && message.get('images').length) {\n                this.decryptImages(message);\n            }\n            this.sendMessage(message);\n            this.scrollToBottom();\n        },\n\n        createAudio: function(file_url, $elem) {\n            let audio = WaveSurfer.create({\n                container: $elem[0],\n                scrollParent: false,\n                barWidth: 3,\n                height: 48,\n                barHeight: 48,\n                cursorColor: 'rgba(211,47,47,0.8)',\n                autoCenter: false,\n                normalize: true,\n                hideScrollBar: true,\n                progressColor: '#757575'\n            });\n            audio.load(file_url);\n            audio.setVolume(0.5);\n            return audio;\n        },\n\n        createImage: function(image) {\n            let imgContent = new Image(),\n                maxHeight = 400,\n                maxWidth = (xabber.main_panel.$el.width() * 0.715 - 176) * 0.7;\n            if (image.height)\n                imgContent.height = image.height;\n            if (image.width)\n                imgContent.width = image.width;\n            maxWidth = maxWidth > 400 ? 400 : maxWidth;\n            if (xabber.settings.load_media) {\n                imgContent.src = image.sources[0];\n                $(imgContent).addClass('uploaded-img popup-img');\n            } else {\n                $(imgContent).addClass('unloaded-img');\n            }\n            $(imgContent).attr({'data-mfp-src': image.sources[0], title: (image.description || '')});\n            if (imgContent.height && imgContent.width) {\n                if (imgContent.width > maxWidth) {\n                    imgContent.height = imgContent.height * (maxWidth/imgContent.width);\n                    imgContent.width = maxWidth;\n                }\n                if (imgContent.height > maxHeight) {\n                    imgContent.width = imgContent.width * (maxHeight/imgContent.height);\n                    imgContent.height = maxHeight;\n                }\n            }\n            return imgContent;\n        },\n\n        createVideo: function(video) {\n            video.pretty_size = utils.pretty_size(video.size)\n            let $video_wrap_template = $(templates.messages.video({video_src: video.sources[0], thumbnail: video.thumbnail}));\n            return $video_wrap_template;\n        },\n\n        createImageContainer: function() {\n            return $('<div class=\"img-content\"/>')[0];\n        },\n\n        createVideoContainer: function() {\n            return $('<div class=\"video-content\"/>')[0];\n        },\n\n        onFileNotUploaded: function (message, $message, error_text, type, error_type) {\n            let error_message = error_text ? xabber.getString(\"file_upload__error\", [error_text]) : xabber.getString(\"file_upload__error_default\");\n            $message.find('.dropdown-content.retry-send-message').removeClass('hidden');\n            $message.find('.msg-delivering-state').removeClass('no-click');\n            $message.find('.circle-wrap .mdi-close').unbind( \"click\" );\n            message.set('state', constants.MSG_ERROR);\n            if (type == 'http' || error_type == 'wait'){\n                $message.find('.repeat-upload').one(\"click\",() => {\n                    this.startUploadFile(message, $message);\n                });\n            }\n            else {\n                if (this.account.get('gallery_token') && this.account.get('gallery_url'))\n                    this.bottom.deleteFilesFromMessages([message]);\n                $message.find('.edit-upload').one(\"click\",() => {\n                    this.bottom.setEditedMessageAttachments(message, true);\n                    this.bottom.setRedactedUploadMessage(message);\n                    this.removeMessage($message);\n                });\n                $message.find('.repeat-upload').one(\"click\",() => {\n                    message.set('state', constants.MSG_PENDING);\n                    $message.find('.upload-error .circle-percent-text').text('0%');\n                    $message.find('.mdi-alert-circle').addClass('hidden');\n                    $message.find('.mdi-close').removeClass('hidden');\n                    $message.find('.upload-error').css({ 'border-color': ''});\n                    $message.find('.upload-error').removeClass('upload-error');\n                    $message.find('.preloader-path-new').css({ 'stroke-dasharray': '0, 149.825'});\n                    if (this.account.get('gallery_token') && this.account.get('gallery_url'))\n                        this.startGalleryUploadFile(message, $message);\n                    else\n                        this.startUploadFile(message, $message);\n                });\n            }\n        },\n\n        sendChatState: function (state, type) {\n            if (this.model.get('saved') || this.contact && this.contact.get('status') === 'offline')\n                return;\n            clearTimeout(this._chatstate_timeout);\n            clearTimeout(this._chatstate_send_timeout);\n            this.chat_state = false;\n            let stanza = $msg({to: this.model.get('jid'), type: 'chat'}).c(state, {xmlns: Strophe.NS.CHATSTATES});\n            if (this.model.get('encrypted')) {\n                if (this.account.settings.get('encrypted_chatstates'))\n                    type = 'encrypted';\n                else\n                    return;\n            }\n            type && stanza.c('subtype', {xmlns: Strophe.NS.EXTENDED_CHATSTATES, type: type});\n            (state === 'composing') && (this.chat_state = true);\n            this.account.sendMsg(stanza);\n            if (state === 'composing') {\n                this._chatstate_timeout = setTimeout(() => {\n                    this.chat_state = false;\n                }, constants.CHATSTATE_TIMEOUT_PAUSED);\n                this._chatstate_send_timeout = setTimeout(() => {\n                    (!this.chat_state && xabber.settings.typing_notifications) && this.sendChatState('paused');\n                }, constants.CHATSTATE_TIMEOUT_PAUSED*2);\n            }\n        },\n\n        onChangedMessageTimestamp: function (message) {\n            let $message = this.$(`.chat-message[data-uniqueid=\"${message.get('unique_id')}\"]`),\n                $next_msg = $message.next(),\n                $old_prev_msg = $message.prev();\n            $message.attr({\n                'data-time': message.get('timestamp')\n            });\n            $message.detach();\n            $message.children('.right-side').find('.msg-time').attr({title: pretty_datetime(message.get('time'))}).text(utils.pretty_time(message.get('time')));\n            message.get('user_info') && $message.attr('data-from-id', message.get('user_info').id);\n            this.model.messages.sort();\n            let index = this.model.messages.indexOf(message);\n            if (index === 0) {\n                if ($old_prev_msg.hasClass('chat-day-indicator'))\n                    $old_prev_msg.after($message);\n                else\n                    $message.prependTo(this.$('.chat-content'));\n            } else {\n                let $prev_msg = this.$('.chat-message').eq(index - 1),\n                    is_same_sender = ($message.data('from') === $prev_msg.data('from')),\n                    is_same_date = moment($message.data('time')).startOf('day')\n                        .isSame(moment($prev_msg.data('time')).startOf('day'));\n                if (($old_prev_msg.data('from') !== $message.data('from')) && ($next_msg.data('from') === $message.data('from')) && (($next_msg.children('.right-side').find('.msg-delivering-state').attr('data-state') === 'delivered') || ($next_msg.children('.right-side').find('.msg-delivering-state').attr('data-state') === 'displayed')))\n                    this.showMessageAuthor($next_msg);\n                if ($prev_msg.next().hasClass('chat-day-indicator') && (moment($prev_msg.next().data('time')).format('DD.MM.YY') === moment(message.get('timestamp')).format('DD.MM.YY'))) {\n                    $message.insertAfter($prev_msg.next());\n                    this.showMessageAuthor($message);\n                }\n                else\n                    $message.insertAfter($prev_msg);\n                if (message.get('data_form') || message.get('forwarded_message') || !is_same_date || !is_same_sender || $prev_msg.hasClass('system') || $prev_msg.hasClass('saved-main'))\n                    this.showMessageAuthor($message);\n                else\n                    this.hideMessageAuthor($message);\n            }\n            let last_message = this.model.last_message;\n            if (!last_message || message.get('timestamp') > last_message.get('timestamp')) {\n                this.model.last_message = message;\n                this.chat_item.updateLastMessage();\n            }\n        },\n\n        onChangedReadState: function (message) {\n            let is_unread = message.get('is_unread'),\n                is_synced = message.get('synced_from_server');\n            if (is_unread && !is_synced) {\n                this.model.messages_unread.add(message);\n                this.model.recountUnread();\n            } else {\n                this.model.messages_unread.remove(message);\n                this.model.recountUnread();\n                if (!message.get('muted')) {\n                    xabber.recountAllMessageCounter();\n                }\n            }\n        },\n\n        onTouchMessage: function (ev) {\n            if (ev.which === 3)\n                return;\n            let $elem = $(ev.target), $msg;\n\n            if ($elem.hasClass('chat-message')) {\n                $msg = $elem;\n            } else {\n                $msg = $elem.parents('.chat-message');\n            }\n            if (window.getSelection() != 0) {\n                utils.clearSelection();\n                $msg.attr('data-no-select-on-mouseup', '1');\n            }\n        },\n\n        onClickLink: function (ev) {\n            let $elem = $(ev.target),\n                $message = $elem.closest('.chat-message'),\n                msg = this.model.messages.get($message.data('uniqueid'));\n            if (!msg) {\n                msg = this.account.participant_messages.get($message.data('uniqueid'));\n            }\n            let files = msg.get('files'),\n                videos = msg.get('videos'),\n                images = msg.get('images'),\n                fwd_messages = [],\n                files_links = '';\n            if (msg.get('forwarded_message')) {\n                msg.get('forwarded_message').forEach((message) => {\n                    message.get('images') && fwd_messages.push(message.get('images'));\n                    message.get('videos') && fwd_messages.push(message.get('videos'));\n                });\n            }\n            $(files).each(function(idx, file) {\n                if (idx > 0)\n                    files_links += '\\n';\n                files_links += file.sources[0];\n            });\n            $(images).each(function(idx, image) {\n                if (idx > 0)\n                    files_links += '\\n';\n                files_links += image.sources[0];\n            });\n            $(videos).each(function(idx, image) {\n                if (idx > 0)\n                    files_links += '\\n';\n                files_links += image.sources[0];\n            });\n            $(fwd_messages).each(function (idx, message) {\n                $(message).each(function (i, file) {\n                    if (files_links != \"\")\n                        files_links += '\\n';\n                    files_links += file.sources[0];\n                });\n            });\n            utils.copyTextToClipboard(files_links, xabber.getString(\"toast_link_copied\"), xabber.getString(\"toast__not_copied_in_clipboard\"));\n        },\n\n\n        onClickLocationLink: function (ev) {\n            ev.preventDefault()\n            let $elem = $(ev.target),\n                $message = $elem.closest('.chat-message'),\n                msg = this.model.messages.get($message.data('uniqueid'));\n            if (!msg) {\n                msg = this.account.participant_messages.get($message.data('uniqueid'));\n            }\n            let locations = msg.get('locations'),\n                fwd_messages = [],\n                location_links = '';\n            if (msg.get('forwarded_message')) {\n                msg.get('forwarded_message').forEach((message) => {\n                    message.get('locations') && fwd_messages.push(message.get('locations'));\n                });\n            }\n            $(locations).each(function(idx, location) {\n                location_links += 'geo:' + location.lat + ',' + location.lon;\n            });\n            $(fwd_messages).each(function (idx, message) {\n                $(message).each(function (i, object) {\n                    if (location_links != \"\")\n                        location_links += '\\n';\n                    location_links += 'geo:' + object.lat + ',' + object.lon;\n                });\n            });\n\n            utils.copyTextToClipboard(location_links, xabber.getString(\"toast_location_copied\"), xabber.getString(\"toast__not_copied_in_clipboard\"));\n        },\n\n        showParticipantProperties: function (participant_id, options) {\n            options = options || {};\n            let participant = this.contact.participants.get(participant_id);\n            if (!participant) {\n                this.contact.getBlockedParticipants((response) => {\n                    _.extend(options, {present: null, subscription: null});\n                    if ($(response).find(`query user:contains(${participant_id})`).length)\n                        options.blocked = true;\n                    else\n                        options.blocked = false;\n                    participant = new xabber.Participant(options, {contact: this.contact});\n                    this.contact.showDetailsRight('all-chats', {type: 'participant'});\n                    this.contact.details_view_right.participants.participant_properties_panel.open(participant, {});\n                });\n                return;\n            }\n            (this.contact.my_info && this.contact.my_info.get('id') === participant_id) && (participant_id = '');\n            this.contact.participants.participantsRequest({id: participant_id}, (response) => {\n                let data_form = this.account.parseDataForm($(response).find(`x[xmlns=\"${Strophe.NS.DATAFORM}\"]`));\n                this.contact.showDetailsRight('all-chats', {type: 'participant'});\n                this.contact.details_view_right.participants.participant_properties_panel.open(participant, data_form);\n            });\n        },\n\n        onClickMessage: function (ev) {\n            let $elem = $(ev.target);\n            if ($elem.hasClass('file-link-download')) {\n                ev.preventDefault();\n                let msg = this.model.messages.get($elem.closest('.chat-message').data('uniqueid')),\n                    uri = $elem.attr('href'),\n                    file = (msg.get('files') || []).find(f => f.sources[0] == uri);\n                if (file && file.key) {\n                    this.model.messages.decryptFile(uri,file.key).then((result) => {\n                        if (result === null)\n                            return;\n                        let download = document.createElement(\"a\");\n                        download.href = result;\n                        download.download = file.name;\n                        download.click();\n                    });\n                    return;\n                } else\n                    xabber.openWindow($elem.attr('href'));\n            }\n            if ($elem.hasClass('msg-delivering-state') || $elem.hasClass('audio-control-panel') || $elem.hasClass('voice-msg-current-time') || $elem.hasClass('voice-msg-total-time')) {\n                return;\n            }\n            if ($elem.closest(\".plyr-video-container\").length > 0) {\n                let msg = this.model.messages.get($elem.closest('.chat-message').data('uniqueid')),\n                    $plyr = $elem.closest(\".plyr-video-container\");\n                if (msg.get('msg_player_videos')){\n                    if (!xabber.plyr_player_popup){\n                        xabber.plyr_player_popup = new xabber.PlyrPlayerPopupView({});\n                        xabber.plyr_player_popup.show({player: msg.get('msg_player_videos')[$plyr.attr('data-message-id')]});\n                    } else\n                        xabber.plyr_player_popup.showNewVideo({player: msg.get('msg_player_videos')[$plyr.attr('data-message-id')]});\n                }\n                return;\n            }\n            if (!$elem.hasClass('mdi-link-variant') && !$elem.hasClass('msg-copy-location-content') && !$elem.hasClass('btn-retry-send-message') && !$elem.hasClass('btn-delete-message') && !$elem.hasClass('file-link-download') && !$elem.is('canvas') && !$elem.hasClass('voice-message-volume')) {\n                let $msg = $elem.closest('.chat-message'), msg,\n                    $fwd_message = $elem.parents('.fwd-message').first(),\n                    is_forwarded = $fwd_message.length > 0,\n                    no_select_message = $msg.attr('data-no-select-on-mouseup');\n                $msg.attr('data-no-select-on-mouseup', '');\n\n                if ($elem.hasClass('data-form-field')) {\n                    msg = this.model.messages.get($msg.data('uniqueid'));\n                    if (msg)\n                        this.model.sendDataForm(msg, $elem.attr('id'));\n                    return;\n                }\n\n                if (window.getSelection() != 0) {\n                    return;\n                }\n\n                if ($elem.hasClass('collapsed-forwarded-message')) {\n                    let msg = this.buildMessageHtml(this.account.forwarded_messages.get($elem.data('uniqueid'))),\n                        expanded_fwd_message = new xabber.ExpandedMessagePanel({account: this.account, chat_content: this});\n                    expanded_fwd_message.$el.attr('data-color', this.account.settings.get('color'));\n                    this.updateMessageInChat(msg);\n                    this.initPopup(msg);\n                    expanded_fwd_message.open(msg);\n                    return;\n                }\n\n                if ($elem.hasClass('chat-msg-author') || $elem.hasClass('fwd-msg-author')) {\n                    let from_jid = is_forwarded ? $fwd_message.data('from') : $msg.data('from'),\n                        from_id = is_forwarded ? $fwd_message.data('fromId') : $msg.data('fromId');\n                    if (this.contact && this.contact.get('group_chat')) {\n                        this.bottom.quill.focus();\n                        let caret_position = this.bottom.quill.getSelection(),\n                            participant_attrs = {jid: from_jid, id: from_id, nickname: $elem.text()};\n                        caret_position && (caret_position = caret_position.index);\n                        participant_attrs.position = caret_position || 0;\n                        this.bottom.insertMention(participant_attrs);\n                    }\n                    else if (from_jid === this.account.get('jid')) {\n                        this.account.showSettings();\n                    } else if (from_jid === this.model.get('jid')) {\n                        this.contact && this.contact.showDetailsRight('all-chats', {encrypted: this.model.get('encrypted')});\n                    } else {\n                        if (from_jid == from_id)\n                            return;\n                        let contact = this.account.contacts.mergeContact(from_jid);\n                        contact.showDetails();\n                    }\n                    return;\n                }\n\n                if ($elem.hasClass('circle-avatar')) {\n                    let from_jid = is_forwarded ? $fwd_message.data('from') : $msg.data('from');\n                    if (this.model.get('group_chat')) {\n                        let member_id = (is_forwarded) ? $fwd_message.attr('data-from-id') : $msg.attr('data-from-id'),\n                            unique_id = (is_forwarded) ? $fwd_message.attr('data-uniqueid') : $msg.attr('data-uniqueid'),\n                            msg = this.model.messages.get(unique_id),\n                            user_info = msg && msg.get('user_info');\n                        member_id && this.showParticipantProperties(member_id, user_info);\n                        return;\n                    }\n                    else if (from_jid === this.account.get('jid')) {\n                        this.account.showSettings();\n                    } else if (from_jid === this.model.get('jid')) {\n                        this.contact && this.contact.showDetailsRight('all-chats', {encrypted: this.model.get('encrypted')});\n                    } else {\n                        let contact = this.account.contacts.mergeContact(from_jid);\n                        contact.showDetails();\n                    }\n                    return;\n                }\n\n                if ($elem.hasClass('mention')) {\n                    let member_id = $elem.data('target');\n                    if (this.contact.get('group_chat')) {\n                        if (member_id && !this.contact.participants.get(member_id)) {\n                            let participant = this.contact.participants.find(p => p.get('jid') === member_id);\n                            participant && (member_id = participant.get('id'));\n                        }\n                        member_id && this.showParticipantProperties(member_id);\n                    }\n                    else {\n                        if (member_id === this.account.get('jid'))\n                            this.account.showSettings();\n                        else if (member_id === this.model.get('jid')) {\n                            this.contact && this.contact.showDetailsRight('all-chats', {encrypted: this.model.get('encrypted')});\n                        } else {\n                            let contact = this.account.contacts.mergeContact(member_id);\n                            contact.showDetails();\n                        }\n                    }\n                    return;\n                }\n\n                if ($elem.hasClass('voice-message-play') || $elem.hasClass('no-uploaded')) {\n                    let $audio_elem = $elem.closest('.link-file'),\n                        f_url = $audio_elem.find('.file-link-download').attr('href');\n                    $audio_elem.find('.mdi-play').removeClass('no-uploaded');\n                    if ($elem.closest('.chat-message').hasClass('encrypted')) {\n                        let msg = this.model.messages.get($elem.closest('.chat-message').data('uniqueid')),\n                            uri = $elem.closest('.link-file').find('.file-link-download').attr('href'),\n                            file = (msg.get('files') || []).find(f => f.sources[0] == uri);\n                        if (file && file.key) {\n                            this.model.messages.decryptFile(f_url, file.key).then((result) => {\n                                if (result === null)\n                                    return;\n                                $audio_elem[0].voice_message = this.renderVoiceMessage($audio_elem.find('.file-container')[0], result);\n                            });\n                        }\n                    } else {\n                        $audio_elem[0].voice_message = this.renderVoiceMessage($audio_elem.find('.file-container')[0], f_url);\n                    }\n                    return;\n                }\n\n                if ($elem.hasClass('mdi-play') && !($elem.closest(\".video-file-wrap\").length > 0)) {\n                    let $audio_elem = $elem.closest('.link-file');\n                    $audio_elem[0].voice_message.play();\n                    return;\n                }\n\n                if ($elem.hasClass('mdi-pause') && !($elem.closest(\".video-file-wrap\").length > 0)) {\n                    let $audio_elem = $elem.closest('.link-file');\n                    $audio_elem[0].voice_message.pause();\n                    return;\n                }\n\n                if ($elem.hasClass('msg-hyperlink')) {\n                    ev && ev.preventDefault();\n                    $elem.blur();\n                    let link = $elem.attr('href');\n                    utils.dialogs.ask(xabber.getString(\"open_this_link\"), decodeURI(link), null, {ok_button_text: xabber.getString(\"open\")}).done((result) => {\n                        if (result)\n                            utils.openWindow(link);\n                    });\n                    return;\n                }\n\n                if ($elem.closest(\".msg-hyperlink\").length > 0) {\n                    ev && ev.preventDefault();\n                    $elem.blur();\n                    let link = $elem.closest(\".msg-hyperlink\").attr('href');\n                    utils.dialogs.ask(xabber.getString(\"open_this_link\"), decodeURI(link), null, {ok_button_text: xabber.getString(\"open\")}).done((result) => {\n                        if (result)\n                            utils.openWindow(link);\n                    });\n                    return;\n                }\n\n                if ($elem.hasClass('uploaded-img')||$elem.hasClass('img-content')||($elem.hasClass('uploaded-img-for-collage'))) {\n                    $elem.hasClass('img-content') && $elem.children('img').click();\n                    return;\n                }\n\n                if ($elem.hasClass('unloaded-img')) {\n                    let img_information = this.getImagesInformation(this.model.messages.get($elem.closest('.chat-message').data('uniqueid')));\n                    utils.dialogs.ask(xabber.getString(\"privacy_risk\"), xabber.getString(\"privacy_risk_text\"), {inverted_buttons: true, img_details: $(templates.messages.images_details({img_information: img_information}))}, { ok_button_text: xabber.getString(\"privacy_risk_btn_ok\")}).done((result) => {\n                        if (result) {\n                            $elem.attr('src',$elem.attr('data-mfp-src'));\n                            $elem.removeClass('unloaded-img');\n                            $elem.addClass('uploaded-img');\n                            this.initPopup($elem.closest('.chat-message'));\n                            $elem.closest('.chat-message').find('.img-privacy-warning').remove()\n                        }\n                    });\n                    return;\n                }\n\n                if ($elem.hasClass('img-content-template') && $elem.find('img').hasClass('unloaded-img')) {\n                    let img_information = this.getImagesInformation(this.model.messages.get($elem.closest('.chat-message').data('uniqueid')));\n                    utils.dialogs.ask(xabber.getString(\"privacy_risk\"), xabber.getString(\"privacy_risk_text\"), {inverted_buttons: true, img_details: $(templates.messages.images_details({img_information: img_information}))}, { ok_button_text: xabber.getString(\"privacy_risk_btn_ok\")}).done((result) => {\n                        if (result) {\n                            let $msg = $elem.closest('.chat-message'),\n                                $imgs = $msg.find('.img-content-template img');\n                            $imgs.each((idx, img) => {\n                                $(img).attr('src',$(img).attr('data-mfp-src'));\n                            });\n                            $imgs.removeClass('unloaded-img');\n                            $imgs.addClass('uploaded-img-for-collage');\n                            this.initPopup($msg);\n                            $elem.closest('.chat-message').find('.img-privacy-warning').remove()\n                        }\n                    });\n                    return;\n                }\n\n                if ($elem.hasClass('chat-msg-location-content') || $elem.hasClass('location-link') || $elem.closest(\".video-file-wrap\").length > 0 || $elem.closest(\".embed-video\").length > 0) {\n                    return;\n                }\n\n                if ($elem.hasClass('last-image')) {\n                    $elem.find('img').length && $elem.find('img')[0].click();\n                    return;\n                }\n\n                if ($elem.hasClass('image-counter')) {\n                    $elem.closest('.last-image').find('img')[0].click();\n                    return;\n                }\n\n                if ($msg.hasClass('searched-message')) {\n                    this.model.getMessageContext($msg.data('uniqueid'), {searched_messages: true});\n                    return;\n                }\n\n                let processClick = () => {\n                    let $prev_selected = $msg.hasClass('selected') ? $msg.prevAll('.chat-message.selected').last() : $msg.prevAll('.chat-message.selected').first();\n                    !$prev_selected.length && ($prev_selected = $msg.hasClass('selected') ? $msg.nextAll('.chat-message.selected').last() : $msg.nextAll('.chat-message.selected').first());\n                    !$prev_selected.length && ($prev_selected = $msg.hasClass('selected') ? $msg.prevAll('.chat-message.selected').first() : $msg.prevAll('.chat-message.selected').last());\n                    if ((xabber.shiftctrl_pressed || xabber.shift_pressed) && $prev_selected.length) {\n                        let $all_msgs = [], is_selected = $msg.hasClass('selected');\n                        if ($prev_selected.attr('data-time') < $msg.attr('data-time'))\n                            $all_msgs = $prev_selected.nextUntil($msg, '.chat-message:not(.system)');\n                        else\n                            $all_msgs = $msg.nextUntil($prev_selected, '.chat-message:not(.system)');\n                        xabber.shift_pressed && this.$('.chat-message').removeClass('selected');\n                        $prev_selected.switchClass('selected', !is_selected);\n                        $all_msgs.switchClass('selected', !is_selected);\n                        $msg.switchClass('selected', !is_selected);\n                        ev.preventDefault();\n                        this.bottom.manageSelectedMessages();\n                        return false;\n                    }\n                    if (!no_select_message) {\n                        $msg.switchClass('selected', !$msg.hasClass('selected'));\n                        ev.preventDefault();\n                        this.bottom.manageSelectedMessages();\n                        return false;\n                    }\n                };\n\n                if ($msg.hasClass('participant-message') || $msg.hasClass('context-message')) {\n                    if ($msg.hasClass('system'))\n                        return;\n                    processClick();\n                    return;\n                }\n\n                msg = this.model.messages.get($msg.data('uniqueid'));\n                if (!msg) {\n                    return;\n                }\n\n                let type = msg.get('type');\n                if (type === 'file_upload') {\n                    return;\n                }\n\n                if (type === 'system') {\n                    return;\n                } else if (is_forwarded) {\n                    let fwd_message = this.account.forwarded_messages.get($fwd_message.data('uniqueid'));\n                    if (!fwd_message) {\n                        return;\n                    }\n                    processClick();\n                } else {\n                    processClick();\n                }\n            }\n        },\n\n        onClickLocation: function (ev) {\n            ev.preventDefault();\n            let lon = $(ev.target).attr('lon'),\n                lat = $(ev.target).attr('lat'),\n                location_name = $(ev.target).attr('title');\n            if (lon && lat){\n                window.popup_coordinates = [lon, lat];\n                window.location_name = location_name;\n                new xabber.ChatLocationView({content: this}).show(ev);\n            }\n        },\n\n        onHoverLocation: function (ev) {\n            let lon = $(ev.target).attr('lon')\n                lat = $(ev.target).attr('lat')\n\n            fetch('https://nominatim.openstreetmap.org/reverse?format=json&lon=' + lon + '&lat=' + lat).then(function(response) {\n                return response.json();\n            }).then(function(json) {\n                if (!json.error) {\n                    $(ev.target).attr('title', json.display_name);\n                }\n                else {\n                    $(ev.target).attr('title', xabber.getString(\"location_fragment__address_error__title\"));\n                }\n                $(ev.target).removeClass('no-title')\n            })\n        },\n\n        retrySendMessage: function (ev) {\n            let $msg = $(ev.target).closest('.chat-message'),\n                msg = this.model.messages.get($msg.data('uniqueid'));\n            if (msg.get('type') === 'file_upload') {\n                msg.set('state', constants.MSG_PENDING);\n                this.startUploadFile(msg, $msg);\n            }\n            else\n                this.sendMessage(msg);\n            ev.preventDefault();\n        },\n\n        removeFileErrorMessage: function (ev) {\n            let $msg = $(ev.target).closest('.chat-message');\n            this.removeMessage($msg);\n            ev.preventDefault();\n            this.chat_item.updateChatError();\n        },\n\n        onUpdatePlyr: function (ev) {\n            this.$('.plyr-video-container').removeClass('active-plyr-container');\n            if (xabber.current_plyr_player && xabber.current_plyr_player.player_item) {\n                let $message = this.$(`.chat-message[data-uniqueid=\"${xabber.current_plyr_player.message_unique_id}\"]`);\n                if ($message.length) {\n                    $message.find(`.plyr-video-container[data-message-id=\"${xabber.current_plyr_player.player_item.message_id}\"]`).addClass('active-plyr-container');\n                }\n            }\n        },\n    });\n\n    xabber.ExpandedMessagePanel = xabber.BasicView.extend({\n        className: 'modal expanded-message',\n        template: templates.group_chats.pinned_message_panel,\n        ps_selector: '.modal-content',\n        ps_settings: {theme: 'item-list'},\n\n        events: {\n            \"click .collapsed-forwarded-message\": \"expandFwdMessage\",\n            \"click .chat-message\": \"onClickPinnedMessage\",\n            'click .chat-msg-location-content': 'onClickExpandedMessageLocation',\n            'click .mdi-link-variant' : 'onClickLink',\n        },\n\n        _initialize: function (options) {\n            this.account = options.account;\n            this.chat_content = options.chat_content;\n        },\n\n        open: function ($message) {\n            this.$el.css('width', $message.find('.chat-text-content').text().length <= 60 ? 540 : xabber.main_panel.$el.width() * 0.715);\n            this.$el.openModal({\n                ready: () => {\n                    this.updateScrollBar();\n                    this.$('.modal-content').css('height', this.$el.height() - 12);\n                    if ($message.find('.plyr-video-container').length) {\n                        this.chat_content.initPlyrEmbedPlayer($message);\n                    }\n                },\n                complete: () => {\n                    this.$el.detach();\n                    this.data.set('visible', false);\n                }\n            });\n            $message.find('.right-side .msg-delivering-state').remove();\n            this.$('.modal-content').html($message);\n        },\n\n        close: function () {\n            this.$el.closeModal({ complete: this.hide.bind(this) });\n        },\n\n        onClickLink:function (ev) {\n            this.chat_content.onClickLink(ev);\n        },\n\n        onClickPinnedMessage: function (ev) {\n            let $elem = $(ev.target);\n            if ($elem.hasClass('msg-hyperlink')) {\n                ev && ev.preventDefault();\n                let link = $elem.attr('href');\n                utils.dialogs.ask(xabber.getString(\"open_this_link\"), decodeURI(link), null, {ok_button_text: xabber.getString(\"open\")}).done((result) => {\n                    if (result)\n                        utils.openWindow(link);\n                });\n                return;\n            }\n        },\n        onClickExpandedMessageLocation: function (ev) {\n            ev.preventDefault();\n            let lon = $(ev.target).attr('lon'),\n                lat = $(ev.target).attr('lat'),\n                location_name = $(ev.target).attr('title');\n            if (lon && lat){\n                window.popup_coordinates = [lon, lat];\n                window.location_name = location_name;\n                new xabber.ChatLocationView({content: this}).show(ev);\n            }\n        },\n\n        expandFwdMessage: function (ev) {\n            let $target = $(ev.target),\n                unique_id = $target.data('uniqueid'),\n                msg = this.chat_content.buildMessageHtml(this.account.forwarded_messages.get(unique_id)),\n                expanded_fwd_message = new xabber.ExpandedMessagePanel({account: this.account, chat_content: this.chat_content});\n            expanded_fwd_message.$el.attr('data-color', this.account.settings.get('color'));\n            this.chat_content.updateMessageInChat(msg);\n            this.chat_content.initPopup(msg);\n            expanded_fwd_message.open(msg);\n        }\n    });\n\n    xabber.ChatsBase = Backbone.Collection.extend({\n        model: xabber.Chat\n    });\n\n    xabber.Chats = xabber.ChatsBase.extend({\n        initialize: function (models, options) {\n            this.collections = [];\n            this.on(\"add\", _.bind(this.updateInCollections, this, 'add'));\n            this.on(\"change\", _.bind(this.updateInCollections, this, 'change'));\n        },\n\n        addCollection: function (collection) {\n            this.collections.push(collection);\n        },\n\n        updateInCollections: function (event, contact) {\n            _.each(this.collections, function (collection) {\n                collection.update(contact, event);\n            });\n        },\n\n        registerQuillEmbeddedsTags: function () {\n            let Inline = Quill.import('blots/inline'),\n                Image = Quill.import('formats/image');\n\n            class Mention extends Inline {\n                static create(paramValue) {\n                    let node = super.create(),\n                        data = JSON.parse(paramValue),\n                        target = data.jid ? ('?jid=' + data.jid) : (data.id ?  ('?id=' + data.id) : \"\");\n                    node.innerHTML = data.nickname;\n                    data.is_me && node.classList.add('ground-color-100');\n                    node.setAttribute('data-target', target);\n                    return node;\n                }\n\n                static value(node) {\n                    return node.innerHTML;\n                }\n            }\n            Mention.blotName = 'mention';\n            Mention.tagName = 'mention';\n            Mention.prototype.optimize = function () {};\n\n            class QuillEmoji extends Image {\n                static create(value) {\n                    if (typeof value == 'string') {\n                        let emoji = $(value.emojify({tag_name: 'img'}))[0];\n                        emoji.style.display = 'none';\n                        emoji.onload = function () {\n                            this.style.display = 'unset';\n                        };\n                        return emoji;\n                    } else {\n                        return value;\n                    }\n                }\n\n                static value(domNode) {\n                    return domNode;\n                }\n            }\n            QuillEmoji.blotName = 'emoji';\n            QuillEmoji.className = 'emoji';\n            QuillEmoji.tagName = 'img';\n            QuillEmoji.prototype.optimize = function () {};\n\n            Quill.register(QuillEmoji);\n            Quill.register(Mention);\n        }\n    });\n\n    xabber.OpenedChats = xabber.ChatsBase.extend({\n        comparator: function (item1, item2) {\n            let t1 = item1.get('timestamp'),\n                t2 = item2.get('timestamp');\n            return t1 > t2 ? -1 : (t1 < t2 ? 1 : 0);\n        },\n\n        initialize: function (models, options) {\n            this.on(\"change:timestamp\", this.sort, this);\n        },\n\n        update: function (chat, event) {\n            let contains = chat.get('opened');\n            if (contains) {\n                if (!this.get(chat)) {\n                    this.add(chat);\n                    chat.trigger(\"add_opened_chat\", chat);\n                }\n            } else if (this.get(chat)) {\n                this.remove(chat);\n                chat.trigger(\"remove_opened_chat\", chat);\n            }\n        }\n    });\n\n    xabber.ClosedChats = xabber.ChatsBase.extend({\n        update: function (chat, event) {\n            let contains = !chat.get('opened');\n            if (contains) {\n                if (!this.get(chat)) {\n                    this.add(chat);\n                    chat.trigger(\"add_closed_chat\", chat);\n                }\n            } else if (this.get(chat)) {\n                this.remove(chat);\n                chat.trigger(\"remove_closed_chat\", chat);\n            }\n        }\n    });\n\n    xabber.AccountChats = xabber.ChatsBase.extend({\n        initialize: function (models, options) {\n            this.account = options.account;\n            this.mam_requests = 0;\n            this.deferred_mam_requests = [];\n            this.account.contacts.on(\"open_chat\", this.openChat, this);\n            this.account.contacts.on(\"open_mention\", this.openMention, this);\n            this.account.contacts.on(\"presence\", this.onPresence, this);\n            this.account.contacts.on(\"roster_push\", this.onRosterPush, this);\n        },\n\n        getSavedChat: function () {\n          let jid = this.account.get('jid'),\n              attrs = {jid: jid, type: 'saved', name: xabber.getString(\"saved_messages__header\"), id: `${jid}:saved`},\n              chat = this.get(attrs.id);\n            if (!chat) {\n                chat = xabber.chats.create(attrs, {account: this.account});\n                this.add(chat);\n                chat.trigger(\"load_last_history\");\n            }\n            return chat;\n        },\n\n        getChat: function (contact, identifier, sync_created) {\n            let attrs = null,\n                id = identifier && `${contact.hash_id}:${identifier}`,\n                chat = id ? this.get(id) : this.get(contact.hash_id);\n            if (id)\n                attrs = {id};\n            if (identifier === 'encrypted')\n                attrs.type = identifier;\n            if (!chat) {\n                chat = xabber.chats.create(attrs, {contact: contact, sync_created: sync_created});\n                this.add(chat);\n                contact.set('known', true);\n            }\n            return chat;\n        },\n\n        openChat: function (contact, options) {\n            options = options || {};\n            _.isUndefined(options.clear_search) && (options.clear_search = true);\n            let chat = this.getChat(contact, options.encrypted && 'encrypted');\n            chat.trigger('open', {clear_search: options.clear_search});\n        },\n\n        openMention: function (contact, unique_id) {\n            let chat = this.getChat(contact);\n            xabber.body.setScreen('mentions', {right: 'mentions', chat_item: chat.item_view});\n            unique_id && chat.getMessageContext(unique_id, {mention: true});\n        },\n\n        registerMessageHandler: function () {\n            this.account.connection.deleteHandler(this._msg_handler);\n            this._msg_handler = this.account.connection.addHandler((message) => {\n                this.receiveMessage(message);\n                return true;\n            }, null, 'message');\n        },\n\n        onStartedMAMRequest : function (deferred) {\n            this.deferred_mam_requests.push(deferred);\n            this.runMAMRequests();\n        },\n\n        onCompletedMAMRequest: function (deferred) {\n            this.mam_requests--;\n            this.runMAMRequests();\n        },\n\n        runMAMRequests: function () {\n            while (this.mam_requests < xabber.settings.mam_requests_limit) {\n                let deferred = this.deferred_mam_requests.shift();\n                if (!deferred) break;\n                this.mam_requests++;\n                deferred.resolve();\n            }\n        },\n\n        parsePubSubNode: function (node) {\n            if (!node)\n                return null;\n            let is_member_id = node.indexOf('#');\n            if (is_member_id !== -1)\n                return node.slice(is_member_id + 1, node.length);\n            else\n                return null;\n        },\n\n        receivePubsubMessage: function ($message) {\n            let photo_id =  $message.find('info').attr('id'),\n                from_jid = Strophe.getBareJidFromJid($message.attr('from')),\n                node = $message.find('items').attr('node');\n            if (node.indexOf(Strophe.NS.OMEMO) > -1)\n                return;\n            if (node.indexOf(Strophe.NS.PUBSUB_AVATAR_METADATA) > -1) {\n                let member_id = this.parsePubSubNode(node),\n                    photo_url =  $message.find('info').attr('url'),\n                    contact = this.account.contacts.get(from_jid);\n                if (contact) {\n                    if (member_id) {\n                        if (contact.my_info) {\n                            if ((member_id == contact.my_info.get('id')) && (photo_id == contact.my_info.get('avatar'))) {\n                                contact.trigger('update_my_info');\n                                return;\n                            }\n                        }\n                        if (photo_id && (this.account.chat_settings.getHashAvatar(member_id) != photo_id)) {\n                            let member_node = Strophe.NS.PUBSUB_AVATAR_DATA + '#' + member_id;\n                            contact.getAvatar(photo_id, member_node, (new_avatar) => {\n                                    this.account.chat_settings.updateCachedAvatars(member_id, photo_id, new_avatar);\n                                    if (contact.my_info) {\n                                        if (member_id == contact.my_info.id) {\n                                            contact.my_info.set({avatar: photo_id, b64_avatar: new_avatar});\n                                            contact.trigger('update_my_info');\n                                        }\n                                    }\n                                    let participant = contact.participants && contact.participants.get(member_id);\n                                    if (participant) {\n                                        participant.set({avatar: photo_id, b64_avatar: new_avatar});\n                                        this.account.groupchat_settings.updateParticipant(contact.get('jid'), participant.attributes);\n                                    }\n                                }, () => {\n                                    if (photo_url) {\n                                        this.account.chat_settings.updateCachedAvatars(member_id, photo_id, photo_url);\n                                        if (contact.my_info) {\n                                            if (member_id == contact.my_info.id) {\n                                                contact.my_info.set({avatar: photo_id, b64_avatar: photo_url});\n                                                contact.trigger('update_my_info');\n                                            }\n                                        }\n                                        let participant = contact.participants && contact.participants.get(member_id);\n                                        if (participant) {\n                                            participant.set({avatar: photo_id, b64_avatar: photo_url});\n                                            this.account.groupchat_settings.updateParticipant(contact.get('jid'), participant.attributes);\n                                        }\n                                        return;\n                                    }\n                                });\n                        }\n                    }\n                    else if (!this.get('avatar_priority') || this.get('avatar_priority') <= constants.AVATAR_PRIORITIES.PUBSUB_AVATAR) {\n                        if (!photo_id) {\n                            let image = Images.getDefaultAvatar(contact.get('name'));\n                            contact.cached_image = Images.getCachedImage(image);\n                            contact.set('avatar_priority', constants.AVATAR_PRIORITIES.PUBSUB_AVATAR);\n                            contact.set('photo_hash', null);\n                            contact.set('image', image);\n                            contact.updateCachedInfo();\n                            return;\n                        }\n                        if ((photo_id !== \"\") && (contact.get('photo_hash') === photo_id)) {\n                            return;\n                        } else if (photo_url) {\n                            contact.cached_image = photo_url;\n                            contact.set({photo_hash: photo_id, image: photo_url, avatar_priority: constants.AVATAR_PRIORITIES.PUBSUB_AVATAR});\n                        }\n                        contact.getAvatar(photo_id, Strophe.NS.PUBSUB_AVATAR_DATA, (data_avatar) => {\n                            contact.cached_image = Images.getCachedImage(data_avatar);\n                            contact.set('avatar_priority', constants.AVATAR_PRIORITIES.PUBSUB_AVATAR);\n                            contact.set('photo_hash', photo_id);\n                            contact.set('image', data_avatar);\n                            contact.updateCachedInfo();\n                        });\n                    }\n                }\n                else if (from_jid === this.account.get('jid')) {\n                    if (photo_url) {\n                        let avatar_attrs = {photo_hash: photo_id, image: photo_url, avatar_priority: constants.AVATAR_PRIORITIES.PUBSUB_AVATAR};\n                        this.account.cached_image = photo_url;\n                        this.account.save(avatar_attrs);\n                        return;\n                    }\n                    if (!photo_id) {\n                        let image = Images.getDefaultAvatar(this.account.get('name'));\n                        this.account.cached_image = Images.getCachedImage(image);\n                        let avatar_attrs = {avatar_priority: constants.AVATAR_PRIORITIES.PUBSUB_AVATAR, image: image};\n                        this.account.save(avatar_attrs);\n                        return;\n                    }\n                    this.account.getAvatar(photo_id, (data_avatar) => {\n                        this.account.cached_image = Images.getCachedImage(data_avatar);\n                        let avatar_attrs = {avatar_priority: constants.AVATAR_PRIORITIES.PUBSUB_AVATAR, image: data_avatar};\n                        this.account.save(avatar_attrs);\n                    });\n                }\n            }\n        },\n\n        receiveMessage: function (message) {\n            let $message = $(message),\n                type = $message.attr('type'),\n                $mam = $message.find(`result[xmlns=\"${Strophe.NS.MAM}\"]`);\n            if (this.account.connection.do_synchronization && Strophe.getBareJidFromJid($(message).attr('from')) !== this.account.get('jid')) {\n                let time = $message.children('time').attr('stamp') || $message.children('delay').attr('stamp'),\n                    timestamp = Number(moment(time));\n                (timestamp > this.account.last_msg_timestamp) && (this.account.last_msg_timestamp = timestamp);\n            }\n            if (type === 'headline') {\n                return this.receiveHeadlineMessage(message);\n            }\n            if (type === 'chat' || (type === 'normal') || (!type && !$mam.length)) {\n                return this.receiveChatMessage(message);\n            }\n            if (type === 'error') {\n                return this.receiveErrorMessage(message);\n            }\n        },\n\n        receiveHeadlineMessage: function (message) {\n            let $message = $(message),\n                msg_from = Strophe.getBareJidFromJid($message.attr('from')),\n                $stanza_received = $message.find(`received[xmlns=\"${Strophe.NS.DELIVERY}\"]`),\n                $echo_msg = $message.children(`x[xmlns=\"${Strophe.NS.DELIVERY}\"]`).children('message');\n            if ($stanza_received.length) {\n                let stanza_id = $stanza_received.children('stanza-id').attr('id'),\n                    origin_msg_id = $stanza_received.children('origin-id').first().attr('id');\n                if (origin_msg_id) {\n                    let msg = this.account.messages.get(origin_msg_id || stanza_id),\n                        delivered_time = $stanza_received.children('time').attr('stamp') || moment(stanza_id/1000).format();\n                    if (!msg)\n                        return;\n                    if (!msg.get('stanza_id') && msg.get('locations'))\n                        msg.set({'stanza_id': stanza_id})\n                    msg.set({'state': constants.MSG_SENT, 'time': delivered_time, 'timestamp': Number(moment(delivered_time))}); // delivery receipt, changing on server time\n                    let pending_message = this.account._pending_messages.find(msg => msg.unique_id == (origin_msg_id || stanza_id));\n                    if (pending_message) {\n                        let chat = this.account.chats.get(pending_message.chat_hash_id);\n                        chat && chat.setStanzaId(pending_message.unique_id, stanza_id);\n                        this.account._pending_messages.splice(this.account._pending_messages.indexOf(pending_message), 1);\n                    }\n                }\n                return;\n            }\n\n            if ($echo_msg.length) {\n                console.log(this.account._pending_messages);\n                console.log(this.account._pending_messages.length);\n                let origin_msg_id = $echo_msg.children('origin-id').first().attr('id'),\n                    pending_message = this.account._pending_messages.find(msg => msg.unique_id == origin_msg_id);\n                if (pending_message) {\n                    this.account._pending_messages.splice(this.account._pending_messages.indexOf(pending_message), 1);\n                }\n                console.log(this.account._pending_messages.length);\n                return this.receiveChatMessage($echo_msg[0], {echo_msg: true, stanza_id: $echo_msg.children('stanza-id').attr('id')});\n            }\n\n            let $token_revoke = $message.children(`revoke[xmlns=\"${Strophe.NS.AUTH_DEVICES}\"]`);\n            if ($token_revoke.length) {\n                $token_revoke.children('device').each((idx, token) => {\n                    let $token = $(token),\n                        token_uid = $token.attr('id');\n                    if (!token_uid)\n                        return;\n                    if (this.account.get('x_token') && this.account.get('x_token').token_uid === token_uid) {\n                        this.account.deleteAccount();\n                        return;\n                    }\n                    if (this.account.x_tokens_list) {\n                        let token = this.account.x_tokens_list.find(token => token.token_uid == token_uid),\n                            token_idx = token ? this.account.x_tokens_list.indexOf(token) : -1;\n                        (token_idx > -1) && this.account.x_tokens_list.splice(token_idx, 1);\n                    }\n                });\n                this.account.settings_right && this.account.settings_right.updateXTokens();\n                return;\n            }\n\n            if ($message.find(`event[xmlns=\"${Strophe.NS.PUBSUB}#event\"]`).length) {\n                this.receivePubsubMessage($message);\n                return;\n            }\n\n            let contact = this.account.contacts.get(msg_from), chat;\n            if (contact) {\n                contact && (chat = this.account.chats.getChat(contact));\n                if (!chat.item_view.content)\n                    chat.item_view.content = new xabber.ChatContentView({chat_item: chat.item_view});\n            }\n\n            if ($message.children(`x[xmlns=\"${Strophe.NS.GROUP_CHAT}#system-message\"]`).length) {\n                if (!contact)\n                    return;\n                let participant_version = $message.children(`x[xmlns=\"${Strophe.NS.GROUP_CHAT}#system-message\"]`).attr('version');\n                if (participant_version && contact.participants && contact.participants.version < participant_version)\n                    contact.trigger('update_participants');\n            }\n\n            if ($message.children(`attention[xmlns=\"${Strophe.NS.ATTENTION}\"]`).length && xabber.settings.call_attention) {\n                if (!chat)\n                    return;\n                return chat.messages.createSystemMessage({from_jid: msg_from, message: xabber.getString(\"action_attention_requested\"), attention: true});\n            }\n\n            if ($message.find(`replace[xmlns=\"${Strophe.NS.REWRITE}#notify\"]`).length) {\n                !contact && (contact = this.account.contacts.get($message.find('replace').attr('conversation'))) && (chat = this.account.chats.getChat(contact));\n                if (!chat)\n                    return;\n                let stanza_id = $message.find('replace').attr('id'),\n                    msg_item = chat.messages.find(msg => msg.get('stanza_id') == stanza_id || msg.get('contact_stanza_id') == stanza_id),\n                    active_right_screen = xabber.body.screen.get('right'),\n                    participant_messages = active_right_screen === 'participant_messages' && this.account.participant_messages || active_right_screen === 'message_context' && this.account.context_messages || active_right_screen === 'searched_messages' && this.account.searched_messages || [],\n                    participant_msg_item = participant_messages.find(msg => msg.get('stanza_id') == stanza_id);\n                this.receiveChatMessage($message, {replaced: true});\n                if (participant_msg_item) {\n                    participant_msg_item.set('last_replace_time', $message.find('replaced').last().attr('stamp'));\n                }\n                if (msg_item) {\n                    msg_item.set('last_replace_time', $message.find('replaced').last().attr('stamp'));\n                    if (contact.get('pinned_message'))\n                        if (contact.get('pinned_message').get('unique_id') === msg_item.get('unique_id')) {\n                            contact.get('pinned_message').set('message', msg_item.get('message'));\n                            if (!chat.item_view.content)\n                                chat.item_view.content = new xabber.ChatContentView({chat_item: chat.item_view});\n                            chat.item_view.content.updatePinnedMessage();\n                        }\n                    chat && chat.item_view.updateLastMessage(chat.last_message);\n                }\n            }\n            if ($message.find('retract-message').length) {\n                let is_encrypted = $message.find('retract-message').attr('type') == 'encrypted';\n                !contact && (contact = this.account.contacts.get($message.find('retract-message').attr('conversation'))) && (chat = this.account.chats.getChat(contact,  is_encrypted && 'encrypted'));\n                if ($message.find('retract-message').attr('conversation') === this.account.get('jid'))\n                    chat = this.getSavedChat();\n                if (!chat)\n                    return;\n                let $retracted_msg = $message.find('retract-message'),\n                    retracted_msg_id = $retracted_msg.attr('id'),\n                    retract_version = $retracted_msg.attr('version'),\n                    msg_item = chat.messages.find(msg => msg.get('stanza_id') == retracted_msg_id || msg.get('contact_stanza_id') == retracted_msg_id);\n                if (msg_item) {\n                    msg_item.set('is_unread', false);\n                    if (!chat.item_view.content)\n                        chat.item_view.content = new xabber.ChatContentView({chat_item: chat.item_view});\n                    chat.item_view.content.removeMessage(msg_item);\n                    chat.item_view.updateLastMessage(chat.last_message);\n                }\n                if (retract_version > this.account.retraction_version) {\n                    if (chat.get('encrypted') && this.account.omemo)\n                        this.account.omemo.cacheRetractVersion(retract_version);\n                    else\n                        this.account.retraction_version = retract_version;\n                }\n            }\n            if ($message.find('retract-user').length) {\n                let $retracted_user_msgs = $message.find('retract-user'),\n                    retracted_user_id = $retracted_user_msgs.attr('id'),\n                    msg_item = chat.messages.filter(msg => msg.get('user_info') && (msg.get('user_info').id == retracted_user_id));\n                if (msg_item)\n                    $(msg_item).each((idx, item) => {\n                        item.set('is_unread', false);\n                        if (!chat.item_view.content)\n                            chat.item_view.content = new xabber.ChatContentView({chat_item: chat.item_view});\n                        chat.item_view.content.removeMessage(item);\n                    });\n                chat.item_view.updateLastMessage(chat.last_message);\n            }\n            if ($message.find('retract-all').length) {\n                !contact && (contact = this.account.contacts.get($message.find('retract-all').attr('conversation'))) && (chat = this.getChat(contact, $message.find('retract-all').attr('type') == 'encrypted' && 'encrypted'));\n                if (!chat)\n                    return;\n                let all_messages = chat.messages.models;\n                $(all_messages).each((idx, item) => {\n                    if (!chat.item_view.content)\n                        chat.item_view.content = new xabber.ChatContentView({chat_item: chat.item_view});\n                    chat.item_view.content.removeMessage(item);\n                });\n                chat.item_view.updateLastMessage();\n            }\n            if ($message.find(`confirm[xmlns=\"${Strophe.NS.HTTP_AUTH}\"]`).length) {\n                let code =  $message.find('confirm').attr('id');\n                if (($message.attr('from') == this.account.xabber_auth.api_jid) && ($message.attr('id') == this.account.xabber_auth.request_id)) {\n                    this.account.verifyXabberAccount(code, (data) => {\n                        if (xabber.api_account && this.account.get('auto_login_xa')) {\n                            xabber.api_account.save('token', data);\n                            xabber.api_account.login_by_token();\n                        }\n                    });\n                }\n                else {\n                    return this.receiveChatMessage(message);\n                }\n            }\n            return;\n        },\n\n        receiveStanzaId: function ($message, options) {\n            options.replaced && ($message = $message.children('replace').children('message'));\n            let $stanza_id, $contact_stanza_id, attrs = {},\n                from_bare_jid = options.from_bare_jid;\n                $message.children('stanza-id').each((idx, stanza_id) => {\n                stanza_id = $(stanza_id);\n                if ($message.children(`x[xmlns=\"${Strophe.NS.GROUP_CHAT}\"]`).length && !($message.find(`invite[xmlns=\"${Strophe.NS.GROUP_CHAT_INVITE_HTTP}\"]`).length || $message.find(`invite[xmlns=\"${Strophe.NS.GROUP_CHAT_INVITE}\"]`).length)) {\n                    if (stanza_id.attr('by') === from_bare_jid) {\n                        $stanza_id = stanza_id;\n                        $contact_stanza_id = stanza_id;\n                    }\n                    else\n                        $stanza_id = stanza_id;\n                }\n                else {\n                    if (stanza_id.attr('by') === this.account.get('jid'))\n                        $stanza_id = stanza_id;\n                    else\n                        $contact_stanza_id = stanza_id;\n                }\n            });\n            $stanza_id && (attrs.stanza_id = $stanza_id.attr('id'));\n            $contact_stanza_id && (attrs.contact_stanza_id = $contact_stanza_id.attr('id'));\n            return attrs;\n        },\n\n        receiveChatMessage: function (message, options) {\n            options = options || {};\n            let $message = $(message),\n                $forwarded = $message.find('forwarded'),\n                $delay = options.delay,\n                to_jid = $message.attr('to'),\n                to_bare_jid = Strophe.getBareJidFromJid(to_jid),\n                to_resource = to_jid && Strophe.getResourceFromJid(to_jid),\n                from_jid = $message.attr('from') || options.from_jid;\n\n            if ($message.children(`encrypted[xmlns=\"${Strophe.NS.OMEMO}\"]`).length && !options.forwarded) {\n                if (this.account.omemo)\n                    this.account.omemo.receiveChatMessage(message, options);\n                return;\n            }\n\n            if ($message.find('invite').length) {\n                if (options.forwarded)\n                    return;\n            }\n\n            if (!from_jid) {\n                from_jid = this.account.get('jid');\n            }\n            let from_bare_jid = Strophe.getBareJidFromJid(from_jid),\n                is_sender = from_bare_jid === this.account.get('jid');\n\n            if (options.forwarded && (!$forwarded.length || (options.xml))) {\n                return this.account.forwarded_messages.createFromStanza($message, {\n                    is_forwarded: true,\n                    forwarded_message: options.forwarded_message || null,\n                    delay: $delay,\n                    replaced: options.replaced,\n                    from_jid: from_jid,\n                    xml: options.xml\n                });\n            }\n\n            if ($forwarded.length && !options.xml) {\n                let $mam = $message.find(`result[xmlns=\"${Strophe.NS.MAM}\"]`);\n                if ($mam.length) {\n                    $forwarded = $mam.children('forwarded');\n                    if ($forwarded.length) {\n                        $message = $forwarded.children('message');\n                        $delay = $forwarded.children('delay');\n                    }\n                    let stanza_ids = this.receiveStanzaId($message, {from_bare_jid: from_bare_jid});\n                    return this.receiveChatMessage($message[0], _.extend(options, {\n                        is_mam: true,\n                        delay: $delay,\n                        stanza_id: stanza_ids.stanza_id || $mam.attr('id'),\n                        contact_stanza_id: stanza_ids.contact_stanza_id\n                    }));\n                }\n                let $carbons = $message.find(`[xmlns=\"${Strophe.NS.CARBONS}\"]`);\n                if (!options.carbon_copied && $carbons.length && ['received', 'sent'].includes($carbons[0].tagName)) {\n                    if ($message.find('invite').length) {\n                        if ($carbons[0].tagName === 'sent')\n                            return;\n                    }\n                    if (!is_sender)\n                        return;\n                    $forwarded = $carbons.children('forwarded');\n                    if ($forwarded.length)\n                        $message = $forwarded.children('message');\n                    if ($carbons.find(`request[xmlns=\"${Strophe.NS.DELIVERY}\"][to=\"${to_bare_jid}\"]`).length)\n                        return;\n                    if (this.account.fast_connection && ($message.attr('from') === this.account.fast_connection.jid))\n                        return;\n                    return this.receiveChatMessage($message[0], _.extend(options, {\n                        carbon_copied: true, carbon_direction: $carbons[0].tagName\n                    }));\n                }\n                let forwarded_msgs = [];\n                $forwarded = $message.children(`reference[type=\"mutable\"][xmlns=\"${Strophe.NS.REFERENCE}\"]`).length ?\n                    $message.children(`reference[type=\"mutable\"][xmlns=\"${Strophe.NS.REFERENCE}\"]`).children('forwarded[xmlns=\"' + Strophe.NS.FORWARD + '\"]') :\n                    $message.children('envelope').children('content').children(`reference[type=\"mutable\"][xmlns=\"${Strophe.NS.REFERENCE}\"]`).children('forwarded[xmlns=\"' + Strophe.NS.FORWARD + '\"]');\n                $forwarded.each((idx, forwarded_msg) => {\n                    let $forwarded_msg = $(forwarded_msg),\n                        $forwarded_message = $forwarded_msg.children('message'),\n                        $forwarded_delay = $forwarded_msg.children('delay');\n                    let forwarded_message = this.receiveChatMessage($forwarded_message[0], {\n                        forwarded: true,\n                        pinned_message: options.pinned_message,\n                        participant_message: options.participant_message,\n                        searched_message: options.searched_message,\n                        is_searched: options.is_searched,\n                        context_message: options.context_message,\n                        from_jid: from_jid,\n                        delay: $forwarded_delay\n                    });\n                    forwarded_msgs.push(forwarded_message);\n                });\n                return this.receiveChatMessage($message[0], _.extend({\n                    forwarded_message: forwarded_msgs.length ? forwarded_msgs : null,\n                    xml: $message[0]\n                }, options));\n            }\n\n            if (!options.is_mam && to_resource && to_resource !== this.account.resource) {\n                xabber.warn('Message to another resource');\n                xabber.warn(message);\n            }\n\n            let contact_jid = is_sender ? to_bare_jid : from_bare_jid;\n            options.replaced && (contact_jid = $message.children('replace').attr('conversation'));\n\n            if (contact_jid === this.account.get('jid')) {\n                if (options.carbon_copied && options.carbon_direction === 'sent' || !options.carbon_copied) {\n                    let chat = this.getSavedChat(),\n                        stanza_ids = this.receiveStanzaId($message, {from_bare_jid: from_bare_jid, carbon_copied: options.carbon_copied, replaced: options.replaced});\n                    return chat.receiveMessage($message, _.extend(options, {is_sender: is_sender, stanza_id: stanza_ids.stanza_id, contact_stanza_id: stanza_ids.contact_stanza_id}));\n                } else {\n                    xabber.warn('Message from me to me');\n                    xabber.warn(message);\n                    return;\n                }\n            }\n\n            let contact = this.account.contacts.mergeContact(contact_jid),\n                chat = this.account.chats.getChat(contact, (options.encrypted || options.not_encrypted) && 'encrypted'),\n                stanza_ids = this.receiveStanzaId($message, {from_bare_jid: from_bare_jid, carbon_copied: options.carbon_copied, replaced: options.replaced});\n\n            if ($message.children(`x[xmlns=\"${Strophe.NS.GROUP_CHAT}#system-message\"]`).length) {\n                if (!contact)\n                    return;\n                let participant_version = $message.children(`x[xmlns=\"${Strophe.NS.GROUP_CHAT}#system-message\"]`).attr('version');\n                if (participant_version && contact.participants && contact.participants.version < participant_version){\n                    if ($message.children(`x[xmlns=\"${Strophe.NS.GROUP_CHAT}#system-message\"]`).children(`user[xmlns=\"${Strophe.NS.GROUP_CHAT}\"]`).length && chat.contact.get('pinned_message')){\n                        $message.children('x[xmlns=\"' + Strophe.NS.GROUP_CHAT + '#system-message\"]').each((idx, x_elem) => {\n                            let $user = $(x_elem).children(`user[xmlns=\"${Strophe.NS.GROUP_CHAT}\"]`).first();\n                            if ($user.length) {\n                                let user_id = $user.attr('id'),\n                                    user_jid = $user.children('jid').text();\n                                if (chat.contact.get('pinned_message').get('from_jid') === user_jid) {\n                                    let pinned_message = chat.contact.get('pinned_message'),\n                                        user_info = {\n                                            id: user_id,\n                                            jid: user_jid,\n                                            nickname: $user.children('nickname').text() || user_jid || user_id,\n                                            role: $user.children('role').text(),\n                                            avatar: $user.children(`metadata[xmlns=\"${Strophe.NS.PUBSUB_AVATAR_METADATA}\"]`).children('info').attr('id'),\n                                            avatar_url: $user.children(`metadata[xmlns=\"${Strophe.NS.PUBSUB_AVATAR_METADATA}\"]`).children('info').attr('url'),\n                                            badge: $user.children('badge').text()\n                                        };\n                                    pinned_message.set('user_info', user_info);\n                                    chat.contact.set('pinned_message', pinned_message);\n                                }\n                            }\n                        });\n                    }\n                    if (contact.details_view && contact.details_view.isVisible())\n                        contact.trigger('update_participants');\n                }\n            }\n\n            if ($message.find('device[xmlns=\"' + Strophe.NS.AUTH_DEVICES + '\"]').length && !options.is_archived) {\n                this.account.getAllXTokens();\n            }\n\n            if (chat.contact.get('group_chat') && options.carbon_direction === 'sent' && !$message.children(`[xmlns=\"${Strophe.NS.CHAT_MARKERS}\"]`).length)\n                return;\n\n            return chat.receiveMessage($message, _.extend(options, {is_sender: is_sender, stanza_id: stanza_ids.stanza_id, contact_stanza_id: stanza_ids.contact_stanza_id}));\n        },\n\n        receiveErrorMessage: function (message) {\n            let msgid = message.getAttribute('id'),\n                origin_id = $(message).children('origin-id').attr('id');\n            if (msgid) {\n                let code = $(message).find('error').attr('code'),\n                    msg = this.account.messages.get(origin_id || msgid);\n                if (msg) {\n                    if (code === '405') {\n                        msg.set('state', constants.MSG_BLOCKED);\n                    }\n                    if (code === '406') {\n                        msg.set('state', constants.MSG_ERROR);\n                    }\n                }\n            }\n        },\n\n        onPresence: function (contact, type) {\n            let chat = this.getChat(contact);\n            chat.onPresence(type);\n        },\n\n        onRosterPush: function (contact, type) {\n            let chat = this.getChat(contact);\n            chat.onRosterPush(type);\n        }\n    });\n\n    xabber.AddGroupChatView = xabber.SearchView.extend({\n        className: 'modal main-modal add-group-chat-modal add-contact-modal',\n        template: templates.group_chats.add_group_chat,\n        avatar_size: constants.AVATAR_SIZES.ACCOUNT_ITEM,\n        ps_selector: '.rich-textarea',\n        ps_settings: {theme: 'item-list'},\n\n        events: {\n            \"click .dropdown-content#select-account-for-creating-groupchat\": \"selectAccount\",\n            \"click .btn-add\": \"addGroupChat\",\n            \"keyup .input-group-chat-name input\": \"updateGroupJid\",\n            \"keyup .rich-textarea\": \"showPlaceholder\",\n            \"keyup .input-group-chat-jid input\": \"fixJid\",\n            \"click .btn-cancel\": \"close\",\n            \"click .property-variant\": \"changePropertyValue\"\n        },\n\n        render: function (options) {\n            if (!xabber.accounts.connected.length) {\n                utils.dialogs.error(xabber.getString(\"dialog_add_contact__error__text_no_accounts\"));\n                return;\n            }\n            options || (options = {});\n            this.setDefaultSettings(options);\n            let accounts = options.account ? [options.account] : xabber.accounts.connected;\n            this.$('.single-acc').showIf(accounts.length === 1);\n            this.$('.multiple-acc').hideIf(accounts.length === 1);\n            this.$('.dropdown-content#select-account-for-creating-groupchat').empty();\n            _.each(accounts, (account) => {\n                this.$('.dropdown-content#select-account-for-creating-groupchat').append(\n                        this.renderAccountItem(account));\n            });\n            this.$('.account-dropdown-wrap').hideIf(accounts.length < 2)\n            this.bindAccount(accounts[0]);\n            this.$('.btn-cancel').text(this.is_login ? xabber.getString(\"skip\") : xabber.getString(\"cancel\"));\n            this.$el.openModal({\n                ready: () => {\n                    let dropdown_settings = {\n                        inDuration: 100,\n                        outDuration: 100,\n                        constrainWidth: false,\n                        hover: false,\n                        alignment: 'left'\n                    };\n                    Materialize.updateTextFields();\n                    this.$('.account-dropdown-wrap').dropdown(dropdown_settings);\n                    this.$('.property-field .dropdown-button').dropdown(dropdown_settings);\n                    this.$('.property-field .select-xmpp-server .caret').dropdown(dropdown_settings);\n                    this.$('.property-field .select-xmpp-server .xmpp-server-item-wrap').dropdown(dropdown_settings);\n                    this.$('input[name=\"chat_name\"]').focus();\n                },\n                complete: this.close.bind(this)\n            });\n\n        },\n\n        setDefaultSettings: function (options) {\n            this.$('.incognito-field .public-item-wrap').showIf(options.public);\n            this.$('.incognito-field .incognito-item-wrap').showIf(options.incognito);\n            if (options.public)\n                this.$('.modal-header span').text(xabber.getString(\"create_group\"));\n            if (options.incognito)\n                this.$('.modal-header span').text(xabber.getString(\"create_incognito_group\"));\n            this.$('input[name=chat_jid]').removeClass('fixed-jid').val(\"\");\n            this.$('#new_chat_domain').val(\"\");\n            this.$('input[name=chat_name]').val(\"\");\n            this.$('.description-field .rich-textarea').text(\"\");\n            this.$('.btn-add').addClass('non-active');\n            this.showPlaceholder();\n            this.$('span.errors').text('').addClass('hidden');\n            this.$('input').removeClass('invalid');\n            let $global_wrap = this.$('.global-dropdown-wrap'),\n                default_global_value = $global_wrap.find('.dropdown-content .default-value');\n            $global_wrap.find('.global-item-wrap .property-value').attr('data-value', default_global_value.attr('data-value')).text(default_global_value.text());\n            let $membership_wrap = this.$('.membership-dropdown-wrap'),\n                default_membership_value = $membership_wrap.find('.dropdown-content .default-value');\n            $membership_wrap.find('.membership-item-wrap .property-value').attr('data-value', default_membership_value.attr('data-value')).text(default_membership_value.text());\n        },\n\n        bindAccount: function (account) {\n            this.account = account;\n            this.$('.input-group-chat-domain').addClass('hidden');\n            this.$('.account-dropdown-wrap .dropdown-button .account-item-wrap')\n                    .replaceWith(this.renderAccountItem(account));\n            let all_servers = this.account.get('groupchat_servers_list');\n            if (all_servers.length){\n                this.$('.xmpp-server-dropdown-wrap .field-jid').text(all_servers[0]);\n                this.$('.select-xmpp-server .caret').removeClass('hidden')\n                this.$('.xmpp-server-item-wrap .property-value').removeClass('hidden')\n            }\n            else\n                this.setCustomDomain(this.$('.property-field.xmpp-server-dropdown-wrap .property-value'));\n            this.$('.modal-content .jid-field .set-default-domain').remove();\n            for (let i = 0; i < all_servers.length; i++) {\n                $('<div/>', {class: 'field-jid property-variant set-default-domain'}).text(all_servers[i]).insertBefore(this.$('.modal-content .jid-field .set-custom-domain'));\n            }\n        },\n\n        renderAccountItem: function (account) {\n            let $item = $(templates.add_chat_account_item({jid: account.get('jid'), name: account.get('name')}));\n            $item.find('.circle-avatar').setAvatar(account.cached_image, this.avatar_size);\n            return $item;\n        },\n\n        selectAccount: function (ev) {\n            let $item = $(ev.target).closest('.account-item-wrap'),\n                account = xabber.accounts.get($item.data('jid'));\n            this.bindAccount(account);\n        },\n\n        setCustomDomain: function ($property_value) {\n            this.$('#new_chat_domain').val(\"\");\n            this.$('.select-xmpp-server .caret').addClass('hidden');\n            $property_value.addClass('hidden').text(\"\");\n            this.$('.input-group-chat-domain').removeClass('hidden');\n        },\n\n        changePropertyValue: function (ev) {\n            let $property_item = $(ev.target),\n                $property_value = $property_item.closest('.property-field').find('.property-value');\n            if ($property_item.hasClass('set-custom-domain')) {\n                this.setCustomDomain($property_value);\n                return;\n            }\n            else if ($property_item.hasClass('set-default-domain')) {\n                this.$('.input-group-chat-domain').addClass('hidden');\n                this.$('#new_chat_domain').val(\"\");\n            }\n            $property_value.text($property_item.text());\n            $property_value.removeClass('hidden').attr('data-value', $property_item.attr('data-value'));\n            this.$('.select-xmpp-server .caret').removeClass('hidden')\n        },\n\n        close: function () {\n            this.$el.closeModal({ complete: () => {\n                    this.$el.detach();\n                    this.data.set('visible', false);\n                }\n            });\n        },\n\n        updateGroupJid: function () {\n            let elem = this.$('input[name=chat_jid]');\n            if (!elem.hasClass('fixed-jid')) {\n                let text = slug(this.$('.input-group-chat-name input').get(0).value, {lower: true});\n                this.$(\"label[for=new_chat_jid]\").addClass('active');\n                this.$('.input-field #new_chat_jid').get(0).value = text;\n            }\n            this.$('.btn-add').switchClass('non-active', !this.$('.input-group-chat-name input').get(0).value);\n        },\n\n        showPlaceholder: function () {\n            let textarea_is_empty = (this.$('.rich-textarea ').text() !== \"\") ? false : true;\n            this.$('.rich-textarea-wrap .placeholder').hideIf(!textarea_is_empty);\n        },\n\n        fixJid: function () {\n            let elem = this.$('input[name=chat_jid]');\n            !elem.hasClass('fixed-jid') && elem.addClass('fixed-jid');\n            (elem.get(0).value == \"\") && elem.removeClass('fixed-jid');\n        },\n\n        createGroupChat: function () {\n            let name = this.$('input[name=chat_name]').val(),\n                chat_jid = this.$('input[name=chat_jid]').val() ? this.$('input[name=chat_jid]').val() : undefined,\n                privacy = this.$('.incognito-field .property-wrap:not(.hidden) .property-value').attr('data-value'),\n                domain = this.$('#new_chat_domain').val() || this.$('.xmpp-server-dropdown-wrap .property-value').text(),\n                searchable = this.$('input[name=\"group_index\"]:checked').attr('data-value'),\n                description = this.$('.description-field .rich-textarea').text() || \"\",\n                model = this.$('input[name=\"group_membership\"]:checked').attr('data-value'),\n                iq = $iq({type: 'set', to: domain}).c('query', {xmlns: Strophe.NS.GROUP_CHAT + '#create'})\n                    .c('name').t(name).up()\n                    .c('privacy').t(privacy).up()\n                    .c('index').t(searchable).up()\n                    .c('description').t(description).up()\n                    .c('membership').t(model).up();\n                if (chat_jid)\n                    iq.c('localpart').t(chat_jid);\n            this.account.sendIQFast(iq, (iq) => {\n                    let group_jid = $(iq).find('query localpart').text().trim() + '@' + $(iq).attr('from').trim(),\n                        contact = this.account.contacts.mergeContact(group_jid);\n                    contact.set('group_chat', true);\n                    contact.set('subscription_preapproved', true);\n                    contact.pres('subscribed');\n                    contact.pushInRoster(null, () => {\n                        contact.pres('subscribe');\n                        contact.getMyInfo();\n                        this.close();\n                        xabber.chats_view.updateScreenAllChats();\n                        contact.sendPresent();\n                        contact.trigger(\"open_chat\", contact);\n                        if (!(this.account.connection && this.account.connection.do_synchronization)) {\n                            let iq_set_blocking = $iq({type: 'set'}).c('block', {xmlns: Strophe.NS.BLOCKING})\n                                .c('item', {jid: group_jid + '/' + moment.now()});\n                            this.account.sendIQFast(iq_set_blocking);\n                        }\n                    });\n                }, () => {\n                    this.$('span.errors').removeClass('hidden').text(xabber.getString(\"groupchat_jid_already_exists\"));\n                    this.$('input[name=\"chat_jid\"]').addClass('invalid');\n                });\n        },\n\n        addGroupChat: function (ev) {\n            if ($(ev.target).closest('.button-wrap').hasClass('non-active')) {\n                $(ev.target).blur();\n                return;\n            }\n            let xmpp_server = this.$('#new_chat_domain').val() || this.$('.xmpp-server-dropdown-wrap .property-value').text(),\n                input_value = this.$('input[name=chat_jid]').val();\n            if (this.$('input[name=chat_name]').val() == \"\") {\n                this.$('span.errors').text(xabber.getString(\"group_is_empty\")).removeClass('hidden');\n                this.$('input[name=\"chat_name\"]').addClass('invalid');\n            } else {\n                if ((input_value == \"\")||((input_value.search(/[А-яЁё]/) == -1)&&(input_value.search(/\\s/) == -1)&&(input_value != \"\"))) {\n                    this.$('span.errors').text('').addClass('hidden');\n                    this.$('input').removeClass('invalid');\n                    let iq = $iq({type: 'get', to: xmpp_server}).c('query', {xmlns: Strophe.NS.DISCO_INFO}),\n                        group_chats_support;\n                    this.account.sendIQFast(iq, (iq) => {\n                        $(iq).children('query').children('feature').each((elem, item) => {\n                            if ($(item).attr('var') == Strophe.NS.GROUP_CHAT)\n                                group_chats_support = true;\n                        });\n                        if (group_chats_support)\n                            this.createGroupChat();\n                        else {\n                            this.$('span.errors').removeClass('hidden').text(`${xabber.getString(\"groupchat_add__alert_server_does_not_support\")}`);\n                            this.$('input[name=\"chat_domain\"]').addClass('invalid');\n                        }\n                    }, (response) => {\n                        this.$('span.errors').removeClass('hidden').text(`${xabber.getString(\"groupchat_add__alert_invalid_domain\")}`); // !!!!!!!!!!!!!!!!!! :::::\n                        this.$('input[name=\"chat_domain\"]').addClass('invalid');\n                    });\n                }\n                else {\n                    this.$('span.errors').removeClass('hidden').text(`${xabber.getString(\"groupchat_add__alert_localpart_invalid\")}`);\n                    this.$('input[name=\"chat_jid\"]').addClass('invalid');\n                }\n            }\n        }\n    });\n\n    xabber.ChatsView = xabber.SearchPanelView.extend({\n        className: 'recent-chats-container container',\n        ps_selector: '.chat-list-wrap',\n        ps_settings: {theme: 'item-list'},\n        main_container: '.chat-list',\n        template: templates.chats_panel,\n\n        _initialize: function () {\n            this.active_chat = null;\n            this.model.on(\"add\", this.onChatAdded, this);\n            this.model.on(\"destroy\", this.onChatRemoved, this);\n            this.model.on(\"change:active\", this.onChangedActiveStatus, this);\n            this.model.on(\"change:unread\", this.onChangedReadStatus, this);\n            this.model.on(\"change:const_unread\", this.onChangedReadStatus, this);\n            this.model.on(\"change:timestamp\", this.updateChatPosition, this);\n            xabber.accounts.on(\"list_changed\", this.updateLeftIndicator, this);\n            let wheel_ev = this.defineMouseWheelEvent();\n            this.$el.on(wheel_ev, this.onMouseWheel.bind(this));\n            this.ps_container.on(\"ps-scroll-y\", this.onScrollY.bind(this));\n            this.$('.read-all-button').click(this.readAllMessages.bind(this));\n            xabber.on(\"update_screen\", this.onUpdatedScreen, this);\n            xabber.on(\"update_layout\", this.onWindowResized, this);\n            this.$('input').on('input', this.updateSearch.bind(this));\n        },\n\n        render: function (options) {\n            if (options.right === undefined)\n                this.active_chat = null;\n            this.$('.chat-list-wrap').switchClass('with-padding', xabber.toolbar_view.$('.toolbar-item.unread').length);\n            if (options.right !== 'chat' && options.right !== 'contact_details' && options.right !== 'searched_messages' && options.right !== 'message_context' && options.right !== 'participant_messages' || options.clear_search) {\n                this.clearSearch();\n                if (xabber.toolbar_view.$('.active').hasClass('all-chats')) {\n                    this.showAllChats();\n                }\n            }\n        },\n\n        readAllMessages: function () {\n            let chats = this.model,\n                active_toolbar = xabber.toolbar_view.$('.active');\n            if (active_toolbar.hasClass('chats')) {\n                let private_chats = chats.filter(chat => chat.get('saved') || !chat.contact.get('group_chat') && chat.get('timestamp') && !chat.get('archived') && chat.last_message && !chat.last_message.get('invite') && (chat.get('unread') || chat.get('const_unread')));\n                private_chats.forEach((chat) => {\n                    if (!chat.item_view.content)\n                        chat.item_view.content = new xabber.ChatContentView({chat_item: chat.item_view});\n                    chat.item_view.content.readMessages();\n                });\n            }\n            if (active_toolbar.hasClass('all-chats')) {\n                let all_chats = chats.filter(chat => chat.get('saved') || chat.get('timestamp') && !chat.get('archived') && chat.last_message && !chat.last_message.get('invite') && (chat.get('unread') || chat.get('const_unread')));\n                all_chats.forEach((chat) => {\n                    if (!chat.item_view.content)\n                        chat.item_view.content = new xabber.ChatContentView({chat_item: chat.item_view});\n                    chat.item_view.content.readMessages();\n                });\n            }\n            if (active_toolbar.hasClass('group-chats')) {\n                let group_chats = chats.filter(chat => chat.get('saved') || chat.contact.get('group_chat') && chat.get('timestamp') && !chat.get('archived') && chat.last_message && !chat.last_message.get('invite') && (chat.get('unread') || chat.get('const_unread')));\n                group_chats.forEach((chat) => {\n                    if (!chat.item_view.content)\n                        chat.item_view.content = new xabber.ChatContentView({chat_item: chat.item_view});\n                    chat.item_view.content.readMessages();\n                });\n            }\n            xabber.toolbar_view.recountAllMessageCounter();\n        },\n\n        onUpdatedScreen: function (name) {\n            this.$('.read-all-button').switchClass('hidden', !xabber.toolbar_view.$('.toolbar-item.active.unread').length);\n        },\n\n        // onWindowResized: function (options) {\n        //     options.size_changed && this.onScroll();\n        // },\n\n        defineMouseWheelEvent: function () {\n            if (!_.isUndefined(window.onwheel)) {\n                return \"wheel\";\n            } else if (!_.isUndefined(window.onmousewheel)) {\n                return \"mousewheel\";\n            } else {\n                return \"MozMousePixelScroll\";\n            }\n        },\n\n        onMouseWheel: function (ev) {\n            // if (ev.originalEvent.deltaY > 0)\n            //     this.onScroll();\n        },\n\n        hideChatsFeedback: function () {\n            clearTimeout(this._load_chats_timeout);\n            this.$('.load-chats-feedback').addClass('hidden');\n            this.updateScrollBar();\n            this._load_chats_timeout = null;\n        },\n\n        // onScroll: function () {\n        //     if (this.getScrollBottom() < 12 && !this._load_chats_timeout && this.isVisible()) {\n        //         this._load_chats_timeout = setTimeout(() => {\n        //             this.hideChatsFeedback();\n        //         }, 5000);\n        //         let accounts = xabber.accounts.connected.filter(account => !account.roster.conversations_loaded && account.connection && account.connection.do_synchronization);\n        //         if (accounts.length) {\n        //             this.$('.load-chats-feedback').text(xabber.getString(\"placeholder_loading\")).removeClass('hidden');\n        //             this.updateScrollBar();\n        //         }\n        //         accounts.forEach((account) => {\n        //             let options = {max: xabber.settings.mam_messages_limit};\n        //             account.roster.last_chat_msg_id && (options.after = account.roster.last_chat_msg_id);\n        //             account.roster.syncFromServer(options);\n        //         });\n        //     }\n        // },\n\n        updateLeftIndicator: function (accounts) {\n            this.$el.attr('data-indicator', accounts.connected.length > 1);\n        },\n\n        onChatAdded: function (chat) {\n            this.addChild(chat.id, chat.item_view);\n            this.updateChatPosition(chat);\n        },\n\n        onChatRemoved: function (chat, options) {\n            if (this.active_chat === this.child(chat.id)) {\n                this.active_chat = null;\n                xabber.body.setScreen(null, {chat_item: null},\n                        {silent: !xabber.body.isScreen('all-chats')});\n            }\n            this.removeChild(chat.id, options);\n            this.updateScrollBar();\n        },\n\n        onChangedActiveStatus: function (chat) {\n            if (chat.get('active')) {\n                let previous_chat = this.active_chat;\n                this.active_chat = this.child(chat.id);\n                previous_chat && previous_chat.model.set('active', false);\n            }\n        },\n\n        onChangedReadStatus: function (item) {\n            let view = this.child(item.id),\n                active_toolbar = xabber.toolbar_view.$('.active');\n            if (!view)\n                return;\n            if (!active_toolbar.hasClass('unread') || (active_toolbar.hasClass('unread') && (item.get('unread') || item.get('const_unread'))))\n                return;\n            view.detach();\n            if (!this.$('.chat-item').length && active_toolbar.hasClass('unread')) {\n                active_toolbar.click();\n            }\n        },\n\n        replaceChatItem: function (item, chats, pinned_chats) {\n            let view = this.child(item.id);\n            if (view && item.get('pinned') && item.get('pinned') !== '0' && pinned_chats ){\n                pinned_chats = pinned_chats.sort((a, b) => (a.get('pinned') > b.get('pinned')) ? 1 : -1)\n                let index = pinned_chats.indexOf(item);\n                if (index === 0) {\n                    this.$('.pinned-chat-list').prepend(view.$el);\n                } else {\n                    let $chat_item = this.$('.pinned-chat-list .chat-item').eq(index - 1);\n                    while (!$chat_item.length && index > 0) {\n                        index--;\n                        $chat_item = this.$('.pinned-chat-list .chat-item').eq(index - 1);\n                    }\n                    $chat_item.after(view.$el);\n                }\n            }\n            else if (view && (item.get('timestamp') || item.get('saved'))) {\n                view.$el.detach();\n                let index = chats.indexOf(item);\n                if (index === 0) {\n                    this.$('.chat-list').prepend(view.$el);\n                } else {\n                    this.$('.chat-list .chat-item').eq(index - 1).after(view.$el);\n                }\n            }\n        },\n\n        updateChatPosition: function (item) {\n            let view = this.child(item.id),\n                active_toolbar = xabber.toolbar_view.$('.active');\n            if (!view)\n                return;\n            if (active_toolbar.hasClass('unread') && !(item.get('unread') || item.get('const_unread')))\n                return;\n            active_toolbar.hasClass('group-chats') && (view.model.get('saved') || view.contact.get('group_chat')) && this.replaceChatItem(item, this.model.filter(chat => (chat.get('saved') || chat.contact.get('group_chat') && !chat.get('archived')) && (chat.get('pinned') === '0' || !chat.get('pinned'))), this.model.filter(chat => (chat.get('saved') || chat.contact.get('group_chat') && !chat.get('archived')) && chat.get('pinned') !== '0' && chat.get('pinned')));\n            active_toolbar.hasClass('chats') && (view.model.get('saved') || !view.contact.get('group_chat')) && this.replaceChatItem(item, this.model.filter(chat => (chat.get('saved') || !chat.contact.get('group_chat') && !chat.get('archived')) && (chat.get('pinned') === '0' || !chat.get('pinned'))), this.model.filter(chat => (chat.get('saved') || !chat.contact.get('group_chat') && !chat.get('archived')) && chat.get('pinned') !== '0' && chat.get('pinned')));\n            active_toolbar.hasClass('all-chats') && (view.model.get('saved') || !view.model.get('archived')) && this.replaceChatItem(item, this.model.filter(chat => (chat.get('saved') || !chat.get('archived')) && (chat.get('pinned') === '0' || !chat.get('pinned'))), this.model.filter(chat => (chat.get('saved') || !chat.get('archived')) && chat.get('pinned') !== '0' && chat.get('pinned')));\n            active_toolbar.hasClass('archive-chats') && (view.model.get('saved') || view.model.get('archived')) && this.replaceChatItem(item, this.model.filter(chat => chat.get('saved') || chat.get('archived')));\n            active_toolbar.hasClass('account-item') && (view.model.get('saved') || (view.account.get('jid') === active_toolbar.attr('data-jid'))) && this.replaceChatItem(item, this.model.filter(chat => (chat.get('saved') || chat.account.get('jid') === (active_toolbar.attr('data-jid')) && !chat.get('archived')) && (chat.get('pinned') === '0' || !chat.get('pinned'))), this.model.filter(chat => (chat.get('saved') || chat.account.get('jid') === (active_toolbar.attr('data-jid')) && !chat.get('archived')) && chat.get('pinned') !== '0' && chat.get('pinned')));\n        },\n\n        onEnterPressed: function (selection) {\n            let view;\n            if (selection.closest('.searched-lists-wrap').length) {\n                this.clearSearch();\n                this.$('.list-item.active').removeClass('active');\n                if (selection.hasClass('chat-item')) {\n                    view = this.child(selection.data('id'));\n                    view && view.open();\n                    selection.addClass('active');\n                }\n                if (selection.hasClass('roster-contact')) {\n                    view = xabber.accounts.get(selection.data('account')).chats.getChat(xabber.accounts.get(selection.data('account')).contacts.get(selection.data('jid')));\n                    view && (view = view.item_view);\n                    view && xabber.chats_view.openChat(view, {clear_search: false, screen: xabber.body.screen.get('name')});\n                    selection.addClass('active');\n                }\n                if (selection.hasClass('message-item')) {\n                    selection.click();\n                }\n            }\n            else {\n                view = this.child(selection.data('id'));\n                view && view.open();\n            }\n        },\n\n        openChat: function (view, options) {\n            if (!view.content)\n                view.content = new xabber.ChatContentView({chat_item: view});\n            options = options || {};\n            this.$('.list-item.active').removeClass('active');\n            view.updateActiveStatus();\n            let scrolled_top = xabber.chats_view.getScrollTop();\n            options.clear_search && this.clearSearch();\n            if (view.contact && !view.contact.get('in_roster') && (view.model.get('is_accepted') == false)) {\n                view.model.set('display', true);\n                view.model.set('active', true);\n                xabber.body.setScreen('all-chats', {right: 'group_invitation', contact: view.contact });\n            }\n            else {\n                if (xabber.toolbar_view.$('.active').hasClass('contacts'))\n                    this.updateScreenAllChats();\n                if (!view.model.get('history_loaded') && (view.model.messages.length < 20)) {\n                    view.content.loadPreviousHistory();\n                }\n                if (!view.model.get('displayed_sent') && view.model.messages.length) {\n                    let last_msg = view.model.messages.models[view.model.messages.length - 1];\n                    if (last_msg)\n                        if (!last_msg.isSenderMe() && (view.model.get('unread') || view.model.get('const_unread'))) {\n                            view.model.sendMarker(last_msg.get('msgid'), 'displayed', last_msg.get('stanza_id'), last_msg.get('contact_stanza_id'));\n                            view.model.set('displayed_sent', true);\n                        }\n                }\n                if (xabber.body.screen.get('right_contact') && (xabber.body.screen.get('right') === 'chat' || xabber.body.screen.get('right') === 'message_context' )) {\n                    if (view.model.get('saved'))\n                        xabber.body.setScreen((options.screen || 'all-chats'), {right_contact: ''});\n                    else if(xabber.right_contact_panel_saveable)\n                        view.contact.showDetailsRight('all-chats', {right_saved: true, encrypted: view.model.get('encrypted')});\n                    else\n                        view.contact.showDetailsRight('all-chats', {right_saved: false});\n                }\n                xabber.body.setScreen((options.screen || 'all-chats'), {\n                    right: 'chat',\n                    clear_search: options.clear_search,\n                    chat_item: view,\n                    blocked: view.model.get('blocked')\n                },{right_contact_save: options.right_contact_save} );\n                if (view.contact && (!view.contact.get('vcard_updated') || (view.contact.get('group_chat') && !view.contact.get('group_info')) || (view.contact.get('vcard_updated') && !moment(view.contact.get('vcard_updated')).startOf('hour').isSame(moment().startOf('hour'))))) {\n                    view.contact.getVCard();\n                }\n            }\n            xabber.chats_view.scrollTo(scrolled_top);\n        },\n\n        showGroupChats: function () {\n            this.$('.chat-item').detach();\n            let chats = this.model,\n                is_unread = xabber.toolbar_view.$('.active.unread').length,\n                group_chats = [],\n                group_chats_pinned = [];\n            if (is_unread) {\n                group_chats = chats.filter(chat => chat.contact && chat.contact.get('group_chat') && chat.get('timestamp') && !chat.get('archived') && chat.last_message && !chat.last_message.get('invite') && (chat.get('unread') || chat.get('const_unread')) && (chat.get('pinned') === '0' || !chat.get('pinned')));\n                group_chats_pinned = chats.filter(chat => chat.contact && chat.contact.get('group_chat') && chat.get('timestamp') && !chat.get('archived') && chat.last_message && !chat.last_message.get('invite') && (chat.get('unread') || chat.get('const_unread')) && chat.get('pinned') !== '0' && chat.get('pinned'));\n            }\n            if (!group_chats.length && !group_chats_pinned.length) {\n                group_chats = chats.filter(chat => !chat.get('saved') && chat.contact.get('group_chat') && chat.get('timestamp') && !chat.get('archived') && (chat.get('pinned') === '0' || !chat.get('pinned')));\n                group_chats_pinned = chats.filter(chat => !chat.get('saved') && chat.contact.get('group_chat') && chat.get('timestamp') && !chat.get('archived') && chat.get('pinned') !== '0' && chat.get('pinned'));\n                xabber.toolbar_view.$('.toolbar-item.unread').removeClass('unread');\n                this.onUpdatedScreen();\n            }\n            group_chats.forEach((chat) => {\n                this.$('.chat-list').append(chat.item_view.$el);\n            });\n            if (group_chats_pinned) {\n                group_chats_pinned = group_chats_pinned.sort((a, b) => (a.get('pinned') > b.get('pinned')) ? 1 : -1)\n                group_chats_pinned.forEach((chat) => {\n                    let index = group_chats_pinned.indexOf(chat);\n                    if (index === 0) {\n                        this.$('.pinned-chat-list').prepend(chat.item_view.$el);\n                    } else {\n                        this.$('.pinned-chat-list .chat-item').eq(index - 1).after(chat.item_view.$el);\n                    }\n                });\n            }\n        },\n\n        showChats: function () {\n            this.$('.chat-item').detach();\n            let chats = this.model,\n                is_unread = xabber.toolbar_view.$('.active.unread').length,\n                private_chats = [],\n                private_chats_pinned = [];\n            if (is_unread) {\n                private_chats = chats.filter(chat => chat.contact && !chat.contact.get('group_chat') && chat.get('timestamp') && !chat.get('archived') && chat.last_message && !chat.last_message.get('invite') && (chat.get('unread') || chat.get('const_unread')) && (chat.get('pinned') === '0' || !chat.get('pinned')));\n                private_chats_pinned = chats.filter(chat => chat.contact && !chat.contact.get('group_chat') && chat.get('timestamp') && !chat.get('archived') && chat.last_message && !chat.last_message.get('invite') && (chat.get('unread') || chat.get('const_unread')) && chat.get('pinned') !== '0' && chat.get('pinned'));\n            }\n            if (!private_chats.length && !private_chats_pinned.length) {\n                private_chats = chats.filter(chat => !chat.get('saved') && !chat.contact.get('group_chat') && chat.get('timestamp') && !chat.get('archived') && (chat.get('pinned') === '0' || !chat.get('pinned')));\n                private_chats_pinned = chats.filter(chat => !chat.get('saved') && !chat.contact.get('group_chat') && chat.get('timestamp') && !chat.get('archived') && chat.get('pinned') !== '0' && chat.get('pinned'));\n                xabber.toolbar_view.$('.toolbar-item.unread').removeClass('unread');\n                this.onUpdatedScreen();\n            }\n            private_chats.forEach((chat) => {\n                this.$('.chat-list').append(chat.item_view.$el);\n            });\n            if (private_chats_pinned) {\n                private_chats_pinned = private_chats_pinned.sort((a, b) => (a.get('pinned') > b.get('pinned')) ? 1 : -1)\n                private_chats_pinned.forEach((chat) => {\n                    let index = private_chats_pinned.indexOf(chat);\n                    if (index === 0) {\n                        this.$('.pinned-chat-list').prepend(chat.item_view.$el);\n                    } else {\n                        this.$('.pinned-chat-list .chat-item').eq(index - 1).after(chat.item_view.$el);\n                    }\n                });\n            }\n        },\n\n        showChatsByAccount: function (account) {\n            xabber.body.setScreen('all-chats');\n            this.$('.chat-item').detach();\n            let chats = this.model,\n                account_chats = chats.filter(chat => ((chat.account.get('jid') === account.get('jid')) && (chat.get('saved') || chat.get('timestamp') && !chat.get('archived'))) && (chat.get('pinned') === '0' || !chat.get('pinned'))),\n                account_chats_pinned = chats.filter(chat => ((chat.account.get('jid') === account.get('jid')) && (chat.get('saved') || chat.get('timestamp') && !chat.get('archived'))) && chat.get('pinned') !== '0' && chat.get('pinned'));\n            this.$(`.omemo-item:not([data-id=\"${account.get('jid')}\"])`).addClass('hidden');\n            account_chats.forEach((chat) => {\n                this.$('.chat-list').append(chat.item_view.$el);\n            });\n            if (account_chats_pinned) {\n                account_chats_pinned = account_chats_pinned.sort((a, b) => (a.get('pinned') > b.get('pinned')) ? 1 : -1)\n                account_chats_pinned.forEach((chat) => {\n                    let index = account_chats_pinned.indexOf(chat);\n                    if (index === 0) {\n                        this.$('.pinned-chat-list').prepend(chat.item_view.$el);\n                    } else {\n                        this.$('.pinned-chat-list .chat-item').eq(index - 1).after(chat.item_view.$el);\n                    }\n                });\n            }\n        },\n\n        showArchiveChats: function () {\n            this.$('.chat-item').detach();\n            let chats = this.model,\n                archive_chats = chats.filter(chat => !chat.get('saved') && chat.get('archived'));\n            archive_chats.forEach((chat) => {\n                this.$('.chat-list').append(chat.item_view.$el);\n            });\n        },\n\n        showAllChats: function () {\n            this.$('.chat-item').detach();\n            let chats = this.model,\n                is_unread = xabber.toolbar_view.$('.active.unread').length,\n                all_chats = [],\n                all_chats_pinned = [];\n            if (is_unread) {\n                all_chats = chats.filter(chat => chat.contact && chat.get('timestamp') && !chat.get('archived') && chat.last_message && ((chat.get('unread') || chat.get('const_unread')) || (chat.contact.get('invitation') || (chat.contact.get('subscription_request_in') && chat.contact.get('subscription') != 'both'))) && (chat.get('pinned') === '0' || !chat.get('pinned')) );\n                all_chats_pinned = chats.filter(chat => chat.contact && chat.get('timestamp') && !chat.get('archived') && chat.last_message && ((chat.get('unread') || chat.get('const_unread')) || (chat.contact.get('invitation') || (chat.contact.get('subscription_request_in') && chat.contact.get('subscription') != 'both'))) && chat.get('pinned') !== '0' && chat.get('pinned'));\n            }\n            if (!all_chats.length && !all_chats_pinned.length) {\n                all_chats = chats.filter(chat => (chat.get('saved') || chat.get('timestamp') && !chat.get('archived')) && (chat.get('pinned') === '0' || !chat.get('pinned')));\n                all_chats_pinned = chats.filter(chat => (chat.get('saved') || chat.get('timestamp') && !chat.get('archived')) && chat.get('pinned') !== '0' && chat.get('pinned'));\n                xabber.toolbar_view.$('.toolbar-item.unread').removeClass('unread');\n                this.onUpdatedScreen();\n            }\n            all_chats.forEach((chat) => {\n                this.$('.chat-list').append(chat.item_view.$el);\n            });\n            if (all_chats_pinned) {\n                all_chats_pinned = all_chats_pinned.sort((a, b) => (a.get('pinned') > b.get('pinned')) ? 1 : -1)\n                all_chats_pinned.forEach((chat) => {\n                    let index = all_chats_pinned.indexOf(chat);\n                    if (index === 0) {\n                        this.$('.pinned-chat-list').prepend(chat.item_view.$el);\n                    } else {\n                        this.$('.pinned-chat-list .chat-item').eq(index - 1).after(chat.item_view.$el);\n                    }\n                });\n            }\n        },\n\n        updateScreenAllChats: function () {\n            xabber.toolbar_view.$('.toolbar-item').removeClass('active')\n                .filter('.all-chats').addClass('active');\n            this.showAllChats();\n        }\n    });\n\n      xabber.MessageItemView = xabber.BasicView.extend({\n          className: 'message-item list-item',\n          template: templates.message_item,\n          avatar_size: constants.AVATAR_SIZES.CHAT_ITEM,\n\n          events: {\n              'click': 'openByClick'\n          },\n\n          _initialize: function () {\n              this.contact = this.model.contact;\n              this.account = this.contact ? this.contact.account : this.model.account;\n              this.$el.attr('data-id', this.model.id + '-' + this.cid);\n              this.$el.attr('data-contact-jid', this.contact.get('jid'));\n              this.updateName();\n              this.updateLastMessage();\n              this.updateAvatar();\n              this.updateColorScheme();\n              this.updateGroupChats();\n              this.updateIcon();\n              this.updateStatus();\n              this.account.settings.on(\"change:color\", this.updateColorScheme, this);\n              this.contact.on(\"change:status\", this.updateStatus, this);\n              this.contact.on(\"change:name\", this.updateName, this);\n          },\n\n          updateName: function () {\n              this.$('.chat-title').text(this.contact.get('name'));\n          },\n\n          updateAvatar: function () {\n              let image = this.contact.cached_image;\n              this.$('.circle-avatar').setAvatar(image, this.avatar_size);\n          },\n\n          updateStatus: function () {\n              let status = this.contact.get('status'),\n                  status_message = this.contact.getStatusMessage();\n              this.$('.contact-status').attr('data-status', status);\n              this.$('.chat-icon').attr('data-status', status);\n              this.model.get('blocked') ? this.$('.contact-status-message').text(xabber.getString(\"action_contact_blocked\")) : this.$('.contact-status-message').text(status_message);\n          },\n\n          updateGroupChats: function () {\n              let is_group_chat = this.contact.get('group_chat');\n              this.$('.status').hideIf(is_group_chat);\n              this.updateIcon();\n              if (is_group_chat) {\n                  this.$el.addClass('group-chat');\n                  this.$('.chat-title').css('color', '#424242');\n                  this.model.set('group_chat', true);\n              }\n          },\n\n          updateIcon: function () {\n              this.$('.chat-icon').addClass('hidden');\n              let ic_name = this.contact.getIcon();\n              ic_name && this.$('.chat-icon').removeClass('hidden').switchClass(ic_name, (ic_name == 'group-invite' || ic_name == 'server' || ic_name == 'blocked')).html(env.templates.svg[ic_name]());\n          },\n\n          updateColorScheme: function () {\n              let color = this.account.settings.get('color');\n              this.$el.attr('data-color', color);\n          },\n\n          updateLastMessage: function (msg) {\n              msg || (msg = this.model);\n              if (!msg)\n                  return;\n              let msg_time = msg.get('time'),\n                  timestamp = msg.get('timestamp'),\n                  forwarded_message = msg.get('forwarded_message'),\n                  msg_files = msg.get('files') || [],\n                  msg_images = msg.get('images') || [],\n                  msg_locations = msg.get('locations') || [],\n                  msg_text = (forwarded_message) ? (msg.get('message') || xabber.getQuantityString(\"forwarded_messages_count\", forwarded_message.length).italics()) : msg.getText(),\n                  msg_user_info = msg.get('user_info') || msg.isSenderMe() && this.contact.my_info && this.contact.my_info.attributes || {}, msg_from = \"\";\n              msg.get('videos') && msg.get('videos').length && (msg_files = msg_files.concat(msg.get('videos')));\n              this.model.set({timestamp: timestamp});\n              if (this.model.get('group_chat'))\n                  msg_from = msg_user_info.nickname || msg_user_info.jid || (msg.isSenderMe() ? this.account.get('name') : msg.get('from_jid')) || \"\";\n              if (msg_files.length || msg_images.length || msg_locations.length) {\n                  let $colored_span = $('<span class=\"text-color-500\"/>');\n                  if (msg_files.length && msg_images.length)\n                      msg_text = $colored_span.text(xabber.getString(\"recent_chat__last_message__attachments\", [msg_files.length + msg_images.length]));\n                  else {\n                      if (msg_files.length == 1 && (msg_files[0].is_audio || msg_files[0].voice))\n                          msg_text = $colored_span.text(`${xabber.getString(\"voice_message\")}, ` + utils.pretty_duration(msg_files[0].duration));\n                      else if (msg_files.length > 0) {\n                          let total_size = 0;\n                          msg_files.forEach((f) => {total_size+=Number(f.size)});\n                          msg_text = $colored_span.text(xabber.getQuantityString(\"recent_chat__last_message__files\", msg_files.length) + (total_size > 0 ? `, ${utils.pretty_size(total_size)}` : \"\"));\n                      }\n                      if (msg_images.length > 0) {\n                          let total_size = 0;\n                          msg_images.forEach((f) => {total_size+=Number(f.size)});\n                          msg_text = $colored_span.text(xabber.getQuantityString(\"recent_chat__last_message__images\", msg_images.length) + (total_size > 0 ? `, ${utils.pretty_size(total_size)}` : \"\"));\n                      }\n                      if (msg_locations.length > 0) {\n                          msg_text = $colored_span.text(xabber.getQuantityString(\"recent_chat__last_message__locations\", msg_locations.length));\n                      }\n                  }\n                  this.$('.last-msg').html(\"\").append(msg_from).append(msg_text);\n              }\n              else {\n                  this.$('.last-msg').text(\"\").append(msg_text);\n                  if (msg_from)\n                      this.$('.last-msg').prepend($('<span class=text-color-700>' + msg_from + ': ' + '</span>'));\n              }\n              this.$el.emojify('.last-msg', {emoji_size: 16}).hyperlinkify({decode_uri: true});\n              this.$('.last-msg-date').text(utils.pretty_short_datetime_recent_chat(msg_time))\n                  .attr('title', pretty_datetime(msg_time));\n              this.$('.msg-delivering-state').showIf(msg.isSenderMe() && (msg.get('state') !== constants.MSG_ARCHIVED))\n                  .attr('data-state', msg.getState());\n          },\n\n          openByClick: function () {\n              let chat = this.account.chats.getChat(this.contact);\n              this.$el.closest('.left-panel-list-wrap').find('.list-item').removeClass('active');\n              this.$el.addClass('active');\n              xabber.chats_view.openChat(chat.item_view, {right_contact_save: true, clear_search: false});\n              xabber.body.setScreen(xabber.body.screen.get('name'), {right: 'message_context', model: chat });\n              if (xabber.right_contact_panel_saveable && xabber.body.screen.get('right_contact') && xabber.body.screen.get('right') === 'message_context') {\n                  if (xabber.right_contact_panel_saveable)\n                      chat.contact.showDetailsRight('all-chats', {right_saved: true});\n                  else\n                      chat.contact.showDetailsRight('all-chats', {right_saved: false});\n              }\n              this.model.get('unique_id') && chat.getMessageContext(this.model.get('unique_id'), {message: true});\n          }\n      });\n\n\n      xabber.ForwardPanelView = xabber.SearchView.extend({\n        className: 'modal dialog-modal forward-panel-modal',\n        template: templates.forward_panel,\n        ps_selector: '.chat-list-wrap',\n        ps_settings: {theme: 'item-list'},\n\n        open: function (messages, account) {\n            this.messages = messages;\n            this.account = account;\n            this.$('.chat-list-wrap').html(\"\");\n            this.saved_chat = false;\n            xabber.chats_view.$('.chat-list-wrap .chat-item').each((idx, item) => {\n                let id = $(item).data('id'),\n                    chat = this.account.chats.get(id);\n                if (chat) {\n                    if (id == `${this.account.get('jid')}:saved`) {\n                        let $cloned_item = $(item).clone().removeClass('hidden');\n                        $cloned_item.find('.last-msg').text(xabber.getString(\"saved_messages__hint_forward_here\"));\n                        this.saved_chat = true;\n                        this.$('.chat-list-wrap').prepend($cloned_item);\n                    } else\n                        this.$('.chat-list-wrap').append($(item).clone().removeClass('hidden'));\n                }\n            });\n            if (!this.saved_chat) {\n                let saved_chat = this.account.chats.getSavedChat(),\n                    $cloned_item = saved_chat.item_view.$el.clone();\n                $cloned_item.find('.last-msg').text(xabber.getString(\"saved_messages__hint_forward_here\"));\n                this.$('.chat-list-wrap').prepend($cloned_item);\n            }\n            this.$('.chat-list-wrap').prepend($('<div/>', { class: 'forward-panel-list-title recent-chats-title hidden'}).text(xabber.getString(\"category_recent_chats\")));\n            this.$('.chat-list-wrap').append($('<div/>', { class: 'forward-panel-list-title contacts-title hidden'}).text(xabber.getString(\"category_title_contacts\")));\n            this.$('.chat-item').removeClass('active');\n            this.clearSearch();\n            this.data.set('visible', true);\n            this.$el.openModal({\n                ready: () => {\n                    this.updateScrollBar();\n                    this.$('.search-input').focus();\n                },\n                complete: () => {\n                    this.$el.detach();\n                    this.data.set('visible', false);\n                }\n            });\n        },\n\n        close: function () {\n            let deferred = new $.Deferred();\n            this.$el.closeModal({ complete: () => {\n                this.$el.detach();\n                this.data.set('visible', false);\n                deferred.resolve();\n            }});\n            return deferred.promise();\n        },\n\n        onClickItem: function (ev) {\n            let $target = $(ev.target).closest('.list-item');\n            this.onEnterPressed($target);\n        },\n\n        search: function (query) {\n            let jid, name, is_match = false, has_matches_chats = false, has_matches_contacts = false;\n            query = query.toLowerCase();\n            this.$('.roster-contact.list-item').remove();\n            query && this.account.roster.forEach((contact) => {\n                let jid = contact.get('jid'),\n                    chat_id = contact.hash_id,\n                    name = contact.get('name').toLowerCase(),\n                    is_match = (name.indexOf(query) < 0 && jid.indexOf(query) < 0) ? true : false;\n                if (!is_match) {\n                    if (!this.$('.chat-list-wrap .chat-item[data-id=\"' + chat_id + '\"]').length) {\n                        let contact_list_item = xabber.contacts_view.$(`.account-roster-wrap[data-jid=\"${this.account.get('jid')}\"] .roster-contact[data-jid=\"${jid}\"]`).first().clone();\n                        contact_list_item.find('.muted-icon').hide();\n                        this.$('.chat-list-wrap').append(contact_list_item);\n                    }\n                    else\n                        is_match = true;\n                }\n                !is_match && (has_matches_contacts = true);\n            });\n            this.$('.contacts-title').switchClass('hidden', !has_matches_contacts);\n            this.$('.chat-item').each((idx, item) => {\n                let chat = this.account.chats.get($(item).data('id'));\n                if (!chat) {\n                    $(item).addClass('hidden');\n                    return;\n                }\n                jid = chat.get('jid');\n                name = (chat.contact ? chat.contact.get('name') : chat.get('name'));\n                if (name)\n                    name = name.toLowerCase();\n                is_match = (!name || name && (name.indexOf(query) < 0 && jid.indexOf(query) < 0)) ? false : true;\n                $(item).hideIf(!is_match);\n                is_match && (has_matches_chats = true);\n            });\n            this.$('.recent-chats-title').switchClass('hidden', !has_matches_chats);\n            this.$('.modal-content .error').showIf(!has_matches_contacts && !has_matches_chats);\n            this.scrollToTop();\n        },\n\n        onEmptyQuery: function () {\n            this.$('.roster-contact.list-item').remove();\n            this.$('.contacts-title').addClass('hidden');\n            this.$('.recent-chats-title').addClass('hidden');\n        },\n\n        onEnterPressed: function (selection) {\n            let chat_item;\n            if (selection.hasClass('roster-contact'))\n                chat_item = this.account.chats.getChat(this.account.contacts.get(selection.data('jid'))).item_view;\n            if (selection.hasClass('chat-item'))\n                chat_item = xabber.chats_view.child(selection.data('id'));\n            chat_item && this.forwardTo(chat_item);\n        },\n\n        forwardTo: function (chat_item) {\n            if (chat_item.model.get('saved')) {\n                this.messages.forEach((message) => {\n                    chat_item.content.onSubmit(\"\", [message]);\n                });\n            }\n            else {\n                if (!chat_item.content)\n                    chat_item.content = new xabber.ChatContentView({chat_item: chat_item});\n                chat_item.content.bottom.setForwardedMessages(this.messages);\n            }\n            this.messages = [];\n            this.close().done(() => {\n                chat_item.open({clear_search: true});\n            });\n        }\n    });\n\n    xabber.InvitationPanelView = xabber.SearchView.extend({\n        className: 'modal dialog-modal add-user-group-chat',\n        template: templates.group_chats.invitation_panel_view,\n        ps_selector: '.contacts-list-wrap',\n        ps_settings: {theme: 'item-list'},\n\n        _initialize: function () {\n            this.registerClickEvents();\n        },\n\n        open: function (account, contact) {\n            this.selected_contacts = [];\n            this.account = account;\n            this.contact = contact;\n            this.clearPanel();\n            xabber.contacts_view.$(`.account-roster-wrap[data-jid=\"${this.account.get('jid')}\"] .roster-group`).each((idx, item) => {\n                let group_node = $(item).clone();\n                $(group_node).find('.list-item').each((i, list_item) => {\n                    let contact_node = this.account.contacts.get($(list_item).attr('data-jid'));\n                    if (contact_node.get('group_chat'))\n                            list_item.remove();\n                });\n                if (group_node.children('.list-item').length) {\n                    this.$('.contacts-list-wrap').append(group_node);\n                    group_node.find('.arrow').click((ev) => {\n                        this.toggleContacts(ev);\n                    });\n                    group_node.find('.group-head').click((ev) => {\n                        this.selectAllGroup(ev);\n                    });\n                }\n            });\n            this.data.set('visible', true);\n            this.$el.openModal({\n                ready: () => {\n                    this.updateScrollBar();\n                    this.$('.search-input').focus();\n                },\n                complete: () => {\n                    this.$el.detach();\n                    this.data.set('visible', false);\n                    this.selected_contacts = [];\n                }\n            });\n        },\n\n        addSelectedUsers: function () {\n            if (!this.selected_contacts.length) {\n                this.$('.modal-footer button').blur();\n                return;\n            }\n            let selected_users_count = this.selected_contacts.length,\n                _dfd_invitations = new $.Deferred(), invitations_count = 0;\n            _dfd_invitations.done((count) => {\n                let toast_text;\n                if (count == selected_users_count)\n                    toast_text = xabber.getQuantityString(\"groupchat__toast__invitations_sent\", selected_users_count);\n                else\n                    toast_text = xabber.getQuantityString(\"groupchat__toast_failed_to_sent_invitations\", selected_users_count);\n                utils.callback_popup_message(toast_text, 2000);\n                this.contact.trigger('invitations_send')\n            });\n            $(this.selected_contacts).each((idx, item) => {\n                this.sendInvite(item, () => {\n                    invitations_count++;\n                    if (idx == selected_users_count - 1)\n                        _dfd_invitations.resolve(invitations_count);\n                }, () => {\n                    if (idx == selected_users_count - 1)\n                        _dfd_invitations.resolve(invitations_count);\n                });\n            });\n            this.close();\n        },\n\n        clearPanel: function () {\n            this.$('.modal-footer .errors').text('');\n            this.$('.counter').text('');\n            this.$('.contacts-list-wrap').empty();\n            this.clearSearch();\n        },\n\n        registerClickEvents: function () {\n            this.$('.btn-cancel').click(() => {\n                this.close();\n            });\n            this.$('.btn-add').click(() => {\n                this.addSelectedUsers();\n            });\n        },\n\n        addUser: function (ev) {\n            let $target = $(ev.target).closest('.list-item'),\n                contact_jid = $target.attr('data-jid');\n            $target.toggleClass('click-selected');\n            let itemIdx = this.selected_contacts.indexOf(contact_jid);\n            if (itemIdx > -1)\n                this.selected_contacts.splice(itemIdx, 1);\n            else\n                this.selected_contacts.push(contact_jid);\n            this.updateCounter();\n        },\n\n        sendInvite: function (contact_jid, callback, errback) {\n            let iq = $iq({type: 'set', to: (this.contact.get('full_jid') || this.contact.get('jid'))})\n                    .c('invite', {xmlns: `${Strophe.NS.GROUP_CHAT}#invite`})\n                    .c('jid').t(contact_jid).up()\n                    .c('send').t('false').up()\n                    .c('reason').t((this.contact.get('group_info').privacy === 'incognito') ? xabber.getString(\"groupchat__incognito_group__text_invitation\") : xabber.getString(\"groupchat__public_group__text_invitation\", [contact_jid]));\n            this.account.sendIQFast(iq, () => {\n                this.sendInviteMessage(contact_jid);\n                this.close();\n                callback && callback();\n            }, (iq) => {\n                this.onInviteError(iq);\n                errback && errback();\n            });\n        },\n\n        onInviteError: function (iq) {\n            let err_text;\n            if ($(iq).find('not-allowed').length > 0) {\n                err_text = $(iq).find('text').text() || xabber.getString(\"groupchat_you_have_no_permissions_to_do_it\");\n            }\n            if ($(iq).find('conflict').length > 0) {\n                err_text = $(iq).find('text').text() || xabber.getString(\"groupchat__invitation__error_already_invited\", [$(iq).find('invite').find('jid').text()]);\n            }\n            this.$('.modal-footer .errors').removeClass('hidden').text(err_text);\n        },\n\n        sendInviteMessage: function(jid_to) {\n            let body = xabber.getString(\"groupchat_legacy_invitation_body\", [this.contact.get('jid')]),\n                stanza = $msg({\n                    to: jid_to,\n                    type: 'chat',\n                    id: uuid()\n                }).c('invite', {xmlns: `${Strophe.NS.GROUP_CHAT}#invite`, jid: this.contact.get('jid')})\n                    .c('reason').t((this.contact.get('group_info').privacy === 'incognito') ? xabber.getString(\"groupchat__incognito_group__text_invitation\") : xabber.getString(\"groupchat__public_group__text_invitation\", [jid_to])).up().up()\n                    .c('x', {xmlns: Strophe.NS.GROUP_CHAT})\n                    .c('privacy').t(this.contact.get('group_info').privacy).up().up()\n                    .c('body').t(body).up();\n            this.account.sendMsg(stanza);\n        },\n\n        search: function (query) {\n            query = query.toLowerCase();\n            query && this.$('.list-item').each((idx, item) => {\n                let jid = $(item).attr('data-jid'),\n                    name = this.account.contacts.get(jid).get('name').toLowerCase(),\n                    hide_clone = (this.$(`.list-item[data-jid=\"${jid}\"]`).length > 1) && (!this.$(`.list-item[data-jid=\"${jid}\"]`).first().is($(item)));\n                $(item).hideIf((name.indexOf(query) < 0 && jid.indexOf(query) < 0) || hide_clone);\n            });\n            this.$('.group-head').addClass('hidden');\n            this.$('.modal-content .error').switchClass('hidden', !(this.$('.list-item').length === this.$('.list-item.hidden').length));\n            this.scrollToTop();\n        },\n\n        onEmptyQuery: function () {\n            this.$('.list-item').removeClass('hidden');\n            this.$('.group-head').removeClass('hidden');\n        },\n\n        onClickItem: function (ev) {\n            this.addUser(ev);\n        },\n\n        onEnterPressed: function (selection) {\n            let contact_jid = selection.attr('data-jid'),\n                itemIdx = this.selected_contacts.indexOf(contact_jid);\n            if (itemIdx > -1)\n                this.selected_contacts.splice(itemIdx, 1);\n            this.selected_contacts.push(contact_jid);\n            this.updateCounter();\n            this.addSelectedUsers();\n        },\n\n        close: function () {\n            this.$el.closeModal({ complete: this.hide.bind(this) });\n        },\n\n        toggleContacts: function (ev) {\n            let is_visible = $(ev.target).hasClass('mdi-chevron-down');\n            if (is_visible) {\n                let group_roster = $(ev.target).closest('.roster-group');\n                group_roster.find('.list-item').each((idx, item) => {\n                    $(item).addClass('hidden');\n                });\n            }\n            else\n            {\n                let group_roster = $(ev.target).closest('.roster-group');\n                group_roster.find('.list-item').each((idx, item) => {\n                    $(item).removeClass('hidden');\n                });\n            }\n            $(ev.target).switchClass('mdi-chevron-right', is_visible);\n            $(ev.target).switchClass('mdi-chevron-down', !is_visible);\n            this.updateScrollBar();\n        },\n\n        selectAllGroup: function (ev) {\n            if ($(ev.target).hasClass('arrow'))\n                return;\n           let group_roster = $(ev.target).closest('.roster-group');\n           if (group_roster.hasClass('click-selected')) {\n               group_roster.removeClass('click-selected');\n               group_roster.find('.list-item').each((idx, item) => {\n                   let contact_jid = $(item).attr('data-jid'),\n                       itemIdx = this.selected_contacts.indexOf(contact_jid);\n                   if (itemIdx > -1) {\n                       this.selected_contacts.splice(itemIdx, 1);\n                       $(item).removeClass('click-selected');\n                   }\n               });\n           }\n           else\n           {\n               group_roster.addClass('click-selected');\n               group_roster.find('.list-item').each((idx, item) => {\n                   let contact_jid = $(item).attr('data-jid'),\n                       itemIdx = this.selected_contacts.indexOf(contact_jid);\n                   if (itemIdx > -1)\n                       return;\n                   else\n                       this.selected_contacts.push(contact_jid);\n                   $(item).addClass('click-selected');\n               });\n           }\n            this.updateCounter();\n        },\n\n        updateCounter: function () {\n            let selected_counter = this.$('.list-item.click-selected').length;\n            (selected_counter) ? this.$('.counter').removeClass('hidden').text(selected_counter) : this.$('.counter').text('');\n        }\n\n    });\n\n      xabber.SavedChatHeadView = xabber.BasicView.extend({\n          className: 'chat-head-wrap saved-chat',\n          template: templates.saved_chat_head,\n          events: {\n              \"click .contact-name\": \"showSettings\",\n              \"click .circle-avatar\": \"showSettings\",\n              \"click .btn-chat-pin\": \"pinSavedChat\",\n              \"click .btn-delete-chat\": \"deleteChat\",\n              \"click .btn-set-status\": \"setStatus\",\n              \"click .btn-play-pause-plyr\": \"playPausePlyr\",\n              \"click .btn-next-plyr\": \"nextPlyr\",\n              \"click .btn-previous-plyr\": \"previousPlyr\",\n              \"click .btn-stop-plyr\": \"stopPlyr\",\n              \"click .btn-popup-plyr\": \"popupPlyr\",\n              \"click .btn-jingle-message\": \"openJingleMessage\",\n              \"click .btn-search-messages\": \"renderSearchPanel\"\n          },\n\n          _initialize: function (options) {\n              this.content = options.content;\n              this.contact = this.content.contact;\n              this.model = this.content.model;\n              clearInterval(this._update_oneliner_interval);\n              this.updateOneLiner();\n              this._update_oneliner_interval = setInterval(() => {\n                  this.updateOneLiner();\n              }, 1000*60*2);\n              this.account = this.model.account;\n              this.$el.find('.circle-avatar').html(env.templates.svg['saved-messages']());\n              this.model.on(\"close_chat\", this.closeChat, this);\n              xabber.on('plyr_player_updated', this.updatePlyrControls, this);\n              xabber.on('update_layout', this.updatePlyrTitle, this);\n              xabber.on('plyr_player_time_updated', this.updatePlyrTime, this);\n              xabber.on(\"update_jingle_button\", this.updateJingleButton, this);\n          },\n\n          render: function () {\n              this.$('.tooltipped').tooltip({delay: 50});\n              this.$('.btn-more').dropdown({\n                  inDuration: 100,\n                  outDuration: 100,\n                  hover: false\n              });\n              this.$('.chat-head-menu').hide();\n              this.updatePlyrControls();\n              this.updatePlyrTime();\n              this.updateJingleButton();\n              return this;\n          },\n\n          updateOneLiner: function () {\n              let rand_idx = _.random(0, xabber.getOneLiners().length - 1),\n                  one_liner = xabber.getOneLiners()[rand_idx].replace(/\\\\n/, \"\");\n              if (!one_liner) {\n                  this.updateOneLiner();\n                  return;\n              }\n              this.$('.one-liner').text(one_liner);\n          },\n\n          closeChat: function () {\n              this.model.set({'opened': false, 'display': false, 'active': false});\n              xabber.chats_view.clearSearch();\n          },\n\n          showSettings: function () {\n              this.account.showSettings();\n          },\n\n          deleteChat: function () {\n              let rewrite_support = this.account.server_features.get(Strophe.NS.REWRITE);\n              utils.dialogs.ask(xabber.getString(\"dialog_delete_saved_messages__header\"), xabber.getString(\"dialog_delete_saved_messages__confirm\") +\n                  (rewrite_support ? \"\" : (\"\\n\" + xabber.getString(\"dialog_delete_saved_messages__confirm\", [this.account.domain]).fontcolor('#E53935'))), null, { ok_button_text: rewrite_support? xabber.getString(\"delete\") : xabber.getString(\"dialog_clear_chat_history__button_delete_locally\")}).done((result) => {\n                  if (result) {\n                      if (this.account.connection && this.account.connection.do_synchronization) {\n                          this.model.deleteFromSynchronization();\n                      }\n                      if (rewrite_support) {\n                          this.model.retractAllMessages(false);\n                      }\n                      else {\n                          let all_messages = this.model.messages.models;\n                          $(all_messages).each((idx, item) => {\n                              this.content.removeMessage(item);\n                          });\n                      }\n                      this.closeChat();\n                      this.model.set('timestamp', 0);\n                  }\n              });\n          },\n\n          pinSavedChat: function () {\n              let pinned = this.model.get('pinned'),\n                  is_pinned = pinned && pinned !== '0' ? true : false,\n                  pinned_value = is_pinned ? '0' : + new Date(),\n                  conversation_options = {\n                      jid: this.account.get('jid'),\n                      pinned: pinned_value,\n                      type: this.model.get('sync_type') ? this.model.get('sync_type') : this.model.getConversationType(this.model)\n                  },\n                  iq = $iq({type: 'set', to: this.account.get('jid')})\n                      .c('query', {xmlns: Strophe.NS.SYNCHRONIZATION})\n                      .c('conversation', conversation_options);\n              this.account.sendIQFast(iq);\n              this.model.set('pinned', pinned_value);\n          },\n\n          renderSearchPanel: function () {\n              let visible_view;\n              if (this.content.isVisible())\n                  visible_view = this.content;\n              this.model.messages_view && this.model.messages_view.isVisible() && (visible_view = this.model.messages_view);\n              visible_view && visible_view.$search_form.slideToggle(200, () => {\n                  if (visible_view.$search_form.css('display') !== 'none')\n                      visible_view.$search_form.find('input').focus();\n              });\n          },\n\n          playPausePlyr: function () {\n              if (!xabber.current_plyr_player)\n                  return;\n              if (xabber.current_plyr_player.$audio_elem){\n                  if (!xabber.current_plyr_player.$audio_elem.voice_message){\n                      let f_url = $(xabber.current_plyr_player.$audio_elem).find('.file-link-download').attr('href');\n                      $(xabber.current_plyr_player.$audio_elem).find('.mdi-play').removeClass('no-uploaded')\n                      xabber.current_plyr_player.$audio_elem.voice_message = this.content.renderVoiceMessage($(xabber.current_plyr_player.$audio_elem).find('.file-container')[0], f_url);\n                  } else {\n                      xabber.current_plyr_player.$audio_elem.voice_message.playPause()\n                  }\n              } else\n                  xabber.current_plyr_player.togglePlay();\n              xabber.trigger('plyr_player_updated');\n          },\n\n          stopPlyr: function () {\n              if (!xabber.current_plyr_player && xabber.plyr_player_popup)\n                  return;\n              xabber.plyr_players.forEach((item) => {\n                  if (item.$audio_elem){\n                      if (item.$audio_elem.voice_message)\n                          item.$audio_elem.voice_message.stopTime()\n                  }\n              });\n              (xabber.plyr_player_popup) && xabber.plyr_player_popup.closePopup();\n          },\n\n          popupPlyr: function () {\n              if (xabber.plyr_player_popup)\n                  xabber.plyr_player_popup.minimizePopup();\n          },\n\n          nextPlyr: function () {\n              let player_index = xabber.current_plyr_player.chat_item.model.plyr_players.indexOf(xabber.current_plyr_player);\n              if (player_index === -1 && xabber.current_plyr_player.player_item)\n                  player_index = xabber.current_plyr_player.chat_item.model.plyr_players.indexOf(xabber.current_plyr_player.player_item);\n              if (!xabber.current_plyr_player || !(player_index >= 0 && player_index < xabber.current_plyr_player.chat_item.model.plyr_players.length - 1))\n                  return;\n              if (xabber.current_plyr_player.chat_item.model.plyr_players[player_index + 1].$audio_elem){\n                  let next_item = xabber.current_plyr_player.chat_item.model.plyr_players[player_index + 1];\n                  if (!next_item.$audio_elem.voice_message){\n                      let f_url = $(next_item.$audio_elem).find('.file-link-download').attr('href');\n                      $(next_item.$audio_elem).find('.mdi-play').removeClass('no-uploaded');\n                      next_item.$audio_elem.voice_message = xabber.current_plyr_player.chat_item.content.renderVoiceMessage($(next_item.$audio_elem).find('.file-container')[0], f_url, xabber.current_plyr_player.chat_item.model);\n                  } else {\n                      next_item.$audio_elem.voice_message.play()\n                  }\n              } else{\n                  if (!xabber.plyr_player_popup){\n                      xabber.plyr_player_popup = new xabber.PlyrPlayerPopupView({});\n                      xabber.plyr_player_popup.show({player: xabber.current_plyr_player.chat_item.model.plyr_players[player_index + 1]});\n                  } else\n                      xabber.plyr_player_popup.showNewVideo({player: xabber.current_plyr_player.chat_item.model.plyr_players[player_index + 1]});\n              }\n          },\n\n          previousPlyr: function () {\n              let player_index = xabber.current_plyr_player.chat_item.model.plyr_players.indexOf(xabber.current_plyr_player);\n              if (player_index === -1 && xabber.current_plyr_player.player_item)\n                  player_index = xabber.current_plyr_player.chat_item.model.plyr_players.indexOf(xabber.current_plyr_player.player_item);\n              if (!xabber.current_plyr_player || !(player_index <= xabber.current_plyr_player.chat_item.model.plyr_players.length && player_index > 0))\n                  return;\n              if (xabber.current_plyr_player.chat_item.model.plyr_players[player_index - 1].$audio_elem){\n                  let prev_item = xabber.current_plyr_player.chat_item.model.plyr_players[player_index - 1];\n                  if (!prev_item.$audio_elem.voice_message){\n                      let f_url = $(prev_item.$audio_elem).find('.file-link-download').attr('href');\n                      $(prev_item.$audio_elem).find('.mdi-play').removeClass('no-uploaded');\n                      prev_item.$audio_elem.voice_message = xabber.current_plyr_player.chat_item.content.renderVoiceMessage($(prev_item.$audio_elem).find('.file-container')[0], f_url, xabber.current_plyr_player.chat_item.model);\n                  } else {\n                      prev_item.$audio_elem.voice_message.play()\n                  }\n              } else{\n                  if (!xabber.plyr_player_popup){\n                      xabber.plyr_player_popup = new xabber.PlyrPlayerPopupView({});\n                      xabber.plyr_player_popup.show({player: xabber.current_plyr_player.chat_item.model.plyr_players[player_index - 1]});\n                  } else\n                      xabber.plyr_player_popup.showNewVideo({player: xabber.current_plyr_player.chat_item.model.plyr_players[player_index - 1]});\n              }\n          },\n\n          updatePlyrControls: function () {\n              this.$('.chat-tool-player').showIf(xabber.current_plyr_player);\n              this.$el.switchClass('chat-head-player-enabled', xabber.current_plyr_player);\n              if (xabber.current_plyr_player && xabber.current_plyr_player.$audio_elem) {\n                  if (xabber.current_plyr_player.$audio_elem.voice_message){\n                      let voice_message = xabber.current_plyr_player.$audio_elem.voice_message;\n                      this.$('.chat-head-player-type').text(xabber.getString(\"chat_message_voice\"))\n                      this.$('.btn-play-pause-plyr .mdi-play').hideIf(voice_message.isPlaying());\n                      this.$('.btn-play-pause-plyr .mdi-pause').hideIf(!voice_message.isPlaying());\n                      this.$('.btn-play-pause-plyr').switchClass('active-plyr', voice_message.isPlaying());\n                      // this.$('.btn-play-pause-plyr').switchClass('ground-color-500', voice_message.isPlaying());\n                      this.$('.btn-previous-plyr').switchClass('before-active-plyr', voice_message.isPlaying());\n                      let player_index = xabber.current_plyr_player.chat_item.model.plyr_players.indexOf(xabber.current_plyr_player);\n                      this.$('.btn-next-plyr').switchClass('disabled', !(player_index >= 0 && player_index < xabber.current_plyr_player.chat_item.model.plyr_players.length - 1));\n                      this.$('.btn-previous-plyr').switchClass('disabled', !(player_index <= xabber.current_plyr_player.chat_item.model.plyr_players.length && player_index > 0));\n                      this.$('.mdi-player-type-icon').addClass('hidden');\n                      this.$('.player-poster').addClass('hidden');\n                      this.$('.voice-message-player-avatar').removeClass('hidden');\n                      this.$('.voice-message-player-avatar').setAvatar(xabber.current_plyr_player.contact_avatar, 32);\n                      this.updatePlyrTitle();\n                      let duration = Math.round(voice_message.getDuration());\n                      this.$('.chat-head-player-total-time').text(utils.pretty_duration(duration));\n                      let timerId = setInterval(function() {\n                          let cur_time = Math.round(voice_message.getCurrentTime());\n                          if (voice_message.isPlaying())\n                              this.$('.chat-head-player-current-time').text(utils.pretty_duration(cur_time));\n                          else\n                              clearInterval(timerId);\n                      }, 100);\n                      (xabber.plyr_player_popup) && xabber.plyr_player_popup.$el.addClass('hidden2');\n                      (xabber.plyr_player_popup) && xabber.plyr_player_popup.$el.closest('#modals').siblings('#' + xabber.plyr_player_popup.$el.data('overlayId')).addClass('hidden2');\n                  }\n              }\n              else if (xabber.current_plyr_player) {\n                  this.$('.chat-head-player-current-time').text(utils.pretty_duration(isNaN(xabber.current_plyr_player.currentTime) ? 0 : parseInt(xabber.current_plyr_player.currentTime)));\n                  this.$('.chat-head-player-total-time').text(utils.pretty_duration(parseInt(xabber.current_plyr_player.duration)));\n                  this.updatePlyrTitle();\n                  let poster = xabber.current_plyr_player.poster;\n                  if (poster){\n                      this.$('.mdi-player-type-icon').addClass('hidden');\n                      this.$('.player-poster').removeClass('hidden');\n                      this.$('.player-poster').attr(\"src\", poster);\n                  } else {\n                      this.$('.mdi-player-type-icon').removeClass('hidden');\n                      this.$('.player-poster').addClass('hidden');\n                  }\n                  this.$('.voice-message-player-avatar').addClass('hidden');\n                  if (xabber.current_plyr_player.provider != 'html5')\n                      this.$('.chat-head-player-type').text(xabber.current_plyr_player.provider)\n                  else\n                      this.$('.chat-head-player-type').text(xabber.getString(\"chat_message_video\"))\n                  this.$('.btn-play-pause-plyr .mdi-play').hideIf(xabber.current_plyr_player.playing);\n                  this.$('.btn-play-pause-plyr .mdi-pause').hideIf(!xabber.current_plyr_player.playing);\n                  this.$('.btn-play-pause-plyr').switchClass('active-plyr', xabber.current_plyr_player.playing);\n                  // this.$('.btn-play-pause-plyr').switchClass('ground-color-500', xabber.current_plyr_player.playing);\n                  this.$('.btn-previous-plyr').switchClass('before-active-plyr', xabber.current_plyr_player.playing);\n                  let player_index = xabber.current_plyr_player.chat_item.model.plyr_players.indexOf(xabber.current_plyr_player.player_item);\n                  this.$('.btn-next-plyr').switchClass('disabled', !(player_index >= 0 && player_index < xabber.current_plyr_player.chat_item.model.plyr_players.length - 1));\n                  this.$('.btn-previous-plyr').switchClass('disabled', !(player_index <= xabber.current_plyr_player.chat_item.model.plyr_players.length && player_index > 0));\n                  (xabber.plyr_player_popup) && xabber.plyr_player_popup.$el.removeClass('hidden2');\n                  (xabber.plyr_player_popup) && xabber.plyr_player_popup.$el.closest('#modals').siblings('#' + xabber.plyr_player_popup.$el.data('overlayId')).removeClass('hidden2');\n              }\n          },\n\n          updatePlyrTime: function () {\n              if (xabber.current_plyr_player){\n                  if (xabber.current_plyr_player && xabber.current_plyr_player.$audio_elem) {\n                  }\n                  else if (!isNaN(xabber.current_plyr_player.currentTime))\n                      this.$('.chat-head-player-current-time').text(utils.pretty_duration(isNaN(xabber.current_plyr_player.currentTime) ? 0 : parseInt(xabber.current_plyr_player.currentTime)));\n              }\n          },\n\n          updatePlyrTitle: function () {\n              if (!xabber.current_plyr_player)\n                  return\n              let $title_elem = this.$('.chat-head-player-title .chat-head-player-title-text'),\n                  title;\n              if (xabber.current_plyr_player && xabber.current_plyr_player.$audio_elem)\n                  title = xabber.current_plyr_player.author;\n              else if (xabber.current_plyr_player)\n                  title = xabber.current_plyr_player.config.title ?\n                      xabber.current_plyr_player.config.title :\n                      xabber.current_plyr_player.provider === 'html5' ?\n                          xabber.current_plyr_player.source.substring(xabber.current_plyr_player.source.lastIndexOf('/')+1)\n                          : xabber.getString(\"chat_message_video\");\n              $title_elem.text(title);\n              if (this.$('.chat-head-player-title')[0] && utils.isOverflownWidth(this.$('.chat-head-player-title')[0])){\n                  $title_elem.addClass('active-animation-player-title');\n                  $title_elem.text(title + ' ⚫︎︎ ⚫︎︎ ⚫︎︎ ' + title);\n              } else\n                  $title_elem.removeClass('active-animation-player-title');\n\n          },\n\n          updateJingleButton: function () {\n              this.$('.btn-jingle-message').switchClass('active-call', xabber.current_voip_call);\n              if (xabber.current_voip_call){\n                  this.$('.btn-jingle-message').removeClass('hidden');\n                  let voip_status = xabber.current_voip_call.get('status');\n                  if (voip_status)\n                      this.$('.btn-jingle-message').attr('data-state', voip_status);\n                  else\n                      this.$('.btn-jingle-message').attr('data-state', '');\n                  if (voip_status === 'disconnected')\n                      this.$('.btn-jingle-message').removeClass('active-call');\n              } else\n                  this.$('.btn-jingle-message').addClass('hidden');\n          },\n\n          openJingleMessage: function () {\n              if (xabber.current_voip_call) {\n                  xabber.current_voip_call.modal_view.collapse();\n                  return;\n              }\n          },\n      });\n\n      xabber.ChatHeadView = xabber.BasicView.extend({\n        className: 'chat-head-wrap',\n        template: templates.chat_head,\n        avatar_size: constants.AVATAR_SIZES.CHAT_HEAD,\n\n        events: {\n            \"click .chat-head-wrap\": \"showContactDetailsRight\",\n            \"click .chat-head-details\": \"showContactDetailsRight\",\n            \"click .contact-name\": \"showContactDetailsRight\",\n            \"click .circle-avatar\": \"showContactDetailsRight\",\n            \"click .contact-status-message.resource-hover\": \"showContactResources\",\n            \"click .contact-status-message.members-hover\": \"showMembersDetails\",\n            \"click .btn-contact-details\": \"showContactDetails\",\n            \"click .btn-clear-history\": \"clearHistory\",\n            \"click .btn-invite-users\": \"inviteUsers\",\n            \"click .btn-delete-chat\": \"deleteChat\",\n            \"click .btn-delete-contact\": \"deleteContact\",\n            \"click .btn-block-contact\": \"blockContact\",\n            \"click .btn-unblock-contact\": \"unblockContact\",\n            \"click .btn-export-history\": \"exportHistory\",\n            \"click .btn-show-fingerprints\": \"showFingerprints\",\n            \"click .btn-start-encryption\": \"startEncryptedChat\",\n            \"click .btn-open-encrypted-chat\": \"openEncryptedChat\",\n            \"click .btn-open-regular-chat\": \"openRegularChat\",\n            \"click .btn-chat-pin\": \"pinChat\",\n            \"click .btn-archive-chat\": \"archiveChat\",\n            \"click .btn-call-attention\": \"callAttention\",\n            \"click .btn-search-messages\": \"renderSearchPanel\",\n            \"click .btn-jingle-message\": \"sendJingleMessage\",\n            \"click .btn-mute-dropdown\": \"muteChat\",\n            \"click .btn-notifications.muted\": \"unmuteChat\",\n            \"click .btn-set-status\": \"setStatus\",\n            \"click .btn-play-pause-plyr\": \"playPausePlyr\",\n            \"click .btn-next-plyr\": \"nextPlyr\",\n            \"click .btn-previous-plyr\": \"previousPlyr\",\n            \"click .btn-stop-plyr\": \"stopPlyr\",\n            \"click .btn-popup-plyr\": \"popupPlyr\",\n        },\n\n        _initialize: function (options) {\n            this.content = options.content;\n            this.contact = this.content.contact;\n            this.model = this.content.model;\n            this.account = this.model.account;\n            this.resources_view = new xabber.ContactResourcesRightView({model: this.contact.resources});\n            this.updateName();\n            this.updateStatus();\n            this.updateEncrypted();\n            this.updateAvatar();\n            this.updateNotifications();\n            this.updateArchived();\n            this.updatePinned();\n            this.model.on(\"change:encrypted\", this.updateEncrypted, this);\n            this.model.on(\"close_chat\", this.closeChat, this);\n            this.model.on(\"pinned\", this.pinChat, this);\n            this.model.on(\"change:muted\", this.updateNotifications, this);\n            this.model.on(\"change:archived\", this.updateArchived, this);\n            this.model.on(\"change:pinned\", this.updatePinned, this);\n            this.contact.on(\"change\", this.onContactChanged, this);\n            this.contact.on(\"archive_chat\", this.archiveChat, this);\n            this.contact.on(\"change:name\", this.updateName, this);\n            this.contact.on(\"change:status\", this.updateStatus, this);\n            this.contact.on(\"change:status_updated\", this.updateStatus, this);\n            this.contact.on(\"change:image\", this.updateAvatar, this);\n            this.contact.on(\"change:blocked\", this.onChangedBlocked, this);\n            this.contact.on(\"change:group_chat\", this.updateGroupChatHead, this);\n            this.contact.on(\"change:subscription\", this.updateMenu, this);\n            this.contact.on(\"change:in_roster\", this.updateMenu, this);\n            this.contact.on(\"update_trusted\", this.updateEncryptedColor, this);\n            xabber.on('change:audio', this.updateGroupChatHead, this);\n            xabber.on('plyr_player_updated', this.updatePlyrControls, this);\n            xabber.on('update_layout', this.updatePlyrTitle, this);\n            xabber.on('plyr_player_time_updated', this.updatePlyrTime, this);\n            xabber.on(\"update_jingle_button\", this.updateJingleButton, this);\n        },\n\n        render: function (options) {\n            this.$('.tooltipped').tooltip('remove');\n            this.$('.tooltipped').tooltip({delay: 50});\n            this.$('.btn-more').dropdown({\n                inDuration: 100,\n                outDuration: 100,\n                hover: false\n            });\n            this.$('.btn-notifications').dropdown({\n                inDuration: 100,\n                outDuration: 100,\n                hover: true, // Activate on hover\n                belowOrigin: true, // Displays dropdown below the button\n            });\n            this.$('.chat-head-menu').hide();\n            this.updateStatusMsg();\n            this.updateGroupChatHead();\n            if (this.contact.get('group_chat'))\n                this.$('.contact-status-message').addClass('members-hover')\n            else\n                this.$('.contact-status-message').addClass('resource-hover')\n            this.updatePlyrControls();\n            this.updatePlyrTime();\n            this.updateJingleButton();\n            return this;\n        },\n\n        updateEncrypted: function () {\n            this.$el.switchClass('encrypted', this.model.get('encrypted'));\n        },\n\n        updateEncryptedColor: function (encrypted) {\n            this.$el.attr('data-trust', encrypted);\n        },\n\n        updateName: function () {\n            this.$('.contact-name').text(this.contact.get('name'));\n        },\n\n        updateStatus: function () {\n            let status = this.contact.get('status'),\n                status_message = this.contact.getStatusMessage();\n            this.$('.contact-status').attr('data-status', status);\n            this.$('.chat-icon').attr('data-status', status);\n            this.model.get('blocked') ? this.$('.contact-status-message').text('Contact blocked') : this.$('.contact-status-message').text(status_message);\n        },\n\n        updateStatusMsg: function () {\n            this.$('.contact-status-message').text(this.contact.getStatusMessage());\n        },\n\n        updateAvatar: function () {\n            let image = this.contact.cached_image;\n            this.$('.circle-avatar').setAvatar(image, this.avatar_size);\n        },\n\n        onContactChanged: function () {\n            let changed = this.contact.changed;\n            if (_.has(changed, 'subscription_request_in') || _.has(changed, 'subscription_request_out') || _.has(changed, 'subscription') || _.has(changed, 'status_message'))\n                this.updateStatusMsg();\n            if (_.has(changed, 'private_chat') || _.has(changed, 'incognito_chat') || _.has(changed, 'invitation'))\n                this.updateIcon();\n        },\n\n        onChangedBlocked: function () {\n            this.updateMenu();\n            this.updateStatusMsg();\n            this.updateIcon();\n        },\n\n        updateMenu: function () {\n            let is_group_chat = this.contact.get('group_chat');\n            this.$('.btn-invite-users').showIf(is_group_chat && !this.contact.get('private_chat') && this.contact.get('subscription') == 'both');\n            this.$('.btn-call-attention').hideIf(is_group_chat || this.model.get('encrypted'));\n            this.$('.btn-clear-history').hideIf(is_group_chat);\n            this.$('.btn-start-encryption').showIf(!is_group_chat && this.account.omemo && !this.model.get('encrypted') && !this.account.chats.get(`${this.contact.hash_id}:encrypted`));\n            this.$('.btn-open-encrypted-chat').showIf(!is_group_chat && this.account.omemo && !this.model.get('encrypted') && this.account.chats.get(`${this.contact.hash_id}:encrypted`));\n            this.$('.btn-open-regular-chat').showIf(this.model.get('encrypted'));\n            this.$('.btn-show-fingerprints').showIf(!is_group_chat && this.account.omemo && this.model.get('encrypted'));\n            this.$('.btn-retract-own-messages').showIf(is_group_chat);\n            this.$('.btn-block-contact').hideIf(this.contact.get('blocked'));\n            this.$('.btn-unblock-contact').showIf(this.contact.get('blocked'));\n            this.$('.btn-delete-contact').showIf(this.contact.get('in_roster') && !is_group_chat);\n            this.$('.btn-notifications').hideIf(this.contact.get('blocked'));\n            this.$('.btn-jingle-message').hideIf((this.contact.get('blocked') || is_group_chat) && xabber.current_voip_call);\n        },\n\n        renderSearchPanel: function () {\n            this.contact.showDetailsRight('all-chats', {type: 'search'});\n        },\n\n        showContactDetails: function () {\n            this.contact.showDetails('all-chats');\n        },\n\n        showContactDetailsRight: function () {\n            this.contact.showDetailsRight('all-chats', {encrypted: this.model.get('encrypted')});\n        },\n\n        showContactResources: function () {\n            this.resources_view.open();\n        },\n\n        showMembersDetails: function () {\n            this.contact.showDetailsRight('all-chats', {type: 'members'});\n        },\n\n        updatePinned: function () {\n            let pinned = this.model.get('pinned'),\n                is_pinned = pinned && pinned !== '0' ? true : false;\n            if (is_pinned)\n                this.$('.btn-chat-pin .one-line').text(xabber.getString(\"chat_action_unpin\"))\n            else\n                this.$('.btn-chat-pin .one-line').text(xabber.getString(\"chat_action_pin\"))\n        },\n\n        updateNotifications: function () {\n            if (this.model.isMuted()) {\n                this.$('.btn-notifications .one-line').text(xabber.getString(\"chat_action_unmute\"));\n                this.$('.btn-notifications').addClass('muted');\n            }\n            else {\n                this.$('.btn-notifications .one-line').text(xabber.getString(\"chat_action_mute\"));\n                this.$('.btn-notifications').removeClass('muted');\n            }\n            this.$('.btn-mute-dropdown').hideIf(this.model.isMuted());\n            this.$('.btn-unmute-dropdown').hideIf(!this.model.isMuted());\n        },\n\n          muteChat: function (ev) {\n              if (this.contact.get('blocked'))\n                  return;\n              let mute_type = $(ev.target).closest('.btn-mute-dropdown').data('mute'),\n                  muted_seconds;\n              if (mute_type === 'minutes15')\n                  muted_seconds = 900\n              if (mute_type === 'hours1')\n                  muted_seconds = 3600\n              if (mute_type === 'hours2')\n                  muted_seconds = 7200\n              if (mute_type === 'day')\n                  muted_seconds = 86400\n              if (mute_type === 'forever')\n                  muted_seconds = 0\n              this.model.muteChat(muted_seconds);\n          },\n\n          unmuteChat: function (ev) {\n              if (this.contact.get('blocked'))\n                  return;\n              this.model.muteChat('');\n          },\n\n        callAttention: function (ev) {\n            let msg = $msg({type: 'headline', to: this.contact.get('jid')})\n                .c('attention', {xmlns: Strophe.NS.ATTENTION});\n            this.account.sendMsg(msg);\n            this.model.messages.createSystemMessage({\n                from_jid: this.account.get('jid'),\n                message: xabber.getString(\"action_attention_called\")\n            });\n        },\n\n\n        updateArchived: function () {\n            let archived = !this.model.get('archived'),\n                is_archived = archived ? true : false;\n            if (!is_archived)\n                this.$('.btn-archive-chat .one-line').text(xabber.getString(\"chat_action_unarchive\"))\n            else\n                this.$('.btn-archive-chat .one-line').text(xabber.getString(\"chat_action_archive\"))\n            this.$('.btn-archive-chat .mdi').switchClass('mdi-package-up', !is_archived);\n            this.$('.btn-archive-chat .mdi').switchClass('mdi-package-down', is_archived);\n            if (this.model.item_view && archived){\n                !this.model.messages.length && this.model.item_view.updateLastMessage();\n                this.account.chat_settings.updateArchiveChatsList(this.contact.get('jid'), archived);\n                if (this.model.get('active')) {\n                    xabber.chats_view.updateScreenAllChats();\n                }\n            }\n        },\n\n        archiveChat: function (ev, no_iq) {\n            let archived = !this.model.get('archived'),\n                is_archived = archived ? true : false;\n            if (!no_iq) {\n                let is_archived_status = is_archived ? 'archived' : 'active',\n                    conversation_options = {\n                        jid: this.contact.get('jid'),\n                        status: is_archived_status,\n                        type: this.model.get('sync_type') ? this.model.get('sync_type') : this.model.getConversationType(this.model)\n                    },\n                    iq = $iq({type: 'set', to: this.account.get('jid')})\n                        .c('query', {xmlns: Strophe.NS.SYNCHRONIZATION})\n                        .c('conversation', conversation_options);\n                this.account.sendIQFast(iq);\n                this.model.set('archived', archived);\n            }\n        },\n\n        pinChat: function () {\n            let pinned = this.model.get('pinned'),\n                is_pinned = pinned && pinned !== '0' ? true : false,\n                pinned_value = is_pinned ? '0' : + new Date(),\n                conversation_options = {\n                    jid: this.contact.get('jid'),\n                    pinned: pinned_value,\n                    type: this.model.get('sync_type') ? this.model.get('sync_type') : this.model.getConversationType(this.model)\n                },\n                iq = $iq({type: 'set', to: this.account.get('jid')})\n                    .c('query', {xmlns: Strophe.NS.SYNCHRONIZATION})\n                    .c('conversation', conversation_options);\n                this.account.sendIQFast(iq);\n                this.model.set('pinned', pinned_value);\n        },\n\n        sendJingleMessage: function () {\n            if (xabber.current_voip_call) {\n                xabber.current_voip_call.modal_view.collapse();\n                return;\n            }\n            !this.contact.get('group_chat') && this.content.initJingleMessage();\n        },\n\n        setStatus: function () {\n            let set_status_view = new xabber.SetGroupchatStatusView();\n            set_status_view.open(this.contact);\n        },\n\n        playPausePlyr: function () {\n            if (!xabber.current_plyr_player)\n                return;\n            if (xabber.current_plyr_player.$audio_elem){\n                if (!xabber.current_plyr_player.$audio_elem.voice_message){\n                    let f_url = $(xabber.current_plyr_player.$audio_elem).find('.file-link-download').attr('href');\n                    $(xabber.current_plyr_player.$audio_elem).find('.mdi-play').removeClass('no-uploaded')\n                    xabber.current_plyr_player.$audio_elem.voice_message = this.content.renderVoiceMessage($(xabber.current_plyr_player.$audio_elem).find('.file-container')[0], f_url);\n                } else {\n                    xabber.current_plyr_player.$audio_elem.voice_message.playPause()\n                }\n            } else\n                xabber.current_plyr_player.togglePlay();\n            xabber.trigger('plyr_player_updated');\n        },\n\n        stopPlyr: function () {\n            if (!xabber.current_plyr_player && xabber.plyr_player_popup)\n                return;\n            xabber.plyr_players.forEach((item) => {\n                if (item.$audio_elem){\n                    if (item.$audio_elem.voice_message)\n                        item.$audio_elem.voice_message.stopTime()\n                }\n            });\n            (xabber.plyr_player_popup) && xabber.plyr_player_popup.closePopup();\n        },\n\n        popupPlyr: function () {\n            if (xabber.plyr_player_popup)\n                xabber.plyr_player_popup.minimizePopup();\n        },\n\n        nextPlyr: function () {\n            let player_index = xabber.current_plyr_player.chat_item.model.plyr_players.indexOf(xabber.current_plyr_player);\n            if (player_index === -1 && xabber.current_plyr_player.player_item)\n                player_index = xabber.current_plyr_player.chat_item.model.plyr_players.indexOf(xabber.current_plyr_player.player_item);\n            if (!xabber.current_plyr_player || !(player_index >= 0 && player_index < xabber.current_plyr_player.chat_item.model.plyr_players.length - 1))\n                return;\n            if (xabber.current_plyr_player.chat_item.model.plyr_players[player_index + 1].$audio_elem){\n                let next_item = xabber.current_plyr_player.chat_item.model.plyr_players[player_index + 1];\n                if (!next_item.$audio_elem.voice_message){\n                    let f_url = $(next_item.$audio_elem).find('.file-link-download').attr('href');\n                    $(next_item.$audio_elem).find('.mdi-play').removeClass('no-uploaded');\n                    next_item.$audio_elem.voice_message = xabber.current_plyr_player.chat_item.content.renderVoiceMessage($(next_item.$audio_elem).find('.file-container')[0], f_url, xabber.current_plyr_player.chat_item.model);\n                } else {\n                    next_item.$audio_elem.voice_message.play()\n                }\n            } else{\n                if (!xabber.plyr_player_popup){\n                    xabber.plyr_player_popup = new xabber.PlyrPlayerPopupView({});\n                    xabber.plyr_player_popup.show({player: xabber.current_plyr_player.chat_item.model.plyr_players[player_index + 1]});\n                } else\n                    xabber.plyr_player_popup.showNewVideo({player: xabber.current_plyr_player.chat_item.model.plyr_players[player_index + 1]});\n            }\n        },\n\n        previousPlyr: function () {\n            let player_index = xabber.current_plyr_player.chat_item.model.plyr_players.indexOf(xabber.current_plyr_player);\n            if (player_index === -1 && xabber.current_plyr_player.player_item)\n                player_index = xabber.current_plyr_player.chat_item.model.plyr_players.indexOf(xabber.current_plyr_player.player_item);\n            if (!xabber.current_plyr_player || !(player_index <= xabber.current_plyr_player.chat_item.model.plyr_players.length && player_index > 0))\n                return;\n            if (xabber.current_plyr_player.chat_item.model.plyr_players[player_index - 1].$audio_elem){\n                let prev_item = xabber.current_plyr_player.chat_item.model.plyr_players[player_index - 1];\n                if (!prev_item.$audio_elem.voice_message){\n                    let f_url = $(prev_item.$audio_elem).find('.file-link-download').attr('href');\n                    $(prev_item.$audio_elem).find('.mdi-play').removeClass('no-uploaded');\n                    prev_item.$audio_elem.voice_message = xabber.current_plyr_player.chat_item.content.renderVoiceMessage($(prev_item.$audio_elem).find('.file-container')[0], f_url, xabber.current_plyr_player.chat_item.model);\n                } else {\n                    prev_item.$audio_elem.voice_message.play()\n                }\n            } else{\n                if (!xabber.plyr_player_popup){\n                    xabber.plyr_player_popup = new xabber.PlyrPlayerPopupView({});\n                    xabber.plyr_player_popup.show({player: xabber.current_plyr_player.chat_item.model.plyr_players[player_index - 1]});\n                } else\n                    xabber.plyr_player_popup.showNewVideo({player: xabber.current_plyr_player.chat_item.model.plyr_players[player_index - 1]});\n            }\n        },\n\n        updatePlyrControls: function () {\n            this.$('.chat-tool-player').showIf(xabber.current_plyr_player);\n            this.$el.switchClass('chat-head-player-enabled', xabber.current_plyr_player);\n            if (xabber.current_plyr_player && xabber.current_plyr_player.$audio_elem) {\n                if (xabber.current_plyr_player.$audio_elem.voice_message){\n                    let voice_message = xabber.current_plyr_player.$audio_elem.voice_message;\n                    this.$('.chat-head-player-type').text(xabber.getString(\"chat_message_voice\"))\n                    this.$('.btn-play-pause-plyr .mdi-play').hideIf(voice_message.isPlaying());\n                    this.$('.btn-play-pause-plyr .mdi-pause').hideIf(!voice_message.isPlaying());\n                    this.$('.btn-play-pause-plyr').switchClass('active-plyr', voice_message.isPlaying());\n                    // this.$('.btn-play-pause-plyr').switchClass('ground-color-500', voice_message.isPlaying());\n                    this.$('.btn-previous-plyr').switchClass('before-active-plyr', voice_message.isPlaying());\n                    let player_index = xabber.current_plyr_player.chat_item.model.plyr_players.indexOf(xabber.current_plyr_player);\n                    this.$('.btn-next-plyr').switchClass('disabled', !(player_index >= 0 && player_index < xabber.current_plyr_player.chat_item.model.plyr_players.length - 1));\n                    this.$('.btn-previous-plyr').switchClass('disabled', !(player_index <= xabber.current_plyr_player.chat_item.model.plyr_players.length && player_index > 0));\n                    this.$('.mdi-player-type-icon').addClass('hidden');\n                    this.$('.player-poster').addClass('hidden');\n                    this.$('.voice-message-player-avatar').removeClass('hidden');\n                    this.$('.voice-message-player-avatar').setAvatar(xabber.current_plyr_player.contact_avatar, 32);\n                    this.updatePlyrTitle();\n                    let duration = Math.round(voice_message.getDuration());\n                    this.$('.chat-head-player-total-time').text(utils.pretty_duration(duration));\n                    let timerId = setInterval(function() {\n                        let cur_time = Math.round(voice_message.getCurrentTime());\n                        if (voice_message.isPlaying())\n                            this.$('.chat-head-player-current-time').text(utils.pretty_duration(cur_time));\n                        else\n                            clearInterval(timerId);\n                    }, 100);\n                    (xabber.plyr_player_popup) && xabber.plyr_player_popup.$el.addClass('hidden2');\n                    (xabber.plyr_player_popup) && xabber.plyr_player_popup.$el.closest('#modals').siblings('#' + xabber.plyr_player_popup.$el.data('overlayId')).addClass('hidden2');\n                }\n            }\n            else if (xabber.current_plyr_player) {\n                this.$('.chat-head-player-current-time').text(utils.pretty_duration(isNaN(xabber.current_plyr_player.currentTime) ? 0 : parseInt(xabber.current_plyr_player.currentTime)));\n                this.$('.chat-head-player-total-time').text(utils.pretty_duration(parseInt(xabber.current_plyr_player.duration)));\n                this.updatePlyrTitle();\n                let poster = xabber.current_plyr_player.poster;\n                if (poster){\n                    this.$('.mdi-player-type-icon').addClass('hidden');\n                    this.$('.player-poster').removeClass('hidden');\n                    this.$('.player-poster').attr(\"src\", poster);\n                } else {\n                    this.$('.mdi-player-type-icon').removeClass('hidden');\n                    this.$('.player-poster').addClass('hidden');\n                }\n                this.$('.voice-message-player-avatar').addClass('hidden');\n                if (xabber.current_plyr_player.provider != 'html5')\n                    this.$('.chat-head-player-type').text(xabber.current_plyr_player.provider)\n                else\n                    this.$('.chat-head-player-type').text(xabber.getString(\"chat_message_video\"))\n                this.$('.btn-play-pause-plyr .mdi-play').hideIf(xabber.current_plyr_player.playing);\n                this.$('.btn-play-pause-plyr .mdi-pause').hideIf(!xabber.current_plyr_player.playing);\n                this.$('.btn-play-pause-plyr').switchClass('active-plyr', xabber.current_plyr_player.playing);\n                // this.$('.btn-play-pause-plyr').switchClass('ground-color-500', xabber.current_plyr_player.playing);\n                this.$('.btn-previous-plyr').switchClass('before-active-plyr', xabber.current_plyr_player.playing);\n                let player_index = xabber.current_plyr_player.chat_item.model.plyr_players.indexOf(xabber.current_plyr_player.player_item);\n                this.$('.btn-next-plyr').switchClass('disabled', !(player_index >= 0 && player_index < xabber.current_plyr_player.chat_item.model.plyr_players.length - 1));\n                this.$('.btn-previous-plyr').switchClass('disabled', !(player_index <= xabber.current_plyr_player.chat_item.model.plyr_players.length && player_index > 0));\n                (xabber.plyr_player_popup) && xabber.plyr_player_popup.$el.removeClass('hidden2');\n                (xabber.plyr_player_popup) && xabber.plyr_player_popup.$el.closest('#modals').siblings('#' + xabber.plyr_player_popup.$el.data('overlayId')).removeClass('hidden2');\n            }\n        },\n\n        updatePlyrTime: function () {\n            if (xabber.current_plyr_player){\n                if (xabber.current_plyr_player && xabber.current_plyr_player.$audio_elem) {\n                }\n                else if (!isNaN(xabber.current_plyr_player.currentTime))\n                    this.$('.chat-head-player-current-time').text(utils.pretty_duration(isNaN(xabber.current_plyr_player.currentTime) ? 0 : parseInt(xabber.current_plyr_player.currentTime)));\n            }\n        },\n\n        updatePlyrTitle: function () {\n            if (!xabber.current_plyr_player)\n                return\n            let $title_elem = this.$('.chat-head-player-title .chat-head-player-title-text'),\n                title;\n            if (xabber.current_plyr_player && xabber.current_plyr_player.$audio_elem)\n                title = xabber.current_plyr_player.author;\n            else if (xabber.current_plyr_player)\n                title = xabber.current_plyr_player.config.title ?\n                    xabber.current_plyr_player.config.title :\n                    xabber.current_plyr_player.provider === 'html5' ?\n                        xabber.current_plyr_player.source.substring(xabber.current_plyr_player.source.lastIndexOf('/')+1)\n                        : xabber.getString(\"chat_message_video\");\n            $title_elem.text(title);\n            if (this.$('.chat-head-player-title')[0] && utils.isOverflownWidth(this.$('.chat-head-player-title')[0])){\n                $title_elem.addClass('active-animation-player-title');\n                $title_elem.text(title + ' ⚫︎︎ ⚫︎︎ ⚫︎︎ ' + title);\n            } else\n                $title_elem.removeClass('active-animation-player-title');\n\n        },\n\n\n        updateJingleButton: function () {\n            this.$('.btn-jingle-message').switchClass('active-call', xabber.current_voip_call);\n            if (xabber.current_voip_call){\n                this.contact.get('group_chat') && this.$('.btn-jingle-message').removeClass('hidden');\n                let voip_status = xabber.current_voip_call.get('status');\n                if (voip_status)\n                    this.$('.btn-jingle-message').attr('data-state', voip_status);\n                else\n                    this.$('.btn-jingle-message').attr('data-state', '');\n                if (voip_status === 'disconnected')\n                    this.$('.btn-jingle-message').removeClass('active-call');\n            } else if (this.contact.get('group_chat'))\n                this.$('.btn-jingle-message').addClass('hidden');\n        },\n\n        getActiveScreen: function () {\n            let active_screen = xabber.toolbar_view.$('.active');\n            this.$('.omemo-item').removeClass('hidden');\n            if (active_screen.hasClass('archive-chats')) {\n                xabber.toolbar_view.showArchive();\n                return;\n            }\n            if (active_screen.hasClass('all-chats')) {\n                xabber.toolbar_view.showAllChats();\n                return;\n            }\n            if (active_screen.hasClass('chats')) {\n                xabber.toolbar_view.showChats();\n                return;\n            }\n            if (active_screen.hasClass('group-chats')) {\n                xabber.toolbar_view.showGroupChats();\n                return;\n            }\n            if (active_screen.hasClass('account-item')) {\n                xabber.toolbar_view.showChatsByAccount();\n                return;\n            }\n        },\n\n        updateGroupChatHead: function () {\n            let is_group_chat = this.contact.get('group_chat');\n            this.updateIcon();\n            this.$('.btn-jingle-message').showIf(!is_group_chat && xabber.get('audio') || xabber.current_voip_call);\n            this.$('.contact-status').hideIf(is_group_chat);\n            this.updateMenu();\n        },\n\n        updateIcon: function () {\n            this.$('.chat-icon').addClass('hidden');\n            let ic_name = this.contact.getIcon();\n            ic_name && this.$('.chat-icon').removeClass('hidden group-invite blocked').switchClass(ic_name, (ic_name == 'group-invite' || ic_name == 'server' || ic_name == 'blocked')).html(env.templates.svg[ic_name]());\n        },\n\n        inviteUsers: function () {\n            if (!xabber.invite_panel)\n                xabber.invite_panel = new xabber.InvitationPanelView({ model: xabber.opened_chats });\n            xabber.invite_panel.open(this.account, this.contact);\n        },\n\n        clearHistory: function () {\n            this.content.clearHistory();\n            xabber.chats_view.clearSearch();\n        },\n\n        leaveGroupChat: function () {\n            this.contact.declineSubscription();\n            this.contact.removeFromRoster();\n            this.contact.set('in_roster', false);\n        },\n\n        closeChat: function () {\n            this.model.set({'opened': false, 'display': false, 'active': false});\n            xabber.chats_view.clearSearch();\n        },\n\n        deleteChat: function () {\n            if (this.contact.get('group_chat')) {\n                utils.dialogs.ask(xabber.getString(\"delete_chat\"), xabber.getString(\"dialog_group_remove__confirm\"), null, { ok_button_text: xabber.getString(\"delete\")}).done((result) => {\n                    if (result) {\n                        (this.account.connection && this.account.connection.do_synchronization) && this.model.deleteFromSynchronization();\n                        this.leaveGroupChat();\n                        this.closeChat();\n                    }\n                });\n            }\n            else {\n                let rewrite_support = this.account.server_features.get(Strophe.NS.REWRITE);\n                utils.dialogs.ask(xabber.getString(\"delete_chat\"), xabber.getString(\"delete_chat_dialog_message\") +\n                (rewrite_support ? \"\" : `\\n${xabber.getString(\"dialog_clear_chat_history__warning_deletion_not_supported\", [this.account.domain]).fontcolor('#E53935')}`), null, { ok_button_text: rewrite_support? xabber.getString(\"delete\") : xabber.getString(\"dialog_clear_chat_history__button_delete_locally\")}).done((result) => {\n                    if (result) {\n                        if (rewrite_support) {\n                            this.model.retractAllMessages(false);\n                        }\n                        if (this.account.connection && this.account.connection.do_synchronization) {\n                            this.model.deleteFromSynchronization();\n                        }\n                        else {\n                            let all_messages = this.model.messages.models;\n                            $(all_messages).each((idx, item) => {\n                                this.content.removeMessage(item);\n                            });\n                        }\n                        this.closeChat();\n                    }\n                });\n            }\n        },\n\n        deleteContact: function () {\n            this.contact.deleteWithDialog();\n        },\n\n        blockContact: function () {\n            this.contact.blockWithDialog();\n        },\n\n        unblockContact: function () {\n            this.contact.unblockWithDialog();\n        },\n\n        exportHistory: function () {\n\n        },\n\n        showFingerprints: function () {\n            if (!this.account.omemo)\n                return;\n            let peer = this.account.omemo.getPeer(this.contact.get('jid'));\n            peer.fingerprints.open();\n        },\n\n        startEncryptedChat: function () {\n            this.account.chats.openChat(this.contact, {encrypted: true});\n            let chat = this.account.chats.get(this.contact.hash_id + ':encrypted');\n            chat.set('timestamp', moment.now());\n            chat.item_view.updateLastMessage();\n        },\n\n        openEncryptedChat: function () {\n            this.model.set('opened', true);\n            this.account.chats.openChat(this.contact, {encrypted: true});\n        },\n\n        openRegularChat: function () {\n            this.model.set('opened', true);\n            this.account.chats.openChat(this.contact);\n        }\n    });\n\n\n      xabber.SendMediaView = xabber.BasicView.extend({\n          className: 'modal main-modal avatar-picker background-panel',\n          template: templates.send_media,\n          ps_selector: '.modal-content',\n          ps_settings: {theme: 'item-list'},\n\n          events: {\n              \"click .menu-btn\": \"updateActiveMenu\",\n              \"click .library-wrap .image-item\": \"setActiveImage\",\n              'change input[type=\"file\"]': \"onFileInputChanged\",\n              'keyup input.url': \"onInputChanged\",\n              \"click .btn-add\": \"addMedia\",\n              \"click .btn-cancel\": \"close\"\n          },\n\n          _initialize: function () {\n              this.$('input.url')[0].onpaste = this.onPaste.bind(this);\n          },\n\n          render: function (options) {\n              this.model = options.model;\n              this.parent = options.parent;\n              this.createLibrary();\n              this.$('.menu-btn').removeClass('active');\n              this.$('.menu-btn[data-screen-name=\"upload\"]').addClass('active');\n              this.$('.modal-header span').text(xabber.getString(\"chat_bottom__tooltip_add_media\"));\n              this.$el.openModal({\n                  ready: () => {\n                      this.$('.modal-content').perfectScrollbar({theme: 'item-list'});\n                  },\n                  complete: this.close.bind(this)\n              });\n              let draggable = this.$('.upload-wrap');\n              draggable[0].ondragenter = function (ev) {\n                  ev.preventDefault();\n                  draggable.addClass('file-drop');\n              };\n              draggable[0].ondragover = function (ev) {\n                  ev.preventDefault();\n              };\n              draggable[0].ondragleave = function (ev) {\n                  if ($(ev.relatedTarget).closest('.upload-wrap').length)\n                      return;\n                  ev.preventDefault();\n                  draggable.removeClass('file-drop');\n              };\n              draggable[0].ondrop = (ev) => {\n                  ev.preventDefault();\n                  ev.stopPropagation();\n                  draggable.removeClass('file-drop');\n                  let files = ev.dataTransfer.files || [];\n                  this.parent.view.addFileMessage(files);\n                  this.close();\n              };\n          },\n\n          onPaste: function (ev) {\n              let url = ev.clipboardData.getData('text').trim();\n              this.$('.image-preview img')[0].onload = () => {\n                  this.$('.image-preview img').removeClass('hidden');\n                  this.updateActiveButton();\n              };\n              this.$('.image-preview img').addClass('hidden')[0].src = url;\n              this.updateActiveButton();\n          },\n\n          updateActiveMenu: function (ev) {\n              let screen_name = ev.target.getAttribute('data-screen-name');\n              this.$('.menu-btn').removeClass('active');\n              this.$(`.menu-btn[data-screen-name=\"${screen_name}\"]`).addClass('active');\n              this.updateScreen(screen_name);\n          },\n\n          updateScreen: function (name) {\n              this.$('.screen-wrap').addClass('hidden');\n              this.$(`.screen-wrap[data-screen=\"${name}\"]`).removeClass('hidden');\n              this.scrollToTop();\n              this.updateActiveButton();\n          },\n\n          updateActiveButton: function () {\n              let $active_screen = this.$('.screen-wrap:not(.hidden)'),\n                  non_active = true;\n              if ($active_screen.attr('data-screen') == 'image' || $active_screen.attr('data-screen') == 'video') {\n                  $active_screen.find('div.active').length && (non_active = false);\n              } else {\n                  $active_screen.find('img:not(.hidden)').length && (non_active = false);\n              }\n              this.$('.modal-footer .btn-add').switchClass('non-active', non_active);\n          },\n\n          renderFiles: function (response) {\n              this.$(`.library-wrap[data-screen=\"${response.type}\"] .preloader-wrapper`).remove()\n              if (response.items.length){\n                  response.items.forEach((item) => {\n                      let img = $(`<div class=\"image-item\"/>`);\n                      img.css('background-image', `url(\"${item.thumbnail.url}\")`);\n                      img.attr('data-src', item.file);\n                      img.attr('data-name', item.name);\n                      this.$(`.library-wrap[data-screen=\"${response.type}\"]`).append(img);\n                  });\n              }\n          },\n\n          createLibrary: function () {\n              this.model.testGalleryTokenExpire(() => {\n                  if (this.model.get('gallery_token') && this.model.get('gallery_url')) {\n                      this.$('.library-wrap').html(env.templates.contacts.preloader())\n                      $.ajax({\n                          type: 'GET',\n                          headers: {\"Authorization\": 'Bearer ' + this.model.get('gallery_token')},\n                          url: this.model.get('gallery_url') + 'v1/files/',\n                          dataType: 'json',\n                          data: {obj_per_page: 50, order_by: '-id', type: 'image'},\n                          success: (response) => {\n                              console.log(response)\n                              response.type = 'image'\n                              this.renderFiles(response)\n                          },\n                          error: (response) => {\n                              this.model.handleCommonGalleryErrors(response)\n                              console.log(response)\n                              this.$('.library-wrap[data-screen=\"image\"] .preloader-wrapper').remove()\n                          }\n                      });\n                      $.ajax({\n                          type: 'GET',\n                          headers: {\"Authorization\": 'Bearer ' + this.model.get('gallery_token')},\n                          url: this.model.get('gallery_url') + 'v1/files/',\n                          dataType: 'json',\n                          data: {obj_per_page: 50, order_by: '-id', type: 'video'},\n                          success: (response) => {\n                              console.log(response)\n                              response.type = 'video'\n                              this.renderFiles(response)\n                          },\n                          error: (response) => {\n                              this.model.handleCommonGalleryErrors(response)\n                              console.log(response)\n                              this.$('.library-wrap[data-screen=\"video\"] .preloader-wrapper').remove()\n                          }\n                      });\n                  }\n              });\n          },\n\n          setActiveImage: function (ev) {\n              let $target = $(ev.target),\n                  $active_screen = this.$('.screen-wrap:not(.hidden)');\n              if ($target.hasClass('active'))\n                  $target.removeClass('active');\n              else {\n                  this.$('.library-wrap>div').removeClass('active');\n                  $target.addClass('active');\n              }\n              this.updateActiveButton();\n          },\n\n          onFileInputChanged: function (ev) {\n              let target = ev.target,\n                  files = [];\n              for (let i = 0; i < target.files.length; i++) {\n                  files.push(target.files[i]);\n              }\n\n              if (files && files.length) {\n                  this.parent.view.addFileMessage(files);\n                  $(target).val('');\n                  this.close();\n              }\n          },\n\n          onInputChanged: function (ev) {\n              if (ev.target.value.trim() == this.$('.image-preview img')[0].src)\n                  return;\n              if (ev.target.value.trim() && ev.keyCode !== constants.KEY_CTRL && ev.keyCode !== constants.KEY_SHIFT && ev.keyCode !== constants.KEY_ARROW_UP && ev.keyCode !== constants.KEY_ARROW_DOWN && ev.keyCode !== constants.KEY_ARROW_RIGHT && ev.keyCode !== constants.KEY_ARROW_LEFT) {\n                  let url = ev.target.value.trim();\n                  this.$('.image-preview img')[0].onload = () => {\n                      this.$('.image-preview img').removeClass('hidden');\n                      this.updateActiveButton();\n                  };\n                  this.$('.image-preview img').addClass('hidden')[0].src = url;\n                  this.updateActiveButton();\n              } else {\n                  this.$('.image-preview img').addClass('hidden')[0].src = \"\";\n                  this.updateActiveButton();\n              }\n          },\n\n          addMedia: function () {\n              if (this.$('.btn-add').hasClass('non-active'))\n                  return;\n              let file, filename, dfd = new $.Deferred(), $active_screen = this.$('.screen-wrap:not(.hidden)');\n              dfd.done((resolved_file) => {\n                  this.parent.view.addFileMessage([resolved_file])\n                  this.close();\n              });\n              this.$('.modal-preloader-wrap').html(env.templates.contacts.preloader());\n              this.$('.btn-add').addClass('hidden-disabled');\n              if ($active_screen.attr('data-screen') == 'image' || $active_screen.attr('data-screen') == 'video' || $active_screen.attr('data-screen') == 'web-address') {\n                  file = $active_screen.attr('data-screen') == 'image' || $active_screen.attr('data-screen') == 'video' ?\n                      $active_screen.find('div.active').attr('data-src') :\n                      $active_screen.find('img:not(.hidden)')[0].src;\n                  filename = $active_screen.attr('data-screen') == 'image' || $active_screen.attr('data-screen') == 'video' ?\n                      $active_screen.find('div.active').attr('data-name') : '';\n\n                  this.createFileFromURL(file, filename).then((file) => {\n                      dfd.resolve(file);\n                  })\n              } else\n                  dfd.resolve(this.current_file);\n          },\n\n          createFileFromURL: async function (url, filename) {\n              let response = await fetch(url);\n              let data = await response.blob();\n              let metadata = {\n                  type: data.type\n              };\n              let file = new File([data], filename || url.split('#').shift().split('?').shift().split('/').pop() || 'file', metadata);\n              return file\n          },\n\n          close: function () {\n              this.$el.closeModal({ complete: () => {\n                      this.$el.detach();\n                      this.data.set('visible', false);\n                  }\n              });\n          }\n      });\n\n    xabber.ChatLocationView = xabber.BasicView.extend({\n        className: 'modal main-modal chat-location ',\n        template: templates.location_popup,\n\n        events: {\n            \"click .btn-cancel\": \"close\",\n            \"click .btn-apply\": \"sendLocation\",\n            \"click #map canvas\": \"closeLocationName\",\n            \"click .nominatim.ol-search input\": \"initializeScrollbar\",\n            \"focusout .nominatim.ol-search input\": \"destroyScrollbar\",\n        },\n\n        _initialize: function (options) {\n            this.view = options.content;\n            this.model = this.view.model;\n            this.account = this.view.account;\n\n        },\n\n        render: function () {\n            this.$el.openModal({\n                ready: function () {\n                    Materialize.updateTextFields();\n                },\n                complete: this.hide.bind(this)\n            });\n        },\n\n        sendLocation: function (e) {\n            if (this.$('#output').val()) {\n                let body = this.$('#output').val(),\n                    legacy_body = '',\n                    start_idx = legacy_body.length,\n                    end_idx = (body + legacy_body).length,\n                    lat = this.$('#lat').val(),\n                    lon = this.$('#lon').val(),\n                    locations = [{\n                            lat: lat,\n                            lon: lon\n                        }],\n                    mutable_content = [{\n                        start: start_idx,\n                        end: end_idx,\n                        type: 'geolocation'\n                        }],\n                    attrs = {\n                        from_jid: this.account.get('jid'),\n                        locations: locations,\n                        mutable_content: mutable_content,\n                        message: this.$('#output').val(),\n                        begin: start_idx,\n                        end: end_idx\n                    },\n                    message = this.model.messages.create(attrs),\n                    msg_id = message.get('msgid'),\n                    stanza = $msg({\n                        to: this.model.get('jid'),\n                        type: 'chat',\n                        id: msg_id\n                    });\n                stanza.c('markable').attrs({'xmlns': Strophe.NS.CHAT_MARKERS}).up();\n                stanza.c('origin-id', {id: msg_id, xmlns: 'urn:xmpp:sid:0'}).up();\n                stanza.c('reference', {\n                    xmlns: Strophe.NS.REFERENCE,\n                    type: 'mutable',\n                    begin: start_idx,\n                    end: end_idx\n                }).c('geoloc', {\n                    xmlns: Strophe.NS.GEOLOC,\n                }).c('lat').t(lat).up().c('lon').t(lon).up().up().up();\n                stanza.c('body').t(body).up();\n                if (this.model.get('encrypted') && this.account.omemo) {\n                    stanza.c('envelope', {xmlns: Strophe.NS.SCE}).c('content')\n                    if ($(stanza.tree()).children('body').length) {\n                        stanza.cnode($(stanza.tree()).children('body')[0]).attrs({'xmlns': Strophe.NS.CLIENT}).up()\n                        $(stanza.tree()).children('body').detach()\n                    }\n                    if ($(stanza.tree()).children('reference').length) {\n                        $(stanza.tree()).children('reference').each((idx, reference) => {\n                            stanza.cnode($(stanza.tree()).children('reference')[idx]).up()\n                        });\n                        $(stanza.tree()).children('reference').detach()\n                    }\n                    stanza.up().c('rpad').t('0'.repeat(200).slice(1, Math.floor((Math.random() * 198) + 1))).up()\n                    stanza.c('from', {jid: this.account.get('jid')}).up().up()\n                    message.set({xml: $(stanza.tree()).clone()[0]});\n                    this.account.omemo.encrypt(this.model.contact, stanza).then((msg) => {\n                        if (msg) {\n                            stanza = msg.message;\n                            message.set('trusted', msg.is_trusted);\n                        }\n                        this.account.sendMsg(stanza);\n                    });\n                } else {\n                    message.set({xml: $(stanza.tree()).clone()[0]});\n                    this.account.sendMsg(stanza);\n                }\n            }\n            this.close();\n        },\n\n        closeLocationName: function (e) {\n            $('.ol-location').hide()\n        },\n\n        onHide: function () {\n            this.$el.detach();\n        },\n\n        close: function () {\n            this.$el.closeModal({ complete: this.hide.bind(this) });\n        },\n\n        initializeScrollbar: function () {\n            this.ps_container = this.$('.nominatim.ol-search');\n            this.ps_container.perfectScrollbar(\n                _.extend(this.ps_settings || {}, xabber.ps_settings)\n            );\n        },\n\n        destroyScrollbar: function () {\n            this.ps_container = this.$('.nominatim.ol-search');\n            this.ps_container.perfectScrollbar('destroy');\n        },\n    });\n\n    xabber.ChatBottomView = xabber.BasicView.extend({\n        className: 'chat-bottom-wrap',\n        ps_selector: '.message-reference-preview-container',\n        template: templates.chat_bottom,\n        avatar_size: constants.AVATAR_SIZES.CHAT_BOTTOM,\n        mention_avatar_size: constants.AVATAR_SIZES.MENTION_ITEM,\n\n        events: {\n            \"click\": \"onClickBottom\",\n            \"click .ql-editor\": \"focusOnInput\",\n            \"click .my-avatar\": \"showAccountSettings\",\n            \"keyup .input-message .rich-textarea\": \"keyUp\",\n            \"keydown .input-message .rich-textarea\": \"keyDown\",\n            \"change .attach-file input\": \"onFileInputChanged\",\n            \"click .attach-location\": \"showLocationPopup\",\n            \"click .attach-media\": \"showMediaPopup\",\n            \"mouseup .message-input-panel\": \"stopWritingVoiceMessage\",\n            \"mousedown .attach-voice-message\": \"writeVoiceMessage\",\n            \"click .chat-mention\": \"onMentionButtonClick\",\n            \"click .close-forward\": \"unsetForwardedMessages\",\n            \"click .close-attachments\": \"removeAttachments\",\n            \"click .send-message\": \"submit\",\n            \"click .markup-text\": \"onShowMarkupPanel\",\n            \"click .reply-message\": \"replyMessages\",\n            \"click .forward-message\": \"forwardMessages\",\n            \"click .pin-message\": \"pinMessage\",\n            \"click .copy-message\": \"copyMessages\",\n            \"click .edit-message\": \"showEditPanel\",\n            \"click .delete-message\": \"deleteMessages\",\n            \"click .close-message-panel\": \"resetSelectedMessages\",\n            \"click .mention-item\": \"inputMention\",\n            \"click .format-text\": \"updateMarkupPanel\",\n            \"click .link-message-reference .mdi-close\": \"removeLinkReference\",\n            \"click .preview-preloader-container .preview-cancel-preloader\": \"stopLoadingLinkReference\",\n            \"click .message-reference-preview-item-file .mdi-close\": \"removeFileSnippet\",\n            \"click .btn-manage-devices\": \"openDevicesWindow\"\n        },\n\n        _initialize: function (options) {\n            this.view = options.content;\n            this.model = this.view.model;\n            this.click_counter = 0;\n            let rich_textarea_wrap = this.$('.rich-textarea-wrap');\n            let bindings = {\n                enter: {\n                    key: 13,\n                    handler: function(range) {\n                        if (xabber.settings.hotkeys !== \"enter\")\n                            this.quill.insertText(range.index, \"\\n\");\n                    }\n                },\n                arrow_up: {\n                    key: constants.KEY_ARROW_UP,\n                    handler: (range) => {\n                        if (this.$('.mentions-list').css('display') !== 'none') {\n                            let active_item = this.$('.mentions-list').children('.active.mention-item');\n                            if (active_item.length)  {\n                                let $prev_elem = active_item.prev('.mention-item');\n                                active_item.removeClass('active');\n                                if (!$prev_elem.length) {\n                                    $prev_elem = this.$('.mentions-list').children('.mention-item').last().addClass('active');\n                                    this.$('.mentions-list')[0].scrollTop = this.$('.mentions-list')[0].scrollHeight;\n                                }\n                                $prev_elem.addClass('active');\n                                if ($prev_elem.length && ($prev_elem[0].offsetTop <= this.$('.mentions-list')[0].scrollTop))\n                                    this.$('.mentions-list')[0].scrollTop = $prev_elem[0].offsetTop;\n                            }\n                            else {\n                                this.$('.mentions-list')[0].scrollTop = this.$('.mentions-list')[0].scrollHeight;\n                                this.$('.mentions-list').children('.mention-item').last().addClass('active');\n                            }\n                            return false;\n                        }\n                        else\n                            return true;\n                    }\n                },\n                arrow_down: {\n                    key: constants.KEY_ARROW_DOWN,\n                    handler: (range) => {\n                        if (this.$('.mentions-list').css('display') !== 'none') {\n                            let active_item = this.$('.mentions-list').children('.active.mention-item');\n                            if (active_item.length) {\n                                let $next_elem = active_item.next('.mention-item');\n                                active_item.removeClass('active');\n                                if (!$next_elem.length) {\n                                    $next_elem = this.$('.mentions-list').children('.mention-item').first();\n                                    this.$('.mentions-list')[0].scrollTop = 0;\n                                }\n                                $next_elem.addClass('active');\n                                if ($next_elem.length && ($next_elem[0].offsetTop + $next_elem[0].clientHeight >= this.$('.mentions-list')[0].scrollTop + this.$('.mentions-list')[0].clientHeight))\n                                    this.$('.mentions-list')[0].scrollTop = $next_elem[0].offsetTop - this.$('.mentions-list')[0].clientHeight + $next_elem[0].clientHeight;\n                            }\n                            else {\n                                this.$('.mentions-list')[0].scrollTop = 0;\n                                this.$('.mentions-list').children('.mention-item').first().addClass('active');\n                            }\n                            return false;\n                        }\n                        else\n                            return true;\n                    }\n                },\n                arrow_left: {\n                    key: constants.KEY_ARROW_LEFT,\n                    handler: (range) => {\n                        if (this.$('.mentions-list').css('display') !== 'none')\n                            return false;\n                        else\n                            return true;\n                    }\n                },\n                arrow_right: {\n                    key: constants.KEY_ARROW_RIGHT,\n                    handler: (range) => {\n                        if (this.$('.mentions-list').css('display') !== 'none')\n                            return false;\n                        else\n                            return true;\n                    }\n                }\n            };\n            this.quill = new Quill(rich_textarea_wrap[0], {\n                modules: {\n                    keyboard: {\n                        bindings: bindings\n                    },\n                    toolbar: [\n                        ['bold', 'italic', 'underline', 'strike', 'blockquote'],\n                        this.model.get('group_chat') ? ['mention'] : [],\n                        ['clean']\n                    ]\n                },\n                formats: ['bold', 'italic', 'underline', 'strike', 'blockquote', 'clean', 'emoji', 'mention'],\n                placeholder: xabber.getString(this.model.get('encrypted') ? \"chat_bottom__hint_default_encrypted\" : \"chat_bottom__hint_default\"),\n                scrollingContainer: '.rich-textarea',\n                theme: 'snow'\n            });\n            this.quill.container.firstChild.classList.add('rich-textarea');\n            this.$('.ql-mention').prop('disabled', true);\n            this.$('.ql-mention').append('<div class=\"chat-mention\" =\"\">@</div>');\n            this.contact = this.view.contact;\n            this.account = this.view.account;\n            this.fwd_messages = [];\n            this.edit_message = null;\n            this.stopped_loading_link_reference = false;\n            this.link_references = [];\n            this.link_reference_exempted = [];\n            this.currently_loaded_link_references = [];\n            this.attached_files = [];\n            this.loading_link_reference = false;\n            this.$('.account-jid').text(this.account.get('jid'));\n            this.updateAvatar();\n            this.quill.on(\"text-change\", this.onChangedText, this);\n            this.account.on(\"change:image\", this.updateAvatar, this);\n            this.account.on('trusting_updated', this.updateEncrypted, this);\n            if (this.contact) {\n                this.contact.on(\"change:blocked\", this.onBlockedUpdate, this);\n                this.contact.on('update_my_info', this.updateInfoInBottom, this);\n            }\n            this.model.on(\"reply_selected_messages\", this.replyMessages, this);\n            this.model.on(\"forward_selected_messages\", this.forwardMessages, this);\n            this.model.on(\"copy_selected_messages\", this.copyMessages, this);\n            this.model.on(\"delete_selected_messages\", this.deleteMessages, this);\n            this.model.on(\"edit_selected_message\", this.showEditPanel, this);\n            this.model.on(\"pin_selected_message\", this.pinMessage, this);\n            this.model.on(\"reset_selected_messages\", this.resetSelectedMessages, this);\n            this.content_view = (this.view.data.get('visible') ? this.view : this.model.messages_view) || this.view;\n            let $rich_textarea = this.$('.input-message .rich-textarea'),\n                rich_textarea = $rich_textarea[0],\n                $rich_textarea_wrap = $rich_textarea.parent('.rich-textarea-wrap'),\n                $placeholder = $rich_textarea.siblings('.placeholder');\n            rich_textarea.onpaste = this.onPaste.bind(this);\n            rich_textarea.oncut = this.onCut.bind(this);\n            rich_textarea.ondragenter = (ev) => {\n                ev.preventDefault();\n                $placeholder.text(xabber.getString(\"chat_bottom__drag_and_drop__text_drop_files_here\"));\n                $rich_textarea_wrap.addClass('file-drop');\n            };\n            rich_textarea.ondragover = (ev) => {\n                ev.preventDefault();\n            };\n            rich_textarea.ondragleave = (ev) => {\n                if ($(ev.relatedTarget).closest('.rich-textarea').length)\n                    return;\n                ev.preventDefault();\n                $placeholder.text(xabber.getString(\"chat_bottom__hint_default\"));\n                $rich_textarea_wrap.removeClass('file-drop');\n            };\n            rich_textarea.ondrop = (ev) => {\n                ev.preventDefault();\n                ev.stopPropagation();\n                $placeholder.text(xabber.getString(\"chat_bottom__hint_default\"));\n                $rich_textarea_wrap.removeClass('file-drop');\n                let files = ev.dataTransfer.files || [];\n                this.view.addFileMessage(files);\n            };\n            let $insert_emoticon = this.$('.insert-emoticon'),\n                $emoji_panel_wrap = this.$('.emoticons-panel-wrap'),\n                $emoji_panel = this.$('.emoticons-panel'),\n                _timeout;\n\n            let onloaded_sprites = 0,\n                i = 0,\n                all_sprites = Object.keys(Emoji.all).length;\n            for (let emoji_list in Emoji.all) {\n                let $emoji_list_wrap = $(`<div class=\"emoji-list-wrap\"/>`);\n                $(`<div id=${emoji_list} class=\"emoji-list-header\">${xabber.getString(constants.EMOJI_LIST_NAME(emoji_list))}</div>`).appendTo($emoji_list_wrap);\n                _.each(Emoji.all[emoji_list], function (emoji) {\n                    $('<div class=\"emoji-wrap\"/>').html(\n                        emoji.emojify({emoji_size: 24, sprite: emoji_list})\n                    ).appendTo($emoji_list_wrap);\n                });\n                $emoji_list_wrap.appendTo($emoji_panel);\n                $emoji_panel.siblings('.emoji-menu').append(Emoji.all[emoji_list][0].emojify({href: emoji_list, title: xabber.getString(constants.EMOJI_LIST_NAME(emoji_list)), tag_name: 'a', emoji_size: 20}));\n                let img = new Image();\n                img.onload = () => {\n                    onloaded_sprites++;\n                    (onloaded_sprites === all_sprites) && $emoji_panel_wrap.find('.uploading-emoticons').detach();\n                };\n                img.src = './images/emoji/spritesheet' + i++ + '.png';\n            }\n            let window_onclick = function (ev) {\n                if ($(ev.target).closest('.emoticons-panel-wrap').length || $(ev.target).closest('.insert-emoticon').length)\n                    return;\n                $emoji_panel_wrap.removeClass('opened');\n                window.removeEventListener(\"click\" , window_onclick);\n            };\n            $emoji_panel.perfectScrollbar(\n                    _.extend({theme: 'item-list'}, xabber.ps_settings));\n            this.$('.emoji-menu .emoji').click((ev) => {\n                $emoji_panel[0].scrollTop = this.$('.emoji-list-wrap ' + ev.target.attributes.href.value)[0].offsetTop - 4;\n            });\n            $insert_emoticon.click((ev) => {\n                if (_timeout)\n                    clearTimeout(_timeout);\n                if (ev && ev.preventDefault) { ev.preventDefault(); }\n                if ($emoji_panel_wrap.hasClass('opened')) {\n                    $emoji_panel_wrap.removeClass('opened');\n                    window.removeEventListener( \"click\" , window_onclick);\n                }\n                else {\n                    $emoji_panel_wrap.addClass('opened');\n                    window.addEventListener( \"click\" , window_onclick);\n                }\n                $emoji_panel.perfectScrollbar('update');\n            });\n            $emoji_panel_wrap.hover(null, (ev) => {\n                if (ev && ev.preventDefault) { ev.preventDefault(); }\n                if (_timeout) {\n                    clearTimeout(_timeout);\n                }\n                _timeout = setTimeout(() => {\n                    $emoji_panel_wrap.removeClass('opened');\n                }, 200);\n            });\n            $emoji_panel_wrap.mousedown((ev) => {\n                if (ev && ev.preventDefault) { ev.preventDefault(); }\n                if (_timeout)\n                    clearTimeout(_timeout);\n                if (ev.button)\n                    return;\n                let $target = $(ev.target),\n                    $target_emoji = $target.closest('.emoji-wrap').find('.emoji');\n                if ($target.closest('.emoji-menu').length)\n                    return;\n                $target_emoji.length && this.typeEmoticon($target_emoji.data('emoji'));\n            });\n            this.renderLastEmoticons();\n        },\n\n        render: function (options) {\n            this.$('.message-input-panel').hideIf(options.blocked);\n            this.$('.blocked-msg').showIf(options.blocked);\n            this.$el.switchClass('chat-bottom-blocked-wrap', options.blocked);\n            this.updateAvatar();\n            this.updateEncrypted();\n            let http_upload = this.account.server_features.get(Strophe.NS.HTTP_UPLOAD);\n            this.content_view = (this.view.data.get('visible') ? this.view : this.model.messages_view) || this.view;\n            this.messages_arr = this.content_view.$el.hasClass('participant-messages-wrap') && this.account.participant_messages || this.content_view.$el.hasClass('messages-context-wrap') && this.account.context_messages || this.model.messages;\n            this.renderLastEmoticons();\n            this.$('.attach-file').showIf(http_upload);\n            this.$('.attach-location').showIf(xabber.settings.mapping_service);\n            this.$('.attach-media').showIf(this.account.get('gallery_token') && this.account.get('gallery_url'));\n            this.$('.ql-toolbar.ql-snow').switchClass('ql-moved-left', !xabber.settings.mapping_service || !(this.account.get('gallery_token') && this.account.get('gallery_url')));\n            this.$('.ql-toolbar.ql-snow').switchClass('ql-moved-left-extra', !xabber.settings.mapping_service && !(this.account.get('gallery_token') && this.account.get('gallery_url')));\n            if (this.model.get('group_chat')) {\n                this.updateInfoInBottom();\n            }\n            else {\n                this.$('.account-nickname').hide();\n                this.$('.account-badge').hide();\n                this.$('.account-role').hide();\n            }\n            this.focusOnInput();\n            this.manageSelectedMessages();\n            xabber.chat_body.updateHeight();\n            return this;\n        },\n\n        setButtonsWidth: function () {\n            let widths = [];\n            this.$('.message-actions-panel .button-wrap').each((i, button) => {widths.push(button.clientWidth)});\n            this.$('.message-actions-panel .button-wrap').css('width', `${Math.max.apply(null, widths)}px`);\n        },\n\n        updateEncrypted: function () {\n            this.$el.children('.preloader-wrapper').detach();\n            this.$el.children('.omemo-disabled').detach();\n            this.view.$el.removeClass('encrypted');\n            this.view.$('.chat-notification').hasClass('encryption-warning') && this.view.$('.chat-notification').addClass('hidden').removeClass('encryption-warning').html(\"\");\n            this.$el.attr('data-trust', null);\n            this.$el.attr('data-contact-trust', null);\n            this.$el.find('.warning-wrap').detach();\n            if (!this.model.get('encrypted'))\n                return;\n            if (this.account.omemo) {\n                this.$el.addClass('loading');\n                this.$el.prepend(env.templates.contacts.preloader());\n                this.account.omemo.checkOwnFingerprints().then((is_trusted) => {\n                    if (is_trusted == 'none' || is_trusted == 'error') {\n                        let is_scrolled_bottom = this.view.isScrolledToBottom();\n                        this.$el.attr('data-trust', is_trusted);\n                        this.view.$('.chat-message:not([data-trust=untrusted])').attr('data-trust', is_trusted);\n                        this.view.$('.chat-day-indicator:not(.fixed-day-indicator-wrap)').attr('data-trust', is_trusted);\n                        this.view.$el.attr('data-trust', is_trusted);\n                        this.$el.removeClass('loading');\n                        this.$el.children('.preloader-wrapper').detach();\n                        if (is_trusted == 'none')\n                            this.$el.prepend(templates.encryption_warning({color: 'amber', message: xabber.getString(\"omemo__alert_new_device_yours__text_new_device\")}));\n                        else\n                            this.$el.prepend(templates.encryption_warning({color: 'red', message: xabber.getString(\"omemo__alert_keys_changed_yours__text_keys_changed\")}));\n                        xabber.chat_body.updateHeight();\n                        is_scrolled_bottom && this.view.scrollToBottom();\n                        this.account.omemo.checkContactFingerprints(this.contact);\n                        (this.model.get('active') && this.model.get('display')) && this.focusOnInput();\n                    } else {\n                        this.account.omemo.checkContactFingerprints(this.contact).then((is_contact_trusted) => {\n                            let is_scrolled_bottom = this.view.isScrolledToBottom();\n                            this.$el.removeClass('loading');\n                            this.$el.children('.preloader-wrapper').detach();\n                            if (is_contact_trusted === 'nil') {\n                                this.$el.prepend($(`<div class=\"warning-wrap no-fingerprints\">${xabber.getString(\"omemo__dialog_fingerprints__text_no_fingerprints\")}</div>`));\n                                this.$el.attr('data-contact-trust', is_contact_trusted);\n                                return;\n                            }\n                            if (is_contact_trusted === 'error') {\n                                this.$el.attr('data-contact-trust', is_contact_trusted);\n                                this.$el.prepend(templates.encryption_warning({color: 'red', message: xabber.getString(\"omemo__alert_keys_changed_partner__text_keys_changed\")}));\n                            } else {\n                                if (is_contact_trusted === 'none') {\n                                    this.view.$el.addClass('encrypted');\n                                    this.view.$('.chat-notification').removeClass('hidden').addClass('encryption-warning').html(templates.content_encryption_warning({message: xabber.getString(\"omemo__alert_new_device_partner__text_new_device\")}));\n                                }\n                                this.$el.attr('data-contact-trust', is_contact_trusted);\n                            }\n                            this.view.$el.attr('data-trust', is_contact_trusted);\n                            this.view.$('.chat-message:not([data-trust=untrusted])').attr('data-trust', is_contact_trusted);\n                            this.view.$('.chat-day-indicator:not(.fixed-day-indicator-wrap)').attr('data-trust', is_contact_trusted);\n                            xabber.chat_body.updateHeight();\n                            is_scrolled_bottom && this.view.scrollToBottom();\n                            (this.model.get('active') && this.model.get('display')) && this.focusOnInput();\n                        });\n                    }\n                });\n            } else {\n                this.$el.addClass('loading');\n                this.$el.prepend($('<div class=\"omemo-disabled warning-wrap\"/>').text(xabber.getString(\"omemo__chat__placeholder_encryption_disabled\")));\n            }\n        },\n\n        openDevicesWindow: function () {\n            if (this.account.omemo) {\n                if (this.$el.attr('data-trust') !== undefined) {\n                    if (!this.omemo_devices)\n                        this.omemo_devices = new xabber.Fingerprints({model: this.account.omemo});\n                    this.omemo_devices.open();\n                } else if (this.$el.attr('data-contact-trust') !== undefined) {\n                    let peer = this.account.omemo.getPeer(this.contact.get('jid'));\n                    peer.fingerprints.open();\n                }\n            } else\n                utils.dialogs.error(xabber.getString(\"omemo__chat__placeholder_encryption_disabled\"));\n        },\n\n        onBlockedUpdate: function () {\n            if (!this.isVisible())\n                return;\n            let is_blocked = this.model.get('blocked');\n            this.$('.message-input-panel').hideIf(is_blocked);\n            this.$('.blocked-msg').showIf(is_blocked);\n            this.$el.switchClass('chat-bottom-blocked-wrap', is_blocked);\n        },\n\n        onClickBottom: function (ev) {\n            (this.$el.hasClass('chat-bottom-blocked-wrap') && !$(ev.target).closest('.message-actions-panel').length) && this.contact.showDetails(xabber.body.screen.get('name'));\n            if ($(ev.target).closest('.ql-editor.rich-textarea').length) {\n                if (!this.quill.getText().trim().length) {\n                    if (++this.click_counter === 3) {\n                        this.click_counter = 0;\n                        this.setOneLiner();\n                    }\n                }\n            }\n        },\n\n        updateInfoInBottom: function () {\n            if (this.contact && this.contact.my_info) {\n                let nickname = this.contact.my_info.get('nickname'),\n                    badge = this.contact.my_info.get('badge'),\n                    avatar = this.contact.my_info.get('b64_avatar'),\n                    role = this.contact.my_info.get('role');\n                if (nickname) {\n                    this.$('.account-jid').hide();\n                    this.$('.account-nickname').show().text(nickname);\n                }\n                else\n                    this.$('.account-nickname').hide();\n                if (badge)\n                    this.$('.account-badge').show().text(badge);\n                else\n                    this.$('.account-badge').hide();\n                if (role && role != 'member')\n                    this.$('.account-role').show().text(utils.pretty_name(role));\n                else\n                    this.$('.account-role').hide();\n                this.$('.input-toolbar').emojify('.account-badge', {emoji_size: 16});\n                if (!avatar && this.contact.my_info.get('avatar_url'))\n                    avatar = this.contact.my_info.get('avatar_url');\n                if (!avatar && this.account.cached_image)\n                    avatar = this.account.cached_image;\n                !avatar && (avatar = Images.getDefaultAvatar(nickname));\n                this.$('.my-avatar.circle-avatar').setAvatar(avatar, this.avatar_size);\n            }\n            else {\n                this.$('.account-jid').show();\n                this.$('.account-nickname').hide();\n                this.$('.account-badge').hide();\n                this.$('.account-role').hide();\n            }\n        },\n\n        updateAvatar: function () {\n            let image;\n            if (this.contact && this.contact.get('group_chat')) {\n                if (this.contact.my_info){\n                    if (this.contact.my_info.get('b64_avatar'))\n                        image = this.contact.my_info.get('b64_avatar');\n                    if (!image && this.contact.my_info.get('avatar_url'))\n                        image = this.contact.my_info.get('avatar_url');\n                    if (!image && this.account.cached_image)\n                        image = this.account.cached_image;\n                }\n                !image && (image = Images.getDefaultAvatar(this.contact.my_info && this.contact.my_info.nickname || this.account.get('jid')));\n            }\n            else\n                image = this.account.cached_image;\n            this.$('.my-avatar.circle-avatar').setAvatar(image, this.avatar_size);\n        },\n\n        focusOnInput: function () {\n            if (!xabber.body.$el.siblings('#modals').children('.open:not(.collapsed):not(.plyr-player-popup-view)').length){\n                this.quill.enable();\n                this.quill.focus();\n            } else {\n                this.quill.blur();\n                this.quill.disable();\n            }\n            return this;\n        },\n\n        moveCursorToEnd: function () {\n            let range = document.createRange(),\n                sel = window.getSelection(),\n                target = this.quill.root;\n            range.selectNodeContents(target);\n            range.collapse(false);\n            sel.removeAllRanges();\n            sel.addRange(range);\n            target.focus();\n            range.detach(); // optimization\n            target.scrollTop = target.scrollHeight;\n        },\n\n        keyDown: function (ev) {\n            let $rich_textarea = this.$('.input-message .rich-textarea');\n            if (ev.keyCode === constants.KEY_ESCAPE && !xabber.body.screen.get('right_contact') ||\n                    ev.keyCode === constants.KEY_BACKSPACE ||\n                    ev.keyCode === constants.KEY_DELETE) {\n                return;\n            }\n            if (ev.keyCode === constants.KEY_ENTER || ev.keyCode === 10) {\n                if (this.$('.mentions-list').css('display') !== 'none') {\n                    let active_item = this.$('.mentions-list').children('.active.mention-item');\n                    active_item.length && active_item.click();\n                    ev.preventDefault();\n                    return;\n                }\n                let send_on_enter = xabber.settings.hotkeys === \"enter\";\n                if ((send_on_enter && ev.keyCode === constants.KEY_ENTER && !ev.shiftKey) ||\n                        (!send_on_enter && ev.ctrlKey)) {\n                    ev.preventDefault();\n                    this.submit();\n                    return;\n                }\n            }\n            if ($rich_textarea.getTextFromRichTextarea().trim() && !this.view.chat_state && !this.view.edit_message && xabber.settings.typing_notifications)\n                this.view.sendChatState('composing');\n        },\n\n        displayMicrophone: function () {\n            this.$('.mdi-send').addClass('hidden');\n            this.$('.attach-voice-message').removeClass('hidden');\n        },\n\n        displaySend: function () {\n            this.$('.mdi-send').removeClass('hidden');\n            this.$('.attach-voice-message').addClass('hidden');\n        },\n\n        updateMarkupPanel: function (ev) {\n            let $ic_markup = $(ev.target).closest('.format-text');\n            $ic_markup.toggleClass('active');\n            if ($ic_markup.hasClass('active')) {\n                this.$('.ql-toolbar.ql-snow').show();\n                this.$('.last-emoticons').hide();\n            }\n            else {\n                this.$('.ql-toolbar.ql-snow').hide();\n                this.$('.last-emoticons').show();\n            }\n        },\n\n        setOneLiner: function () {\n            let rand_idx = _.random(0, xabber.getOneLiners().length - 1),\n                placeholder = xabber.getOneLiners()[rand_idx].replace(/\\\\n/, \"\");\n            if (!placeholder) {\n                this.setOneLiner();\n                return;\n            }\n            this.updatePlaceholder(placeholder);\n        },\n\n        setDefaultPlaceholder: function () {\n            let placeholder = this.model.get('encrypted') ? xabber.getString(\"chat_bottom__hint_default_encrypted\") : xabber.getString(\"chat_bottom__hint_default\");\n            this.updatePlaceholder(placeholder);\n        },\n\n        updatePlaceholder: function (placeholder) {\n            this.quill.root.setAttribute('data-placeholder', placeholder);\n        },\n\n        changeEncryption: function () {\n            this.model.set('encrypted', !this.model.get('encrypted'));\n        },\n        \n        getParticipantsList: function () {\n            let list = [];\n            this.contact.participants.each((participant) => {\n                list.push(participant.get('nickname') || participant.get('jid') || participant.get('id'));\n            });\n            return list.join(', ');\n        },\n\n        onChangedText: function () {\n            let current_height = this.$el.height();\n            if (current_height !== this.bottom_height) {\n                this.bottom_height = current_height;\n                this.view.scrolled_to_bottom = this.view.isScrolledToBottom();\n            }\n            clearTimeout(this._timeout_textchange);\n            this._timeout_textchange = setTimeout(() => {\n                this.updateOpenGraphReference(this.quill.getText())\n            }, 500);\n        },\n\n        updateMentionsList: function (mention_text) {\n            mention_text = (mention_text || \"\").toLowerCase();\n            this.contact.searchByParticipants(mention_text, (participants) => {\n                if (participants.length || xabber.getString(\"chat_bottom__mentions_list__item_everyone\").toLowerCase().indexOf(mention_text) > -1 || mention_text === \"*\" || 'all'.indexOf(mention_text) > -1 || 'все'.indexOf(mention_text) > -1) {\n                    this.$('.mentions-list').html(\"\").show().perfectScrollbar({theme: 'item-list'});\n                    this.$('.mentions-list')[0].scrollTop = 0;\n                    participants.forEach((participant) => {\n                        let attrs = _.clone(participant.attributes);\n                        if (!attrs.id)\n                            return;\n                        attrs.nickname = attrs.nickname ? Strophe.xmlescape(attrs.nickname) : attrs.id;\n                        let mention_item = $(templates.group_chats.mention_item(attrs));\n                        mention_item.find('.circle-avatar').setAvatar(participant.get('b64_avatar') || utils.images.getDefaultAvatar(participant.get('nickname') || participant.get('jid') || participant.get('id')), this.mention_avatar_size);\n                        mention_item.find('.nickname').text().replace(mention_text, mention_text.bold());\n                        this.$('.mentions-list').append(mention_item);\n                    });\n                    let mention_all = $(templates.group_chats.mention_item({jid: \"\", nickname: xabber.getString(\"chat_bottom__mentions_list__item_everyone\"), id: \"\"}));\n                    mention_all.find('.circle-avatar').setAvatar(this.contact.cached_image, this.mention_avatar_size);\n                    mention_all.find('.one-line.jid').text(this.getParticipantsList());\n                    this.$('.mentions-list').append(mention_all);\n                    this.$('.mentions-list').children('.mention-item').first().addClass('active');\n                } else\n                    this.$('.mentions-list').html(\"\").hide();\n            });\n        },\n\n        onMentionButtonClick: function () {\n            if (this.$('.ql-mention').hasClass('ql-active')){\n                this.$('.ql-mention').prop('disabled', false);\n                this.$('.ql-mention').click();\n                this.$('.ql-mention').prop('disabled', true);\n\n                return;\n            }\n            let selection = this.quill.getSelection() ? this.quill.getSelection().index : (this.quill.getLength() - 1);\n            this.quill.insertText(selection, ' @ ', 'user')\n            this.quill.setSelection(selection + 2, 0)\n            let mention_text = \"\";\n            if (this.contact.participants.length && this.contact.participants.version > 0 && (this.contact.get('group_info') && this.contact.participants && this.contact.get('group_info').members_num == this.contact.participants.length)) {\n                this.updateMentionsList(mention_text);\n            } else {\n                this.contact.participants.participantsRequest({version: 0}, () => {\n                    this.updateMentionsList(mention_text);\n                });\n            }\n\n        },\n\n        inputMention: function (ev) {\n            ev && ev.preventDefault();\n            let $rich_textarea = this.$('.rich-textarea'),\n                $participant_item = $(ev.target).closest('.mention-item'),\n                nickname = $participant_item.data('nickname'),\n                id = $participant_item.data('id') || \"\",\n                jid = !this.contact.get('incognito_chat') && $participant_item.data('jid') || \"\",\n                text = $rich_textarea.getTextFromRichTextarea().replace(/\\n$/, \"\"),\n                caret_position = this.quill.selection.lastRange && this.quill.selection.lastRange.index,\n                mention_at_regexp = /(^|\\s)@(\\w+)?/g,\n                mention_plus_regexp = /(^|\\s)[+](\\w+)?/g,\n                to_caret_text = Array.from(text).slice(0, caret_position).join(\"\").replaceEmoji(),\n                mentions_at = to_caret_text && Array.from(to_caret_text.matchAll(mention_at_regexp)) || [],\n                mentions_plus = to_caret_text && Array.from(to_caret_text.matchAll(mention_plus_regexp)) || [],\n                at_position = mentions_at.length ? mentions_at.slice(-1)[0].index : -1,\n                plus_position = mentions_plus.length ? mentions_plus.slice(-1)[0].index : -1,\n                mention_position = Math.max(at_position, plus_position),\n                mention_text = Array.from(to_caret_text).slice(mention_position, caret_position).join(\"\");\n            (mention_text.length && mention_text[0].match(/\\s/)) && mention_position++;\n            mention_text = mention_text.replace(/\\s?(@|[+])/, \"\");\n            this.$('.mentions-list').hide();\n            this.quill.deleteText(mention_position, ++mention_text.length);\n            if (!nickname.length) {\n                if (id.length)\n                    nickname = id;\n                else\n                    return;\n            }\n            this.insertMention({jid: jid, id: id, nickname: nickname, position: mention_position});\n            this.focusOnInput();\n        },\n\n        insertMention: function (options) {\n            if (!options)\n                return;\n            let id = options.id, jid = options.jid, nickname = options.nickname,\n                is_me = !id && !jid || this.account.get('jid') === jid || this.contact.my_info && this.contact.my_info.get('id') === id,\n                attrs = {jid: jid, id: id, nickname: Strophe.xmlescape(nickname), is_me: is_me},\n                position = options.position;\n            this.quill.insertEmbed(position, 'mention', JSON.stringify(attrs));\n            this.quill.pasteHTML(position + nickname.length, '<text> </text>');\n            this.quill.setSelection(position + nickname.length + 1, 0);\n        },\n\n        showAccountSettings: function () {\n            if (this.contact.get('group_chat')) {\n                if (this.contact.my_info && this.contact.my_rights) {\n                    this.contact.showDetailsRight('all-chats', {type: 'participant'});\n                    this.contact.details_view_right.participants.participant_properties_panel.open(this.contact.my_info, this.contact.my_rights);\n                } else\n                    this.contact.getMyInfo(() => {\n                        this.contact.showDetailsRight('all-chats', {type: 'participant'});\n                        this.contact.details_view_right.participants.participant_properties_panel.open(this.contact.my_info, this.contact.my_rights);\n                    });\n            } else {\n                this.account.showSettings();\n            }\n        },\n\n        keyUp: function (ev) {\n            let $rich_textarea = $(ev.target).closest('.rich-textarea'),\n                text = $rich_textarea.getTextFromRichTextarea().replace(/\\n$/, \"\");\n            if (text) {\n                this.click_counter = 0;\n                this.setDefaultPlaceholder();\n            }\n            if (ev.keyCode === constants.KEY_ARROW_UP) {\n                if (!text) {\n                    let $msg = this.view.$(`.chat-message[data-from=\"${this.account.get('jid')}\"]`).last();\n                    (!$msg.length && this.contact.participants) && ($msg = this.view.$(`.chat-message[data-from=\"${this.contact.participants.find(m => m.get('jid') === this.account.get('jid')).get('id')}\"]`).last());\n                    let edit_msg = this.messages_arr.get($msg.data('uniqueid'));\n                    this.edit_message = edit_msg;\n                    this.setEditedMessageAttachments(edit_msg);\n                    this.setEditedMessage(edit_msg);\n                }\n            }\n            if ((!text || text == \"\\n\") && !this.edit_message && !(this.attached_files && this.attached_files.length) && !(this.link_references && this.link_references.length))\n                this.displayMicrophone();\n            else\n                this.displaySend();\n            if (ev.keyCode === constants.KEY_ESCAPE && !xabber.body.screen.get('right_contact') && !this.edit_message) {\n                ev.preventDefault();\n                this.unsetForwardedMessages();\n                if (this.$('.message-reference-preview-container').children('div.message-reference-preview-attached').length > 0) {\n                    let $elem = this.$('.message-reference-preview-container').children('div.message-reference-preview-attached').last();\n                    if ($elem.hasClass('link-message-reference')){\n                        let url = $elem.attr('data-original-url');\n                        if (url) {\n                            $elem.remove();\n                            this.removeLinkReferenceByUrl(url);\n                        }\n                    } else {\n                        let id = $elem.attr('data-id');\n                        if (id) {\n                            $elem.remove();\n                            this.removeFileSnippetById(id);\n                        }\n                    }\n\n                }\n                this.unsetForwardedMessages();\n            } else {\n                if (ev.keyCode === constants.KEY_ARROW_UP || ev.keyCode === constants.KEY_ARROW_DOWN) {\n                    return;\n                }\n                if ((ev.keyCode === constants.KEY_ARROW_LEFT || ev.keyCode === constants.KEY_ARROW_RIGHT) && this.$('.mentions-list').css('display') !== 'none') {\n                    this.$('.mentions-list').hide();\n                    return;\n                }\n                if ((ev.keyCode === constants.KEY_BACKSPACE || ev.keyCode === constants.KEY_DELETE) && !this.edit_message && !(this.attached_files && this.attached_files.length) && !(this.link_references && this.link_references.length)) {\n                    if (!text || text == \"\\n\") {\n                        if (this.$('.fwd-messages-preview').hasClass('hidden'))\n                            this.displayMicrophone();\n                        else\n                            this.displaySend();\n                        $rich_textarea.flushRichTextarea();\n                    }\n                }\n                if (ev.keyCode === constants.KEY_SPACE) {\n                    let caret_position = this.quill.selection.lastRange && this.quill.selection.lastRange.index,\n                        to_caret_text = Array.from(text).slice(0, caret_position).join(\"\").replaceEmoji();\n                    if (to_caret_text[caret_position - 2] && to_caret_text[caret_position - 2].match(/@|[+]/)) {\n                        this.$('.mentions-list').hide();\n                        return;\n                    }\n                }\n                if (this.model.get('group_chat')) {\n                    let caret_position = this.quill.selection.lastRange && this.quill.selection.lastRange.index,\n                        mention_at_regexp = /(^|\\s)@(\\w+)?/g,\n                        mention_plus_regexp = /(^|\\s)[+](\\w+)?/g,\n                        to_caret_text = Array.from(text).slice(0, caret_position).join(\"\").replace(/\\n$/, \"\").replaceEmoji(),\n                        mentions_at = Array.from(to_caret_text.matchAll(mention_at_regexp)),\n                        mentions_plus = Array.from(to_caret_text.matchAll(mention_plus_regexp)),\n                        at_position = mentions_at.length ? mentions_at.slice(-1)[0].index : -1,\n                        plus_position = mentions_plus.length ? mentions_plus.slice(-1)[0].index : -1,\n                        mention_position = Math.max(at_position, plus_position);\n                    if (this.quill.selection.lastRange && this.quill.getLeaf(this.quill.selection.lastRange.index)[0].parent.domNode.tagName.toLowerCase() === 'mention') {\n                        this.$('.mentions-list').hide();\n                        return;\n                    }\n                    if (!(caret_position > -1) || mention_position === -1) {\n                        this.$('.mentions-list').hide();\n                    }\n                    if (mention_position > -1) {\n                        let mention_text = Array.from(to_caret_text).slice(mention_position, caret_position).join(\"\").replace(/\\s?(@|[+])/, \"\");\n                            if (this.contact.participants.length && this.contact.participants.version > 0 && (this.contact.get('group_info') && this.contact.participants && this.contact.get('group_info').members_num == this.contact.participants.length)) {\n                                this.updateMentionsList(mention_text);\n                            } else {\n                                this.contact.participants.participantsRequest({version: 0}, () => {\n                                    this.updateMentionsList(mention_text);\n                                });\n                            }\n                    }\n                    else\n                        this.$('.mentions-list').hide();\n                }\n            }\n            $rich_textarea.updateRichTextarea();\n            this.focusOnInput();\n            xabber.chat_body.updateHeight();\n        },\n\n        onCut: function () {\n            if (this.$('.fwd-messages-preview').hasClass('hidden'))\n                this.displayMicrophone();\n            else {\n                this.displaySend();\n            }\n        },\n\n        onPaste: function (ev) {\n            ev.preventDefault();\n            let $rich_textarea = $(ev.target),\n                clipboard_data = ev.clipboardData;\n            if (clipboard_data) {\n                if (clipboard_data.files.length > 0) {\n                    let image_from_clipboard = clipboard_data.files[clipboard_data.files.length - 1],\n                        blob_image = window.URL.createObjectURL(new Blob([image_from_clipboard])),\n                        options = { blob_image_from_clipboard: blob_image};\n                    image_from_clipboard.name = 'clipboard.png';\n                    this.view.addFileMessage([image_from_clipboard]);\n                    this.focusOnInput();\n                }\n                else if (clipboard_data.items.length > 0) {\n                    let image_from_clipboard = clipboard_data.items[clipboard_data.items.length - 1];\n                    if (image_from_clipboard.kind === 'file') {\n                        let blob = image_from_clipboard.getAsFile(),\n                            reader = new FileReader(), deferred = new $.Deferred();\n                        reader.onload = function(event){\n                            let options = { blob_image_from_clipboard: event.target.result};\n                            deferred.resolve();\n                            this.focusOnInput();\n                        };\n                        deferred.done(() => {\n                            blob.name = 'clipboard.png';\n                            this.view.addFileMessage([blob]);\n                        });\n                        reader.readAsDataURL(blob);\n                    }\n                    else {\n                        let text = _.escape(clipboard_data.getData('text')),\n                            arr_text = Array.from(text);\n                        arr_text.forEach((item, idx) => {\n                            if (item == '\\n')\n                                arr_text.splice(idx, 1, '</p><p>');\n                        });\n                        text = \"<p>\" + arr_text.join(\"\").emojify({tag_name: 'span'}) + \"</p>\";\n                        window.document.execCommand('insertHTML', false, text);\n                    }\n                }\n                else {\n                    let text = _.escape(clipboard_data.getData('text')),\n                        arr_text = Array.from(text);\n                    arr_text.forEach((item, idx) => {\n                        if (item == '\\n')\n                            arr_text.splice(idx, 1, '</p><p>');\n                        if (item == ' ')\n                            arr_text.splice(idx, 1, '&nbsp');\n                    });\n                    text = \"<p>\" + arr_text.join(\"\").emojify({tag_name: 'span'}) + \"</p>\";\n                    window.document.execCommand('insertHTML', false, text);\n                }\n            }\n            if ($rich_textarea.getTextFromRichTextarea().replace(/\\n$/, \"\") && !this.view.chat_state && !this.view.edit_message && xabber.settings.typing_notifications)\n                this.view.sendChatState('composing');\n            this.focusOnInput();\n            xabber.chat_body.updateHeight();\n        },\n\n        onFileInputChanged: function (ev) {\n            let target = ev.target,\n                files = [];\n            for (let i = 0; i < target.files.length; i++) {\n                files.push(target.files[i]);\n            }\n\n            if (files && files.length) {\n                this.view.addFileMessage(files);\n                $(target).val('');\n            }\n        },\n\n        updateOpenGraphReference: function (text) {\n            if (!(this.account.get('gallery_token') && this.account.get('gallery_url')))\n                return;\n            let url_regexp = /(((ftp|http|https):\\/\\/)|(www\\.))(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/g,\n                list = text && text.match(url_regexp);\n            list = _.difference(list, this.link_reference_exempted)\n            list = _.difference(list, this.currently_loaded_link_references)\n            if (list && list.length){\n                this.stopped_loading_link_reference = false;\n                this.$('.preview-preloader-container').removeClass('hidden');\n                let request_count = 0;\n                this.link_reference_request_timestamp = Date.now();\n                let request_timestamp = this.link_reference_request_timestamp;\n                list.forEach((item, idx) => {\n                    this.account.getOpenGraphData(item, (res) => {\n                        if (this.stopped_loading_link_reference || !(request_timestamp === this.link_reference_request_timestamp))\n                            return;\n                        if (this.currently_loaded_link_references.includes(item)){\n                            request_count++;\n                            if (request_count === list.length)\n                                this.$('.preview-preloader-container').addClass('hidden');\n                            return;\n                        }\n                        let dfd = new $.Deferred();\n                        dfd.done(() => {\n                            request_count++;\n                            this.displaySend();\n                            this.$('.message-reference-preview').removeClass('hidden');\n                            if (request_count === list.length)\n                                this.$('.preview-preloader-container').addClass('hidden');\n                            res.original_text = item\n                            this.$('.message-reference-preview-container').append($(templates.messages.link_reference({\n                                item: res,\n                                domain: res.url ? utils.getDomainFromUrl(res.url) : res.site_name,\n                                url: null\n                            })));\n                            this.$('.attached-image').magnificPopup({\n                                type: 'image',\n                                closeOnContentClick: true,\n                                fixedContentPos: true,\n                                mainClass: 'mfp-no-margins mfp-with-zoom',\n                                image: {\n                                    verticalFit: true,\n                                    titleSrc: function(item) {\n                                        return '<a class=\"image-source-link\" href=\"'+item.el.attr('src')+'\" target=\"_blank\">' + item.name + '</a>';\n                                    }\n                                },\n                                zoom: {\n                                    enabled: true,\n                                    duration: 300\n                                }\n                            });\n                            this.link_references = this.link_references.concat(res);\n                            this.currently_loaded_link_references = this.currently_loaded_link_references.concat([item]);\n                            xabber.chat_body.updateHeight();\n                            this.scrollToBottom();\n                        });\n                        if ((res.image_height && res.image_width) || !res.image){\n                            dfd.resolve()\n                        } else {\n                            let img = new Image();\n                            img.onload = (image) => {\n                                res.image_height = img.height;\n                                res.image_width = img.width;\n                                dfd.resolve()\n                            };\n                            img.onerror = img.onabort = (image) => {\n                                res.image = undefined;\n                                dfd.resolve()\n                            };\n                            img.src = res.image;\n                        }\n                    }, (err) => {\n                        this.link_reference_exempted = this.link_reference_exempted.concat([item]);\n                        request_count++;\n                        if (request_count === list.length)\n                            this.$('.preview-preloader-container').addClass('hidden');\n                    })\n\n                });\n            }\n        },\n\n        removeAttachments: function () {\n            this.removeAllFileSnippets();\n            this.removeAllLinkReferences();\n        },\n\n        stopLoadingLinkReference: function () {\n            this.$('.preview-preloader-container').addClass('hidden');\n            this.stopped_loading_link_reference = true;\n        },\n\n        removeLinkReference: function (ev) {\n            let $elem = $(ev.target).closest('.link-message-reference'),\n                url = $elem.attr('data-original-url');\n            $elem.remove();\n            this.removeLinkReferenceByUrl(url);\n        },\n\n        removeLinkReferenceByUrl: function (url) {\n            if (!(this.$('.message-reference-preview-container').children('div.message-reference-preview-attached').length > 0))\n                this.$('.message-reference-preview').addClass('hidden');\n            this.link_references = this.link_references.filter(item => item.original_text != url);\n            this.currently_loaded_link_references = this.currently_loaded_link_references.filter(item => item != url);\n            this.link_reference_exempted = this.link_reference_exempted.concat([url]);\n            xabber.chat_body.updateHeight();\n            this.scrollToBottom();\n        },\n\n        removeAllLinkReferences: function () {\n            this.stopLoadingLinkReference();\n            this.$('.message-reference-preview-container .link-message-reference').remove();\n            if (!(this.$('.message-reference-preview-container').children('div.message-reference-preview-attached').length > 0))\n                this.$('.message-reference-preview').addClass('hidden');\n            this.link_references = [];//\n            this.currently_loaded_link_references = [];//\n            xabber.chat_body.updateHeight();\n            this.scrollToBottom();\n        },\n\n        addFileSnippets: function (files) {\n            if (files && (this.attached_files.length + files.length) > 10){\n                utils.dialogs.error(xabber.getString(\"too_many_files_at_once\"));\n                return;\n            }\n            if (this.edit_message)\n                return;\n            files && files.length && this.$('.message-reference-preview').removeClass('hidden');\n            files && files.length && this.displaySend();\n            files.forEach((file) => {\n                let id = uuid();\n                file.uid = id;\n                this.$('.message-reference-preview-container').append($(templates.messages.attached_file({\n                    file: file,\n                    uid: id,\n                    blob: utils.isImageType(file.type) ? file.key ? file.image_prev.src : window.URL.createObjectURL(new Blob([file])) : null,\n                    filesize: utils.pretty_size(file.size),\n                    typeicon: utils.file_type_icon(file.type),\n                    filetype: utils.pretty_file_type(file.type),\n                })));\n                file.image_prev && (delete file.image_prev);\n                this.attached_files = this.attached_files.concat([file]);\n                xabber.chat_body.updateHeight();\n                this.scrollToBottom();\n            });\n            files && files.length && this.$('.attached-image').magnificPopup({\n                type: 'image',\n                closeOnContentClick: true,\n                fixedContentPos: true,\n                mainClass: 'mfp-no-margins mfp-with-zoom',\n                image: {\n                    verticalFit: true,\n                    titleSrc: function(item) {\n                        return '<a class=\"image-source-link\" href=\"'+item.el.attr('src')+'\" target=\"_blank\">' + item.name + '</a>';\n                    }\n                },\n                zoom: {\n                    enabled: true,\n                    duration: 300\n                }\n            });\n        },\n\n        removeFileSnippet: function (ev) {\n            let $elem = $(ev.target).closest('.message-reference-preview-item-file'),\n                id = $elem.attr('data-id');\n            $elem.remove();\n            this.removeFileSnippetById(id);\n        },\n\n        removeFileSnippetById: function (id) {\n            if (!(this.$('.message-reference-preview-container').children('div.message-reference-preview-attached').length > 0))\n                this.$('.message-reference-preview').addClass('hidden');\n            this.attached_files = this.attached_files.filter(item => item.uid != id);\n            xabber.chat_body.updateHeight();\n            this.scrollToBottom();\n        },\n\n        removeAllFileSnippets: function (ev) {\n            this.$('.message-reference-preview .message-reference-preview-item-file').remove();\n            if (!(this.$('.message-reference-preview-container').children('div.message-reference-preview-attached').length > 0))\n                this.$('.message-reference-preview').addClass('hidden');\n            this.attached_files = [];\n            xabber.chat_body.updateHeight();\n            this.scrollToBottom();\n        },\n\n        setEditedMessageAttachments: function (edit_msg, is_upload) {\n            !is_upload && this.$('.attach-file input').attr('disabled', true);\n            this.removeAllFileSnippets();\n            this.removeAllLinkReferences();\n            let files = edit_msg.get('files') || [],\n                images = edit_msg.get('images') || [],\n                videos = edit_msg.get('videos') || [],\n                link_references = edit_msg.get('link_references') || [];\n            files = files.concat(images).concat(videos);\n            if ((link_references && link_references.length) || (files && files.length)) {\n                this.$('.message-reference-preview').removeClass('hidden');\n                this.displaySend();\n            }\n            link_references.forEach((item) => {\n                this.link_references = this.link_references.concat([item]);\n                this.currently_loaded_link_references = this.currently_loaded_link_references.concat(item.original_text);\n                this.$('.message-reference-preview-container').prepend($(templates.messages.link_reference({\n                    item: item,\n                    domain: item.url ? utils.getDomainFromUrl(item.url) : item.site_name,\n                    url: null\n                })));\n                xabber.chat_body.updateHeight();\n            });\n            files.forEach((file) => {\n                if (!file)\n                    return;\n                let id = uuid();\n                file.uid = id;\n                this.attached_files = this.attached_files.concat([file]);\n                if (is_upload){\n                    this.$('.message-reference-preview-container').append($(templates.messages.attached_file({\n                        file: file,\n                        uid: id,\n                        blob: utils.isImageType(file.type) ? file.key ? file.image_prev.src : window.URL.createObjectURL(new Blob([file])) : null,\n                        filesize: utils.pretty_size(file.size),\n                        typeicon: utils.file_type_icon(file.type),\n                        filetype: utils.pretty_file_type(file.type),\n                    })));\n                } else{\n                    this.$('.message-reference-preview-container').append($(templates.messages.attached_file({\n                        file: file,\n                        uid: id,\n                        blob: file.sources.length && file.sources[0] && utils.isImageType(file.type) ? file.sources[0] : null,\n                        filesize: utils.pretty_size(file.size),\n                        typeicon: utils.file_type_icon(file.type),\n                        filetype: utils.pretty_file_type(file.type),\n                    })));\n                }\n                xabber.chat_body.updateHeight();\n            });\n            ((link_references && link_references.length) || (files && files.length)) && this.$('.attached-image').magnificPopup({\n                type: 'image',\n                closeOnContentClick: true,\n                fixedContentPos: true,\n                mainClass: 'mfp-no-margins mfp-with-zoom',\n                image: {\n                    verticalFit: true,\n                    titleSrc: function(item) {\n                        return '<a class=\"image-source-link\" href=\"'+item.el.attr('src')+'\" target=\"_blank\">' + item.name + '</a>';\n                    }\n                },\n                zoom: {\n                    enabled: true,\n                    duration: 300\n                }\n            });\n        },\n\n        showLocationPopup: function (ev) {\n            if (!xabber.settings.mapping_service)\n                return;\n            window.popup_coordinates = undefined;\n            window.location_name = undefined;\n            new xabber.ChatLocationView({content: this}).show(ev);\n        },\n\n        showMediaPopup: function (ev) {\n            if (this.edit_message)\n                return;\n            if (this.account.get('gallery_token') && this.account.get('gallery_url')) {\n                let media_view = new xabber.SendMediaView();\n                media_view.render({parent: this, model: this.account});\n            }\n        },\n\n        stopWritingVoiceMessage: function (ev) {\n            let $bottom_panel = this.$('.message-input-panel');\n            if ($bottom_panel.find('.recording').length > 0) {\n                $bottom_panel.find('.recording').removeClass('recording');\n                return;\n            }\n        },\n\n        writeVoiceMessage: function (ev) {\n            let $elem = $(ev.target);\n            if ($elem.hasClass('recording'))\n                $elem.removeClass('recording');\n            else {\n                $elem.addClass('recording ground-color-50');\n                if (!this.model.get('recording_voice_message'))\n                    this.initAudio();\n            }\n        },\n\n        initAudio: function() {\n            navigator.getUserMedia = (navigator.mozGetUserMedia || navigator.msGetUserMedia || navigator.webkitGetUserMedia || navigator.getUserMedia);\n            if (navigator.getUserMedia) {\n                this.model.set('recording_voice_message', true)\n                let constraints = { audio: true, channelCount: 1 },\n                    chunks = [],\n                    $mic = this.$('.send-area .attach-voice-message'),\n                    onSuccess = (stream) => {\n                    if (!$mic.is(\":hover\")) {\n                        $mic.removeClass('recording ground-color-50');\n                        this.model.set('recording_voice_message', false)\n                        return;\n                    }\n                    let mediaRecorder = new MediaRecorder(stream),\n                        timer = 1, start_time, end_time,\n                        mic_hover = true;\n                        mediaRecorder.onstart = () => {\n                            if (xabber.settings.typing_notifications) {\n                                this.view.sendChatState('composing', 'voice');\n                                this._chatstate_send_timeout = setInterval(() => {\n                                    this.view.sendChatState('composing', 'voice');\n                                }, constants.CHATSTATE_INTERVAL_COMPOSING_AUDIO);\n                            }\n                            start_time = moment.now();\n                            let $bottom_panel = this.$('.message-input-panel'),\n                                $timer_elem = this.$('.input-voice-message .timer'),\n                                $status_msg = this.$('.input-voice-message .voice-msg-status'),\n                                $voice_visualizer = this.$('.input-voice-message .voice-visualizer');\n                            $timer_elem.text('0:00');\n                            $status_msg.css('color', '#9E9E9E').text(xabber.getString(\"chat_bottom__placeholder__cancel_write_voice\"));\n                            $bottom_panel.addClass('voice-message-recording');\n\n                            let timerId = setInterval(() => {\n                                    if ($mic.hasClass('recording') && (timer < constants.VOICE_MSG_TIME)) {\n                                        if (timer%1 == 0)\n                                            $timer_elem.text(utils.pretty_duration(timer));\n                                        timer = (timer*10 + 2)/10;\n                                        mic_hover = $bottom_panel.is(\":hover\");\n                                        if (!mic_hover)\n                                            $status_msg.css('color', '#D32F2F').text(xabber.getString(\"chat_bottom__placeholder__cancel_write_voice_short\"));\n                                        else\n                                            $status_msg.css('color', '#9E9E9E').text(xabber.getString(\"chat_bottom__placeholder__cancel_write_voice\"));\n                                    }\n                                    else\n                                    {\n                                        mic_hover = $bottom_panel.is(\":hover\");\n                                        mediaRecorder.stop();\n                                        $mic.removeClass('recording ground-color-50');\n                                        $bottom_panel.removeClass('voice-message-recording');\n                                        this.model.set('recording_voice_message', false)\n                                        clearInterval(timerId);\n                                    }\n                                }, 200),\n                                flag = false,\n                                timerIdDot = setInterval(() => {\n                                    if ($mic.hasClass('recording')) {\n                                        if (flag)\n                                            $voice_visualizer.css('background-color', '#FFF');\n                                        else\n                                            $voice_visualizer.css('background-color', '#D32F2F');\n                                        flag = !flag;\n                                    }\n                                    else\n                                        clearInterval(timerIdDot);\n                                }, 500);\n                        };\n\n                        mediaRecorder.start();\n\n                        mediaRecorder.onstop = () => {\n                        clearInterval(this._chatstate_send_timeout);\n                        (xabber.settings.typing_notifications) && this.view.sendChatState('paused');\n                        end_time = moment.now();\n                        if (mic_hover && ((end_time - start_time)/1000 >= 1.5)) {\n                            let audio_name = (\"voice message \" + moment().format('YYYY-MM-DD HH:mm:ss') + '.ogg'), audio_type = 'audio/ogg; codecs=opus',\n                                blob = new Blob(chunks, { 'type' : audio_type}),\n                                file = new File([blob], audio_name, {\n                                    type: audio_type,\n                                });\n                            file.voice = true;\n                            file.duration = Math.round((end_time - start_time)/1000);\n                            this.view.addFileMessage([file], true);\n                        }\n                        chunks = [];\n                    };\n\n                    mediaRecorder.ondataavailable = (e) => {\n                        chunks.push(e.data);\n                        stream.getTracks().forEach(track => track.stop() );\n                    };\n                };\n\n                let onError = (error) => {\n                    console.log(xabber.getString(\"file_upload__error\", [error]));\n                    $mic.removeClass('recording ground-color-50');\n                };\n\n                window.navigator.getUserMedia(constraints, onSuccess, onError);\n            }\n        },\n\n        typeEmoticon: function (emoji) {\n            if (typeof emoji == 'number')\n                emoji = Number(emoji).toString();\n            let caret_idx = -1;\n            if (this.quill.selection.lastRange)\n                caret_idx = this.quill.selection.lastRange.index;\n            else if (this.quill.selection.savedRange)\n                caret_idx = this.quill.selection.savedRange.index;\n            this.quill.focus();\n            if (!this.edit_message)\n                this.displaySend();\n            (!this.view.chat_state && xabber.settings.typing_notifications) && this.view.sendChatState('composing');\n            this.quill.insertEmbed(caret_idx, 'emoji', emoji);\n            if (this.quill.getFormat(caret_idx, 1).mention) {\n                this.quill.formatText(caret_idx, 1, 'mention', false);\n            }\n            this.quill.setSelection(caret_idx + 1);\n            xabber.chat_body.updateHeight();\n        },\n\n        renderLastEmoticons: function () {\n            let cached_last_emoji = this.account.chat_settings.getLastEmoji(),\n                $last_emoticons = this.$('.last-emoticons').empty(), emoji;\n            if (cached_last_emoji.length < 7) {\n                for (let idx = 0; idx < 7; idx++) {\n                    emoji = Emoji.getByIndex(idx);\n                    this.account.chat_settings.updateLastEmoji(emoji);\n                }\n            }\n            cached_last_emoji = this.account.chat_settings.getLastEmoji();\n            for (let idx = 0; idx < 7; idx++) {\n                $('<div class=\"emoji-wrap\"/>').html(\n                    cached_last_emoji[idx] && cached_last_emoji[idx].emojify({tag_name: 'div', emoji_size: 20})\n                ).appendTo($last_emoticons);\n            }\n            $last_emoticons.find('.emoji-wrap').mousedown((ev) => {\n                if (ev && ev.preventDefault) { ev.preventDefault(); }\n                if (ev.button) {\n                    return;\n                }\n                let $target = $(ev.target).closest('.emoji-wrap').find('.emoji');\n                this.typeEmoticon($target.data('emoji'));\n            });\n        },\n\n        submit: function (ev) {\n            let $rich_textarea = this.$('.input-message .rich-textarea'),\n                mentions = [],\n                markup_references = [],\n                blockquotes = [],\n                link_references = this.link_references,\n                attached_files = this.attached_files,\n                text = $rich_textarea.getTextFromRichTextarea();\n            this.$('.mentions-list').html(\"\").hide();\n            $rich_textarea.find('.emoji').each((idx, emoji_item) => {\n                let emoji = emoji_item.innerText;\n                this.account.chat_settings.updateLastEmoji(emoji);\n            });\n            let content_concat = [];\n            if (text.length >= constants.STANZA_MAX_SIZE) {\n                utils.dialogs.error(xabber.getString(\"message__error_big_stanza\"));\n                $rich_textarea.flushRichTextarea();\n                return;\n            }\n            if (text.length) {\n                this.quill.getContents().forEach((content) => {\n                    if (content.attributes) {\n                        let content_attrs = [],\n                            start_idx = content_concat.length,\n                            end_idx = start_idx + ((content.insert && content.insert.emoji) ? 1 : _.escape(content.insert).length);\n                        for (let attr in content.attributes)\n                            (attr !== 'alt' && attr !== 'blockquote') && content_attrs.push(attr);\n                        if (content_attrs.indexOf('mention') > -1) {\n                            let mention_idx = content_attrs.indexOf('mention'),\n                                is_gc = this.contact.get('group_chat'),\n                                target = $($rich_textarea.find('mention')[mentions.length]).attr('data-target');\n                            content_attrs.splice(mention_idx, mention_idx + 1);\n                            target = is_gc ? ('xmpp:' + this.contact.get('jid') + target) : ('xmpp:' + target);\n                            mentions.push({\n                                start: start_idx,\n                                end: end_idx,\n                                target: target,\n                                is_gc: is_gc\n                            });\n                        }\n                        if (content.attributes.blockquote) {\n                            if (content_concat.length) {\n                                Array.from(content.insert).forEach((ins) => {\n                                    let quote_start_idx = (content_concat.lastIndexOf('\\n') < 0) ? 0 : (content_concat.lastIndexOf('\\n') + 1),\n                                        quote_end_idx = content_concat.length;\n                                    blockquotes.push({\n                                        marker: constants.QUOTE_MARKER,\n                                        start: quote_start_idx,\n                                        end: quote_end_idx + constants.QUOTE_MARKER.length\n                                    });\n                                    text = Array.from(_.escape(text));\n\n                                    if (quote_start_idx === quote_end_idx) {\n                                        text[quote_start_idx - 1] += constants.QUOTE_MARKER;\n                                        content_concat[quote_start_idx] = constants.QUOTE_MARKER;\n                                    }\n                                    else {\n                                        text[quote_start_idx] = constants.QUOTE_MARKER + text[quote_start_idx];\n                                        content_concat[quote_start_idx] = constants.QUOTE_MARKER + content_concat[quote_start_idx];\n                                    }\n                                    (quote_end_idx > text.length) && (quote_end_idx = text.length);\n                                    text[quote_end_idx - 1] += '\\n';\n\n                                    text = _.unescape(text.join(\"\"));\n                                    content_concat = Array.from(content_concat.join(\"\"));\n\n                                    markup_references.forEach((markup_ref) => {\n                                        if (markup_ref.start >= quote_start_idx) {\n                                            markup_ref.start += constants.QUOTE_MARKER.length;\n                                            markup_ref.end += constants.QUOTE_MARKER.length;\n                                        }\n                                    });\n\n                                    content_concat = content_concat.concat(Array.from(_.escape(ins)));\n                                })\n                            }\n                        }\n                        content_attrs.length && markup_references.push({\n                            start: start_idx,\n                            end: end_idx,\n                            markup: content_attrs\n                        });\n                    }\n                    if (content.insert && content.insert.emoji) {\n                        content_concat = content_concat.concat(Array.from($(content.insert.emoji).data('emoji')));\n                    }\n                    else if (content.attributes && content.attributes.blockquote) {\n                    }\n                    else\n                        content_concat = content_concat.concat(Array.from(_.escape(content.insert)));\n                });\n            }\n            let start_length = text.length;\n            text = text.trimStart();\n            if (start_length > text.length) {\n                let delta = start_length - text.length;\n                mentions.forEach((mention) => {\n                    mention.start -= delta;\n                    mention.end -= delta;\n                });\n                markup_references.forEach((markup_reference) => {\n                    markup_reference.start -= delta;\n                    markup_reference.end -= delta;\n                });\n                blockquotes.forEach((blockquote) => {\n                    blockquote.start -= delta;\n                    blockquote.end -= delta;\n                });\n            }\n            if (link_references && link_references.length) {\n                link_references = link_references.filter(item => item.original_text);\n                link_references.forEach((link_reference) => {\n                    if (link_reference && link_reference.original_text) {\n                        link_reference.start = text.indexOf(link_reference.original_text);\n                        if (link_reference.start != -1) {\n                            link_reference.start = 0;\n                            link_reference.end = 0;\n                        }\n                    }\n                });\n            }\n            this.removeAllLinkReferences();\n            this.link_reference_exempted = [];\n            this.removeAllFileSnippets();\n            text = text.trimEnd();\n            $rich_textarea.flushRichTextarea();\n            this.quill.focus();\n            this.displayMicrophone();\n            if (this.edit_message) {\n                this.editMessage(text, {mentions: mentions, markup_references: markup_references, link_references: link_references, attached_files: attached_files, blockquotes: blockquotes});\n                $rich_textarea.placeCaretAtEnd();\n                return;\n            }\n            if (text || this.fwd_messages.length || (attached_files && attached_files.length) || (link_references && link_references.length)) {\n                if (this.model.get('saved') && this.fwd_messages.length && !text)\n                    this.fwd_messages.forEach((message) => {\n                        this.view.onSubmit(\"\", [message]);\n                    });\n                else\n                    this.view.onSubmit(text, this.fwd_messages, {mentions: mentions, markup_references: markup_references, link_references: link_references, attached_files: attached_files, blockquotes: blockquotes});\n            }\n            this.unsetForwardedMessages();\n            xabber.chats_view.clearSearch();\n            if (this.model.messages_view)\n                if (this.model.messages_view.data.get('visible'))\n                    xabber.chats_view.openChat(this.model.item_view, {right_contact_save: true, clear_search: true, screen: xabber.body.screen.get('name')});\n            $rich_textarea.placeCaretAtEnd();\n        },\n\n        setEditedMessage: function (message) {\n            this.click_counter = 0;\n            this.setDefaultPlaceholder();\n            let msg_text = message.get('message') || \"\";\n            this.$('.fwd-messages-preview').showIf(this.edit_message);\n            this.$('.fwd-messages-preview .msg-author').text(xabber.getString(\"edit_message__header\"));\n            this.$('.fwd-messages-preview .msg-text').html(Strophe.xmlescape(msg_text));\n            this.$('.fwd-messages-preview').emojify('.msg-text', {emoji_size: 18});\n            this.displaySend();\n            xabber.chat_body.updateHeight();\n            let markup_body = utils.markupBodyMessage(message, 'mention'),\n                emoji_node = markup_body.emojify({tag_name: 'div'}),\n                arr_text = emoji_node.split('\\n');\n            arr_text.forEach((item, idx) => {\n                if (!item.includes('</blockquote>'))\n                    arr_text[idx] = '<p>' + arr_text[idx] + '</p>';\n            });\n            emoji_node = arr_text.join(\"\");\n            this.quill.setText(\"\");\n            this.quill.root.innerHTML = emoji_node;\n            this.moveCursorToEnd();\n            this.focusOnInput();\n        },\n\n        setRedactedUploadMessage: function (message) {\n            this.click_counter = 0;\n            this.setDefaultPlaceholder();\n            let msg_text = message.get('message') || \"\";\n            this.displaySend();\n            xabber.chat_body.updateHeight();\n            let markup_body = utils.markupBodyMessage(message, 'mention'),\n                emoji_node = markup_body.emojify({tag_name: 'div'}),\n                arr_text = emoji_node.split('\\n');\n            arr_text.forEach((item, idx) => {\n                if (!item.includes('</blockquote>'))\n                    arr_text[idx] = '<p>' + arr_text[idx] + '</p>';\n            });\n            emoji_node = arr_text.join(\"\");\n            this.quill.setText(\"\");\n            this.quill.root.innerHTML = emoji_node;\n            this.moveCursorToEnd();\n            this.focusOnInput();\n        },\n\n        setForwardedMessages: function (messages) {\n            this.fwd_messages = messages || [];\n            this.$('.fwd-messages-preview').showIf(messages.length);\n            if (messages.length) {\n                let msg = messages[0],\n                    msg_author, msg_text, image_preview, $img_html_preview;\n                if (messages.length > 1) {\n                    msg_text = xabber.getQuantityString(\"forwarded_messages_count\", messages.length);\n                } else {\n                    if (msg.get('forwarded_message')) {\n                        msg_text = xabber.getQuantityString(\"forwarded_messages_count\", messages.length);\n                    }\n                    else {\n                        msg_text = (msg.get('message') || msg.get('original_message')).emojify();\n                        let fwd_images = msg.get('images') || [],\n                            fwd_files = msg.get('files') || [],\n                            fwd_locations = msg.get('locations');\n                        msg.get('videos') && msg.get('videos').length && (fwd_files = fwd_files.concat(msg.get('videos')));\n                        if ((fwd_images && fwd_images.length) && (fwd_files && fwd_files.length)) {\n                            msg_text = fwd_images.length + fwd_files.length + ' attachments';\n                        }\n                        else {\n                            if (fwd_images && fwd_images.length) {\n                                if (fwd_images.length > 1) {\n                                    msg_text =xabber.getQuantityString(\"recent_chat__last_message__images\", fwd_images.length);\n                                }\n                                else {\n                                    image_preview = _.clone(msg.get('images')[0]);\n                                    $img_html_preview = this.createPreviewImage(image_preview);\n                                }\n                            }\n                            if (fwd_files && fwd_files.length) {\n                                if (fwd_files.length > 1) {\n                                    msg_text = xabber.getQuantityString(\"recent_chat__last_message__files\", fwd_files.length);\n                                }\n                                else {\n                                    let filesize = fwd_files[0].size;\n                                    msg_text = filesize ? fwd_files[0].name + \",   \" + filesize : fwd_files[0].name;\n                                }\n                            }\n                            if (fwd_locations && fwd_locations.length) {\n                                if (fwd_locations.length > 1) {\n                                    msg_text = xabber.getQuantityString(\"recent_chat__last_message__locations\", fwd_locations.length);\n                                }\n                                else {\n                                    msg_text = xabber.getString(\"recent_chat__last_message__locations_plural_0\");\n                                }\n                            }\n                        }\n                    }\n                }\n                let from_jid = msg.get('from_jid');\n                if (msg.isSenderMe()) {\n                    msg_author = this.account.get('name');\n                } else {\n                    msg_author = (msg.get('user_info') && msg.get('user_info').nickname) || (this.account.contacts.get(from_jid) ? this.account.contacts.get(from_jid).get('name') : from_jid);\n                }\n                this.$('.fwd-messages-preview .msg-author').text(msg_author);\n                if (_.isUndefined(image_preview)) {\n                    this.$('.fwd-messages-preview .msg-text').html(msg_text);\n                }\n                else {\n                    this.$('.fwd-messages-preview .msg-text').html($img_html_preview);\n                }\n            }\n            xabber.chat_body.updateHeight();\n            this.displaySend();\n        },\n\n        onShowMarkupPanel: function (ev) {\n            let $clicked_icon = $(ev.target),\n                is_panel_opened = $clicked_icon.hasClass('opened');\n            this.$('.last-emoticons').showIf(is_panel_opened);\n            this.$('.markup-panel').showIf(!is_panel_opened);\n            $clicked_icon.switchClass('opened', !is_panel_opened);\n        },\n\n        createPreviewImage: function(image) {\n            let imgContent = new Image();\n                imgContent.src = image.sources[0];\n            $(imgContent).addClass('fwd-img-preview');\n            return imgContent;\n        },\n\n        unsetForwardedMessages: function (ev) {\n            ev && ev.preventDefault && ev.preventDefault();\n            let $rich_textarea = this.$('.input-message .rich-textarea');\n            this.fwd_messages = [];\n            if (this.edit_message) {\n                this.removeAllFileSnippets();\n                this.removeAllLinkReferences();\n                this.$('.attach-file input').attr('disabled', false);\n                $rich_textarea.flushRichTextarea();\n            }\n            this.edit_message = null;\n            this.$('.fwd-messages-preview').addClass('hidden');\n            let text = $rich_textarea.getTextFromRichTextarea();\n            if (!text || text == \"\\n\")\n                this.displayMicrophone();\n            else\n                this.displaySend();\n            xabber.chat_body.updateHeight();\n            this.focusOnInput();\n        },\n\n        resetSelectedMessages: function () {\n            this.content_view.$('.chat-message.selected').removeClass('selected');\n            this.manageSelectedMessages();\n        },\n\n        manageSelectedMessages: function () {\n            let $selected_msgs = this.content_view.$('.chat-message.selected'),\n                $input_panel = this.$('.message-input-panel'),\n                $message_actions = this.$('.message-actions-panel');\n                length = $selected_msgs.length;\n            $input_panel.hideIf(this.model.get('blocked') || length);\n            $message_actions.showIf(length);\n            this.model.get('blocked') && this.$('.blocked-msg').hideIf(length);\n            if (length) {\n                this.setButtonsWidth();\n                let my_msg = false;\n                if (length === 1) {\n                    if ($selected_msgs.first().data('from') === this.account.get('jid'))\n                        my_msg = true;\n                    if (this.contact && this.contact.my_info)\n                        if ($selected_msgs.first().data('from') === this.contact.my_info.get('id'))\n                            my_msg = true;\n                    if ($selected_msgs.first().find('.mdi-play').length)\n                        my_msg = false;\n                }\n                $message_actions.find('.pin-message-wrap').showIf(this.model.get('group_chat')).switchClass('non-active', ((length !== 1) && this.model.get('group_chat')));\n                $message_actions.find('.reply-message-wrap').switchClass('non-active', this.model.get('blocked'));\n                $message_actions.find('.edit-message-wrap').switchClass('non-active', !((length === 1) && my_msg) || this.content_view.$('.chat-message.saved-main.selected').length || this.model.get('blocked'));\n                !this.view.$('.chat-notification').hasClass('encryption-warning') && this.view.$('.chat-notification').removeClass('hidden').addClass('msgs-counter').text(xabber.getQuantityString(\"chat_screen__bottom_panel__selected_messages__text\", length));\n            } else {\n                !this.view.$('.chat-notification').hasClass('encryption-warning') && this.view.$('.chat-notification').addClass('hidden').removeClass('msgs-counter').text(\"\");\n                this.focusOnInput();\n            }\n        },\n\n        pinMessage: function () {\n            if (!this.model.get('active'))\n                return;\n            if (this.$('.pin-message-wrap').hasClass('non-active'))\n                return;\n            let $msg = this.content_view.$('.chat-message.selected').first(),\n                pinned_msg = this.messages_arr.get($msg.data('uniqueid')),\n                msg_id = pinned_msg.get('stanza_id');\n            this.resetSelectedMessages();\n            let iq = $iq({type: 'set', to: this.contact.get('full_jid') || this.contact.get('jid')})\n                .c('update', {xmlns: Strophe.NS.GROUP_CHAT})\n                .c('pinned-message').t(msg_id);\n            this.account.sendIQFast(iq, () => {},\n                (error) => {\n                    if ($(error).find('not-allowed').length)\n                        utils.dialogs.error(xabber.getString(\"groupchat_you_have_no_permissions_to_do_it\"));\n                });\n        },\n\n        copyMessages: function () {\n            if (!this.model.get('active'))\n                return;\n            let $msgs = this.content_view.$('.chat-message.selected'),\n                msgs = [];\n            $msgs.each((idx, item) => {\n                let msg = this.messages_arr.get(item.dataset.uniqueid);\n                msg && msgs.push(msg);\n            });\n            this.resetSelectedMessages();\n            this.pushMessagesToClipboard(msgs);\n        },\n\n        editMessage: function (text, text_markups) {\n            let original_body = Array.from(Strophe.xmlescape(this.edit_message.get('original_message') || \"\")),\n                forwarded_body = \"\",\n                mutable_refs = this.edit_message.get('mutable_content'),\n                groupchat_ref = mutable_refs && mutable_refs.find(item => item.type === 'groupchat'),\n                stanza_id = this.edit_message.get('stanza_id'),\n                forward_ref = mutable_refs && mutable_refs.filter(item => item.type === 'forward'),\n                markups = text_markups.markup_references || [],\n                files = text_markups.attached_files || [],\n                link_references = text_markups.link_references || [],\n                blockquotes = text_markups.blockquotes || [],\n                mentions = text_markups.mentions || [],\n                iq = $iq({type: 'set', to: (this.contact && this.contact.get('group_chat')) ? this.contact.get('jid') : this.account.get('jid')}).c('replace', {xmlns: Strophe.NS.REWRITE, id: stanza_id}),\n                $message = $build('message').attrs({xmlns: undefined});\n            forward_ref && forward_ref.forEach((fwd, idx) => {\n                let fwd_msg = this.edit_message.get('forwarded_message')[idx],\n                    gc_length = groupchat_ref && (groupchat_ref.start + groupchat_ref.end);\n                $message.c('reference', {xmlns: Strophe.NS.REFERENCE, begin: (groupchat_ref ? (fwd.start - gc_length) : fwd.start), end: (groupchat_ref ? (fwd.end - gc_length) : fwd.end), type: 'mutable'})\n                    .c('forwarded', {xmlns: Strophe.NS.FORWARD})\n                    .c('delay', {\n                        xmlns: 'urn:xmpp:delay',\n                        stamp: fwd_msg.get('time')\n                    }).up().cnode(fwd_msg.get('xml')).up().up().up();\n                forwarded_body += original_body.slice(fwd.start, fwd.end).join('');\n            });\n            markups.forEach((markup) => {\n                $message.c('reference', {xmlns: Strophe.NS.REFERENCE, begin: markup.start + Array.from(forwarded_body).length, end: markup.end + Array.from(forwarded_body).length, type: 'decoration'});\n                for (let idx in markup.markup)\n                    $message.c(markup.markup[idx], {xmlns: Strophe.NS.MARKUP}).up();\n                $message.up();\n            });\n            blockquotes.forEach((blockquote) => {\n                $message.c('reference', {xmlns: Strophe.NS.REFERENCE, begin: blockquote.start + Array.from(forwarded_body).length, end: blockquote.end + Array.from(forwarded_body).length, type: 'decoration'})\n                    .c('quote', {xmlns: Strophe.NS.MARKUP}).up().up();\n            });\n            mentions.forEach((mention) => {\n                let mention_attrs = {xmlns: Strophe.NS.MARKUP};\n                mention.is_gc && (mention_attrs.node = Strophe.NS.GROUP_CHAT);\n                $message.c('reference', {xmlns: Strophe.NS.REFERENCE, begin: mention.start + Array.from(forwarded_body).length, end: mention.end + Array.from(forwarded_body).length, type: 'decoration'})\n                    .c('mention', mention_attrs).t(mention.target).up().up();\n            });\n\n            if (files && files.length) {\n                mutable_refs = mutable_refs.filter(item => item.type !== 'file')\n                files.forEach((file, idx) => {\n                    (idx === 0) && (text += '\\n');\n                    let legacy_body = file.sources[0] + ((idx != files.length - 1) ? '\\n' : \"\"),\n                        start_idx = Array.from(_.escape(text)).length + Array.from(forwarded_body).length,\n                        end_idx = start_idx + legacy_body.length;\n                    $message.c('reference', {\n                        xmlns: Strophe.NS.REFERENCE,\n                        type: 'mutable',\n                        begin: start_idx,\n                        end: end_idx\n                    });\n                    file.voice && $message.c('voice-message', {xmlns: Strophe.NS.VOICE_MESSAGE});\n                    $message.c('file-sharing', {xmlns: Strophe.NS.FILES}).c('file');\n                    file.type && $message.c('media-type').t(file.type).up();\n                    file['id'] && $message.c('gallery-id').t(file['id']).up();\n                    file.thumbnail && $message.c('thumbnail-uri').t(file.thumbnail).up();\n                    file.created && $message.c('created').t(file.created).up();\n                    file.name && $message.c('name').t(file.name).up();\n                    file.size && $message.c('size').t(file.size).up();\n                    file.height && $message.c('height').t(file.height).up();\n                    file.width && $message.c('width').t(file.width).up();\n                    file.duration && $message.c('duration').t(file.duration).up();\n                    file.description && $message.c('desc').t(file.description).up();\n                    $message.up().c('sources');\n                    file.sources.forEach((u) => {\n                        if (file.key)\n                            u = u.replace(/^(https|http)/, 'aescbc') + '#' + utils.ArrayBuffertoBase64(file.key);\n                        $message.c('uri').t(u).up();\n                    });\n                    $message.up().up().up();\n                    file.voice && $message.up();\n                    text += legacy_body;\n                    mutable_refs.push({start: start_idx, end: end_idx});\n                });\n            }\n\n            if (link_references && link_references.length) {\n                mutable_refs = mutable_refs.filter(item => item.type !== 'link_reference')\n                link_references.forEach((link_reference, idx) => {\n                    if (link_reference.start === -1) {\n                        link_reference.start = Array.from(_.escape(text)).length + Array.from(forwarded_body).length;\n                        text = text + '\\n' + link_reference.original_text;\n                        link_reference.end = link_reference.start + link_reference.original_text.length + 1;\n                    }\n                    $message.c('reference', {\n                        xmlns: Strophe.NS.REFERENCE,\n                        begin: link_reference.start,\n                        end: link_reference.end,\n                        type: 'mutable',\n                    }).c('ogp', { xmlns: Strophe.NS.OGP, url: link_reference.original_text });\n                    link_reference.site && $message.c('meta', { property: 'og:site_name', content: link_reference.site}).up();\n                    link_reference.type && $message.c('meta', { property: 'og:type', content: link_reference.type}).up();\n                    link_reference.title && $message.c('meta', { property: 'og:title', content: link_reference.title}).up();\n                    link_reference.url && $message.c('meta', { property: 'og:url', content: link_reference.url}).up();\n                    link_reference.description && $message.c('meta', { property: 'og:description', content: link_reference.description}).up();\n                    link_reference.image && $message.c('meta', { property: 'og:image', content: link_reference.image}).up();\n                    link_reference.image_width && $message.c('meta', { property: 'og:image:width', content: link_reference.image_width}).up();\n                    link_reference.image_height && $message.c('meta', { property: 'og:image:height', content: link_reference.image_height}).up();\n                    link_reference.video_url && $message.c('meta', { property: 'og:video:url', content: link_reference.video_url}).up();\n                    $message.up().up();\n                    mutable_refs.push({start: link_reference.start, end: link_reference.end});\n                });\n            }\n            mutable_refs && mutable_refs.length && this.edit_message.set({mutable_content: mutable_refs});\n            if (!(Strophe.xmlunescape(forwarded_body) + text)){\n                this.deleteMessages(null, [this.edit_message]);\n                return;\n            }\n            $message.c('body').t(Strophe.xmlunescape(forwarded_body) + text).up();\n            this.unsetForwardedMessages();\n            if (this.model.get('encrypted')) {\n                let decrypted_msg = $message.tree().innerHTML;\n                $message.c('envelope', {xmlns: Strophe.NS.SCE}).c('content')\n                if ($($message.tree()).children('body').length) {\n                    $message.cnode($($message.tree()).children('body')[0]).attrs({'xmlns': Strophe.NS.CLIENT}).up()\n                    $($message.tree()).children('body').detach()\n                }\n                if ($($message.tree()).children('reference').length) {\n                    $($message.tree()).children('reference').each((idx, reference) => {\n                        $message.cnode($($message.tree()).children('reference')[idx]).up()\n                    });\n                    $($message.tree()).children('reference').detach()\n                }\n                $message.up().c('rpad').t('0'.repeat(200).slice(1, Math.floor((Math.random() * 198) + 1))).up()\n                $message.c('from', {jid: this.account.get('jid')}).up().up()\n                this.account.omemo.encrypt(this.contact, $message).then((msg) => {\n                    iq.cnode(msg.message.tree());\n                    this.account.omemo.cached_messages.putMessage(this.contact, stanza_id, decrypted_msg);\n                    this.account.sendIQFast(iq);\n                });\n            } else {\n                iq.cnode($message.tree());\n                this.account.sendIQFast(iq);\n            }\n        },\n\n        showEditPanel: function () {\n            if (!this.model.get('active'))\n                return;\n            if (this.$('.edit-message-wrap').hasClass('non-active'))\n                return;\n            let $msg = this.content_view.$('.chat-message.selected').first(),\n                edit_msg = this.messages_arr.get($msg.data('uniqueid'));\n            this.edit_message = edit_msg;\n            this.resetSelectedMessages();\n            this.setEditedMessageAttachments(edit_msg);\n            this.setEditedMessage(edit_msg);\n        },\n\n        deleteMessages: function (ev, messages) {\n            if (!this.model.get('active'))\n                return;\n            let $msgs = this.content_view.$('.chat-message.selected'),\n                msgs = [],\n                my_msgs = 0,\n                dialog_options = [];\n            $msgs.each((idx, item) => {\n                let msg = this.messages_arr.get(item.dataset.uniqueid);\n                msg && msgs.push(msg);\n                msg.isSenderMe() && my_msgs++;\n            });\n            messages && messages.forEach((item, idx) => {\n                msgs.push(item);\n                item.isSenderMe() && my_msgs++;\n            });\n            if (this.account.server_features.get(Strophe.NS.REWRITE) || this.model.get('group_chat')) {\n                let dfd = new $.Deferred();\n                dfd.done(() => {\n                    utils.dialogs.ask(xabber.getString(\"dialog_delete_messages__header\"), xabber.getQuantityString(\"delete_message_question\", msgs.length),\n                        dialog_options, {ok_button_text: xabber.getString(\"delete\")}).done((res) => {\n                        if (!res) {\n                            this._clearing_history = false;\n                            messages && messages.length && this.focusOnInput();\n                            return;\n                        }\n                        let symmetric = (this.model.get('group_chat')) ? true : (res.symmetric_deletion ? true : false);\n                        this.resetSelectedMessages();\n                        if (this.account.get('gallery_token') && this.account.get('gallery_url'))\n                            this.deleteFilesFromMessages(msgs);\n                        this.model.retractMessages(msgs, this.model.get('group_chat'), symmetric);\n                        messages && messages.length && this.unsetForwardedMessages();\n                    });\n                });\n                if (!this.model.get('group_chat') && !this.model.get('saved') && my_msgs == $msgs.length && this.contact && this.contact.domain){\n                    if (this.contact.get('server_has_rewrite')){\n                        dialog_options = [{\n                            name: 'symmetric_deletion',\n                            checked: false,\n                            text: xabber.getString(\"dialog_clear_chat_history__option_delete_for_all\")\n                        }];\n                        dfd.resolve();\n                    } else {\n                        this.account.connection.disco.info(this.contact.domain, null, (iq) => {\n                            let $rewrite = $(iq).find('feature[var=\"' + Strophe.NS.REWRITE + '\"]');\n                            if ($rewrite.length) {\n                                dialog_options = [{\n                                    name: 'symmetric_deletion',\n                                    checked: false,\n                                    text: xabber.getString(\"dialog_clear_chat_history__option_delete_for_all\")\n                                }];\n                                this.contact.set('server_has_rewrite', true);\n                                dfd.resolve();\n                            } else {\n                                dfd.resolve();\n                            }\n                        });\n                    }\n                } else\n                    dfd.resolve();\n            }\n            else {\n                utils.dialogs.ask(xabber.getString(\"dialog_delete_messages__header\"), `${xabber.getQuantityString(\"delete_message_question\", msgs.length)}\\n${xabber.getString(\"dialog_clear_chat_history__warning_deletion_not_supported\", [this.account.domain]).fontcolor('#E53935')}`,\n                    dialog_options, {ok_button_text: xabber.getString(\"dialog_clear_chat_history__button_delete_locally\")}).done((res) => {\n                    if (!res) {\n                        this._clearing_history = false;\n                        messages && messages.length && this.focusOnInput();\n                        return;\n                    }\n                    this.resetSelectedMessages();\n                    if (this.account.get('gallery_token') && this.account.get('gallery_url'))\n                        this.deleteFilesFromMessages(msgs);\n                    msgs.forEach((item) => { this.view.removeMessage(item); })\n                    messages && messages.length && this.unsetForwardedMessages();\n                });\n            }\n        },\n\n        deleteFilesFromMessages: function (messages) {\n            messages.forEach((item) => {\n                if (!item.isSenderMe())\n                    return;\n                item.get('files') && _.isArray(item.get('files')) && item.get('files').forEach((item) => {\n                    item && item.id && this.account.deleteFile(item.id,(response) => {\n                        item.id = null;\n                    }, (err) => {\n                        item.id = null;\n                    });\n                });\n                item.get('images') && _.isArray(item.get('images')) && item.get('images').forEach((item) => {\n                    item && item.id && this.account.deleteFile(item.id,(response) => {\n                        item.id = null;\n                    }, (err) => {\n                        item.id = null;\n                    });\n                });\n                item.get('videos') && _.isArray(item.get('videos')) && item.get('videos').forEach((item) => {\n                    item && item.id && this.account.deleteFile(item.id,(response) => {\n                        item.id = null;\n                    }, (err) => {\n                        item.id = null;\n                    });\n                });\n            });\n        },\n\n        pushMessagesToClipboard: function (messages) {\n            let fwd_msg_indicator = \"\",\n                copied_messages = this.createTextMessage(messages, fwd_msg_indicator);\n            utils.copyTextToClipboard(_.unescape(copied_messages));\n        },\n\n        createTextMessage: function (messages, fwd_msg_indicator) {\n            let text_message = \"\";\n            for (let i = 0; i < messages.length; i++) {\n                let $msg = messages[i];\n                if (this.model.get('saved') && $msg.get('forwarded_message') && $msg.get('forwarded_message').length === 1 && !$msg.get('message'))\n                    $msg = $msg.get('forwarded_message')[0];\n                let current_date = moment($msg.get('timestamp')).startOf('day'),\n                    prev_date = (i) ? moment(messages[i - 1].get('timestamp')).startOf('day') : moment(0),\n                    msg_sender = \"\";\n                    if (prev_date.format('x') != current_date.format('x')) {\n                        text_message += (fwd_msg_indicator.length ? fwd_msg_indicator + ' ' : \"\") + pretty_date(current_date) + '\\n';\n                    }\n                    msg_sender = $msg.isSenderMe() ? this.account.get('name') : ($msg.get('user_info') && $msg.get('user_info').nickname || (this.account.contacts.get($msg.get('from_jid')) ? this.account.contacts.get($msg.get('from_jid')).get('name') : $msg.get('from_jid')));\n                    text_message += (fwd_msg_indicator.length ? fwd_msg_indicator + ' ' : \"\") + \"[\" + utils.pretty_time($msg.get('timestamp')) + \"] \" + msg_sender + \":\\n\";\n                    fwd_msg_indicator.length && (text_message += fwd_msg_indicator);\n                    let original_message = _.unescape(($msg.get('mutable_content') && $msg.get('mutable_content').find(ref => ref.type === 'groupchat')) ? $msg.get('original_message').slice($msg.get('mutable_content').find(ref => ref.type === 'groupchat').end) : $msg.get('original_message'));\n                    fwd_msg_indicator.length && (original_message = original_message.replace(/\\n/g, '\\n&gt; '));\n                    (fwd_msg_indicator.length && original_message.indexOf('&gt;') !== 0) && (text_message += ' ');\n                    (original_message = _.unescape(original_message.replace(/\\n&gt; &gt;/g, '\\n&gt;&gt;')));\n                    text_message += _.escape(original_message) + '\\n';\n            }\n            return text_message.trim();\n        },\n\n        replyMessages: function () {\n            if (!this.model.get('active'))\n                return;\n            let $msgs = this.content_view.$('.chat-message.selected'),\n                msgs = [];\n            $msgs.each((idx, item) => {\n                let msg = this.messages_arr.get(item.dataset.uniqueid);\n                if (msg) {\n                    if (this.model.get('saved') && msg.get('forwarded_message') && msg.get('forwarded_message').length && !msg.get('message')) {\n                        msgs = msgs.concat(msg.get('forwarded_message'));\n                    } else\n                        msgs.push(msg);\n                }\n            });\n            this.resetSelectedMessages();\n            this.setForwardedMessages(msgs);\n        },\n\n        forwardMessages: function () {\n            if (!this.model.get('active'))\n                return;\n            let $msgs = this.content_view.$('.chat-message.selected'),\n                msgs = [];\n            $msgs.each((idx, item) => {\n                let msg = this.messages_arr.get(item.dataset.uniqueid);\n                if (msg) {\n                    if (this.model.get('saved') && msg.get('forwarded_message') && msg.get('forwarded_message').length && !msg.get('message')) {\n                        msgs = msgs.concat(msg.get('forwarded_message'));\n                    } else\n                        msgs.push(msg);\n                }\n            });\n            this.resetSelectedMessages();\n            if (!xabber.forward_panel)\n                xabber.forward_panel = new xabber.ForwardPanelView({ model: xabber.opened_chats });\n            xabber.forward_panel.open(msgs, this.account);\n        },\n\n        showChatNotification: function (message, is_colored) {\n            if (!this.view.$('.chat-notification').hasClass('msgs-counter') && !this.view.$('.chat-notification').hasClass('encryption-warning')) {\n                this.view.$('.chat-notification').switchClass('hidden', !message).text(message)\n                    .switchClass('text-color-300', is_colored);\n            }\n        }\n    });\n\n    xabber.ChatHeadContainer = xabber.Container.extend({\n        className: 'chat-head-container panel-head noselect'\n    });\n\n    xabber.ChatBodyContainer = xabber.Container.extend({\n        className: 'chat-body-container',\n\n        // TODO: refactor CSS and remove this\n        updateHeight: function () {\n            let bottom_height = xabber.chat_bottom.$el.height() + parseInt(xabber.chat_bottom.$el.css('bottom'));\n            if (bottom_height) {\n                let current_bottom = parseInt(this.$el.css('bottom'));\n                this.$el.css({bottom: bottom_height});\n                if (this.view) {\n                    this.view.updateScrollBar();\n                    (bottom_height != current_bottom) && !this.view.isScrolledToBottom() && this.view.scrollTo(this.view.ps_container[0].scrollTop + (bottom_height - current_bottom));\n                }\n            }\n        }\n    });\n\n    xabber.NotificationsPlaceholder = xabber.BasicView.extend({\n        className: 'notifications-placeholder',\n        events: {\n            \"click .btn-request-notifications\": \"requestNotifications\",\n            \"click .mdi-close\": \"close\"\n        },\n\n        _initialize: function (options) {\n            this.$el.html(`${xabber.getString(\"desktop_notifications__alert_enable__text\", [constants.CLIENT_NAME])} <span class=\"btn-request-notifications\">${xabber.getString(\"desktop_notifications__alert_enable__link_text\")}</span><button class=\"btn-request-notifications btn-flat btn-dark btn-main\">${xabber.getString(\"chat_allow\")}</button>`);\n            this.$el.append($('<i/>').addClass('mdi mdi-22px mdi-close'));\n            xabber.on(\"update_screen\", this.onUpdatedScreen, this);\n        },\n\n        requestNotifications: function () {\n            window.Notification.requestPermission((permission) => {\n                xabber._cache.save({'notifications': (permission === 'granted'), 'ignore_notifications_warning': true});\n                this.close();\n            });\n        },\n\n        onUpdatedScreen: function () {\n            if (!xabber.notifications_placeholder)\n                return;\n            this.$el.detach();\n            xabber.placeholders_wrap.$el.append(this.$el);\n            xabber.main_panel.$el.css('padding-bottom', xabber.placeholders_wrap.$el.height());\n        },\n\n        close: function () {\n            xabber._cache.save('ignore_notifications_warning', true);\n            this.remove();\n            xabber.notifications_placeholder = undefined;\n            xabber.main_panel.$el.css('padding-bottom', xabber.placeholders_wrap.$el.height());\n        }\n    });\n\n    xabber.ChatBottomContainer = xabber.Container.extend({\n        className: 'chat-bottom-container'\n    });\n\n    xabber.ChatPlaceholderView = xabber.BasicView.extend({\n        className: 'placeholder-wrap chat-placeholder-wrap noselect',\n        template: templates.chat_placeholder\n    });\n\n    xabber.ChatSettings = Backbone.ModelWithStorage.extend({\n        defaults: {\n            last_emoji: [],\n            muted: [],\n            archived: [],\n            group_chat: [],\n            cached_avatars: [],\n            group_chat_members_lists: []\n        },\n\n        getLastEmoji: function () {\n            return _.clone(this.get('last_emoji'));\n        },\n\n        updateLastEmoji: function (emoji) {\n            let last_emoji_icons = _.clone(this.get('last_emoji'));\n            if (last_emoji_icons.length > 0) {\n                let index = last_emoji_icons.indexOf(emoji);\n                if (index != -1)\n                    last_emoji_icons.splice(index, 1);\n                last_emoji_icons.push(emoji);\n                while (last_emoji_icons.length > 7)\n                    last_emoji_icons.shift();\n            }\n            else\n                last_emoji_icons.push(emoji);\n            this.save('last_emoji', last_emoji_icons);\n        },\n\n        updateMutedList: function (jid, muted) {\n            let muted_list = _.clone(this.get('muted')),\n                index = muted_list.indexOf(jid);\n            if (muted && index < 0) {\n                muted_list.push(jid);\n            }\n            if (!muted && index >= 0) {\n                muted_list.splice(index, 1);\n            }\n            this.save('muted', muted_list);\n        },\n\n        updateArchiveChatsList: function (jid, archived) {\n            let archived_list = _.clone(this.get('archived')),\n                index = archived_list.indexOf(jid);\n            if (archived && index < 0) {\n                archived_list.push(jid);\n            }\n            if (!archived && index >= 0) {\n                archived_list.splice(index, 1);\n            }\n            this.save('archived', archived_list);\n        },\n\n        updateGroupChatsList: function (jid, group_chat) {\n            let group_chat_list = _.clone(this.get('group_chat')),\n                index = group_chat_list.indexOf(jid);\n            if (group_chat && index < 0) {\n                group_chat_list.push(jid);\n            }\n            if (!group_chat && index >= 0) {\n                group_chat_list.splice(index, 1);\n            }\n            this.save('group_chat', group_chat_list);\n        },\n\n        updateCachedAvatars: function (id, hash, avatar) {\n            let avatar_list = _.clone(this.get('cached_avatars')),\n                member = avatar_list.indexOf(avatar_list.find(member => member.id === id));\n            if (member != -1) {\n                avatar_list.splice(member, 1);\n            }\n            avatar_list.push({id: id, avatar_hash: hash, avatar_b64: avatar});\n            this.save('cached_avatars', avatar_list);\n        },\n\n        getAvatarInfoById: function (id) {\n            let avatar_list = _.clone(this.get('cached_avatars')),\n                result = avatar_list.find(member => member.id === id);\n            return result;\n        },\n\n        getB64Avatar: function (id) {\n            let result = this.getAvatarInfoById(id);\n            if (result)\n                return result.avatar_b64;\n            else\n                return;\n        },\n\n        getHashAvatar: function (id) {\n            let result = this.getAvatarInfoById(id);\n            if (result)\n                return result.avatar_hash;\n        }\n    });\n\n    xabber.CachedChats = Backbone.ModelWithDataBase.extend({\n        putChat: function (value, callback) {\n            this.database.put('chats_items', value, function (response_value) {\n                callback && callback(response_value);\n            });\n        },\n\n        getChat: function (value, callback) {\n            this.database.get('chats_items', value, function (response_value) {\n                callback && callback(response_value);\n            });\n        },\n\n        getAllChats: function (callback) {\n            this.database.get_all('chats_items', null, function (response_value) {\n                callback && callback(response_value || []);\n            });\n        },\n\n        removeChat: function (value, callback) {\n            this.database.remove('chats_items', value, function (response_value) {\n                callback && callback(response_value);\n            });\n        },\n\n        clearDataBase: function () {\n            this.database.clear_database('roster_items');\n        }\n    });\n\n    xabber.Account.addInitPlugin(function () {\n        this.chat_settings = new xabber.ChatSettings({id: 'chat-settings'}, {\n            account: this,\n            storage_name: xabber.getStorageName() + this.get('jid'),\n            fetch: 'after'\n        });\n        this.messages = new xabber.Messages(null, {account: this});\n        this.forwarded_messages = new xabber.Messages(null, {account: this});\n        this.pinned_messages = new xabber.Messages(null, {account: this});\n\n        this.chats = new xabber.AccountChats(null, {account: this});\n    });\n\n    xabber.Account.addConnPlugin(function () {\n        this.cached_chats = new xabber.CachedChats(null, {\n            name:'cached-chats-list-' + this.get('jid'),\n            objStoreName: 'chats_items',\n            primKey: 'jid'\n        });\n\n        this.cached_chats.on(\"database_opened\", () => {\n            /*this.cached_chats.getAllChats((chats) => {\n                chats.forEach((chat) => {\n                    let is_encrypted = chat.jid.indexOf(':encrypted') == chat.jid.length - ':encrypted'.length,\n                        jid = is_encrypted ? (chat.jid.slice(0, chat.jid.length - ':encrypted'.length)) : chat.jid,\n                        contact = this.contacts.mergeContact(jid);\n                    if (this.chats.get(contact.hash_id))\n                        return;\n                    let created_chat = this.chats.getChat(contact, is_encrypted && 'encrypted'),\n                        last_message = chat.last_message;\n                    if (typeof(last_message) !== 'string')\n                        return;\n                    created_chat.set({'cached_timestamp': chat.timestamp, 'timestamp': chat.timestamp, last_displayed_id: chat.last_displayed_id, last_delivered_id: chat.last_delivered_id});\n                    if (last_message) {\n                        this.chats.receiveMessage(Strophe.xmlHtmlNode(last_message).documentElement);\n                    } else {\n                        created_chat.item_view.updateEmptyChat();\n                    }\n                });\n            });*/\n        });\n\n        let timestamp = this.last_msg_timestamp || this.disconnected_timestamp;\n        this.chats.registerMessageHandler();\n        this.chats.each((chat) => {\n            if (!this.connection.do_synchronization) {\n                if (chat.messages.length)\n                    chat.trigger('get_missed_history', timestamp);\n                else\n                    chat.trigger('load_last_history');\n            }\n        });\n        if (!(this.auth_view && this.auth_view.data.get('authentication')))\n            this.sendPresence();\n\n        this.connection.deleteTimedHandler(this._get_msg_handler);\n        this._get_msg_handler = this.connection.addTimedHandler(60000, () => {\n            if (this.connection && !this.connection.handlers.find(h => !h.ns && !h.options.encrypted && h.name === 'message')) {\n                let last_msg_timestamp = this.last_msg_timestamp;\n                this.chats.registerMessageHandler();\n                this.roster && this.roster.syncFromServer({stamp: last_msg_timestamp * 1000}, false, true);\n            }\n            return true;\n        });\n        if (_.isUndefined(this.settings.get('omemo')) && !this.omemo_enable_placeholder) {\n            this.omemo_enable_placeholder = new xabber.OMEMOEnablePlaceholder({account: this});\n        }\n    }, true, true);\n\n    xabber.Account.addFastConnPlugin(function () {\n        this.getVCard();\n        if (!(this.auth_view && this.auth_view.data.get('authentication')))\n            this.trigger('ready_to_get_roster');\n    }, true, true);\n\n    xabber.once(\"start\", function () {\n        [\"keydown\"].forEach((event) => {\n            window.addEventListener(event, (e) => {\n                document.onselectstart = function() {\n                    return !((e.ctrlKey || e.metaKey) && e.keyCode == constants.KEY_SHIFT || e.shiftKey && e.keyCode == constants.KEY_CTRL || e.keyCode == constants.KEY_SHIFT);\n                }\n            });\n        });\n        [\"keyup\"].forEach((event) => {\n            window.addEventListener(event, (e) => {\n                document.onselectstart = function() {\n                    return true;\n                }\n            });\n        });\n        this.chats = new this.Chats;\n        this.chats.addCollection(this.opened_chats = new this.OpenedChats);\n        this.chats.addCollection(this.closed_chats = new this.ClosedChats);\n        this.chats.registerQuillEmbeddedsTags();\n\n        this.chats_view = this.left_panel.addChild('chats',\n                this.ChatsView, {model: this.opened_chats});\n        this.chat_head = this.right_panel.addChild('chat_head',\n                this.ChatHeadContainer);\n        this.chat_body = this.right_panel.addChild('chat_body',\n                this.ChatBodyContainer);\n        this.chat_bottom = this.right_panel.addChild('chat_bottom',\n                this.ChatBottomContainer);\n        this.chat_placeholder = this.right_panel.addChild('chat_placeholder',\n                this.ChatPlaceholderView);\n\n        this.on(\"add_group_chat\", function (attrs) {\n            if (!this.add_group_chat_view)\n                this.add_group_chat_view = new this.AddGroupChatView();\n            this.add_group_chat_view.show(attrs);\n        }, this);\n\n        this.on(\"change:focused\", function () {\n            if (this.get('focused')) {\n                let view = this.chats_view.active_chat;\n                if (view && view.model.get('display')) {\n                    view.content.readMessages();\n                    if (view.model.get('is_accepted') !== false)\n                        view.content.bottom.focusOnInput();\n                }\n            }\n        }, this);\n\n        this.on(\"show_group_chats\", function () {\n            this.chats_view.showGroupChats();\n        }, this);\n\n        this.on(\"show_chats\", function () {\n            this.chats_view.showChats();\n        }, this);\n\n        this.on(\"show_all_chats\", function () {\n            this.chats_view.showAllChats();\n        }, this);\n\n        this.on(\"show_account_chats\", function (ev, account) {\n            this.chats_view.showChatsByAccount(account);\n        }, this);\n\n        this.on(\"show_archive_chats\", function () {\n            this.chats_view.showArchiveChats();\n        }, this);\n\n        this.on(\"clear_search\", function () {\n            this.contacts_view.clearSearch();\n            this.chats_view.clearSearch();\n        }, this);\n    }, xabber);\n\n    return xabber;\n  };\n}).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack://xabber.web/./src/chats.js?")},"./src/constants.js":(module,exports,__webpack_require__)=>{eval('var __WEBPACK_AMD_DEFINE_RESULT__;var constants = {\n\n    STORAGE_NAME: \'xabber-storage\',\n    STORAGE_VERSION: \'v8\',\n\n    FAVICON_DEFAULT: "images/favicon.png",\n    FAVICON_MESSAGE: "images/favicon-message.png",\n    BACKGROUND_IMAGE: "images/background.png",\n\n    WIDTH_MEDIUM: 1650,\n    WIDTH_NARROW: 1280,\n    WIDTH_TINY: 1152,\n\n    LOG_LEVEL_NONE: -1,\n    LOG_LEVEL_ERROR: 1,\n    LOG_LEVEL_WARN: 2,\n    LOG_LEVEL_INFO: 3,\n    LOG_LEVEL_DEBUG: 4,\n\n    LOG_LEVEL: \'ERROR\',\n\n    KEY_BACKSPACE: 8,\n    KEY_TAB: 9,\n    KEY_ENTER: 13,\n    KEY_SHIFT: 16,\n    KEY_CTRL: 17,\n    KEY_ESCAPE: 27,\n    KEY_SPACE: 32,\n    KEY_ARROW_LEFT: 37,\n    KEY_ARROW_UP: 38,\n    KEY_ARROW_RIGHT: 39,\n    KEY_ARROW_DOWN: 40,\n    KEY_DELETE: 46,\n    KEY_FORWARD_SLASH: 47,\n    KEY_AT: 50,\n\n    VOICE_MSG_TIME: 120,\n\n    PASSWORD_DOT: String.fromCharCode(0x2022),\n\n    CONNECTION_URL: null,\n\n    CONN_STATUSES: {\n        0: \'ERROR\',\n        1: \'CONNECTING\',\n        2: \'CONNFAIL\',\n        3: \'AUTHENTICATING\',\n        4: \'AUTHFAIL\',\n        5: \'CONNECTED\',\n        6: \'DISCONNECTED\',\n        7: \'DISCONNECTING\',\n        8: \'ATTACHED\',\n        9: \'REDIRECT\',\n        10: \'CONNTIMEOUT\'\n    },\n\n    PREKEYS_COUNT: 100,\n    MIN_PREKEYS_COUNT: 80,\n\n    AES_KEY_LENGTH: 128,\n    AES_TAG_LENGTH: 128,\n    AES_EXTRACTABLE: true,\n\n    BAD_CONN_STATUSES: [0, 2, 4, 6, 10],\n\n    RECONNECTION_TIMEOUTS: [5000, 10000, 15000],\n\n    STATUS_WEIGHTS: {\n        chat: 1,\n        online: 2,\n        away: 3,\n        xa: 4,\n        dnd: 5,\n        offline: 6,\n        unavailable: 7\n    },\n\n    PRESENT_INTERVAL: 30000,\n    CHATSTATE_INTERVAL_COMPOSING_AUDIO: 5000,\n    CHATSTATE_TIMEOUT_PAUSED: 15000,\n    CHATSTATE_TIMEOUT_STOPPED: 5000,\n    CHATSTATE_TIMEOUT_PAUSED_AUDIO: 10000,\n\n    JINGLE_WAITING_TIME: 60,\n\n    SYNCHRONIZATION_RSM_MAX: 25,\n\n    REGISTRATION_DOMAINS: [],\n    LOGIN_DOMAINS: [],\n    TRUSTED_DOMAINS: [],\n    RECOMMENDED_DOMAIN: \'\',\n    REGISTRATION_BUTTON: true,\n    REGISTRATION_CUSTOM_DOMAIN: true,\n    LOGIN_CUSTOM_DOMAIN: true,\n\n    TURN_SERVERS_LIST: [\n        {\n            url: \'turn:numb.viagenie.ca\',\n            credential: \'muazkh\',\n            username: \'webrtc@live.com\'\n        },\n        {\n            urls: "turn:turn.editcompany.org:5439",\n            username: "test",\n            credential: "1111"\n        },\n        {\n            urls: \'turn:192.158.29.39:3478?transport=udp\',\n            credential: \'JZEOEt2V3Qb0y27GRntt2u2PAYA=\',\n            username: \'28224511:1379330808\'\n        },\n        {\n            urls: \'turn:192.158.29.39:3478?transport=tcp\',\n            credential: \'JZEOEt2V3Qb0y27GRntt2u2PAYA=\',\n            username: \'28224511:1379330808\'\n        }\n    ],\n\n    JINGLE_MSG_PROPOSE: 0,\n    JINGLE_MSG_REJECT: 1,\n    JINGLE_MSG_ACCEPT: 2,\n\n    MSG_BLOCKED: -2,\n    MSG_ERROR: -1,\n    MSG_PENDING: 0,\n    MSG_SENT: 1,\n    MSG_DELIVERED: 2,\n    MSG_DISPLAYED: 3,\n    MSG_ARCHIVED: 4,\n    MSG_SAVED: 5,\n\n    RSM_ATTRIBUTES: [\'max\', \'first\', \'last\', \'after\', \'before\', \'index\', \'count\'],\n    MAM_ATTRIBUTES: [\'with\', \'start\', \'end\'],\n\n    GENERAL_GROUP_ID: 1,\n    NON_ROSTER_GROUP_ID: 2,\n\n    MATERIAL_COLORS: [\n        "red", "green", "blue", "deep-purple", "orange", "lime",\n        "pink", "purple", "indigo", "light-blue", "cyan", "teal",\n        "light-green", "amber", "deep-orange", "brown", "blue-grey"\n    ],\n\n    MAX_AVATAR_FILE_SIZE: 64000,\n\n    AVATAR_PRIORITIES: {\n        VCARD_AVATAR: 0,\n        PUBSUB_AVATAR: 1\n    },\n\n    EMAIL_FOR_JOIN_TRANSLATION: "info@xabber.com",\n\n    AVATAR_SIZES: {\n        TOOLBAR_ACCOUNT_ITEM: 32,\n        SETTINGS_ACCOUNT_ITEM: 32,\n        XABBER_ACCOUNT: 32,\n        SYNCHRONIZE_ACCOUNT_ITEM: 36,\n        MENTION_ITEM: 36,\n        ACCOUNT_SETTINGS_LEFT: 96,\n        ACCOUNT_VCARD_EDIT: 80,\n        ROSTER_RIGHT_ACCOUNT_ITEM: 38,\n        ROSTER_LEFT_ACCOUNT_ITEM: 40,\n        PARTICIPANT_DETAILS_ITEM: 48,\n        CONTACT_RIGHT_ITEM: 32,\n        GROUPCHAT_MEMBER_ITEM: 32,\n        CONTACT_LEFT_ITEM: 32,\n        CONTACT_BLOCKED_ITEM: 32,\n        CONTACT_DETAILS: 192,\n        GROUP_SETTINGS: 96,\n        CHAT_ITEM: 40,\n        CHAT_HEAD: 40,\n        CHAT_MESSAGE: 32,\n        CHAT_BOTTOM: 48,\n        XABBER_VOICE_CALL_VIEW: 128,\n        OMEMO_ENABLE_SETTING: 182\n    },\n\n    SOUNDS: {\n        beep_up: \'sounds/beep_up.ogg\',\n        tiny_noize: \'sounds/tiny_noize.ogg\',\n        retro_game: \'sounds/retro_game.ogg\',\n        pixel_beep: \'sounds/pixel_beep.ogg\',\n        beep_positive: \'sounds/beep_positive.ogg\',\n        good_chime: \'sounds/good_chime.ogg\',\n        cellular_click: \'sounds/cellular_click.ogg\',\n        bleep: \'sounds/bleep.ogg\',\n        mono_u: \'sounds/mono_u.ogg\',\n        plop: \'sounds/plop.ogg\',\n        ether: \'sounds/ether.ogg\',\n        pop: \'sounds/pop.ogg\',\n        computer_chime: \'sounds/computer_chime.ogg\',\n        beep_a: \'sounds/beep_a.ogg\',\n        call: \'sounds/marching-band-dave-girtsman.mp3\',\n        connecting: \'sounds/alien-bomb-timer.wav\',\n        busy: \'sounds/phone_busy.wav\',\n        attention: \'sounds/attention.wav\'\n    },\n\n    SYNC_WAY_DATA: {\n        no: {\n            tip: \'xabber_account__sync__settings_already_synced\',\n            icon: \'mdi-cloud-check\'\n        },\n        from_server: {\n            tip: \'xabber_account__sync__settings_will_be_downloaded\',\n            icon: \'mdi-cloud-download\'\n        },\n        to_server: {\n            tip: \'xabber_account__sync__settings_will_be_uploaded\',\n            icon: \'mdi-cloud-upload\'\n        },\n        delete: {\n            tip: \'xabber_account__sync__acc_will_be_deleted\',\n            icon: \'mdi-delete\'\n        },\n        off_local: {\n            tip: \'xabber_account__sync__local_acc\',\n            icon: \'mdi-cloud-outline-off\'\n        },\n        off_remote: {\n            tip: \'xabber_account__sync__remote_acc\',\n            icon: \'mdi-cloud-outline-off\'\n        }\n    },\n\n    SYNCED_STATUS_DATA: {\n        off: {\n            tip: \'xabber_account__sync_status__disabled\',\n            icon: \'mdi-cloud-outline-off\'\n        },\n        yes: {\n            tip: \'xabber_account__sync_status__synced\',\n            icon: \'mdi-cloud-check\'\n        },\n        no: {\n            tip: \'xabber_account__sync_status__not_synced\',\n            icon: \'mdi-cloud\'\n        }\n    },\n\n    EMOJI_LIST_NAME: function (emoji_list) {\n        return {\n            "smiles_and_people": \'emoji_list__catelory_name__smiles_and_people\',\n            "body_and_clothes": \'emoji_list__catelory_name__body_and_clothes\',\n            "animals_and_nature": \'emoji_list__catelory_name__animals_and_nature\',\n            "food_and_drinks": \'emoji_list__catelory_name__food_and_drinks\',\n            "travel_and_places": \'emoji_list__catelory_name__travel_and_places\',\n            "events": \'emoji_list__catelory_name__events\',\n            "objects": \'emoji_list__catelory_name__objects\',\n            "signs": \'emoji_list__catelory_name__signs\'\n        }[emoji_list]\n    },\n\n    QUOTE_MARKER: \'&gt;\',\n    MARKUP_TAGS: [\'bold\', \'underline\', \'italic\', \'strike\', \'link\', \'quote\'],\n\n    BLANK_VIDEO: {\n        OGG: \'data:video/ogg;base64, \',\n        MP4: \'data:video/mp4;base64, AAAAHGZ0eXBNNFYgAAACAGlzb21pc28yYXZjMQAAAAhmcmVlAAAGF21kYXTeBAAAbGliZmFhYyAxLjI4AABCAJMgBDIARwAAArEGBf//rdxF6b3m2Ui3lizYINkj7u94MjY0IC0gY29yZSAxNDIgcjIgOTU2YzhkOCAtIEguMjY0L01QRUctNCBBVkMgY29kZWMgLSBDb3B5bGVmdCAyMDAzLTIwMTQgLSBodHRwOi8vd3d3LnZpZGVvbGFuLm9yZy94MjY0Lmh0bWwgLSBvcHRpb25zOiBjYWJhYz0wIHJlZj0zIGRlYmxvY2s9MTowOjAgYW5hbHlzZT0weDE6MHgxMTEgbWU9aGV4IHN1Ym1lPTcgcHN5PTEgcHN5X3JkPTEuMDA6MC4wMCBtaXhlZF9yZWY9MSBtZV9yYW5nZT0xNiBjaHJvbWFfbWU9MSB0cmVsbGlzPTEgOHg4ZGN0PTAgY3FtPTAgZGVhZHpvbmU9MjEsMTEgZmFzdF9wc2tpcD0xIGNocm9tYV9xcF9vZmZzZXQ9LTIgdGhyZWFkcz02IGxvb2thaGVhZF90aHJlYWRzPTEgc2xpY2VkX3RocmVhZHM9MCBucj0wIGRlY2ltYXRlPTEgaW50ZXJsYWNlZD0wIGJsdXJheV9jb21wYXQ9MCBjb25zdHJhaW5lZF9pbnRyYT0wIGJmcmFtZXM9MCB3ZWlnaHRwPTAga2V5aW50PTI1MCBrZXlpbnRfbWluPTI1IHNjZW5lY3V0PTQwIGludHJhX3JlZnJlc2g9MCByY19sb29rYWhlYWQ9NDAgcmM9Y3JmIG1idHJlZT0xIGNyZj0yMy4wIHFjb21wPTAuNjAgcXBtaW49MCBxcG1heD02OSBxcHN0ZXA9NCB2YnZfbWF4cmF0ZT03NjggdmJ2X2J1ZnNpemU9MzAwMCBjcmZfbWF4PTAuMCBuYWxfaHJkPW5vbmUgZmlsbGVyPTAgaXBfcmF0aW89MS40MCBhcT0xOjEuMDAAgAAAAFZliIQL8mKAAKvMnJycnJycnJycnXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXiEASZACGQAjgCEASZACGQAjgAAAAAdBmjgX4GSAIQBJkAIZACOAAAAAB0GaVAX4GSAhAEmQAhkAI4AhAEmQAhkAI4AAAAAGQZpgL8DJIQBJkAIZACOAIQBJkAIZACOAAAAABkGagC/AySEASZACGQAjgAAAAAZBmqAvwMkhAEmQAhkAI4AhAEmQAhkAI4AAAAAGQZrAL8DJIQBJkAIZACOAAAAABkGa4C/AySEASZACGQAjgCEASZACGQAjgAAAAAZBmwAvwMkhAEmQAhkAI4AAAAAGQZsgL8DJIQBJkAIZACOAIQBJkAIZACOAAAAABkGbQC/AySEASZACGQAjgCEASZACGQAjgAAAAAZBm2AvwMkhAEmQAhkAI4AAAAAGQZuAL8DJIQBJkAIZACOAIQBJkAIZACOAAAAABkGboC/AySEASZACGQAjgAAAAAZBm8AvwMkhAEmQAhkAI4AhAEmQAhkAI4AAAAAGQZvgL8DJIQBJkAIZACOAAAAABkGaAC/AySEASZACGQAjgCEASZACGQAjgAAAAAZBmiAvwMkhAEmQAhkAI4AhAEmQAhkAI4AAAAAGQZpAL8DJIQBJkAIZACOAAAAABkGaYC/AySEASZACGQAjgCEASZACGQAjgAAAAAZBmoAvwMkhAEmQAhkAI4AAAAAGQZqgL8DJIQBJkAIZACOAIQBJkAIZACOAAAAABkGawC/AySEASZACGQAjgAAAAAZBmuAvwMkhAEmQAhkAI4AhAEmQAhkAI4AAAAAGQZsAL8DJIQBJkAIZACOAAAAABkGbIC/AySEASZACGQAjgCEASZACGQAjgAAAAAZBm0AvwMkhAEmQAhkAI4AhAEmQAhkAI4AAAAAGQZtgL8DJIQBJkAIZACOAAAAABkGbgCvAySEASZACGQAjgCEASZACGQAjgAAAAAZBm6AnwMkhAEmQAhkAI4AhAEmQAhkAI4AhAEmQAhkAI4AhAEmQAhkAI4AAAAhubW9vdgAAAGxtdmhkAAAAAAAAAAAAAAAAAAAD6AAABDcAAQAAAQAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAzB0cmFrAAAAXHRraGQAAAADAAAAAAAAAAAAAAABAAAAAAAAA+kAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAABAAAAAALAAAACQAAAAAAAkZWR0cwAAABxlbHN0AAAAAAAAAAEAAAPpAAAAAAABAAAAAAKobWRpYQAAACBtZGhkAAAAAAAAAAAAAAAAAAB1MAAAdU5VxAAAAAAALWhkbHIAAAAAAAAAAHZpZGUAAAAAAAAAAAAAAABWaWRlb0hhbmRsZXIAAAACU21pbmYAAAAUdm1oZAAAAAEAAAAAAAAAAAAAACRkaW5mAAAAHGRyZWYAAAAAAAAAAQAAAAx1cmwgAAAAAQAAAhNzdGJsAAAAr3N0c2QAAAAAAAAAAQAAAJ9hdmMxAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAALAAkABIAAAASAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGP//AAAALWF2Y0MBQsAN/+EAFWdCwA3ZAsTsBEAAAPpAADqYA8UKkgEABWjLg8sgAAAAHHV1aWRraEDyXyRPxbo5pRvPAyPzAAAAAAAAABhzdHRzAAAAAAAAAAEAAAAeAAAD6QAAABRzdHNzAAAAAAAAAAEAAAABAAAAHHN0c2MAAAAAAAAAAQAAAAEAAAABAAAAAQAAAIxzdHN6AAAAAAAAAAAAAAAeAAADDwAAAAsAAAALAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAAiHN0Y28AAAAAAAAAHgAAAEYAAANnAAADewAAA5gAAAO0AAADxwAAA+MAAAP2AAAEEgAABCUAAARBAAAEXQAABHAAAASMAAAEnwAABLsAAATOAAAE6gAABQYAAAUZAAAFNQAABUgAAAVkAAAFdwAABZMAAAWmAAAFwgAABd4AAAXxAAAGDQAABGh0cmFrAAAAXHRraGQAAAADAAAAAAAAAAAAAAACAAAAAAAABDcAAAAAAAAAAAAAAAEBAAAAAAEAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAkZWR0cwAAABxlbHN0AAAAAAAAAAEAAAQkAAADcAABAAAAAAPgbWRpYQAAACBtZGhkAAAAAAAAAAAAAAAAAAC7gAAAykBVxAAAAAAALWhkbHIAAAAAAAAAAHNvdW4AAAAAAAAAAAAAAABTb3VuZEhhbmRsZXIAAAADi21pbmYAAAAQc21oZAAAAAAAAAAAAAAAJGRpbmYAAAAcZHJlZgAAAAAAAAABAAAADHVybCAAAAABAAADT3N0YmwAAABnc3RzZAAAAAAAAAABAAAAV21wNGEAAAAAAAAAAQAAAAAAAAAAAAIAEAAAAAC7gAAAAAAAM2VzZHMAAAAAA4CAgCIAAgAEgICAFEAVBbjYAAu4AAAADcoFgICAAhGQBoCAgAECAAAAIHN0dHMAAAAAAAAAAgAAADIAAAQAAAAAAQAAAkAAAAFUc3RzYwAAAAAAAAAbAAAAAQAAAAEAAAABAAAAAgAAAAIAAAABAAAAAwAAAAEAAAABAAAABAAAAAIAAAABAAAABgAAAAEAAAABAAAABwAAAAIAAAABAAAACAAAAAEAAAABAAAACQAAAAIAAAABAAAACgAAAAEAAAABAAAACwAAAAIAAAABAAAADQAAAAEAAAABAAAADgAAAAIAAAABAAAADwAAAAEAAAABAAAAEAAAAAIAAAABAAAAEQAAAAEAAAABAAAAEgAAAAIAAAABAAAAFAAAAAEAAAABAAAAFQAAAAIAAAABAAAAFgAAAAEAAAABAAAAFwAAAAIAAAABAAAAGAAAAAEAAAABAAAAGQAAAAIAAAABAAAAGgAAAAEAAAABAAAAGwAAAAIAAAABAAAAHQAAAAEAAAABAAAAHgAAAAIAAAABAAAAHwAAAAQAAAABAAAA4HN0c3oAAAAAAAAAAAAAADMAAAAaAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAACMc3RjbwAAAAAAAAAfAAAALAAAA1UAAANyAAADhgAAA6IAAAO+AAAD0QAAA+0AAAQAAAAEHAAABC8AAARLAAAEZwAABHoAAASWAAAEqQAABMUAAATYAAAE9AAABRAAAAUjAAAFPwAABVIAAAVuAAAFgQAABZ0AAAWwAAAFzAAABegAAAX7AAAGFwAAAGJ1ZHRhAAAAWm1ldGEAAAAAAAAAIWhkbHIAAAAAAAAAAG1kaXJhcHBsAAAAAAAAAAAAAAAALWlsc3QAAAAlqXRvbwAAAB1kYXRhAAAAAQAAAABMYXZmNTUuMzMuMTAw\',\n        WEBM: \'data:video/webm;base64, GkXfowEAAAAAAAAfQoaBAUL3gQFC8oEEQvOBCEKChHdlYm1Ch4EEQoWBAhhTgGcBAAAAAAAVkhFNm3RALE27i1OrhBVJqWZTrIHfTbuMU6uEFlSua1OsggEwTbuMU6uEHFO7a1OsghV17AEAAAAAAACkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVSalmAQAAAAAAAEUq17GDD0JATYCNTGF2ZjU1LjMzLjEwMFdBjUxhdmY1NS4zMy4xMDBzpJBlrrXf3DCDVB8KcgbMpcr+RImIQJBgAAAAAAAWVK5rAQAAAAAAD++uAQAAAAAAADLXgQFzxYEBnIEAIrWcg3VuZIaFVl9WUDiDgQEj44OEAmJaAOABAAAAAAAABrCBsLqBkK4BAAAAAAAPq9eBAnPFgQKcgQAitZyDdW5khohBX1ZPUkJJU4OBAuEBAAAAAAAAEZ+BArWIQOdwAAAAAABiZIEgY6JPbwIeVgF2b3JiaXMAAAAAAoC7AAAAAAAAgLUBAAAAAAC4AQN2b3JiaXMtAAAAWGlwaC5PcmcgbGliVm9yYmlzIEkgMjAxMDExMDEgKFNjaGF1ZmVudWdnZXQpAQAAABUAAABlbmNvZGVyPUxhdmM1NS41Mi4xMDIBBXZvcmJpcyVCQ1YBAEAAACRzGCpGpXMWhBAaQlAZ4xxCzmvsGUJMEYIcMkxbyyVzkCGkoEKIWyiB0JBVAABAAACHQXgUhIpBCCGEJT1YkoMnPQghhIg5eBSEaUEIIYQQQgghhBBCCCGERTlokoMnQQgdhOMwOAyD5Tj4HIRFOVgQgydB6CCED0K4moOsOQghhCQ1SFCDBjnoHITCLCiKgsQwuBaEBDUojILkMMjUgwtCiJqDSTX4GoRnQXgWhGlBCCGEJEFIkIMGQcgYhEZBWJKDBjm4FITLQagahCo5CB+EIDRkFQCQAACgoiiKoigKEBqyCgDIAAAQQFEUx3EcyZEcybEcCwgNWQUAAAEACAAAoEiKpEiO5EiSJFmSJVmSJVmS5omqLMuyLMuyLMsyEBqyCgBIAABQUQxFcRQHCA1ZBQBkAAAIoDiKpViKpWiK54iOCISGrAIAgAAABAAAEDRDUzxHlETPVFXXtm3btm3btm3btm3btm1blmUZCA1ZBQBAAAAQ0mlmqQaIMAMZBkJDVgEACAAAgBGKMMSA0JBVAABAAACAGEoOogmtOd+c46BZDppKsTkdnEi1eZKbirk555xzzsnmnDHOOeecopxZDJoJrTnnnMSgWQqaCa0555wnsXnQmiqtOeeccc7pYJwRxjnnnCateZCajbU555wFrWmOmkuxOeecSLl5UptLtTnnnHPOOeecc84555zqxekcnBPOOeecqL25lpvQxTnnnE/G6d6cEM4555xzzjnnnHPOOeecIDRkFQAABABAEIaNYdwpCNLnaCBGEWIaMulB9+gwCRqDnELq0ehopJQ6CCWVcVJKJwgNWQUAAAIAQAghhRRSSCGFFFJIIYUUYoghhhhyyimnoIJKKqmooowyyyyzzDLLLLPMOuyssw47DDHEEEMrrcRSU2011lhr7jnnmoO0VlprrbVSSimllFIKQkNWAQAgAAAEQgYZZJBRSCGFFGKIKaeccgoqqIDQkFUAACAAgAAAAABP8hzRER3RER3RER3RER3R8RzPESVREiVREi3TMjXTU0VVdWXXlnVZt31b2IVd933d933d+HVhWJZlWZZlWZZlWZZlWZZlWZYgNGQVAAACAAAghBBCSCGFFFJIKcYYc8w56CSUEAgNWQUAAAIACAAAAHAUR3EcyZEcSbIkS9IkzdIsT/M0TxM9URRF0zRV0RVdUTdtUTZl0zVdUzZdVVZtV5ZtW7Z125dl2/d93/d93/d93/d93/d9XQdCQ1YBABIAADqSIymSIimS4ziOJElAaMgqAEAGAEAAAIriKI7jOJIkSZIlaZJneZaomZrpmZ4qqkBoyCoAABAAQAAAAAAAAIqmeIqpeIqoeI7oiJJomZaoqZoryqbsuq7ruq7ruq7ruq7ruq7ruq7ruq7ruq7ruq7ruq7ruq7ruq4LhIasAgAkAAB0JEdyJEdSJEVSJEdygNCQVQCADACAAAAcwzEkRXIsy9I0T/M0TxM90RM901NFV3SB0JBVAAAgAIAAAAAAAAAMybAUy9EcTRIl1VItVVMt1VJF1VNVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVN0zRNEwgNWQkAkAEAkBBTLS3GmgmLJGLSaqugYwxS7KWxSCpntbfKMYUYtV4ah5RREHupJGOKQcwtpNApJq3WVEKFFKSYYyoVUg5SIDRkhQAQmgHgcBxAsixAsiwAAAAAAAAAkDQN0DwPsDQPAAAAAAAAACRNAyxPAzTPAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABA0jRA8zxA8zwAAAAAAAAA0DwP8DwR8EQRAAAAAAAAACzPAzTRAzxRBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABA0jRA8zxA8zwAAAAAAAAAsDwP8EQR0DwRAAAAAAAAACzPAzxRBDzRAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAEOAAABBgIRQasiIAiBMAcEgSJAmSBM0DSJYFTYOmwTQBkmVB06BpME0AAAAAAAAAAAAAJE2DpkHTIIoASdOgadA0iCIAAAAAAAAAAAAAkqZB06BpEEWApGnQNGgaRBEAAAAAAAAAAAAAzzQhihBFmCbAM02IIkQRpgkAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAGHAAAAgwoQwUGrIiAIgTAHA4imUBAIDjOJYFAACO41gWAABYliWKAABgWZooAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAYcAAACDChDBQashIAiAIAcCiKZQHHsSzgOJYFJMmyAJYF0DyApgFEEQAIAAAocAAACLBBU2JxgEJDVgIAUQAABsWxLE0TRZKkaZoniiRJ0zxPFGma53meacLzPM80IYqiaJoQRVE0TZimaaoqME1VFQAAUOAAABBgg6bE4gCFhqwEAEICAByKYlma5nmeJ4qmqZokSdM8TxRF0TRNU1VJkqZ5niiKommapqqyLE3zPFEURdNUVVWFpnmeKIqiaaqq6sLzPE8URdE0VdV14XmeJ4qiaJqq6roQRVE0TdNUTVV1XSCKpmmaqqqqrgtETxRNU1Vd13WB54miaaqqq7ouEE3TVFVVdV1ZBpimaaqq68oyQFVV1XVdV5YBqqqqruu6sgxQVdd1XVmWZQCu67qyLMsCAAAOHAAAAoygk4wqi7DRhAsPQKEhKwKAKAAAwBimFFPKMCYhpBAaxiSEFEImJaXSUqogpFJSKRWEVEoqJaOUUmopVRBSKamUCkIqJZVSAADYgQMA2IGFUGjISgAgDwCAMEYpxhhzTiKkFGPOOScRUoox55yTSjHmnHPOSSkZc8w556SUzjnnnHNSSuacc845KaVzzjnnnJRSSuecc05KKSWEzkEnpZTSOeecEwAAVOAAABBgo8jmBCNBhYasBABSAQAMjmNZmuZ5omialiRpmud5niiapiZJmuZ5nieKqsnzPE8URdE0VZXneZ4oiqJpqirXFUXTNE1VVV2yLIqmaZqq6rowTdNUVdd1XZimaaqq67oubFtVVdV1ZRm2raqq6rqyDFzXdWXZloEsu67s2rIAAPAEBwCgAhtWRzgpGgssNGQlAJABAEAYg5BCCCFlEEIKIYSUUggJAAAYcAAACDChDBQashIASAUAAIyx1lprrbXWQGettdZaa62AzFprrbXWWmuttdZaa6211lJrrbXWWmuttdZaa6211lprrbXWWmuttdZaa6211lprrbXWWmuttdZaa6211lprrbXWWmstpZRSSimllFJKKaWUUkoppZRSSgUA+lU4APg/2LA6wknRWGChISsBgHAAAMAYpRhzDEIppVQIMeacdFRai7FCiDHnJKTUWmzFc85BKCGV1mIsnnMOQikpxVZjUSmEUlJKLbZYi0qho5JSSq3VWIwxqaTWWoutxmKMSSm01FqLMRYjbE2ptdhqq7EYY2sqLbQYY4zFCF9kbC2m2moNxggjWywt1VprMMYY3VuLpbaaizE++NpSLDHWXAAAd4MDAESCjTOsJJ0VjgYXGrISAAgJACAQUooxxhhzzjnnpFKMOeaccw5CCKFUijHGnHMOQgghlIwx5pxzEEIIIYRSSsaccxBCCCGEkFLqnHMQQgghhBBKKZ1zDkIIIYQQQimlgxBCCCGEEEoopaQUQgghhBBCCKmklEIIIYRSQighlZRSCCGEEEIpJaSUUgohhFJCCKGElFJKKYUQQgillJJSSimlEkoJJYQSUikppRRKCCGUUkpKKaVUSgmhhBJKKSWllFJKIYQQSikFAAAcOAAABBhBJxlVFmGjCRcegEJDVgIAZAAAkKKUUiktRYIipRikGEtGFXNQWoqocgxSzalSziDmJJaIMYSUk1Qy5hRCDELqHHVMKQYtlRhCxhik2HJLoXMOAAAAQQCAgJAAAAMEBTMAwOAA4XMQdAIERxsAgCBEZohEw0JweFAJEBFTAUBigkIuAFRYXKRdXECXAS7o4q4DIQQhCEEsDqCABByccMMTb3jCDU7QKSp1IAAAAAAADADwAACQXAAREdHMYWRobHB0eHyAhIiMkAgAAAAAABcAfAAAJCVAREQ0cxgZGhscHR4fICEiIyQBAIAAAgAAAAAggAAEBAQAAAAAAAIAAAAEBB9DtnUBAAAAAAAEPueBAKOFggAAgACjzoEAA4BwBwCdASqwAJAAAEcIhYWIhYSIAgIABhwJ7kPfbJyHvtk5D32ych77ZOQ99snIe+2TkPfbJyHvtk5D32ych77ZOQ99YAD+/6tQgKOFggADgAqjhYIAD4AOo4WCACSADqOZgQArADECAAEQEAAYABhYL/QACIBDmAYAAKOFggA6gA6jhYIAT4AOo5mBAFMAMQIAARAQABgAGFgv9AAIgEOYBgAAo4WCAGSADqOFggB6gA6jmYEAewAxAgABEBAAGAAYWC/0AAiAQ5gGAACjhYIAj4AOo5mBAKMAMQIAARAQABgAGFgv9AAIgEOYBgAAo4WCAKSADqOFggC6gA6jmYEAywAxAgABEBAAGAAYWC/0AAiAQ5gGAACjhYIAz4AOo4WCAOSADqOZgQDzADECAAEQEAAYABhYL/QACIBDmAYAAKOFggD6gA6jhYIBD4AOo5iBARsAEQIAARAQFGAAYWC/0AAiAQ5gGACjhYIBJIAOo4WCATqADqOZgQFDADECAAEQEAAYABhYL/QACIBDmAYAAKOFggFPgA6jhYIBZIAOo5mBAWsAMQIAARAQABgAGFgv9AAIgEOYBgAAo4WCAXqADqOFggGPgA6jmYEBkwAxAgABEBAAGAAYWC/0AAiAQ5gGAACjhYIBpIAOo4WCAbqADqOZgQG7ADECAAEQEAAYABhYL/QACIBDmAYAAKOFggHPgA6jmYEB4wAxAgABEBAAGAAYWC/0AAiAQ5gGAACjhYIB5IAOo4WCAfqADqOZgQILADECAAEQEAAYABhYL/QACIBDmAYAAKOFggIPgA6jhYICJIAOo5mBAjMAMQIAARAQABgAGFgv9AAIgEOYBgAAo4WCAjqADqOFggJPgA6jmYECWwAxAgABEBAAGAAYWC/0AAiAQ5gGAACjhYICZIAOo4WCAnqADqOZgQKDADECAAEQEAAYABhYL/QACIBDmAYAAKOFggKPgA6jhYICpIAOo5mBAqsAMQIAARAQABgAGFgv9AAIgEOYBgAAo4WCArqADqOFggLPgA6jmIEC0wARAgABEBAUYABhYL/QACIBDmAYAKOFggLkgA6jhYIC+oAOo5mBAvsAMQIAARAQABgAGFgv9AAIgEOYBgAAo4WCAw+ADqOZgQMjADECAAEQEAAYABhYL/QACIBDmAYAAKOFggMkgA6jhYIDOoAOo5mBA0sAMQIAARAQABgAGFgv9AAIgEOYBgAAo4WCA0+ADqOFggNkgA6jmYEDcwAxAgABEBAAGAAYWC/0AAiAQ5gGAACjhYIDeoAOo4WCA4+ADqOZgQObADECAAEQEAAYABhYL/QACIBDmAYAAKOFggOkgA6jhYIDuoAOo5mBA8MAMQIAARAQABgAGFgv9AAIgEOYBgAAo4WCA8+ADqOFggPkgA6jhYID+oAOo4WCBA+ADhxTu2sBAAAAAAAAEbuPs4EDt4r3gQHxghEr8IEK\'\n    },\n\n    MIME_TYPES: {\n        image: [\n            \'image/gif\',\n            \'image/jpeg\',\n            \'image/pjpeg\',\n            \'image/png\',\n            \'image/svg+xml\',\n            \'image/tiff\',\n            \'image/vnd.microsoft.icon\',\n            \'image/vnd.wap.wbmp\',\n            \'image/webp\'\n        ],\n        audio: [\n            \'audio/basic\',\n            \'audio/L24\',\n            \'audio/mp4\',\n            \'audio/aac\',\n            \'audio/mpeg\',\n            \'audio/ogg\',\n            \'audio/ogg; codecs=opus\',\n            \'audio/ogg; codecs=opus+voice\',\n            \'audio/vorbis\',\n            \'audio/x-ms-wma\',\n            \'audio/x-ms-wax\',\n            \'audio/vnd.rn-realaudio\',\n            \'audio/vnd.wave\',\n            \'audio/webm\',\n            \'audio/x-wav\'\n        ],\n        video: [\n            \'video/mpeg\',\n            \'video/mp4\',\n            \'video/ogg\',\n            \'video/quicktime\',\n            \'video/webm\',\n            \'video/x-ms-wmv\',\n            \'video/x-flv\',\n            \'video/3gpp\',\n            \'video/3gpp2\'\n        ],\n        document: [\n            \'text/cmd\',\n            \'text/css\',\n            \'text/csv\',\n            \'text/html\',\n            \'text/javascript (Obsolete)\',\n            \'text/plain\',\n            \'text/php\',\n            \'text/xml\',\n            \'text/markdown\',\n            \'text/cache-manifestapplication/json\',\n            \'application/xml\',\n            \'application/vnd.oasis.opendocument.text\',\n            \'application/vnd.oasis.opendocument.graphics\',\n            \'application/msword\'\n        ],\n        pdf: [\n            \'application/pdf\'\n        ],\n        table: [\n            \'application/vnd.oasis.opendocument.spreadsheet\',\n            \'application/vnd.ms-excel\'\n        ],\n        archive: [\n            \'application/zip\',\n            \'application/gzip\',\n            \'application/x-rar-compressed\',\n            \'application/x-tar\',\n            \'application/x-7z-compressed\'\n        ],\n        presentation: [\n            \'application/vnd.ms-powerpoint\',\n            \'application/vnd.oasis.opendocument.presentation\'\n        ]\n    },\n\n    languages: {\n        "en": "English",\n        "": "Montenegrin (Latin)", // ????????\n        "ar-SA": "العربية",\n        "az-AZ": "Azərbaycanca",\n        "be-BY": "Беларуская",\n        "bg-BG": "Български",\n        "bs-BA": "Bosanski",\n        "ca-ES": "Català",\n        "cs-CZ": "Čeština",\n        "cy-GB": "Cymraeg",\n        "da-DK": "Dansk",\n        "de-DE": "Deutsch",\n        "el-GR": "Ελληνικά",\n        "es419": "Spanish Latin America",\n        "es-ES": "Español",\n        "et-EE": "Eesti",\n        "fa-IR": "فارسی",\n        "fi-FI": "Suomi",\n        "fil-PH": "Pilipino",\n        "fr-FR": "Français",\n        "ga-IE": "Gaeilge",\n        "he": "עברית",\n        "hi-IN": "हिन्दी",\n        "hr-HR": "Hrvatski",\n        "hu-HU": "Magyar",\n        "hy-AM": "Հայերեն",\n        "in-ID": "Bahasa Indonesia",\n        "is-IS": "Íslenska",\n        "it-IT": "Italiano",\n        "ja-JP": "日本語",\n        "ka-GE": "ქართული",\n        "kmr-TR": "Kurmancî (Kurdî)",\n        "ko-KR": "한국어",\n        "ku-TR": "Kurdî",\n        "ky-KG": "Кыргызча",\n        "la-LA": "Latina",\n        "lb-LU": "Luxembourgish",\n        "lt-LT": "Lietuvių",\n        "mk-MK": "Македонски",\n        "mn-MN": "Монгол",\n        "mr-IN": "मराठी",\n        "ms-MY": "Bahasa Melayu",\n        "nb-NO": "Norsk (bokmål)",\n        "ne-NP": "Nepālī",\n        "nl-NL": "Nederlands",\n        "no-NO": "Norsk (nynorsk)",\n        "oc-FR": "Occitan",\n        "pa-IN": "ਪੰਜਾਬੀ (ਗੁਰਮੁਖੀ)",\n        "pl-PL": "Polski",\n        "pt-BR": "Português, brasileiro",\n        "pt-PT": "Português",\n        "qya-AA": "quenya",\n        "ro-RO": "Română",\n        "ru-RU": "Русский",\n        "sco-GB": "Scots",\n        "si-LK": "සිංහල",\n        "sk-SK": "Slovenčina",\n        "sl-SI": "Slovenščina",\n        "sq-AL": "Shqip",\n        "sr-Cyrl-ME": "Montenegrin (Cyrillic)",\n        "sr-SP": "Српски / Srpski",\n        "sv-SE": "Svenska",\n        "sw-KE": "Kiswahili",\n        "ta-IN": "தமிழ்",\n        "te-IN": "తెలుగు",\n        "tg-TJ": "Тоҷикӣ",\n        "tk-TM": "Türkmençe",\n        "tlh-AA": "Klingon",\n        "tr-TR": "Türkçe",\n        "uk-UA": "Українська",\n        "uz-UZ": "Oʻzbekcha / Ўзбекча",\n        "vi-VN": "Tiếng Việt",\n        "yo-NG": "Yorùbá",\n        "zh-CN": "简体中文",\n        "zh-TW": "中國傳統的",\n        "zu-ZA": "isiZulu"\n    },\n\n    languages_another_locales: {\n        "es419": "es-latin",\n        "in-ID": "id"\n    },\n\n    PERSONAL_AREA_URL: {},\n\n    XABBER_ACCOUNT_URL: \'https://www.xabber.com/account\',\n    API_SERVICE_URL: \'https://api.xabber.com/api/v2\',\n    USE_SOCIAL_AUTH: true,\n    REGISTER_XMPP_ACCOUNT: true,\n    REGISTER_XMPP_ACCOUNT_URL: \'https://www.xabber.com/account/auth/signup/\',\n    CHECK_VERSION: true,\n    DEFAULT_LOGIN_SCREEN: \'xmpp\',\n\n    GCM_SENDER_ID: \'868637702480\',\n    GCM_API_KEY: \'AIzaSyC1JCBB3LLf_4DG_vRWMEEe0I4X5msEU-M\',\n    MESSAGE_ARCHIVE_DB_NAME: \'MessageArchive\',\n    STANZA_MAX_SIZE: Math.pow(2, 16),\n\n    BLUR_VALUE: 25,\n    VIGNETTING_VALUE: 128,\n    TRANSPARENCY_VALUE: 50,\n\n    MAIN_COLOR: \'red\',\n    CLIENT_NAME: \'Xabber for Web\',\n    SHORT_CLIENT_NAME: \'Xabber\',\n    SHORT_CLIENT_DESCRIPTION: \'World’s best XMPP experience\',\n    CLIENT_LOGO: \'images/xabber-logo-96.png\',\n    TOOLBAR_LOGO: \'images/xabber-logo.png\',\n    ENABLE_XABBER_ACCOUNT: false,\n    SCREEN_ABOUT: true,\n    CLIENT_URL: \'https://www.xabber.com\',\n    DEVELOPER_URL: \'https://redsolution.com\',\n    CLIENT_GITHUB_URL: \'https://github.com/redsolution/xabber-web\',\n    PROJECT_CROWDIN_URL: \'https://crowdin.com/project/xabber\',\n    CLIENT_LICENSE_GITHUB_URL: \'https://github.com/redsolution/xabber-web/blob/master/LICENSE\'\n};\n\nconstants.JINGLE_MSG_STATE = {};\nconstants.JINGLE_MSG_STATE[constants.JINGLE_MSG_REJECT] = \'reject\';\nconstants.JINGLE_MSG_STATE[constants.JINGLE_MSG_PROPOSE] = \'propose\';\nconstants.JINGLE_MSG_STATE[constants.JINGLE_MSG_ACCEPT] = \'accept\';\n\nconstants.MSG_STATE = {};\nconstants.MSG_STATE[constants.MSG_ERROR] = \'error\';\nconstants.MSG_STATE[constants.MSG_PENDING] = \'pending\';\nconstants.MSG_STATE[constants.MSG_SENT] = \'sent\';\nconstants.MSG_STATE[constants.MSG_DELIVERED] = \'delivered\';\nconstants.MSG_STATE[constants.MSG_DISPLAYED] = \'displayed\';\nconstants.MSG_STATE[constants.MSG_ARCHIVED] = \'archived\';\nconstants.MSG_STATE[constants.MSG_BLOCKED] = \'not-allowed\';\nconstants.MSG_STATE[constants.MSG_SAVED] = \'saved\';\n\nconstants.MSG_VERBOSE_STATE = {};\nconstants.MSG_VERBOSE_STATE[constants.MSG_ERROR] = \'message__delivering_state__error\';\nconstants.MSG_VERBOSE_STATE[constants.MSG_PENDING] = \'message__delivering_state__pending\';\nconstants.MSG_VERBOSE_STATE[constants.MSG_SENT] = \'message__delivering_state__sent\';\nconstants.MSG_VERBOSE_STATE[constants.MSG_DELIVERED] = \'message__delivering_state__delivered\';\nconstants.MSG_VERBOSE_STATE[constants.MSG_DISPLAYED] = \'message__delivering_state__displayed\';\nconstants.MSG_VERBOSE_STATE[constants.MSG_ARCHIVED] = \'message__delivering_state__archived\';\nconstants.MSG_VERBOSE_STATE[constants.MSG_BLOCKED] = \'message__delivering_state__error\';\nconstants.MSG_VERBOSE_STATE[constants.MSG_SAVED] = \'message__delivering_state__saved\';\n\n\nif (true) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n        return constants;\n    }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n}\n\n\n//# sourceURL=webpack://xabber.web/./src/constants.js?')},"./src/contacts.js":(module,exports,__webpack_require__)=>{eval("/* provided dependency */ var WaveSurfer = __webpack_require__(/*! wavesurfer */ \"./node_modules/wavesurfer/dist/wavesurfer.js\");\nvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    return function (xabber) {\n        let env = xabber.env,\n            constants = env.constants,\n            templates = env.templates.contacts,\n            utils = env.utils,\n            $ = env.$,\n            $iq = env.$iq,\n            $pres = env.$pres,\n            Strophe = env.Strophe,\n            _ = env._,\n            moment = env.moment,\n            uuid = env.uuid,\n            Images = utils.images,\n            Emoji = utils.emoji,\n            pretty_datetime = (timestamp) => { return utils.pretty_datetime(timestamp, (xabber.settings.language == 'ru-RU' || xabber.settings.language == 'default' && xabber.get(\"default_language\") == 'ru-RU') && 'D MMMM YYYY HH:mm:ss')};\n\n        xabber.Contact = Backbone.Model.extend({\n            idAttribute: 'jid',\n            defaults: {\n                status: \"offline\",\n                status_message: \"\",\n                subscription: undefined,\n                subscription_request_in: false,\n                subscription_request_out: false,\n                groups: [],\n                group_chat: false\n            },\n\n            initialize: function (_attrs, options) {\n                this.on(\"change:group_chat\", this.onChangedGroupchat, this);\n                this.account = options.account;\n                if (_attrs.avatar) {\n                    _attrs.image = _attrs.avatar;\n                    delete _attrs.avatar;\n                }\n                let attrs = _.clone(_attrs);\n                if (attrs.resource) {\n                    attrs.full_jid = attrs.jid + '/' + attrs.resource;\n                } else if (attrs.group_chat) {\n                    attrs.full_jid = attrs.jid + '/Group';\n                }\n                (this.account && this.account.domain === attrs.jid) && _.extend(attrs, {server: true, status: 'online'});\n                attrs.name = attrs.roster_name || attrs.name || attrs.jid;\n                if (!attrs.image) {\n                    attrs.photo_hash = \"\";\n                    attrs.image = Images.getDefaultAvatar(attrs.name);\n                }\n                if (this.account.blocklist.isBlocked(attrs.jid))\n                    attrs.blocked = true;\n                this.cached_image = Images.getCachedImage(attrs.image);\n                attrs.vcard = utils.vcard.getBlank(attrs.jid);\n                this.set(attrs);\n                this.onChangedGroupchat();\n                this.domain = Strophe.getDomainFromJid(this.get('jid'));\n                !this.get('group_chat') && this.set('group_chat', _.contains(this.account.chat_settings.get('group_chat'), this.get('jid')));\n                this.hash_id = env.b64_sha1(this.account.get('jid') + '-' + attrs.jid);\n                this.resources = new xabber.ContactResources(null, {contact: this});\n                this.on(\"update_avatar\", this.updateAvatar, this);\n                this.on(\"change:full_jid\", this.updateCachedInfo, this);\n                this.on(\"change:roster_name\", this.updateName, this);\n                this.account.dfd_presence.done(() => {\n                    if (!this.get('blocked') && !this.get('vcard_updated'))\n                        this.getVCard();\n                });\n            },\n\n            getStatusMessage: function () {\n                let subscription = this.get('subscription'),\n                    in_request = this.get('subscription_request_in'),\n                    out_request = this.get('subscription_request_out'),\n                    status_text = \"\";\n                if (this.get('blocked'))\n                    status_text = xabber.getString(\"action_contact_blocked\");\n                else if (this.get('group_chat')) {\n                    if (this.get('group_info')) {\n                        if (this.get('group_info').members_num)\n                            status_text += xabber.getQuantityString(\"contact_groupchat_status_member\", this.get('group_info').members_num);\n                        if (this.get('group_info').online_members_num > 0)\n                            status_text += xabber.getString(\"contact_groupchat_status_online\", [this.get('group_info').online_members_num || 0]);\n                    } else if (!subscription)\n                        status_text = xabber.getString(\"contact_state_no_subscriptions\");\n                    else\n                        status_text = this.get('status_message') || xabber.getString(this.get('status'));\n                } else {\n                    if (subscription === 'from') {\n                        if (out_request)\n                            status_text = xabber.getString(\"contact_state_outgoing_request\");\n                        else\n                            status_text = xabber.getString(\"chat_receives_presence_updates\");\n                    } else if (subscription === 'none') {\n                        if (out_request)\n                            status_text = xabber.getString(\"contact_state_outgoing_request\");\n                        else if (in_request)\n                            status_text = xabber.getString(\"contact_state_in_contact_list\");\n                        else\n                            status_text = xabber.getString(\"contact_state_in_contact_list\");\n                    }\n                    else if (!subscription)\n                        status_text = xabber.getString(\"contact_state_not_in_contact_list\");\n                    else\n                        status_text = this.get('status_message') || xabber.getString(this.get('status'));\n                }\n                return status_text;\n            },\n\n            getSubscriptionStatuses: function () {\n                let subscription = this.get('subscription'),\n                    subscription_preapproved = this.get('subscription_preapproved'),\n                    in_request = this.get('subscription_request_in'),\n                    out_request = this.get('subscription_request_out'),\n                    status_description = \"\",\n                    status_out_color = \"\",\n                    status_in_color = \"\",\n                    status_out_text = \"\",\n                    status_in_text = \"\";\n                if (this.get('blocked'))\n                    status_out_text = xabber.getString(\"action_contact_blocked\");\n                if (subscription === 'both') {\n                    status_out_text = xabber.getString(\"subscription_status_out_to\");\n                    status_in_text = xabber.getString(\"subscription_status_in_from\");\n                    status_description = xabber.getString(\"subscription_status_description_both\");\n                }\n                else if (subscription === 'from') {\n                    if (out_request){\n                        status_out_text = xabber.getString(\"subscription_status_out_requested\");\n                        status_in_text = xabber.getString(\"subscription_status_in_from\");\n                        status_description = xabber.getString(\"subscription_status_description_out_requested_in_from\");\n                    }\n                    else {\n                        status_out_text = xabber.getString(\"subscription_status_out_none\");\n                        status_in_text = xabber.getString(\"subscription_status_in_from\");\n                        status_description = xabber.getString(\"subscription_status_description_out_none_in_from\");\n                    }\n                }\n                else if (subscription === 'to') {\n                    if (in_request){\n                        status_out_text = xabber.getString(\"subscription_status_out_to\");\n                        status_in_text = xabber.getString(\"subscription_status_in_request_incoming\");\n                        status_description = xabber.getString(\"subscription_status_description_out_to_in_request_incoming\");\n                    }\n                    else {\n                        status_out_text = xabber.getString(\"subscription_status_out_to\");\n                        status_in_text = xabber.getString(\"subscription_status_in_not_allowed\");\n                        status_description = xabber.getString(\"subscription_status_description_out_to_in_not_allowed\");\n                        if (subscription_preapproved){\n                            status_in_text = xabber.getString(\"subscription_status_is_allowed\");\n                            status_description = xabber.getString(\"subscription_status_description_out_to_in_allowed\");\n                        }\n                    }\n                } else if (subscription === 'none') {\n                    if (out_request && in_request){\n                        status_out_text = xabber.getString(\"subscription_status_out_requested\");\n                        status_in_text = xabber.getString(\"subscription_status_in_request_incoming\");\n                        status_description = xabber.getString(\"subscription_status_description_out_requested_in_request_incoming\");\n                    }\n                    else if (out_request){\n                        status_out_text = xabber.getString(\"subscription_status_out_requested\");\n                        status_in_text = xabber.getString(\"subscription_status_in_not_allowed\");\n                        status_description = xabber.getString(\"subscription_status_description_out_requested_in_not_allowed\");\n                        if (subscription_preapproved){\n                            status_in_text = xabber.getString(\"subscription_status_is_allowed\");\n                            status_description = xabber.getString(\"subscription_status_description_out_request_in_allowed\");\n                        }\n                    }\n                    else if (in_request){\n                        status_out_text = xabber.getString(\"subscription_status_out_none\");\n                        status_in_text = xabber.getString(\"subscription_status_in_request_incoming\");\n                        status_description = xabber.getString(\"subscription_status_description_out_none_in_request_incoming\");\n                    }\n                    else {\n                        status_out_text = xabber.getString(\"subscription_status_out_none\");\n                        status_in_text = xabber.getString(\"subscription_status_in_not_allowed\");\n                        status_description = xabber.getString(\"subscription_status_description_out_none_in_not_allowed\");\n                        if (subscription_preapproved){\n                            status_in_text = xabber.getString(\"subscription_status_is_allowed\");\n                            status_description = xabber.getString(\"subscription_status_description_out_none_in_allowed\");\n                        }\n                    }\n                }\n                else if (!subscription)\n                    status_out_text = xabber.getString(\"contact_add\");\n\n                if (out_request)\n                    status_out_color = \"request\";\n                if (in_request)\n                    status_in_color = \"request\";\n                if (subscription === 'to')\n                    status_out_color = \"subbed\";\n                if (subscription === 'from')\n                    status_in_color = \"subbed\";\n                if (subscription === 'both') {\n                    status_out_color = \"subbed\";\n                    status_in_color = \"subbed\";\n                }\n                return {\n                    status_out: status_out_text,\n                    status_in: status_in_text,\n                    status_out_color: status_out_color,\n                    status_in_color: status_in_color,\n                    status_description: status_description,\n                };\n            },\n\n            getIcon: function () {\n                if (this.get('blocked'))\n                    return 'blocked';\n                if (this.get('invitation'))\n                    return 'group-invite';\n                if (this.get('group_chat')) {\n                    if (this.get('jid').includes('redmine_issue_'))\n                        return 'task';\n                    if (this.get('private_chat'))\n                        return 'group-private';\n                    if (this.get('incognito_chat'))\n                        return 'group-incognito';\n                    return 'group-public';\n                }\n                if (this.get('server'))\n                    return 'server';\n                if (this.get('bot'))\n                    return 'bot';\n                return;\n            },\n\n            updateAvatar: function () {\n                this.account.cached_roster.getFromRoster(this.get('jid'), (cached_info) => {\n                    if (cached_info && this.get('photo_hash') === cached_info.photo_hash)\n                        return;\n                    this.getVCard();\n                });\n            },\n\n            getVCard: function (callback) {\n                let jid = this.get('jid'),\n                    is_callback = _.isFunction(callback);\n                this.account.getConnectionForIQ().vcard.get(jid,\n                     (vcard) => {\n                        if (vcard.group_info) {\n                            let group_info = this.get('group_info') || {};\n                            group_info = _.extend(group_info, vcard.group_info);\n                            this.set({group_info});\n                            delete vcard.group_info;\n                        }\n                        let attrs = {\n                            vcard: vcard,\n                            vcard_updated: moment.now(),\n                            name: this.get('roster_name')\n                        };\n                        if (!attrs.name) {\n                            if (this.get('group_chat'))\n                                attrs.name = vcard.nickname || this.get('name');\n                            else\n                                attrs.name = vcard.nickname || (vcard.first_name + ' ' + vcard.last_name).trim() || vcard.fullname || jid;\n                        }\n                        if (!this.get('avatar_priority') || this.get('avatar_priority') <= constants.AVATAR_PRIORITIES.VCARD_AVATAR) {\n                            if (vcard.photo.image) {\n                                attrs.avatar_priority = constants.AVATAR_PRIORITIES.VCARD_AVATAR;\n                                attrs.image = vcard.photo.image;\n                            }\n                            else\n                                attrs.image = Images.getDefaultAvatar(attrs.name);\n                            this.cached_image = Images.getCachedImage(attrs.image);\n                        }\n                        this.set(attrs);\n                        if (this.get('in_roster')) {\n                            this.updateCachedInfo();\n                        }\n                        is_callback && callback(vcard);\n                    },\n                    function () {\n                        is_callback && callback(null);\n                    }\n                );\n            },\n\n            updateCachedInfo: function () {\n                let roster_info = {\n                    jid: this.get('jid'),\n                    in_roster: this.get('in_roster'),\n                    groups: this.get('groups'),\n                    subscription: this.get('subscription'),\n                    roster_name: this.get('roster_name'),\n                    subscription_request_out: this.get('subscription_request_out'),\n                    subscription_request_in: this.get('subscription_request_in'),\n                    name: this.get('name'),\n                    vcard_updated: this.get('vcard_updated')\n                }, full_jid = this.get('full_jid');\n                if (this.get('photo_hash') || this.get('image'))\n                    _.extend(roster_info, {\n                        photo_hash: (this.get('photo_hash') || this.account.getAvatarHash(this.get('image'))),\n                        avatar_priority: this.get('avatar_priority'),\n                        avatar: this.get('image')\n                    });\n                if (full_jid)\n                    roster_info.resource = Strophe.getResourceFromJid(full_jid);\n                this.account.cached_roster.putInRoster(roster_info);\n            },\n\n            onChangedGroupchat: function () {\n                if (this.get('group_chat')) {\n                    this.updateCounters();\n                    this.participants = new xabber.Participants(null, {contact: this});\n                }\n            },\n\n            getBlockedParticipants: function (callback, errback) {\n                let iq = $iq({\n                    type: 'get',\n                    to: this.get('full_jid') || this.get('jid')})\n                    .c('query', {xmlns: Strophe.NS.GROUP_CHAT + '#block'});\n                this.account.sendFast(iq, callback, errback);\n            },\n\n            updateCounters: function () {\n                xabber.toolbar_view.recountAllMessageCounter();\n            },\n\n            getLastSeen: function() {\n                if (this.get('status') == 'offline') {\n                    if (!Strophe.getNodeFromJid(this.get('jid'))) {\n                        this.set({status_message: 'Server'});\n                        return;\n                    }\n                    let iq = $iq({type: 'get', to: this.get('jid') }).c('query', {xmlns: Strophe.NS.LAST});\n                    this.account.sendIQFast(iq, (iq) => {\n                        let last_seen = this.getLastSeenStatus(iq);\n                        if (this.get('status') == 'offline')\n                            this.set({status_message: last_seen});\n                        return this;\n                    });\n                }\n            },\n\n            getMyInfo: function (callback) {\n                this.participants.participantsRequest({id: '', properties: true}, (response) => {\n                    let $item = $($(response).find('query user')),\n                        cached_avatar = this.account.chat_settings.getAvatarInfoById($item.find('id').text());\n                    $item.length && this.participants && this.participants.createFromStanza($item);\n                    cached_avatar && (cached_avatar.avatar_hash == this.my_info.get('avatar')) && this.my_info.set('b64_avatar', cached_avatar.avatar_b64);\n                    this.trigger('update_my_info');\n                    this.participants.participantsRequest({id: ''}, (response) => {\n                        let data_form = this.account.parseDataForm($(response).find(`x[xmlns=\"${Strophe.NS.DATAFORM}\"]`));\n                        this.my_rights = data_form;\n                        this.trigger('permissions_changed');\n                        callback && callback();\n                    });\n                });\n            },\n\n            getAvatar: function (avatar, node, callback, errback) {\n                let jid = this.get('group_chat') ? this.get('full_jid') : this.get('jid'),\n                    iq_request_avatar = $iq({type: 'get', to: jid})\n                    .c('pubsub', {xmlns: Strophe.NS.PUBSUB})\n                    .c('items', {node: node})\n                    .c('item', {id: avatar});\n                this.account.sendIQFast(iq_request_avatar, (iq) => {\n                    let pubsub_avatar = $(iq).find('data').text();\n                    if (pubsub_avatar == \"\")\n                        errback && errback(xabber.getString(\"pubsub__error__text_empty_node\"));\n                    else\n                        callback && callback(pubsub_avatar);\n                });\n            },\n\n            pubAvatar: function (image, node, callback, errback) {\n                let avatar_hash = sha1(image.base64),\n                    iq_pub_data = $iq({type: 'set', to: this.get('jid') })\n                        .c('pubsub', {xmlns: Strophe.NS.PUBSUB})\n                        .c('publish', {node: Strophe.NS.PUBSUB_AVATAR_DATA + node})\n                        .c('item', {id: avatar_hash})\n                        .c('data', {xmlns: Strophe.NS.PUBSUB_AVATAR_DATA}).t(image.base64),\n                    iq_pub_metadata = $iq({type: 'set', to: this.get('jid') })\n                        .c('pubsub', {xmlns: Strophe.NS.PUBSUB})\n                        .c('publish', {node: Strophe.NS.PUBSUB_AVATAR_METADATA + node})\n                        .c('item', {id: avatar_hash})\n                        .c('metadata', {xmlns: Strophe.NS.PUBSUB_AVATAR_METADATA})\n                        .c('info', {bytes: image.size, id: avatar_hash, type: image.type});\n                this.account.sendIQFast(iq_pub_data, () => {\n                        this.account.sendIQFast(iq_pub_metadata, () => {\n                                callback && callback(avatar_hash);\n                            },\n                            function (data_error) {\n                                errback && errback(data_error);\n                            });\n                    }, (data_error) => {\n                        errback && errback(data_error);\n                    });\n            },\n\n            getLastSeenStatus: function(iq) {\n                let seconds = $(iq).children('query').attr('seconds'),\n                    message_time = moment.now() - 1000*seconds;\n                this.set({ last_seen: message_time });\n                return xabber.pretty_last_seen(seconds);\n            },\n\n            pres: function (type) {\n                let pres = $pres({to: this.get('jid'), type: type});\n                this.account.sendPres(pres);\n                return this;\n            },\n\n            pushInRoster: function (attrs, callback, errback) {\n                attrs || (attrs = {});\n                let name = attrs.name || this.get('roster_name'),\n                    groups = attrs.groups || this.get('groups');\n                let iq = $iq({type: 'set'})\n                    .c('query', {xmlns: Strophe.NS.ROSTER})\n                    .c('item', {jid: this.get('jid'), name: name});\n                _.each(groups, function (group) {\n                    iq.c('group').t(group).up();\n                });\n                this.account.sendIQFast(iq, callback, errback);\n                this.set('known', true);\n                this.set('removed', false);\n                return this;\n            },\n\n            removeFromRoster: function (callback, errback) {\n                if (!this.get('removed')){\n                    let iq = $iq({type: 'set'})\n                        .c('query', {xmlns: Strophe.NS.ROSTER})\n                        .c('item', {jid: this.get('jid'), subscription: \"remove\"});\n                    this.account.cached_roster.removeFromRoster(this.get('jid'));\n                    this.account.sendIQFast(iq, callback, errback);\n                    this.set('known', false);\n                    this.set('removed', true);\n                }\n                return this;\n            },\n\n            acceptRequest: function (callback) {\n                this.pres('subscribed');\n                callback && callback();\n            },\n\n            askRequest: function (callback) {\n                this.pres('subscribe');\n                callback && callback();\n            },\n\n            blockRequest: function (callback) {\n                this.block(callback);\n            },\n\n            declineRequest: function (callback) {\n                this.pres('unsubscribed');\n                this.removeFromRoster(callback);\n            },\n\n            declineSubscription: function () {\n                this.pres('unsubscribe');\n                this.set('subscription_request_out', false);\n            },\n\n            declineSubscribe: function () {\n                this.pres('unsubscribed');\n                !this.account.server_features.get(Strophe.NS.SUBSCRIPTION_PREAPPROVAL) && this.set('subscription_preapproved', false)\n            },\n\n            deleteWithDialog: function () {\n                let is_group = this.get('group_chat'),\n                    header = is_group ? xabber.getString(\"group_remove\") : xabber.getString(\"remove_contact\"),\n                    msg_text = is_group ? xabber.getString(\"group_remove_confirm\", [this.get('name').bold()]) : xabber.getString(\"contact_delete_confirm_short\", [this.get('name').bold()]),\n                    optional_buttons = is_group ? null : [{ name: 'delete_history', checked: false, text: xabber.getString(\"delete_contact__label_delete_history\")}];\n                utils.dialogs.ask(header, msg_text, optional_buttons, { ok_button_text: xabber.getString(\"delete\")}).done((result) => {\n                    if (result) {\n                        if (is_group) {\n                            let domain = this.domain,\n                                localpart = Strophe.getNodeFromJid(this.get('jid')),\n                                iq = $iq({to: domain, type: 'set'})\n                                    .c('query', {xmlns: `${Strophe.NS.GROUP_CHAT}#delete`}).t(localpart);\n                            this.account.sendIQFast(iq, () => {\n                                this.declineSubscription();\n                                this.removeFromRoster();\n                                let chat = this.account.chats.getChat(this);\n                                chat.trigger(\"close_chat\");\n                                xabber.body.setScreen('all-chats', {right_contact: '', right: undefined});\n                            });\n                        } else {\n                            this.removeFromRoster();\n                            if (result.delete_history) {\n                                let chat = this.account.chats.getChat(this);\n                                chat.retractAllMessages(false);\n                                chat.deleteFromSynchronization();\n                                xabber.body.setScreen('all-chats', {right_contact: '', right: undefined});\n                            }\n                            xabber.trigger(\"clear_search\");\n                        }\n                    }\n                });\n            },\n\n            blockWithDialog: function () {\n                let is_group = this.get('group_chat'),\n                    contact = this,\n                    header = is_group ? xabber.getString(\"block_group__header\") : xabber.getString(\"contact_block\"),\n                    buttons = { ok_button_text: xabber.getString(\"contact_bar_block\")},\n                    msg_text = xabber.getString(\"block_contact_confirm_short\", [this.get('name').bold()]);\n                if (!is_group) {\n                    buttons.optional_button = xabber.getString(\"contact_block_and_delete\");\n                    msg_text += `\\n${xabber.getString(\"block_contact_warning\", [this.get('jid')])}`;\n                }\n                utils.dialogs.ask(header, msg_text, null, buttons).done(function (result) {\n                    if (result) {\n                       if (!is_group) {\n                            let chat = contact.account.chats.getChat(contact);\n                            if (result === 'block & delete') {\n                                contact.removeFromRoster();\n                                chat.retractAllMessages(false);\n                                chat.deleteFromSynchronization();\n                                chat.set('active', false);\n                            }\n                        }\n                        contact.blockRequest();\n                        xabber.trigger(\"clear_search\");\n                        if (!is_group)\n                            xabber.body.setScreen('all-chats', {right_contact: '', right: undefined});\n                    }\n                });\n            },\n\n            unblockWithDialog: function () {\n                let contact = this;\n                utils.dialogs.ask(xabber.getString(\"chat_settings__button_unblock_contact\"), xabber.getString(\"unblock_contact_confirm_short\", [this.get('name')]), null, { ok_button_text: xabber.getString(\"contact_bar_unblock\")}).done(function (result) {\n                    if (result) {\n                        contact.unblock();\n                        xabber.trigger(\"clear_search\");\n                    }\n                });\n            },\n\n            block: function (callback, errback) {\n                let iq = $iq({type: 'set'}).c('block', {xmlns: Strophe.NS.BLOCKING})\n                    .c('item', {jid: this.get('jid')});\n                this.account.sendIQFast(iq, callback, errback);\n                this.set('blocked', true);\n                this.set('known', false);\n            },\n\n            unblock: function (callback, errback) {\n                let iq = $iq({type: 'set'}).c('unblock', {xmlns: Strophe.NS.BLOCKING})\n                    .c('item', {jid: this.get('jid')});\n                this.account.sendIQFast(iq, callback, errback);\n                this.set('blocked', false);\n            },\n\n            sendPresent: function () {\n                let pres = $pres({to: this.get('jid')})\n                    .c('x', {xmlns: `${Strophe.NS.GROUP_CHAT}#present`});\n                this.account.sendPres(pres);\n                clearInterval(this._sending_present_interval);\n                this._sending_present_interval = setInterval(() => {\n                    this.account.sendPres(pres);\n                }, constants.PRESENT_INTERVAL);\n            },\n\n            sendNotPresent: function () {\n                let pres = $pres({to: this.get('jid')})\n                    .c('x', {xmlns: `${Strophe.NS.GROUP_CHAT}#not-present`});\n                this.account.sendPres(pres);\n                clearInterval(this._sending_present_interval);\n            },\n\n            handlePresence: function (presence) {\n                let $presence = $(presence),\n                    type = presence.getAttribute('type'),\n                    $vcard_update = $presence.find(`x[xmlns=\"${Strophe.NS.VCARD_UPDATE}\"]`);\n                if ($vcard_update.length && this.get('avatar_priority') && this.get('avatar_priority') <= constants.AVATAR_PRIORITIES.VCARD_AVATAR) {\n                    this.set('photo_hash', $vcard_update.find('photo').text());\n                    this.trigger('update_avatar');\n                }\n                let $group_chat_info = $(presence).find(`x[xmlns=\"${Strophe.NS.GROUP_CHAT}\"]`);\n                if ($group_chat_info.length > 0 && $group_chat_info.children().length) {\n                    this.set('full_jid', $presence.attr('from'));\n                    if (!this.get('group_chat')) {\n                        this.set('group_chat', true);\n                        this.account.chat_settings.updateGroupChatsList(this.get('jid'), this.get('group_chat'));\n                    }\n                    if (this.details_view && !this.details_view.child('participants')) {\n                        this.details_view = new xabber.GroupChatDetailsView({model: this});\n                    }\n                    let group_chat_info = this.parseGroupInfo($(presence)),\n                        prev_group_info = this.get('group_info') || {};\n                    if (this.details_view && this.details_view.isVisible() && group_chat_info.online_members_num != prev_group_info.online_members_num)\n                        this.trigger('update_participants');\n                    _.extend(prev_group_info, group_chat_info);\n                    this.set('group_info', prev_group_info);\n                    if (!this.get('roster_name') && (prev_group_info.name !== this.get('name')))\n                        this.set('name', prev_group_info.name);\n                    this.set({status: prev_group_info.status, status_updated: moment.now(), status_message: (prev_group_info.members_num + ' members' + xabber.getString(\"contact_groupchat_status_online\", [prev_group_info.online_members_num || 0]))});\n                }\n                if (type === 'subscribe') {\n                    this.set('subscription_request_in', true);\n                    if (this.get('subscription_preapproved')) {\n                        this.pres('subscribed');\n                    } else {\n                        this.trigger('presence', this, 'subscribe');\n                    }\n                } else if (type === 'subscribed') {\n                    if (this.get('group_chat') && (this.get('subscription_request_out') || this.get('subscription') === 'to')) {\n\n                    }\n                    if (this.get('subscription') === 'to') {\n                        // this.pres('subscribed');\n                    }\n                    this.trigger('presence', this, 'subscribed');\n                } else if (type === 'unsubscribe') {\n                    this.set('subscription_request_in', false);\n                    if (this.get('group_chat')) {\n                        this.removeFromRoster();\n                        let chat = this.account.chats.getChat(this);\n                        if (!this.get('sync_deleted')){\n                            chat.deleteFromSynchronization(() => {\n                                chat.trigger(\"close_chat\");\n                                this.destroy();\n                            }, () => {\n                                chat.trigger(\"close_chat\");\n                                this.destroy();\n                            });\n                        } else {\n                            chat.trigger(\"close_chat\");\n                            this.destroy();\n                        }\n                    }\n                } else if (type === 'unsubscribed') {\n                    this.set('subscription_request_out', false);\n                    // this.trigger('presence', this, 'unsubscribed');\n                } else {\n                    let jid = presence.getAttribute('from'),\n                        resource = Strophe.getResourceFromJid(jid),\n                        priority = Number($presence.find('priority').text()),\n                        status = $presence.find('show').text() || 'online',\n                        $status_message = $presence.find('status'),\n                        status_message = $status_message.text();\n                    _.isNaN(priority) && (priority = 0);\n                    clearTimeout(this._reset_status_timeout);\n                    let resource_obj = this.resources.get(resource);\n                    if (type === 'unavailable') {\n                        this.set({ last_seen: moment.now() });\n                        resource_obj && resource_obj.destroy();\n                    } else {\n                        this.set({ last_seen: undefined });\n                        let attrs = {\n                            resource: resource,\n                            priority: priority,\n                            status: status\n                        };\n                        $status_message.length && (attrs.status_message = status_message);\n                        if (!resource_obj) {\n                            resource_obj = this.resources.create(attrs);\n                        } else {\n                            resource_obj.set(attrs);\n                        }\n                    }\n                }\n            },\n\n            parseGroupInfo: function ($presence) {\n                let jid = this.get('jid'),\n                    $group_chat = $presence.find(`x[xmlns=\"${Strophe.NS.GROUP_CHAT}\"]`),\n                    name = $group_chat.find('name').text(),\n                    $model = $group_chat.find('membership'),\n                    status = $presence.children('show').text() || (($presence.attr('type') === 'unavailable') ? 'unavailable' : 'online'),\n                    status_msg = $presence.children('status').text(),\n                    privacy = $group_chat.find('privacy').text(),\n                    $index = $group_chat.find('index'),\n                    $description = $group_chat.find('description'),\n                    pinned_message = Number($group_chat.find('pinned-message').text()),\n                    prev_pinned_message = this.get('pinned_message') ? this.get('pinned_message').get('stanza_id') : 0,\n                    private_chat = $group_chat.find('parent-chat').text() || false,\n                    members_num = Number($group_chat.find('members').text()),\n                    $online_members_num = $group_chat.find('present'),\n                    info = {jid, name, status_msg, privacy, status, members_num};\n                $index.length && (info.searchable = $index.text());\n                $model.length && (info.model = $model.text());\n                $description.length && (info.description = $description.text());\n                $online_members_num.length && (info.online_members_num = Number($online_members_num.text()));\n                private_chat && this.set('private_chat', private_chat);\n                privacy === 'incognito' && this.set('incognito_chat', true);\n                let chat = this.account.chats.get(this.hash_id), pinned_msg_elem;\n                if ($group_chat.find('pinned-message').length) {\n                    if (prev_pinned_message != pinned_message) {\n                        if (chat) {\n                            if (chat.item_view && !chat.item_view.content)\n                                chat.item_view.content = new xabber.ChatContentView({chat_item: chat.item_view});\n                            pinned_msg_elem = chat.item_view.content.$pinned_message;\n                        }\n                        if (pinned_msg_elem) {\n                            if (pinned_message) {\n                                this.getMessageByStanzaId(pinned_message, ($message) => {\n                                    this.parsePinnedMessage($message, pinned_msg_elem);\n                                });\n                            }\n                            else {\n                                this.set('pinned_message', undefined);\n                                this.parsePinnedMessage(undefined, pinned_msg_elem);\n                            }\n                        }\n                    }\n                }\n                return info;\n            },\n\n            getAllRights: function (callback) {\n                let iq_get_rights = iq = $iq({type: 'get', to: this.get('full_jid') || this.get('jid') })\n                    .c('query', {xmlns: `${Strophe.NS.GROUP_CHAT}#rights` });\n                this.account.sendIQFast(iq_get_rights, (iq_all_rights) => {\n                    let all_permissions = $(iq_all_rights).find('permission'),\n                        all_restrictions = $(iq_all_rights).find('restriction');\n                    this.all_rights = {permissions: all_permissions, restrictions: all_restrictions};\n                    callback && callback();\n                });\n            },\n\n            getMessageByStanzaId: function (stanza_id, callback) {\n                let queryid = uuid(),\n                    iq = $iq({type: 'set', to: this.get('full_jid') || this.get('jid')})\n                        .c('query', {xmlns: Strophe.NS.MAM, queryid: queryid})\n                        .c('x', {xmlns: Strophe.NS.DATAFORM, type: 'submit'})\n                        .c('field', {'var': 'FORM_TYPE', type: 'hidden'})\n                        .c('value').t(Strophe.NS.MAM).up().up()\n                        .c('field', {'var': '{urn:xmpp:sid:0}stanza-id'})\n                        .c('value').t(stanza_id);\n                let handler = this.account.connection.addHandler((message) => {\n                    let $msg = $(message);\n                    if ($msg.find('result').attr('queryid') === queryid)\n                        callback && callback($msg);\n                    return true;\n                }, Strophe.NS.MAM);\n                this.account.sendIQFast(iq, () => {\n                        this.account.connection.deleteHandler(handler);\n                    }, () => {\n                        this.account.connection.deleteHandler(handler);\n                    }\n                );\n            },\n\n            MAMRequest: function (options, callback, errback) {\n                let account = this.account,\n                    is_fast = options.fast && account.fast_connection && !account.fast_connection.disconnecting && account.fast_connection.authenticated && account.fast_connection.connected && account.get('status') !== 'offline',\n                    conn = is_fast ? account.fast_connection : account.connection,\n                    contact = this,\n                    messages = [], queryid = uuid(),\n                    is_groupchat = contact && contact.get('group_chat'), success = true, iq;\n                delete options.fast;\n                if (is_groupchat)\n                    iq = $iq({type: 'set', to: contact.get('full_jid') || contact.get('jid')});\n                else\n                    iq = $iq({type: 'set'});\n                iq.c('query', {xmlns: Strophe.NS.MAM, queryid: queryid})\n                    .c('x', {xmlns: Strophe.NS.DATAFORM, type: 'submit'})\n                    .c('field', {'var': 'FORM_TYPE', type: 'hidden'})\n                    .c('value').t(Strophe.NS.MAM).up().up();\n                if (this.account.server_features.get(Strophe.NS.ARCHIVE) && options.encrypted)    {\n                    iq.c('field', {'var': `{${Strophe.NS.ARCHIVE}}filter_encrypted`})\n                        .c('value').t(options.encrypted).up().up();\n                }\n                if (this.account.server_features.get(Strophe.NS.ARCHIVE) && !options.encrypted)    {\n                    if (options.filter_image)\n                        iq.c('field', {'var': `{${Strophe.NS.ARCHIVE}}filter_image`})\n                            .c('value').t(options.filter_image).up().up();\n                    if (options.filter_video)\n                        iq.c('field', {'var': `{${Strophe.NS.ARCHIVE}}filter_video`})\n                            .c('value').t(options.filter_video).up().up();\n                    if (options.filter_voice)\n                        iq.c('field', {'var': `{${Strophe.NS.ARCHIVE}}filter_voice`})\n                            .c('value').t(options.filter_voice).up().up();\n                    if (options.filter_files){\n                        iq.c('field', {'var': `{${Strophe.NS.ARCHIVE}}filter_image`})\n                            .c('value').t('false').up().up();\n                        iq.c('field', {'var': `{${Strophe.NS.ARCHIVE}}filter_video`})\n                            .c('value').t('false').up().up();\n                        iq.c('field', {'var': `{${Strophe.NS.ARCHIVE}}filter_voice`})\n                            .c('value').t('false').up().up();\n                        iq.c('field', {'var': `{${Strophe.NS.ARCHIVE}}filter_sticker`})\n                            .c('value').t('false').up().up();\n                    }\n                }\n                if (!is_groupchat)\n                    iq.c('field', {'var': 'with'})\n                        .c('value').t(this.get('jid')).up().up();\n                if (options.var)\n                    options.var.forEach((opt_var) => {\n                        iq.c('field', {'var': opt_var.var})\n                            .c('value').t(opt_var.value).up().up();\n                    });\n                iq.up().cnode(new Strophe.RSM(options).toXML());\n                let deferred = new $.Deferred();\n                account.chats.onStartedMAMRequest(deferred);\n                deferred.done(function () {\n                    let handler = conn.addHandler(function (message) {\n                        if ((contact && is_groupchat == contact.get('group_chat'))) {\n                            let $msg = $(message);\n                            if ($msg.find('result').attr('queryid') === queryid) {\n                                messages.push(message);\n                            }\n                        }\n                        else {\n                            messages = [];\n                            success = false;\n                        }\n                        return true;\n                    }, Strophe.NS.MAM);\n                    let callb = function (res) {\n                            conn.deleteHandler(handler);\n                            account.chats.onCompletedMAMRequest(deferred);\n                            let $fin = $(res).find(`fin[xmlns=\"${Strophe.NS.MAM}\"]`);\n                            if ($fin.length && $fin.attr('queryid') === queryid) {\n                                let rsm = new Strophe.RSM({xml: $fin.find('set')[0]});\n                                rsm.complete = ($fin.attr('complete') === 'true') ? true : false;\n                                callback && callback(success, messages, rsm);\n                            }\n                        },\n                        errb = function (err) {\n                            conn.deleteHandler(handler);\n                            xabber.error(\"MAM error\");\n                            xabber.error(err);\n                            account.chats.onCompletedMAMRequest(deferred);\n                            errback && errback(err);\n                        };\n                    if (is_fast)\n                        account.sendFast(iq, callb, errb);\n                    else\n                        account.sendIQ(iq, callb, errb);\n                });\n            },\n\n            getFilesFromStanza: function ($message, options) {\n                $message = $message.find('message')\n                let references = $message.children(`reference[xmlns=\"${Strophe.NS.REFERENCE}\"]`).length ?\n                    $message.children(`reference[xmlns=\"${Strophe.NS.REFERENCE}\"]`) :\n                    $message.children('envelope').children('content').children(`reference[xmlns=\"${Strophe.NS.REFERENCE}\"]`),\n                    items = [];\n\n                references.each((idx, reference) => {\n                    let $reference = $(reference),\n                        type = $reference.attr('type');\n                    if (type === 'mutable') {\n                        let $file_sharing = $reference.find(`file-sharing[xmlns=\"${Strophe.NS.FILES}\"]`).first();\n                        if ($file_sharing.length) {\n                            let type = $file_sharing.parent(`voice-message[xmlns=\"${Strophe.NS.VOICE_MESSAGE}\"]`).length ? 'voice' : 'file',\n                                $file = $file_sharing.children('file'), file_attrs = {}, sources = [];\n                            $file_sharing.children('sources').children('uri').each((i, uri) => {sources.push($(uri).text());});\n                            file_attrs = {\n                                name: $file.children('name').text(),\n                                hash: $file.children(`hash[xmlns=\"${Strophe.NS.HASH}\"]`).text(),\n                                size: $file.children('size').text(),\n                                uniqueid: $message.attr('id'),\n                                id: $file.children('gallery-id').text(),\n                                created_at: $file.children('created').text(),\n                                thumbnail: $file.children('thumbnail-uri').text(),\n                                media_type: $file.children('media-type').text(),\n                                duration: $file.children('duration').text(),\n                                description: $file.children('desc').text(),\n                                height: $file.children('height').text(),\n                                width: $file.children('width').text(),\n                                voice: type === 'voice',\n                                sources: sources\n                            };\n                            if (sources[0].indexOf('aescbc') == 0) {\n                                let uri = sources[0].replace(/^aescbc/, 'https'),\n                                    key = utils.fromBase64toArrayBuffer(uri.slice(uri.length - 64));\n                                uri = uri.slice(0, uri.length - 64 - 1);\n                                _.extend(file_attrs, {sources: [uri], key: key});\n                                file_attrs.has_encrypted_files = true;\n                            }\n                            items.push(file_attrs);\n                        }\n                    }\n                });\n                return items\n            },\n\n            parsePinnedMessage: function ($message, pinned_msg_elem) {\n                if (!$message) {\n                    this.renderPinnedMessage(null, pinned_msg_elem);\n                }\n                else {\n                    let $msg = $message.find('result message').first();\n                    if (this.get('pinned_message'))\n                        if (this.get('pinned_message').stanza_id === $msg.find('stanza-id').attr('id'))\n                            return;\n                    let message = this.account.chats.receiveChatMessage($message, {pinned_message: true});\n                    this.set('pinned_message', message);\n                    this.renderPinnedMessage(message, pinned_msg_elem);\n                }\n            },\n\n            renderPinnedMessage: function (message, pinned_msg_elem) {\n                if (!message) {\n                    pinned_msg_elem.html(\"\");\n                    pinned_msg_elem.siblings('.chat-content').css({'height':'100%'});\n                }\n                else {\n                    let images = message.get('images') || [],\n                        files = message.get('files') || [],\n                        locations = message.get('locations'),\n                        fwd_message = message.get('forwarded_message'),\n                        fwd_msg_author = null,\n                        msg_text = _.escape(message.get('message'));\n                    message.get('videos') && message.get('videos').length && (files = files.concat(message.get('videos')));\n                    if (fwd_message) {\n                        let user_info = fwd_message[0].get('user_info') || {};\n                        if (msg_text) {\n                        } else if (fwd_message.length > 1)\n                            msg_text = xabber.getQuantityString(\"forwarded_messages_count\", fwd_message.length);\n                        else {\n                            msg_text = fwd_message[0].get('message') || fwd_message[0].get('forwarded_message') && xabber.getString(\"forwarded_messages_count_plural_0\", [fwd_message[0].get('forwarded_message').length]);\n                            fwd_msg_author = user_info.nickname || fwd_message[0].get('from_jid') || user_info.id;\n                        }\n                    }\n                    if ((images && images.length) && (files && files.length))\n                        msg_text = `<span class=text-color-500>${xabber.getString(\"recent_chat__last_message__attachments\", [images.length + files.length])}</span>`;\n                    else {\n                        if (images && images.length) {\n                            if (images.length == 1)\n                                msg_text = `<span class=text-color-500>${xabber.getString(\"recent_chat__last_message__images_plural_0\")}: </span>` + images[0].name;\n                            if (images.length > 1)\n                                msg_text = `<span class=text-color-500>${xabber.getQuantityString(\"recent_chat__last_message__images\", images.length)}</span>`;\n                        }\n                        if (files && files.length) {\n                            if (files.length == 1)\n                                msg_text = `<span class=text-color-500>${xabber.getString(\"recent_chat__last_message__files_plural_0\")}: </span>` + files[0].name + ' (' + files[0].size + ')';\n                            if (files.length > 1)\n                                msg_text = `<span class=text-color-500>${xabber.getQuantityString(\"recent_chat__last_message__files\", files.length)}</span>`;\n                        }\n                    }\n                    if (locations && locations.length) {\n                        if (locations.length == 1)\n                            msg_text = `<span class=text-color-500>${xabber.getString(\"recent_chat__last_message__locations_plural_0\")}</span>`;\n                        if (locations.length > 1)\n                            msg_text = `<span class=text-color-500>${xabber.getQuantityString(\"recent_chat__last_message__locations\", locations.length)}</span>`;\n                    }\n                    let user_info = message.get('user_info') || {},\n                        chat_content = this.account.chats.get(this.hash_id).item_view.content,\n                        is_scrolled = chat_content.isScrolledToBottom(),\n                        msg_author = user_info.nickname || message.get('from_jid') || user_info.id,\n                        pinned_msg = {\n                            author: msg_author,\n                            time: pretty_datetime(message.get('time')),\n                            message: msg_text,\n                            fwd_author: fwd_msg_author\n                        },\n                        pinned_msg_html = $(templates.group_chats.pinned_message(pinned_msg));\n                    pinned_msg_elem.html(pinned_msg_html).emojify('.chat-msg-content', {emoji_size: 18});\n                    let height_pinned_msg = pinned_msg_elem.height();\n                    pinned_msg_elem.siblings('.chat-content').css({\n                        'height': 'calc(100% - ' + height_pinned_msg + 'px)'\n                    });\n                    if (is_scrolled)\n                        chat_content.scrollToBottom();\n                    pinned_msg_elem.attr('data-uniqueid', message.get('unique_id'));\n                }\n            },\n\n            resetStatus: function (timeout) {\n                clearTimeout(this._reset_status_timeout);\n                this._reset_status_timeout = setTimeout(() => {\n                    this.set({\n                        status_updated: moment.now(),\n                        status: 'offline',\n                        status_message: ''\n                    });\n                }, timeout || 5000);\n            },\n\n            searchByParticipants: function (query, callback) {\n                if (!this.participants.version) {\n                    this.participants.participantsRequest({}, () => {\n                        let participants_list = this.participants.search(query);\n                        callback && callback(participants_list);\n                    });\n                } else {\n                    let participants_list = this.participants.search(query);\n                    callback && callback(participants_list);\n                }\n            },\n\n            updateName: function () {\n                if (this.get('roster_name') && this.get('name') !== this.get('roster_name'))\n                    this.set('name', this.get('roster_name'));\n            },\n\n            showDetails: function (screen) {\n                if (!this.details_view)\n                    this.details_view = (this.get('group_chat')) ? new xabber.GroupChatDetailsView({model: this}) : new xabber.ContactDetailsView({model: this});\n                screen || (screen = 'contacts');\n                xabber.body.setScreen(screen, {right: 'contact_details', contact: this});\n            },\n\n            showDetailsRight: function (screen, options) {\n                let chat = this.account.chats.getChat(this),\n                     scrolled_top_chats_view, scrolled_top_chat;\n                if (chat)\n                    if (!chat.item_view.content)\n                        chat.item_view.content = new xabber.ChatContentView({chat_item: chat.item_view});\n                    scrolled_top_chat = chat.item_view.content.getScrollTop()\n                if (xabber.chats_view)\n                    scrolled_top_chats_view = xabber.chats_view.getScrollTop();\n                options = options || {};\n                if (!this.details_view_right && !options.encrypted)\n                    this.details_view_right = (this.get('group_chat')) ? new xabber.GroupChatDetailsViewRight({model: this}) : new xabber.ContactDetailsViewRight({model: this});\n                if (!this.details_view_right_encrypted && options.encrypted)\n                    this.details_view_right_encrypted = new xabber.ContactDetailsViewRight({model: this, encrypted: true});\n                screen || (screen = 'contacts');\n                if (xabber.body.screen.get('right_contact') && options.type != 'search' && options.type != 'members' && options.type != 'participant' && !options.right_saved) {\n                    this.set('search_hidden', true)\n                    xabber.body.setScreen(screen, {right_contact: '', contact: this});\n                }\n                else {\n                    if (options.encrypted)\n                        xabber.body.setScreen(screen, {right_contact: 'contact_details_encrypted', contact: this});\n                    else\n                        xabber.body.setScreen(screen, {right_contact: 'contact_details', contact: this});\n                    if (this.details_view_right && this.details_view_right.contact_searched_messages_view){\n                        this.details_view_right.contact_searched_messages_view.hideSearch();\n                        if (options.type === 'search') {\n                            this.details_view_right.contact_searched_messages_view.clearSearch();\n                            this.details_view_right.showSearchMessages();\n                        }\n                        if (options.type === 'members') {\n                            this.details_view_right.$('.tabs:not(.participant-tabs) .list-variant[data-value=\"participants\"]').click()\n                        }\n                        this.details_view_right.onScroll()\n                    }\n                }\n                if (scrolled_top_chat)\n                    chat.item_view.content.scrollTo(scrolled_top_chat);\n                if (scrolled_top_chats_view)\n                    xabber.chats_view.scrollTo(scrolled_top_chats_view);\n            },\n        });\n\n        xabber.SetGroupchatStatusView = xabber.BasicView.extend({\n            className: 'modal main-modal change-status-modal',\n            template: templates.group_chats.set_status,\n\n            events: {\n                \"click .status-values li\": \"changeStatus\"\n            },\n\n            open: function (contact) {\n                this.contact = contact;\n                this.account = this.contact.account;\n                this.show();\n                this.getStatuses();\n            },\n\n            updateIcons: function () {\n                let ic_name = this.contact.getIcon();\n                this.$('.status-bulb').addClass('hidden');\n                ic_name && this.$('.status-bulb').removeClass('hidden').switchClass(ic_name, ic_name == 'server' || ic_name == 'blocked').html(env.templates.svg[ic_name]());\n            },\n\n            highlightStatus: function (status) {\n                this.$(`.status-values li[data-value=\"${status}\"]`).addClass('active')\n                    .siblings().removeClass('active');\n                this.updateIcons();\n            },\n\n            getStatuses: function () {\n                let iq_get_properties = $iq({to: this.contact.get('full_jid') || this.contact.get('jid'), type: 'get'})\n                    .c('query', {xmlns: `${Strophe.NS.GROUP_CHAT}#status`});\n                this.account.sendFast(iq_get_properties, (properties) => {\n                    this.data_form = this.account.parseDataForm($(properties).find('x[xmlns=\"' + Strophe.NS.DATAFORM + '\"]'));\n                    let status_field = this.data_form.fields.find(field => field.var == 'status'),\n                        options = (this.data_form.fields.find(field => field.var == 'status') || []).options || [];\n                    if (!options.length || status_field.type == 'fixed') {\n                        this.closeModal();\n                        utils.dialogs.error(xabber.getString(\"groupchat_you_have_no_permissions_to_do_it\"));\n                        return;\n                    }\n                    this.renderStatuses(options);\n                }, () => {\n                    this.closeModal();\n                    utils.dialogs.error(xabber.getString(\"set_group_status__error__service_unavailable\"));\n                    return;\n                });\n            },\n\n            renderStatuses: function (options) {\n                this.$('.status-values').html(\"\");\n                options.forEach((option) => {\n                    let status = option,\n                        status_field = this.data_form.fields.find(f => f.var == status.value);\n                    if (status_field)\n                        status.show = status_field.values[0];\n                    else\n                        status.show = status.value;\n                    let $status_item = $(templates.group_chats.status_item({status}));\n                    this.$('.status-values').append($status_item);\n                });\n                this.highlightStatus(this.contact.get('status'));\n            },\n\n            changeStatus: function (ev) {\n                let status = $(ev.target).closest('li').data('value');\n                this.highlightStatus(status);\n                this.do_change();\n                this.closeModal();\n            },\n\n            do_change: function () {\n                let status = this.$('.status-values li.active').data('value');\n                this.setStatus(status);\n            },\n\n            render: function () {\n                this.$el.openModal({\n                    complete: this.close.bind(this)\n                });\n            },\n\n            setStatus: function (status) {\n                if (!this.data_form || this.contact.get('group_info').status === status)\n                    return;\n                let iq_set_status = $iq({to: this.contact.get('full_jid') || this.contact.get('jid'), type: 'set'})\n                        .c('query', {xmlns: `${Strophe.NS.GROUP_CHAT}#status`}),\n                    status_field = this.data_form.fields.find(field => field.var === 'status'),\n                    idx = this.data_form.fields.indexOf(status_field);\n                status_field.values = [status];\n                this.data_form.fields[idx] = status_field;\n                iq_set_status = this.account.addDataFormToStanza(iq_set_status, this.data_form);\n                this.account.sendFast(iq_set_status);\n            },\n\n            onHide: function () {\n                this.$el.detach();\n            },\n\n            close: function () {\n                let value = this.$('.status-message').val();\n                if (!value)\n                    this.do_change();\n                this.closeModal();\n            },\n\n            closeModal: function () {\n                this.$el.closeModal({ complete: this.hide.bind(this) });\n            }\n        });\n\n        xabber.ContactItemView = xabber.BasicView.extend({\n            className: 'roster-contact list-item',\n\n            _initialize: function (options) {\n                this.account = this.model.account;\n                this.$el.attr({'data-id': uuid(), 'data-jid': this.model.get('jid')});\n                this.$('.jid').text(this.model.get('jid'));\n                this.interval_last;\n                this.updateName();\n                this.updateStatus();\n                this.updateAvatar();\n                this.selectView();\n                this.updateGroupChat();\n                this.updateIcon();\n                this.model.on(\"change:name\", this.updateName, this);\n                this.model.on(\"change:image\", this.updateAvatar, this);\n                this.model.on(\"change:status_updated\", this.updateStatus, this);\n                this.model.on(\"change:subscription\", this.updateStatus, this);\n                this.model.on(\"change:subscription_preapproved\", this.updateStatus, this);\n                this.model.on(\"change:subscription_request_in\", this.updateStatus, this);\n                this.model.on(\"change:subscription_request_out\", this.updateStatus, this);\n                this.model.on(\"change:private_chat\", this.updateIcon, this);\n                this.model.on(\"change:incognito_chat\", this.updateIcon, this);\n                this.model.on(\"change:bot\", this.updateIcon, this);\n                this.model.on(\"change:blocked\", this.onBlocked, this);\n                this.model.on(\"change:status_message\", this.updateStatusMsg, this);\n                this.model.on(\"change:last_seen\", this.lastSeenUpdated, this);\n                this.model.on(\"change:group_chat\", this.updateGroupChat, this);\n            },\n\n            updateName: function () {\n                this.$('.name').text(this.model.get('name'));\n            },\n\n            updateAvatar: function () {\n                this.$('.circle-avatar').setAvatar(this.model.cached_image, this.avatar_size);\n            },\n\n            updateStatus: function () {\n                this.$('.status').attr('data-status', this.model.get('status'));\n                this.$('.chat-icon').attr('data-status', this.model.get('status'));\n                this.$('.status-message').text(this.model.getStatusMessage());\n                if (this.model.get('status') == 'offline') {\n                    if (!Strophe.getNodeFromJid(this.model.get('jid'))) {\n                        this.model.set({status_message: 'Server'});\n                        return;\n                    }\n                    if (this.model.get('last_seen')) {\n                    let seconds = (moment.now() - this.model.get('last_seen'))/1000,\n                        new_status = xabber.pretty_last_seen(seconds);\n                    this.model.set({ status_message: new_status });\n                    }\n                }\n            },\n\n            onBlocked: function () {\n                this.updateIcon();\n                this.$el.switchClass('blocked', this.model.get('blocked'));\n            },\n\n            selectView: function () {\n                if (this.model.get('group_chat')) {\n                    this.$('.private-chat').addClass('hidden');\n                    this.$('.group_chat').removeClass('hidden');\n                }\n            },\n\n            lastSeenUpdated: function () {\n                if (this.model.get('status') == 'offline' && this.model.get('last_seen') && _.isUndefined(this.interval_last)) {\n                    this.interval_last = setInterval(() => {\n                        let seconds = (moment.now() - this.model.get('last_seen'))/1000,\n                            new_status = xabber.pretty_last_seen(seconds);\n                        this.model.set({ status_message: new_status });\n                    }, 60000);\n                }\n                else\n                {\n                    clearInterval(this.interval_last);\n                }\n            },\n\n            updateGroupChat: function () {\n                let is_group_chat = this.model.get('group_chat');\n                this.$('.status').hideIf(is_group_chat);\n                this.updateIcon();\n            },\n\n            updateIcon: function () {\n                let ic_name = this.model.getIcon();\n                this.$('.chat-icon').addClass('hidden');\n                if (this.model.get('invitation'))\n                    return;\n                ic_name && this.$('.chat-icon').removeClass('hidden').switchClass(ic_name, ic_name == 'server' || ic_name == 'blocked').html(env.templates.svg[ic_name]());\n            },\n\n            updateStatusMsg: function() {\n                this.$('.status-message').text(this.model.getStatusMessage());\n            }\n        });\n\n        xabber.ContactItemRightView = xabber.ContactItemView.extend({\n            template: templates.contact_right_item,\n            avatar_size: constants.AVATAR_SIZES.CONTACT_RIGHT_ITEM,\n\n            events: {\n                \"click\": \"clickOnItem\",\n                \"mouseover\": \"showJid\",\n                \"mouseleave\": \"hideJid\",\n            },\n\n            showJid: function () {\n                if (this.$('.name').text() !== this.model.get('jid')) {\n                    this.$('.status-message').addClass('hidden');\n                    this.$('.jid').removeClass('hidden');\n                }\n            },\n\n            hideJid: function () {\n                this.$('.jid').addClass('hidden');\n                this.$('.status-message').removeClass('hidden');\n            },\n\n            clickOnItem: function () {\n                this.model.trigger(\"open_chat\", this.model);\n            }\n        });\n\n        xabber.ContactItemLeftView = xabber.ContactItemView.extend({\n            template: templates.contact_left_item,\n            avatar_size: constants.AVATAR_SIZES.CONTACT_LEFT_ITEM,\n\n            events: {\n                \"click\": \"clickOnItem\"\n            },\n\n            __initialize: function () {\n                this.updateDisplayStatus();\n                this.updateBlockedState();\n                this.updateMutedState();\n                this.updateGroupChat();\n                this.model.on(\"change:display\", this.updateDisplayStatus, this);\n                this.model.on(\"change:blocked\", this.updateBlockedState, this);\n                this.model.on(\"change:group_chat\", this.updateGroupChat, this);\n            },\n\n            updateDisplayStatus: function () {\n                this.$el.switchClass('active', this.model.get('display'));\n            },\n\n            updateBlockedState: function () {\n                this.$el.switchClass('blocked', this.model.get('blocked'));\n            },\n            updateMutedState: function () {\n                this.$('.muted-icon').hide();\n            },\n\n            clickOnItem: function () {\n                let options = {};\n                (xabber.chats_view.active_chat && xabber.chats_view.active_chat.model.get('jid') === this.model.get('jid') && xabber.chats_view.active_chat.model.get('encrypted')) && (options.encrypted = true);\n                this.model.trigger(\"open_chat\", this.model, options);\n            }\n        });\n\n        xabber.ContactResources = xabber.Resources.extend({\n            initialize: function (models, options) {\n                this.contact = options.contact;\n                this.jid = options.contact.get('jid');\n                this.connection = options.contact.account.connection;\n                this.on(\"add change\", this.onResourceUpdated, this);\n                this.on(\"remove\", this.onResourceRemoved, this);\n            },\n\n            onResourceUpdated: function (resource) {\n                if (resource === this.first()) {\n                    this.contact.set({\n                        status_updated: moment.now(),\n                        status: resource.get('status'),\n                        status_message: resource.get('status_message')\n                    });\n                }\n            },\n\n            onResourceRemoved: function () {\n                let attrs = {status_updated: moment.now()};\n                if (this.length) {\n                    attrs.status = this.first().get('status');\n                    attrs.status_message = this.first().get('status_message');\n                } else {\n                    attrs.status = 'offline';\n                    attrs.status_message = '';\n                }\n                this.contact.set(attrs);\n            }\n        });\n\n        xabber.ContactResourcesView = xabber.ResourcesView.extend({\n            onResourceAdded: function (resource) {\n                this.addChild(resource.get('resource'),\n                    xabber.ResourceView, {model: resource});\n                this.updatePosition(resource);\n                this.$el.removeClass('hidden');\n                this.parent.updateScrollBar();\n            },\n\n            onResourceRemoved: function (resource) {\n                this.removeChild(resource.get('resource'));\n                this.$el.showIf(this.model.length);\n                this.parent.updateScrollBar();\n            },\n\n            onReset: function () {\n                this.removeChildren();\n                this.$el.addClass('hidden');\n                this.parent.updateScrollBar();\n            },\n\n            updatePosition: function (resource) {\n                let view = this.child(resource.get('resource'));\n                if (!view) return;\n                view.$el.detach();\n                let index = this.model.indexOf(resource);\n                if (index === 0) {\n                    this.$('.resources-wrap').prepend(view.$el);\n                } else {\n                    this.$('.resource-wrap').eq(index - 1).after(view.$el);\n                }\n                this.updateScrollBar();\n            }\n        });\n\n        xabber.ContactResourcesRightView = xabber.ResourcesView.extend({\n            className: 'modal main-modal resource-modal',\n\n            _initialize: function () {\n                this.model.on(\"remove\", this.onResourceRemoved, this);\n                this.model.on(\"reset\", this.onReset, this);\n                this.model.on(\"change:priority\", this.onPriorityChanged, this);\n            },\n\n            renderByInit: function () {\n                this.model.each((resource) => {\n                    this.onResourceAdded(resource);\n                });\n            },\n\n            open: function () {\n                if (this.model.length) {\n                    this.$el.openModal({\n                        ready: () => {\n                            this.$el.html('<svg class=\"details-icon mdi mdi-24px \"></svg><div class=\"resources-wrap\"></div>')\n                            this.$el.find('.details-icon').html(env.templates.svg['ic-jabber']())\n                            this.renderByInit();\n                        },\n                        // complete: () => {\n                        //     this.$el.detach();\n                        //     this.data.set('visible', false);\n                        // }\n                    });\n                }\n            },\n\n            onResourceAdded: function (resource) {\n                this.model.requestInfo(resource);\n                this.addChild(resource.get('resource'),\n                    xabber.ResourceRightView, {model: resource});\n                this.updatePosition(resource);\n                this.$el.removeClass('hidden');\n            },\n\n            onResourceRemoved: function (resource) {\n                this.removeChild(resource.get('resource'));\n                this.$el.showIf(this.model.length);\n            },\n\n            onReset: function () {\n                this.removeChildren();\n                this.$el.addClass('hidden');\n            },\n\n            updatePosition: function (resource) {\n                let view = this.child(resource.get('resource'));\n                if (!view) return;\n                view.$el.detach();\n                let index = this.model.indexOf(resource);\n                if (index === 0) {\n                    this.$('.resources-wrap').prepend(view.$el);\n                } else {\n                    this.$('.resource-wrap').eq(index - 1).after(view.$el);\n                }\n                this.updateScrollBar();\n            }\n        });\n\n        xabber.ContactVCardView = xabber.VCardView.extend({\n            events: {\n                \"click .btn-vcard-refresh\": \"refresh\",\n                \"click .details-icon\": \"onClickIcon\"\n            }\n        });\n\n        xabber.ContactRightVCardView = xabber.VCardRightView.extend({\n            events: {\n                \"click .btn-vcard-refresh\": \"refresh\",\n                \"click .info-hover\": \"onClickIcon\",\n                \"click .info-wrap.more\": \"showVCard\",\n                \"click .btn-back\": \"hideVCard\"\n            },\n\n\n            showVCard: function (ev) {\n                this.model.set('vcard_hidden', false);\n                this.$('.full-vcard-wrap').hideIf(this.model.get('vcard_hidden'))\n                this.model.getVCard(() => {\n                    this.updateName()\n                    this.update();\n                });\n                this.parent.$('.main-info').removeClass('fixed-scroll');\n                this.$('.vcard-header').css({width: xabber.right_contact_panel.$el.find('.details-panel-right').width()});\n                this.parent.scrollToTop();\n                if (this.parent.ps_container.length) {\n                    this.parent.ps_container.perfectScrollbar('destroy')\n                }\n            },\n\n            hideVCard: function (ev) {\n                this.model.set('vcard_hidden', true);\n                if (this.parent.ps_container.length) {\n                    this.parent.ps_container.perfectScrollbar(\n                        _.extend(this.parent.ps_settings || {}, xabber.ps_settings)\n                    );\n                }\n                this.scrollToTop();\n                this.onScroll();\n                this.parent.onScroll();\n                this.$('.full-vcard-wrap').hideIf(this.model.get('vcard_hidden'))\n            },\n\n            updateName: function () {\n                this.$('.main-info .name-wrap').text(this.model.get('name'));\n                if (this.model.get('name') != this.model.get('roster_name'))\n                    this.$('.main-info .name-wrap').addClass('name-is-custom');\n                else\n                    this.$('.main-info .name-wrap').removeClass('name-is-custom');\n            },\n        });\n\n        xabber.ContactDetailsView = xabber.BasicView.extend({\n            className: 'details-panel contact-details-panel',\n            template: templates.contact_details,\n            ps_selector: '.panel-content-wrap',\n            avatar_size: constants.AVATAR_SIZES.CONTACT_DETAILS,\n\n            events: {\n                \"click .btn-escape\": \"openChat\",\n                \"click .btn-chat\": \"openChat\",\n                \"click .btn-voice-call\": \"voiceCall\",\n                \"click .btn-add\": \"addContact\",\n                \"click .btn-delete\": \"deleteContact\",\n                \"click .btn-block\": \"blockContact\",\n                \"click .btn-qr-code\": \"showQRCode\",\n                \"click .btn-unblock\": \"unblockContact\",\n                \"click .btn-mute\": \"changeNotifications\",\n                \"click .btn-auth-request\": \"requestAuthorization\",\n                \"change .subscription-info-wrap input\": \"onChangedSubscription\"\n            },\n\n            _initialize: function () {\n                this.account = this.model.account;\n                this.name_field = new xabber.ContactNameWidget({\n                    el: this.$('.name-wrap')[0],\n                    model: this.model\n                });\n                this.resources_view = this.addChild('resources',\n                    xabber.ContactResourcesView, {model: this.model.resources,\n                        el: this.$('.resources-block-wrap')[0]});\n                this.vcard_view = this.addChild('vcard', xabber.ContactVCardView,\n                    {model: this.model, el: this.$('.vcard')[0]});\n                this.edit_groups_view = this.addChild('groups',\n                    xabber.ContactEditGroupsView, {el: this.$('.groups-block-wrap')[0]});\n                this.updateName();\n                this.updateStatus();\n                this.updateAvatar();\n                this.updateButtons();\n                this.model.on(\"change\", this.update, this);\n                xabber.on(\"change:video\", this.updateJingleButtons, this);\n                xabber.on(\"change:audio\", this.updateJingleButtons, this);\n            },\n\n            render: function (options) {\n                if (!this.model.get('vcard_updated')) {\n                    this.vcard_view.refresh();\n                }\n                let dropdown_settings = {\n                    inDuration: 100,\n                    outDuration: 100,\n                    constrainWidth: false,\n                    hover: false,\n                    alignment: 'right'\n                };\n                this.$('.main-info .dropdown-button').dropdown(dropdown_settings);\n                this.updateSubscriptions();\n                this.updateJingleButtons();\n                this.updateStatusMsg();\n                this.updateName();\n                this.setButtonsWidth();\n                this.model.resources.models.forEach((resource) => {this.model.resources.requestInfo(resource)});\n            },\n\n            setButtonsWidth: function () {\n                let widths = [];\n                this.$('.main-info .button-wrap').each((i, button) => {widths.push(button.clientWidth)});\n                this.$('.main-info .button-wrap').css('width', `${Math.max.apply(null, widths)}px`);\n            },\n\n            onChangedVisibility: function () {\n                this.model.set('display', this.isVisible());\n            },\n\n            updateJingleButtons: function () {\n                this.$('.btn-voice-call').switchClass('non-active', !xabber.get('audio'));\n            },\n\n            update: function () {\n                let changed = this.model.changed;\n                if (_.has(changed, 'name')) this.updateName();\n                if (_.has(changed, 'image')) this.updateAvatar();\n                if (_.has(changed, 'status_updated')) this.updateStatus();\n                // if (_.has(changed, 'muted')) this.updateNotifications();\n                if (_.has(changed, 'subscription')) this.updateSubscriptions();\n                if (_.has(changed, 'subscription_request_in')) this.updateSubscriptions();\n                if (_.has(changed, 'blocked')) this.updateStatusMsg();\n                if (_.has(changed, 'status_message')) this.updateStatusMsg();\n                if (_.has(changed, 'in_roster') || _.has(changed, 'blocked') ||\n                    _.has(changed, 'subscription')) {\n                    this.updateButtons();\n                }\n            },\n\n            updateName: function () {\n                this.$('.main-info .contact-name').text(this.model.get('name'));\n                if (this.model.get('name') != this.model.get('roster_name'))\n                    this.$('.main-info .contact-name').addClass('name-is-custom');\n                else\n                    this.$('.main-info .contact-name').removeClass('name-is-custom');\n            },\n\n            updateStatus: function () {\n                this.$('.main-info .status').attr('data-status', this.model.get('status'));\n                this.$('.main-info .status-message').text(this.model.getStatusMessage());\n            },\n\n            updateStatusMsg: function () {\n                this.$('.main-info .status-message').text(this.model.getStatusMessage());\n            },\n\n            updateAvatar: function () {\n                let image = this.model.cached_image;\n                this.$('.circle-avatar').setAvatar(image, this.avatar_size);\n            },\n\n            updateButtons: function () {\n                let in_roster = this.model.get('in_roster'),\n                    is_blocked = this.model.get('blocked'),\n                    is_server = this.model.get('server'),\n                    subscription = this.model.get('subscription');\n                this.$('.btn-add').hideIf(in_roster);\n                this.$('.btn-delete').showIf(in_roster);\n                this.$('.btn-block-wrap i').switchClass('btn-block', !is_blocked).switchClass('btn-unblock', is_blocked);\n                this.$('.btn-block-wrap .btn-name').text(is_blocked ? xabber.getString(\"contact_bar_unblock\") : xabber.getString(\"contact_bar_block\"));\n                this.$('.buttons-wrap .button-wrap:not(.btn-block-wrap)').switchClass('non-active', is_blocked);\n                this.$('.btn-auth-request').showIf(!is_server && in_roster && !is_blocked &&\n                    subscription !== 'both' && subscription !== 'to');\n            },\n\n            // updateNotifications: function () {\n            //     let chat = this.account.chats.getChat(this.model);\n            //     this.$('.btn-mute').switchClass('mdi-bell-off', chat.get('muted'));\n            //     this.$('.btn-mute').switchClass('mdi-bell', !chat.get('muted'));\n            // },\n\n            showQRCode: function () {\n                let qrcode = new VanillaQR({\n                    url: 'xmpp:' + this.model.get('jid'),\n                    noBorder: true\n                });\n                utils.dialogs.ask(xabber.getString(\"dialog_show_qr_code__header\"), null, {escape_button: true, canvas: qrcode.domElement, bottom_text: ('<div class=\"name\">' + this.model.get('name') + '</div><div class=\"jid\">' + this.model.get('jid') + '</div>')}, { cancel_button_text: ' ', ok_button_text: ' '}, 'hidden').done((result) => {\n                });\n            },\n\n            updateSubscriptions: function () {\n                let subscription = this.model.get('subscription'),\n                    in_request = this.model.get('subscription_request_in'),\n                    out_request = this.model.get('subscription_request_out'),\n                    $label_outcoming = this.$('label[for=\"outcoming-subscription\"]'),\n                    $label_incoming = this.$('label[for=\"incoming-subscription\"]');\n                if (subscription === 'both') {\n                    $label_incoming.text(xabber.getString(\"contact_subscription_send\")).prev('input').prop('checked', true);\n                    $label_outcoming.text(xabber.getString(\"contact_subscription_receive\")).prev('input').prop('checked', true);\n                } else if (subscription === 'from') {\n                    $label_incoming.text(xabber.getString(\"contact_subscription_send\")).prev('input').prop('checked', true);\n                    $label_outcoming.text(xabber.getString(\"contact_subscription_ask\")).prev('input').prop('checked', false);\n                } else if (subscription === 'to') {\n                    $label_incoming.text(xabber.getString(\"contact_subscription_accept\")).prev('input').prop('checked', this.model.get('subscription_preapproved') ? true : false);\n                    $label_outcoming.text(xabber.getString(\"contact_subscription_receive\")).prev('input').prop('checked', true);\n                }\n                else if (!subscription || subscription === 'none') {\n                    $label_incoming.text(xabber.getString(\"contact_subscription_accept\")).prev('input').prop('checked', this.model.get('subscription_preapproved') ? true : false);\n                    $label_outcoming.text(xabber.getString(\"contact_subscription_ask\")).prev('input').prop('checked', false);\n                }\n                if (in_request && subscription !== 'both') {\n                    $label_incoming.text(xabber.getString(\"contact_subscription_send\")).prev('input').prop('checked', false);\n                }\n                if (out_request) {\n                    $label_outcoming.text(xabber.getString(\"contact_subscription_ask\")).prev('input').prop('checked', true);\n                }\n            },\n\n            onChangedSubscription: function (ev) {\n                let contact = this.model,\n                    $target = $(ev.target),\n                    is_checked = $target.prop('checked');\n                if (is_checked) {\n                    if ($target.attr('id') === \"outcoming-subscription\")\n                        contact.askRequest();\n                    else {\n                        contact.set('subscription_preapproved', true);\n                        contact.acceptRequest();\n                    }\n                }\n                else {\n                    if ($target.attr('id') === \"outcoming-subscription\")\n                        contact.declineSubscription();\n                    else\n                        contact.declineSubscribe();\n                }\n            },\n\n            openChat: function (ev) {\n                if (ev && ($(ev.target).closest('.button-wrap').hasClass('non-active') || $(ev.target).closest('.button-wrap').length && this.model.get('blocked')))\n                    return;\n                let options = {};\n                (xabber.chats_view.active_chat && xabber.chats_view.active_chat.model.get('jid') === this.model.get('jid') && xabber.chats_view.active_chat.model.get('encrypted')) && (options.encrypted = true);\n                this.model.trigger(\"open_chat\", this.model, options);\n            },\n\n            voiceCall: function (ev) {\n                if ($(ev.target).closest('.button-wrap').hasClass('non-active') || this.model.get('blocked'))\n                    return;\n                if (xabber.get('audio'))\n                    this.initCall(ev);\n            },\n\n            initCall: function () {\n                if (xabber.current_voip_call) {\n                    utils.callback_popup_message(xabber.getString(\"jingle__error__call_in_progress\"), 1000);\n                    return;\n                }\n                this.openChat();\n                let chat = this.account.chats.getChat(this.model);\n                if (!chat.item_view.content)\n                    chat.item_view.content = new xabber.ChatContentView({chat_item: chat.item_view});\n                chat.item_view.content.initJingleMessage();\n            },\n\n            deleteContact: function () {\n                this.model.deleteWithDialog();\n            },\n\n            blockContact: function () {\n                this.model.blockWithDialog();\n            },\n\n            unblockContact: function () {\n                this.model.unblockWithDialog();\n            },\n\n            changeNotifications: function (ev) {\n                if ($(ev.target).closest('.button-wrap').hasClass('non-active') || this.model.get('blocked'))\n                    return\n                let chat = this.account.chats.getChat(this.model);\n                chat.muteChat();\n            },\n\n            addContact: function () {\n                xabber.add_contact_view.show({account: this.account, jid: this.model.get('jid')});\n            },\n\n            requestAuthorization: function () {\n                this.model.pres('subscribe');\n                this.model.trigger('presence', this.model, 'subscribe_from');\n                this.openChat();\n            }\n        });\n\n        xabber.ContactDetailsViewRight = xabber.ContactDetailsView.extend({\n            className: 'details-panel-right contact-details-panel',\n            template: templates.contact_details_right,\n            avatar_size: constants.AVATAR_SIZES.CONTACT_DETAILS,\n\n            events: {\n                \"click .btn-escape:not(.btn-top)\": \"openChat\",\n                \"click .btn-escape.btn-top\": \"scrollToTopSmooth\",\n                \"click .btn-edit\": \"showEdit\",\n                \"click .btn-chat\": \"openChat\",\n                \"click .panel-background-clickable\": \"openChat\",\n                \"click .btn-search\": \"showSearchMessages\",\n                \"click .btn-voice-call\": \"voiceCall\",\n                \"click .btn-add\": \"addContact\",\n                \"click .btn-delete\": \"deleteContact\",\n                \"click .btn-block\": \"blockContact\",\n                \"click .btn-qr-code\": \"showQRCode\",\n                \"click .btn-unblock\": \"unblockContact\",\n                \"click .btn-mute-dropdown\": \"muteChat\",\n                \"click .btn-mute.muted\": \"unmuteChat\",\n                \"click .list-variant\": \"changeList\",\n                \"click .btn-auth-request\": \"requestAuthorization\",\n            },\n\n            _initialize: function (options) {\n                this.encrypted = options.encrypted;\n                this.ps_container = this.$('.panel-content-wrap');\n                this.account = this.model.account;\n                this.chat = this.account.chats.getChat(this.model, options.encrypted && 'encrypted');\n                this.name_field = new xabber.ContactNameWidget({\n                    el: this.$('.name-wrap')[0],\n                    model: this.model\n                });\n                this.name_field.$('.contact-name-input').prop('disabled', true)\n                if (!this.encrypted){\n                    this.contact_edit_view = this.addChild('edit', xabber.ContactEditView,\n                        {model: this.model, el: this.$('.edit-block-wrap')[0]});\n                }\n                this.contact_searched_messages_view = this.addChild('search', xabber.ContactSearchedMessagesView,\n                    {model: this.account.chats.getChat(this.model), query_text: '1', el: this.$('.search-messages-block-wrap')[0]});\n                this.vcard_view = this.addChild('vcard', xabber.ContactRightVCardView,\n                    {model: this.model, el: this.$('.vcard')[0]});\n                this.edit_groups_view = this.addChild('groups',\n                    xabber.ContactEditGroupsView, {el: this.$('.groups-block-wrap')[0]});\n                this.updateName();\n                this.updateStatus();\n                this.updateAvatar();\n                this.updateButtons();\n                this.updateColorScheme();\n                this.account.settings.on(\"change:color\", this.updateColorScheme, this);\n                this.ps_container.on(\"ps-scroll-up ps-scroll-down\", this.onScroll.bind(this));\n                this.model.on(\"change\", this.update, this);\n                this.chat.on(\"change:muted\", this.updateNotifications, this);\n                xabber.on(\"change:video\", this.updateJingleButtons, this);\n                xabber.on(\"change:audio\", this.updateJingleButtons, this);\n            },\n\n            render: function (options) {\n                if (!this.model.get('vcard_updated')) {\n                    this.vcard_view.refresh();\n                }\n                if (!this.model.get('saved_search_panel')) {\n                    if (this.ps_container.length) {\n                        this.ps_container.perfectScrollbar(\n                            _.extend(this.ps_settings || {}, xabber.ps_settings)\n                        );\n                    }\n                }\n                else {\n                    this.ps_container.perfectScrollbar('destroy');\n                }\n                this.$('.btn-mute').dropdown({\n                    inDuration: 100,\n                    outDuration: 100,\n                    hover: false\n                });\n                if (this.encrypted){\n                    this.$('.btn-search-messages').remove()\n                    this.$('.btn-edit').remove()\n                    this.$('.btn-qr-code').remove()\n                }\n                this.updateChilds();\n                this.updateSubscriptions();\n                this.updateJingleButtons();\n                this.updateStatusMsg();\n                this.updateName();\n                this.updateNotifications();\n                this.setButtonsWidth();\n                this.updateList('image');\n                xabber.once(\"update_css\", this.updateIndicator, this);\n                this.onScroll();\n                this.model.resources.models.forEach((resource) => {this.model.resources.requestInfo(resource)});\n                $(window).bind(\"keydown.contact_panel\", this.keydownHandler.bind(this));\n            },\n\n            updateChilds: function () {\n                if (this.vcard_view && !this.model.get('vcard_hidden'))\n                    this.vcard_view.hideVCard();\n                if (this.contact_edit_view && !this.model.get('edit_hidden'))\n                    this.contact_edit_view.hideEdit();\n            },\n\n            updateIndicator: function () {\n                this.$('.tabs .indicator').remove();\n                this.$('.tabs').tabs();\n                this.$('.indicator').addClass('ground-color-500');\n            },\n\n\n            keydownHandler: function (ev) {\n                if (!xabber.body.$el.siblings('.mfp-ready').length && !$.magnificPopup.instance.isOpen && ev.keyCode === constants.KEY_ESCAPE && !xabber.body.$el.siblings('#modals').children('.open').length) {\n                    this.model.showDetailsRight('all-chats');\n                    $(window).unbind(\"keydown.contact_panel\");\n                }\n            },\n\n            openChat: function (ev) {\n                this.model.showDetailsRight('all-chats');\n            },\n\n            updateColorScheme: function () {\n                this.$el.attr('data-color', this.account.settings.get('color'));\n            },\n\n            scrollToTopSmooth: function () {\n                this.ps_container.animate(\n                    {scrollTop: 0},\n                    400,\n                    () => {\n                        this.onScroll();\n                    });\n            },\n\n            setButtonsWidth: function () {\n                let widths = [];\n                this.$('.main-info .button-wrap').each((i, button) => {widths.push(button.clientWidth)});\n                this.$('.main-info .button-wrap').css('width', `${Math.max.apply(null, widths)}px`);\n            },\n\n            onChangedVisibility: function () {\n                this.model.set('display', this.isVisible());\n            },\n\n            updateJingleButtons: function () {\n                this.$('.btn-voice-call').switchClass('non-active', !xabber.get('audio'));\n            },\n\n            update: function () {\n                let changed = this.model.changed;\n                if (_.has(changed, 'name')) this.updateName();\n                if (_.has(changed, 'image')) this.updateAvatar();\n                if (_.has(changed, 'status_updated')) this.updateStatus();\n                if (_.has(changed, 'subscription')) this.updateSubscriptions();\n                if (_.has(changed, 'subscription_request_in')) this.updateSubscriptions();\n                if (_.has(changed, 'blocked')) this.updateStatusMsg();\n                if (_.has(changed, 'status_message')) this.updateStatusMsg();\n                if (_.has(changed, 'in_roster') || _.has(changed, 'blocked') ||\n                    _.has(changed, 'subscription')) {\n                    this.updateButtons();\n                }\n            },\n\n            updateName: function () {\n                this.$('.main-info .name-wrap').text(this.model.get('name'));\n                if (this.model.get('roster_name') && this.model.get('name') != this.model.get('roster_name'))\n                    this.$('.main-info .name-wrap').addClass('name-is-custom');\n                else\n                    this.$('.main-info .name-wrap').removeClass('name-is-custom');\n            },\n\n            onScroll: function () {\n                if (this.model.get('saved_search_panel') && !this.model.get('search_hidden')){\n                    this.ps_container.perfectScrollbar('destroy');\n                    return true;\n                }\n                let bottom_block_scroll;\n                if (this.$('.bottom-block:not(.edit-bottom-block)'))\n                    bottom_block_scroll = this.$('.bottom-block:not(.edit-bottom-block)').get(0).getBoundingClientRect().top;\n\n                if(this.ps_container[0].scrollTop >= 200) {\n                    this.$('.header-buttons').css({'background-color': 'rgba(255,255,255,1)'});\n                    this.$('.main-info').addClass('fixed-scroll');\n                    this.$('.main-info').css({width: xabber.right_contact_panel.$el.find('.details-panel-right').width()});\n                    this.$('.block-wrap.vcard').css({'padding-top': '340px'})\n                    this.$('.main-info .block-name:not(.second-text)').removeClass('fade-out');\n                    this.$('.main-info .block-name.second-text').addClass('fade-out');\n                }\n                else if(this.ps_container[0].scrollTop >= 40) {\n                    this.$('.header-buttons').css({'background-color': 'rgba(255,255,255,0.5)'});\n                    this.$('.main-info').removeClass('fixed-scroll');\n                    this.$('.block-wrap.vcard').css({'padding-top': '0'});\n                    this.$('.main-info .block-name').addClass('fade-out');\n                }\n                else{\n                    this.$('.header-buttons').css({'background-color': 'rgba(255,255,255,0)'});\n                    this.$('.main-info').removeClass('fixed-scroll');\n                    this.$('.block-wrap.vcard').css({'padding-top': '0'});\n                    this.$('.main-info .block-name').addClass('fade-out');\n                }\n                if (bottom_block_scroll && bottom_block_scroll < 150) {\n                    this.$('.bottom-block:not(.edit-bottom-block) .tabs').addClass('fixed-scroll');\n                    this.$('.btn-escape').addClass('btn-top');\n                    this.$('.btn-escape i').addClass('mdi-arrow-right').removeClass('mdi-close');\n                    this.$('.bottom-block:not(.edit-bottom-block) .participants-search-form').addClass('fixed-scroll');\n                    this.$('.buttons-wrap').hideIf(true);\n                    this.$('.btn-edit').hideIf(true);\n                    this.$('.btn-qr-code').hideIf(true);\n                    this.$('.main-info .block-name:not(.second-text)').addClass('fade-out');\n                    this.$('.main-info .block-name.second-text').removeClass('fade-out');\n                    this.$('.main-info .block-name.second-text').text(this.$('.list-variant .active').text())\n                }\n                else {\n                    this.$('.btn-escape').removeClass('btn-top');\n                    this.$('.btn-escape i').addClass('mdi-close').removeClass('mdi-arrow-right');\n                    this.$('.bottom-block:not(.edit-bottom-block) .tabs').removeClass('fixed-scroll');\n                    this.$('.bottom-block:not(.edit-bottom-block) .participants-search-form').removeClass('fixed-scroll');\n                    this.$('.buttons-wrap').hideIf(false);\n                    this.$('.btn-edit').hideIf(false);\n                    this.$('.btn-qr-code').hideIf(false);\n                }\n            },\n\n            updateStatus: function () {\n                this.$('.main-info .status').attr('data-status', this.model.get('status'));\n                this.$('.main-info .status-message').text(this.model.getStatusMessage());\n            },\n\n            updateStatusMsg: function () {\n                this.$('.main-info .status-message').text(this.model.getStatusMessage());\n            },\n\n            updateAvatar: function () {\n                let image = this.model.cached_image;\n                this.$('.circle-avatar').setAvatar(image, this.avatar_size);\n            },\n\n            updateButtons: function () {\n                let in_roster = this.model.get('in_roster'),\n                    is_blocked = this.model.get('blocked'),\n                    is_server = this.model.get('server'),\n                    subscription = this.model.get('subscription');\n                this.$('.btn-add').hideIf(in_roster);\n                this.$('.btn-block-wrap .contact-btn').switchClass('btn-block', !is_blocked).switchClass('btn-unblock', is_blocked);\n                this.$('.btn-block-wrap .btn-name').text(is_blocked ? xabber.getString(\"contact_bar_unblock\") : xabber.getString(\"contact_bar_block\"));\n                this.$('.buttons-wrap .button-wrap:not(.btn-block-wrap):not(.btn-search-messages)').switchClass('non-active', is_blocked);\n                this.$('.contact-mute-dropdown').hideIf(is_blocked);\n                this.$('.btn-auth-request').showIf(!is_server && in_roster && !is_blocked &&\n                    subscription !== 'both' && subscription !== 'to');\n            },\n\n            updateNotifications: function () {\n                if (this.chat.isMuted()) {\n                    if (this.chat.isMuted() > 4800000000)\n                        this.$('.btn-mute').html(env.templates.svg['bell-off']());\n                    else\n                        this.$('.btn-mute').html(env.templates.svg['bell-sleep']());\n                    this.$('.btn-mute').addClass('muted').addClass('active')\n                }\n                else {\n                    this.$('.btn-mute').html(env.templates.svg['bell']());\n                    this.$('.btn-mute').removeClass('muted')\n                }\n                this.$('.btn-mute-dropdown').hideIf(this.chat.isMuted());\n                this.$('.btn-unmute-dropdown').hideIf(!this.chat.isMuted());\n            },\n\n            showQRCode: function () {\n                let qrcode = new VanillaQR({\n                    url: 'xmpp:' + this.model.get('jid'),\n                    noBorder: true\n                });\n                utils.dialogs.ask(xabber.getString(\"dialog_show_qr_code__header\"), null, {escape_button: true, canvas: qrcode.domElement, bottom_text: ('<div class=\"name\">' + this.model.get('name') + '</div><div class=\"jid\">' + this.model.get('jid') + '</div>')}, { cancel_button_text: ' ', ok_button_text: ' '}, 'hidden').done((result) => {\n                });\n            },\n\n            updateSubscriptions: function () {\n                let subscription = this.model.get('subscription'),\n                    in_request = this.model.get('subscription_request_in'),\n                    out_request = this.model.get('subscription_request_out'),\n                    $label_outcoming = this.$('label[for=\"outcoming-subscription\"]'),\n                    $label_incoming = this.$('label[for=\"incoming-subscription\"]');\n                if (subscription === 'both') {\n                    $label_incoming.text(xabber.getString(\"contact_subscription_send\")).prev('input').prop('checked', true);\n                    $label_outcoming.text(xabber.getString(\"contact_subscription_receive\")).prev('input').prop('checked', true);\n                } else if (subscription === 'from') {\n                    $label_incoming.text(xabber.getString(\"contact_subscription_send\")).prev('input').prop('checked', true);\n                    $label_outcoming.text(xabber.getString(\"contact_subscription_ask\")).prev('input').prop('checked', false);\n                } else if (subscription === 'to') {\n                    $label_incoming.text(xabber.getString(\"contact_subscription_accept\")).prev('input').prop('checked', this.model.get('subscription_preapproved') ? true : false);\n                    $label_outcoming.text(xabber.getString(\"contact_subscription_receive\")).prev('input').prop('checked', true);\n                }\n                else if (!subscription || subscription === 'none') {\n                    $label_incoming.text(xabber.getString(\"contact_subscription_accept\")).prev('input').prop('checked', this.model.get('subscription_preapproved') ? true : false);\n                    $label_outcoming.text(xabber.getString(\"contact_subscription_ask\")).prev('input').prop('checked', false);\n                }\n                if (in_request && subscription !== 'both') {\n                    $label_incoming.text(xabber.getString(\"contact_subscription_send\")).prev('input').prop('checked', false);\n                }\n                if (out_request) {\n                    $label_outcoming.text(xabber.getString(\"contact_subscription_ask\")).prev('input').prop('checked', true);\n                }\n            },\n\n            showEdit: function (ev) {\n                this.contact_edit_view.showEdit();\n            },\n\n            voiceCall: function (ev) {\n                if ($(ev.target).closest('.button-wrap').hasClass('non-active') || this.model.get('blocked'))\n                    return;\n                if (xabber.get('audio'))\n                    this.initCall(ev);\n            },\n\n            initCall: function () {\n                if (xabber.current_voip_call) {\n                    utils.callback_popup_message(xabber.getString(\"jingle__error__call_in_progress\"), 1000);\n                    return;\n                }\n                let chat = this.account.chats.getChat(this.model);\n                if (!chat.item_view.content)\n                    chat.item_view.content = new xabber.ChatContentView({chat_item: chat.item_view});\n                chat.item_view.content.initJingleMessage();\n            },\n\n            deleteContact: function () {\n                this.model.deleteWithDialog();\n            },\n\n            blockContact: function () {\n                this.model.blockWithDialog();\n            },\n\n            unblockContact: function () {\n                this.model.unblockWithDialog();\n            },\n\n            muteChat: function (ev) {\n                if (this.model.get('blocked'))\n                    return;\n                let mute_type = $(ev.target).closest('.btn-mute-dropdown').data('mute'),\n                    muted_seconds;\n                if (mute_type === 'minutes15')\n                    muted_seconds = 900\n                if (mute_type === 'hours1')\n                    muted_seconds = 3600\n                if (mute_type === 'hours2')\n                    muted_seconds = 7200\n                if (mute_type === 'day')\n                    muted_seconds = 86400\n                if (mute_type === 'forever')\n                    muted_seconds = 0\n                this.chat.muteChat(muted_seconds);\n            },\n\n            unmuteChat: function (ev) {\n                if (this.model.get('blocked'))\n                    return;\n                this.chat.muteChat('');\n            },\n\n            showSearchMessages: function (ev) {\n                this.scrollToTop();\n                if (this.ps_container.length) {\n                    this.ps_container.perfectScrollbar('destroy');\n                }\n                this.model.set('search_hidden', false);\n                this.$('.search-wrap').hideIf(this.model.get('search_hidden'));\n                this.contact_searched_messages_view.$search_form.find('input').focus();\n            },\n\n            addContact: function () {\n                xabber.add_contact_view.show({account: this.account, jid: this.model.get('jid')});\n            },\n\n            changeList: function (ev) {\n                let $target = $(ev.target).closest('.list-variant'),\n                    list_name = $target.data('value');\n                this.$('.tabs').animate({scrollLeft: $target.position().left}, 400);\n                this.ps_container.animate(\n                    {scrollTop: this.$('.bottom-block:not(.edit-bottom-block)').position().top + this.ps_container.scrollTop()-110},\n                    200,\n                    () => {\n                        this.onScroll();\n                        this.ps_container.animate(\n                            {scrollTop: this.$('.bottom-block:not(.edit-bottom-block)').position().top + this.ps_container.scrollTop()-110},\n                            0,\n                        );\n                });\n                this.$('.header-buttons .block-name.second-text').text($target.text())\n                this.updateList(list_name);\n            },\n\n            updateList: function (name) {\n                let view = this.child(name);\n                !view && (view = this.addList(name));\n                if (view) {\n                    this.$('.tabs .list-variant a').removeClass('active');\n                    this.$('.tabs .list-variant[data-value=\"' + name + '\"] a').addClass('active');\n                    view._render();\n                }\n            },\n\n            addList: function (name) {\n                let constructor_func;\n                switch (name) {\n                    case 'image':\n                        constructor_func = xabber.MediaImagesView;\n                        break;\n                    case 'video':\n                        constructor_func = xabber.MediaVideosView;\n                        break;\n                    case 'files':\n                        constructor_func = xabber.MediaFilesView;\n                        break;\n                    case 'voice':\n                        constructor_func = xabber.MediaVoiceView;\n                        break;\n                };\n                if (constructor_func)\n                    return this.addChild(name, constructor_func, {model: this.model, encrypted: this.encrypted, el: this.$('.participants-wrap')[0]});\n                else\n                    return;\n            },\n\n            requestAuthorization: function () {\n                this.model.pres('subscribe');\n                this.model.trigger('presence', this.model, 'subscribe_from');\n                this.openChat();\n            }\n        });\n\n        xabber.GroupChatDetailsView = xabber.BasicView.extend({\n            className: 'details-panel groupchat-details-panel',\n            template: templates.group_chats.group_chat_details,\n            ps_selector: '.panel-content-wrap',\n            avatar_size: constants.AVATAR_SIZES.CONTACT_DETAILS,\n            member_avatar_size: constants.AVATAR_SIZES.GROUPCHAT_MEMBER_ITEM,\n\n            events: {\n                \"click .btn-mute\": \"changeNotifications\",\n                \"click .btn-qr-code\": \"showQRCode\",\n                \"click .btn-leave\": \"leaveGroupChat\",\n                \"click .btn-invite\": \"inviteUser\",\n                \"click .btn-delete-group\": \"deleteGroup\",\n                \"click .btn-edit-settings\": \"editProperties\",\n                \"click .btn-default-restrictions\": \"editDefaultRestrictions\",\n                \"click .btn-chat\": \"openChat\",\n                \"click .btn-escape\": \"openChat\",\n                \"click .btn-clear-history\": \"retractAllMessages\",\n                \"change .circle-avatar input\": \"changeAvatar\",\n                \"click .list-variant\": \"changeList\"\n            },\n\n            _initialize: function () {\n                this.account = this.model.account;\n                this.name_field = new xabber.ContactNameWidget({\n                    el: this.$('.name-wrap')[0],\n                    model: this.model\n                });\n                this.participants = this.addChild('participants', xabber.ParticipantsView, {model: this.model, el: this.$('.participants-wrap')[0]});\n                this.edit_groups_view = this.addChild('groups',\n                    xabber.ContactEditGroupsView, {el: this.$('.groups-block-wrap')[0]});\n                this.group_chat_properties = this.addChild('properties_view', xabber.GroupChatPropertiesView, {model:this.model, el: this.$('.group-chat-properties-wrap')[0]});\n                this.group_chat_status = this.addChild('status_view', xabber.GroupChatStatusView, {model:this.model, el: this.$('.status-block-wrap')[0]});\n                this.group_chat_properties_edit = new xabber.GroupChatPropertiesEditView({model: this.model});\n                this.default_restrictions_edit = new xabber.DefaultRestrictionsView({model: this.model});\n                this.updateName();\n                this.updateStatus();\n                this.updateAvatar();\n                this.updateColorScheme();\n                this.account.settings.on(\"change:color\", this.updateColorScheme, this);\n                this.model.on(\"change\", this.update, this);\n                this.model.on(\"permissions_changed\", this.updateButtons, this);\n                this.model.on(\"change:subscription\", this.updateButtons, this);\n            },\n\n            render: function () {\n                this.updateName();\n                this.updateButtons();\n                if (!this.model.my_rights)\n                    this.model.getMyInfo(() => {\n                        this.updateButtons();\n                    });\n                this.$('.btn-delete').showIf(this.model.get('subscription') === \"both\");\n                this.$('.btn-join').showIf(this.model.get('subscription') !== \"both\");\n                let dropdown_settings = {\n                    inDuration: 100,\n                    outDuration: 100,\n                    constrainWidth: false,\n                    hover: false,\n                    alignment: 'right'\n                };\n                this.$('.select-users-list-wrap .dropdown-button').dropdown(dropdown_settings);\n                this.$('.main-info .dropdown-button').dropdown(dropdown_settings);\n                this.updateList('participants');\n                this.$('.tabs .indicator').remove();\n                this.$('.tabs').tabs();\n                this.$('.indicator').addClass('ground-color-500');\n                this.setButtonsWidth();\n                return this;\n            },\n\n            update: function () {\n                let changed = this.model.changed;\n                if (_.has(changed, 'name')) this.updateName();\n                if (_.has(changed, 'image')) this.updateAvatar();\n                // if (_.has(changed, 'muted')) this.updateNotifications();\n                if (_.has(changed, 'status_updated') || _.has(changed, 'status_message')) this.updateStatus();\n            },\n\n            updateColorScheme: function () {\n                this.$el.attr('data-color', this.account.settings.get('color'));\n            },\n\n            setButtonsWidth: function () {\n                let widths = [];\n                this.$('.main-info .button-wrap').each((i, button) => {widths.push(button.clientWidth)});\n                this.$('.main-info .button-wrap').css('width', `${Math.max.apply(null, widths)}px`);\n            },\n\n            updateButtons: function () {\n                let is_owner = this.model.my_rights && this.model.my_rights.fields.find(permission => permission.var == 'owner' && permission.values),\n                    change_group = this.model.my_rights && this.model.my_rights.fields.find(permission => permission.var == 'change-group' && permission.values),\n                    is_blocked = this.model.get('blocked');\n                this.$('.btn-settings-wrap').switchClass('non-active', !is_owner);\n                this.$('.btn-edit-settings').switchClass('hidden', !(is_owner || change_group));\n                this.$('.btn-leave-wrap').switchClass('non-active', this.model.get('subscription') != 'both');\n                this.$('.btn-invite-wrap').switchClass('non-active', this.model.get('private_chat') || this.model.get('subscription') != 'both');\n                this.$('.btn-default-restrictions-wrap').switchClass('non-active', !is_owner);\n                this.$('.btn-block').hideIf(is_blocked);\n                this.$('.btn-unblock').showIf(is_blocked);\n            },\n\n            updateName: function () {\n                this.$('.main-info .contact-name').text(this.model.get('name'));\n                if (this.model.get('name') != this.model.get('roster_name'))\n                    this.$('.main-info .contact-name').addClass('name-is-custom');\n                else\n                    this.$('.main-info .contact-name').removeClass('name-is-custom');\n            },\n\n            changeNotifications: function (ev) {\n                if ($(ev.target).closest('.button-wrap').hasClass('non-active') || this.model.get('blocked'))\n                    return;\n                let chat = this.account.chats.getChat(this.model);\n                chat.muteChat();\n            },\n\n            // updateNotifications: function () {\n            //     let chat = this.account.chats.getChat(this.model);\n            //     this.$('.btn-mute').switchClass('mdi-bell-off', chat.get('muted'));\n            //     this.$('.btn-mute').switchClass('mdi-bell', !chat.get('muted'));\n            // },\n\n            showQRCode: function () {\n                let qrcode = new VanillaQR({\n                    url: 'xmpp:' + this.model.get('jid'),\n                    noBorder: true\n                });\n                utils.dialogs.ask(xabber.getString(\"dialog_show_qr_code__header\"), null, {escape_button: true, canvas: qrcode.domElement, bottom_text: ('<div class=\"name\">' + this.model.get('name') + '</div><div class=\"jid\">' + this.model.get('jid') + '</div>')}, { cancel_button_text: ' ', ok_button_text: ' '}, 'hidden').done((result) => {\n                });\n            },\n\n            editProperties: function (ev) {\n                if (!$(ev.target).closest('.button-wrap').hasClass('non-active')) {\n                        let iq_get_properties = $iq({to: this.model.get('full_jid') || this.model.get('jid'), type: 'get'})\n                            .c('query', {xmlns: Strophe.NS.GROUP_CHAT});\n                        this.account.sendIQFast(iq_get_properties, (properties) => {\n                            let data_form = this.account.parseDataForm($(properties).find(`x[xmlns=\"${Strophe.NS.DATAFORM}\"]`));\n                            this.group_chat_properties_edit.open(data_form);\n                        }, () => {\n                            utils.callback_popup_message(xabber.getString(\"groupchat_you_have_no_permissions_to_do_it\"), 3000);\n                        });\n                }\n            },\n\n            editDefaultRestrictions: function (ev) {\n                if (!$(ev.target).closest('.button-wrap').hasClass('non-active'))\n                    this.default_restrictions_edit.open();\n            },\n\n            leaveGroupChat: function (ev) {\n                if ($(ev.target).closest('.button-wrap').hasClass('non-active'))\n                    return;\n                let contact = this.model;\n                utils.dialogs.ask(xabber.getString(\"groupchat_leave_full\"), xabber.getString(\"groupchat_leave_confirm\", [contact.get('name')]), null, { ok_button_text: xabber.getString(\"groupchat_leave\")}).done((result) => {\n                    if (result) {\n                        contact.declineSubscription();\n                        contact.removeFromRoster();\n                        let chat = this.account.chats.getChat(contact);\n                        chat.deleteFromSynchronization(() => {\n                            chat.trigger(\"close_chat\");\n                            xabber.body.setScreen('all-chats', {right: undefined});\n                        }, () => {\n                            chat.trigger(\"close_chat\");\n                            xabber.body.setScreen('all-chats', {right: undefined});\n                        });\n                    }\n                });\n            },\n\n            inviteUser: function (ev) {\n                if (!$(ev.target).closest('.button-wrap').hasClass('non-active')) {\n                    if (!xabber.invite_panel)\n                        xabber.invite_panel = new xabber.InvitationPanelView({ model: xabber.opened_chats });\n                    xabber.invite_panel.open(this.account, this.model);\n                }\n            },\n\n            changeList: function (ev) {\n                let $target = $(ev.target).closest('.list-variant'),\n                    list_name = $target.data('value');\n                this.updateList(list_name);\n            },\n\n            updateList: function (name) {\n                let view = this.child(name);\n                !view && (view = this.addList(name));\n                if (view) {\n                    this.$('.tabs .list-variant a').removeClass('active');\n                    this.$('.tabs .list-variant[data-value=\"' + name + '\"] a').addClass('active');\n                    view._render();\n                }\n            },\n\n            addList: function (name) {\n                let constructor_func;\n                switch (name) {\n                    case 'blocked':\n                        constructor_func = xabber.BlockedView;\n                        break;\n                    case 'invitations':\n                        constructor_func = xabber.InvitationsView;\n                        break;\n                };\n                if (constructor_func)\n                    return this.addChild(name, constructor_func, {model: this.model, el: this.$('.participants-wrap')[0]});\n                else\n                    return;\n            },\n\n            getInvitations: function (callback, errback) {\n                let iq = $iq({\n                    type: 'get',\n                    to: this.model.get('full_jid') || this.model.get('jid')})\n                    .c('query', {xmlns: Strophe.NS.GROUP_CHAT + '#invite'});\n                this.account.sendFast(iq, callback, errback);\n            },\n\n            deleteGroup: function () {\n                this.model.deleteWithDialog();\n            },\n\n            blockContact: function () {\n                this.model.blockWithDialog();\n            },\n\n            unblockContact: function () {\n                this.model.unblockWithDialog();\n            },\n\n            updateStatus: function () {\n                this.$('.main-info .status-message').text(this.model.getStatusMessage());\n            },\n\n            updateAvatar: function () {\n                let image = this.model.cached_image;\n                this.$('.main-info .circle-avatar').setAvatar(image, this.avatar_size);\n            },\n\n            openChat: function () {\n                this.model.trigger(\"open_chat\", this.model);\n            },\n\n            changeAvatar: function (ev) {\n                let field = ev.target;\n                if (!field.files.length) {\n                    return;\n                }\n                let file = field.files[0];\n                field.value = '';\n                if (file.size > constants.MAX_AVATAR_FILE_SIZE) {\n                    utils.dialogs.error(xabber.getString(\"group_settings__error__avatar_too_large\"));\n                    return;\n                } else if (!file.type.startsWith('image')) {\n                    utils.dialogs.error(xabber.getString(\"group_settings__error__wrong_image\"));\n                    return;\n                }\n                $(field).siblings('.preloader-wrap').addClass('visible').find('.preloader-wrapper').addClass('active');\n                utils.images.getAvatarFromFile(file).done((image) => {\n                    if (image) {\n                        file.base64 = image;\n                        this.model.pubAvatar(file, \"\", function () {\n                            $(field).siblings('.preloader-wrap').removeClass('visible').find('.preloader-wrapper').removeClass('active');\n                        }, function (error) {\n                            $(field).siblings('.preloader-wrap').removeClass('visible').find('.preloader-wrapper').removeClass('active');\n\n                            let error_text = $(error).find('text').text() || xabber.getString(\"groupchat_you_have_no_permissions_to_do_it\");\n                            utils.dialogs.error(error_text);\n                        });\n                    }\n                });\n            },\n\n            retractAllMessages: function () {\n                let group_chat = this.account.chats.getChat(this.model);\n                utils.dialogs.ask(xabber.getString(\"delete_messages__header\"), xabber.getString(\"delete_messages__confirm\"), null, { ok_button_text: xabber.getString(\"delete\")}).done((result) => {\n                    if (result) {\n                        group_chat.retractAllMessages(true);\n                    }\n                });\n            },\n        });\n\n        xabber.GroupChatDetailsViewRight = xabber.BasicView.extend({\n            className: 'details-panel-right groupchat-details-panel',\n            template: templates.group_chats.group_chat_details_right,\n            ps_selector: '.panel-content-wrap',\n            avatar_size: constants.AVATAR_SIZES.CONTACT_DETAILS,\n            member_avatar_size: constants.AVATAR_SIZES.GROUPCHAT_MEMBER_ITEM,\n\n            events: {\n                \"click .btn-mute-dropdown\": \"muteChat\",\n                \"click .btn-mute.muted\": \"unmuteChat\",\n                \"click .btn-edit\": \"showEdit\",\n                \"click .btn-search\": \"showSearchMessages\",\n                \"click .btn-clear-history-chat\": \"clearHistory\",\n                \"click .btn-qr-code\": \"showQRCode\",\n                \"click .btn-leave\": \"leaveGroupChat\",\n                \"click .btn-invite\": \"inviteUser\",\n                \"click .btn-delete-group\": \"deleteGroup\",\n                \"click .btn-edit-settings\": \"editProperties\",\n                \"click .btn-default-restrictions\": \"showRestrictions\",\n                \"click .btn-chat\": \"openChat\",\n                \"click .panel-background-clickable\": \"openChat\",\n                \"click .btn-escape:not(.btn-top)\": \"openChat\",\n                \"click .btn-escape.btn-top\": \"scrollToTopSmooth\",\n                \"click .btn-clear-history\": \"retractAllMessages\",\n                \"change .circle-avatar input\": \"changeAvatar\",\n                \"click .tabs:not(.participant-tabs) .list-variant\": \"changeList\",\n                \"click .edit-pictured-buttons .list-variant\": \"changeList\"\n            },\n\n            _initialize: function () {\n                this.account = this.model.account;\n                this.chat = this.account.chats.getChat(this.model);\n                this.name_field = new xabber.ContactNameWidget({\n                    el: this.$('.name-wrap')[0],\n                    model: this.model\n                });\n                this.name_field.$('.contact-name-input').prop('disabled', true)\n                this.participants = this.addChild('participants', xabber.ParticipantsViewRight, {model: this.model, el: this.$('.participants-wrap')[0]});\n                this.edit_groups_view = this.addChild('groups',\n                    xabber.ContactEditGroupsView, {el: this.$('.groups-block-wrap')[0]});\n                this.contact_edit_view = this.addChild('edit', xabber.GroupEditView,\n                    {model: this.model, el: this.$('.edit-block-wrap')[0]});\n                this.group_chat_properties = this.addChild('properties_view', xabber.GroupChatPropertiesViewRight, {model:this.model, el: this.$('.group-chat-properties-wrap')[0]});\n                this.group_chat_status = this.addChild('status_view', xabber.GroupChatStatusViewRight, {model:this.model, el: this.$('.status-block-wrap')[0]});\n                this.contact_searched_messages_view = this.addChild('search', xabber.ContactSearchedMessagesView,\n                    {model: this.account.chats.getChat(this.model), query_text: '1', el: this.$('.search-messages-block-wrap')[0]});\n                this.group_chat_properties_edit = new xabber.GroupChatPropertiesEditView({model: this.model});\n                this.default_restrictions_edit_right = this.addChild('restrictions',\n                    xabber.DefaultRestrictionsRightView,\n                    {model: this.model, el: this.$('.restrictions-block-wrap')[0]});\n                this.updateName();\n                this.updateStatus();\n                this.updateAvatar();\n                this.updateColorScheme();\n                this.ps_container.on(\"ps-scroll-up ps-scroll-down\", this.onScroll.bind(this));\n                this.account.settings.on(\"change:color\", this.updateColorScheme, this);\n                this.model.on(\"change\", this.update, this);\n                this.chat.on(\"change:muted\", this.updateNotifications, this);\n                this.model.on(\"permissions_changed\", this.updateButtons, this);\n                this.model.on(\"change:subscription\", this.updateButtons, this);\n            },\n\n            render: function () {\n                this.updateName();\n                this.updateButtons();\n                if (!this.model.my_rights)\n                    this.model.getMyInfo(() => {\n                        this.updateButtons();\n                    });\n                if (!this.model.get('saved_search_panel')) {\n                    if (this.ps_container.length) {\n                        this.ps_container.perfectScrollbar(\n                            _.extend(this.ps_settings || {}, xabber.ps_settings)\n                        );\n                    }\n                }\n                else {\n                    this.ps_container.perfectScrollbar('destroy');\n                }\n                this.$('.btn-mute').dropdown({\n                    inDuration: 100,\n                    outDuration: 100,\n                    hover: false\n                });\n                this.$('.btn-delete').showIf(this.model.get('subscription') === \"both\");\n                this.$('.btn-join').showIf(this.model.get('subscription') !== \"both\");\n                let dropdown_settings = {\n                    inDuration: 100,\n                    outDuration: 100,\n                    constrainWidth: false,\n                    hover: false,\n                    alignment: 'right'\n                };\n                this.$('.select-users-list-wrap .dropdown-button').dropdown(dropdown_settings);\n                this.$('.main-info .dropdown-button').dropdown(dropdown_settings);\n                this.onScroll();\n                this.updateChilds();\n                this.updateNotifications();\n                this.updateList('participants');\n                this.setButtonsWidth();\n                xabber.once(\"update_css\", this.updateIndicator, this);\n                $(window).bind(\"keydown.contact_panel\", this.keydownHandler.bind(this));\n                return this;\n            },\n\n            updateIndicator: function () {\n                this.$('.tabs.not-edit .indicator').remove();\n                this.$('.tabs.not-edit').tabs();\n                this.$('.tabs.not-edit .indicator').addClass('ground-color-500');\n            },\n\n            updateChilds: function () {\n                if (!this.model.get('vcard_hidden'))\n                    this.group_chat_properties.hideVCard();\n                if (!this.model.get('edit_hidden'))\n                    this.contact_edit_view.hideEdit();\n                if (!this.model.get('restrictions_hidden'))\n                    this.default_restrictions_edit_right.hideRestrictions();\n                this.model.set('participant_hidden', true);\n                this.$('.participant-details-wrap').hideIf(this.model.get('participant_hidden'))\n            },\n\n            showEdit: function (ev) {\n                this.contact_edit_view.showEdit();\n            },\n\n            showRestrictions: function (ev) {\n                this.default_restrictions_edit_right.showRestrictions();\n            },\n\n            hideRestrictions: function (ev) {\n                this.model.set('restrictions_hidden', true);\n                this.$('.restrictions-wrap').hideIf(this.model.get('restrictions_hidden'));\n                this.showEdit();\n            },\n\n\n            keydownHandler: function (ev) {\n                if (!xabber.body.$el.siblings('.mfp-ready').length && !$.magnificPopup.instance.isOpen && ev.keyCode === constants.KEY_ESCAPE && !xabber.body.$el.siblings('#modals').children('.open').length) {\n                    this.model.showDetailsRight('all-chats');\n                    $(window).unbind(\"keydown.contact_panel\");\n                }\n            },\n\n            updateNotifications: function () {\n                if (this.chat.isMuted()) {\n                    if (this.chat.isMuted() > 4800000000)\n                        this.$('.btn-mute').html(env.templates.svg['bell-off']());\n                    else\n                        this.$('.btn-mute').html(env.templates.svg['bell-sleep']());\n                    this.$('.btn-mute').addClass('muted').addClass('active')\n                }\n                else {\n                    this.$('.btn-mute').html(env.templates.svg['bell']());\n                    this.$('.btn-mute').removeClass('muted')\n                }\n                this.$('.btn-mute-dropdown').hideIf(this.chat.isMuted());\n            },\n\n            update: function () {\n                let changed = this.model.changed;\n                if (_.has(changed, 'name')) this.updateName();\n                if (_.has(changed, 'image')) this.updateAvatar();\n                // if (_.has(changed, 'muted')) this.updateNotifications();\n                if (_.has(changed, 'status_updated') || _.has(changed, 'status_message')) this.updateStatus();\n            },\n\n            updateColorScheme: function () {\n                this.$el.attr('data-color', this.account.settings.get('color'));\n            },\n\n            setButtonsWidth: function () {\n                let widths = [];\n                this.$('.main-info .button-wrap').each((i, button) => {widths.push(button.clientWidth)});\n                this.$('.main-info .button-wrap').css('width', `${Math.max.apply(null, widths)}px`);\n            },\n\n            updateButtons: function () {\n                let is_owner = this.model.my_rights && this.model.my_rights.fields.find(permission => permission.var == 'owner' && permission.values),\n                    change_group = this.model.my_rights && this.model.my_rights.fields.find(permission => permission.var == 'change-group' && permission.values),\n                    is_blocked = this.model.get('blocked');\n                this.$('.btn-settings-wrap').switchClass('non-active', !is_owner);\n                this.$('.btn-edit-settings').switchClass('hidden', !(is_owner || change_group));\n                this.$('.btn-leave-wrap').switchClass('non-active', this.model.get('subscription') != 'both');\n                this.$('.btn-invite-wrap').switchClass('non-active', this.model.get('private_chat') || this.model.get('subscription') != 'both');\n                this.$('.btn-default-restrictions-wrap').switchClass('non-active', !is_owner);\n                this.$('.btn-block').hideIf(is_blocked);\n                this.$('.btn-unblock').showIf(is_blocked);\n            },\n\n            updateName: function () {\n                this.$('.main-info .contact-name').text(this.model.get('name'));\n            },\n\n            muteChat: function (ev) {\n                if (this.model.get('blocked'))\n                    return;\n                let mute_type = $(ev.target).closest('.btn-mute-dropdown').data('mute'),\n                    muted_seconds;\n                if (mute_type === 'minutes15')\n                    muted_seconds = 900\n                if (mute_type === 'hours1')\n                    muted_seconds = 3600\n                if (mute_type === 'hours2')\n                    muted_seconds = 7200\n                if (mute_type === 'day')\n                    muted_seconds = 86400\n                if (mute_type === 'forever')\n                    muted_seconds = 0\n                this.chat.muteChat(muted_seconds);\n            },\n\n            unmuteChat: function (ev) {\n                if (this.model.get('blocked'))\n                    return;\n                this.chat.muteChat('');\n            },\n\n            showSearchMessages: function (ev) {\n                this.scrollToTop();\n                if (this.ps_container.length) {\n                    this.ps_container.perfectScrollbar('destroy');\n                }\n                this.model.set('search_hidden', false);\n                this.$('.search-wrap').hideIf(this.model.get('search_hidden'));\n                this.contact_searched_messages_view.$search_form.find('input').focus();\n            },\n\n            onScroll: function () {\n                if (this.model.get('saved_search_panel') && !this.model.get('search_hidden')){\n                    this.ps_container.perfectScrollbar('destroy');\n                    return true;\n                }\n                let bottom_block_scroll;\n                if (this.$('.bottom-block:not(.edit-bottom-block):not(.participant-bottom-block)'))\n                    bottom_block_scroll = this.$('.bottom-block:not(.edit-bottom-block):not(.participant-bottom-block)').get(0).getBoundingClientRect().top;\n\n                if(this.ps_container[0].scrollTop >= 200) {\n                    this.$('.header-buttons').css({'background-color': 'rgba(255,255,255,1)'});\n                    this.$('.main-info').addClass('fixed-scroll');\n                    this.$('.main-info').css({width: xabber.right_contact_panel.$el.find('.details-panel-right').width()});\n                    this.$('.block-wrap.vcard').css({'padding-top': '340px'})\n                    this.$('.header-buttons .block-name:not(.second-text)').removeClass('fade-out');\n                    this.$('.header-buttons .block-name.second-text').addClass('fade-out');\n                }\n                else if(this.ps_container[0].scrollTop >= 40) {\n                    this.$('.header-buttons').css({'background-color': 'rgba(255,255,255,0.5)'});\n                    this.$('.main-info').removeClass('fixed-scroll');\n                    this.$('.block-wrap.vcard').css({'padding-top': '0'});\n                    this.$('.header-buttons .block-name').addClass('fade-out');\n                }\n                else{\n                    this.$('.header-buttons').css({'background-color': 'rgba(255,255,255,0)'});\n                    this.$('.main-info').removeClass('fixed-scroll');\n                    this.$('.block-wrap.vcard').css({'padding-top': '0'});\n                    this.$('.header-buttons .block-name').addClass('fade-out');\n                }\n                if (bottom_block_scroll && bottom_block_scroll < 150) {\n                    this.$('.bottom-block:not(.edit-bottom-block):not(.participant-bottom-block) .tabs').addClass('fixed-scroll');\n                    this.$('.btn-escape').addClass('btn-top');\n                    this.$('.btn-escape i').addClass('mdi-arrow-right').removeClass('mdi-close');\n                    this.$('.bottom-block:not(.edit-bottom-block):not(.participant-bottom-block) .participants-search-form').addClass('fixed-scroll');\n                    this.$('.main-info .buttons-wrap').hideIf(true);\n                    this.$('.btn-edit').hideIf(true);\n                    this.$('.btn-qr-code').hideIf(true);\n                    this.$('.header-buttons .block-name:not(.second-text)').addClass('fade-out');\n                    this.$('.header-buttons .block-name.second-text').removeClass('fade-out');\n                    this.$('.header-buttons .block-name.second-text').text(this.$('.tabs:not(.participant-tabs) .list-variant .active').text())\n                }\n                else {\n                    this.$('.btn-escape').removeClass('btn-top');\n                    this.$('.btn-escape i').addClass('mdi-close').removeClass('mdi-arrow-right');\n                    this.$('.bottom-block:not(.edit-bottom-block):not(.participant-bottom-block) .tabs').removeClass('fixed-scroll');\n                    this.$('.bottom-block:not(.edit-bottom-block):not(.participant-bottom-block) .participants-search-form').removeClass('fixed-scroll');\n                    this.$('.main-info .buttons-wrap').hideIf(false);\n                    this.$('.btn-edit').hideIf(false);\n                    this.$('.btn-qr-code').hideIf(false);\n                }\n            },\n\n            clearHistory: function () {\n                if (this.chat && this.chat.item_view && this.chat.item_view.content && this.chat.item_view.content.head){\n                    this.chat.item_view.content.head.clearHistory()\n                }\n            },\n\n            showQRCode: function () {\n                let qrcode = new VanillaQR({\n                    url: 'xmpp:' + this.model.get('jid'),\n                    noBorder: true\n                });\n                utils.dialogs.ask(xabber.getString(\"dialog_show_qr_code__header\"), null, {escape_button: true, canvas: qrcode.domElement, bottom_text: ('<div class=\"name\">' + this.model.get('name') + '</div><div class=\"jid\">' + this.model.get('jid') + '</div>')}, { cancel_button_text: ' ', ok_button_text: ' '}, 'hidden').done((result) => {\n                });\n            },\n\n            editProperties: function (ev) {\n                if (!$(ev.target).closest('.button-wrap').hasClass('non-active')) {\n                        let iq_get_properties = $iq({to: this.model.get('full_jid') || this.model.get('jid'), type: 'get'})\n                            .c('query', {xmlns: Strophe.NS.GROUP_CHAT});\n                        this.account.sendIQFast(iq_get_properties, (properties) => {\n                            let data_form = this.account.parseDataForm($(properties).find(`x[xmlns=\"${Strophe.NS.DATAFORM}\"]`));\n                            this.group_chat_properties_edit.open(data_form);\n                        }, () => {\n                            utils.callback_popup_message(xabber.getString(\"groupchat_you_have_no_permissions_to_do_it\"), 3000);\n                        });\n                }\n            },\n\n            leaveGroupChat: function (ev) {\n                if ($(ev.target).closest('.button-wrap').hasClass('non-active'))\n                    return;\n                let contact = this.model;\n                utils.dialogs.ask(xabber.getString(\"groupchat_leave_full\"), xabber.getString(\"groupchat_leave_confirm\", [contact.get('name')]), null, { ok_button_text: xabber.getString(\"groupchat_leave\")}).done((result) => {\n                    if (result) {\n                        contact.declineSubscription();\n                        contact.removeFromRoster();\n                        let chat = this.account.chats.getChat(contact);\n                        chat.deleteFromSynchronization(() => {\n                            chat.trigger(\"close_chat\");\n                            xabber.body.setScreen('all-chats', {right: undefined});\n                        }, () => {\n                            chat.trigger(\"close_chat\");\n                            xabber.body.setScreen('all-chats', {right: undefined});\n                        });\n                    }\n                });\n            },\n\n            inviteUser: function (ev) {\n                if (!$(ev.target).closest('.button-wrap').hasClass('non-active')) {\n                    if (!xabber.invite_panel)\n                        xabber.invite_panel = new xabber.InvitationPanelView({ model: xabber.opened_chats });\n                    xabber.invite_panel.open(this.account, this.model);\n                }\n            },\n\n            scrollToTopSmooth: function () {\n                this.ps_container.animate(\n                    {scrollTop: 0},\n                    400,\n                    () => {\n                        this.onScroll();\n                    });\n            },\n\n            changeList: function (ev) {\n                let $target = $(ev.target).closest('.list-variant'),\n                    list_name = $target.data('value');\n                if (list_name != 'blocked' && list_name != 'invitations') {\n                    this.$('.main-info .header-buttons .block-name.second-text').text($target.text())\n                    this.$('.tabs').animate({scrollLeft: $target.position().left - 80}, 400);\n                    this.ps_container.animate(\n                        {scrollTop: this.$('.bottom-block:not(.edit-bottom-block):not(.participant-bottom-block)').position().top + this.ps_container.scrollTop() - 110},\n                        400,\n                        () => {\n                            this.onScroll();\n                            this.ps_container.animate(\n                                {scrollTop: this.$('.bottom-block:not(.edit-bottom-block):not(.participant-bottom-block)').position().top + this.ps_container.scrollTop() - 110},\n                                0,\n                            );\n                        });\n                }\n                this.updateList(list_name);\n            },\n\n            updateList: function (name) {\n                let view = this.child(name);\n                !view && (view = this.addList(name));\n                if (view) {\n                    if (name === 'invitations' || name === 'blocked'){\n                        this.$('.edit-wrap .tabs .list-variant a').removeClass('active');\n                        this.$('.edit-wrap .tabs .list-variant[data-value=\"' + name + '\"] a').addClass('active');\n                    }\n                    else {\n                        this.$('.tabs.not-edit .list-variant a').removeClass('active');\n                        this.$('.tabs.not-edit .list-variant[data-value=\"' + name + '\"] a').addClass('active');\n                    }\n                    view._render();\n                }\n            },\n\n            addList: function (name) {\n                let constructor_func, edit_view;\n                switch (name) {\n                    case 'image':\n                        constructor_func = xabber.MediaImagesView;\n                        break;\n                    case 'video':\n                        constructor_func = xabber.MediaVideosView;\n                        break;\n                    case 'files':\n                        constructor_func = xabber.MediaFilesView;\n                        break;\n                    case 'voice':\n                        constructor_func = xabber.MediaVoiceView;\n                        break;\n                    case 'blocked':\n                        constructor_func = xabber.BlockedView;\n                        edit_view = true;\n                        break;\n                    case 'invitations':\n                        constructor_func = xabber.InvitationsView;\n                        edit_view = true;\n                        break;\n                };\n                if (constructor_func && edit_view)\n                    return this.addChild(name, constructor_func, {model: this.model, el: this.$('.participants-edit-wrap')[0]});\n                else if (constructor_func)\n                    return this.addChild(name, constructor_func, {model: this.model, el: this.$('.participants-wrap')[0]});\n                else\n                    return;\n            },\n\n            getInvitations: function (callback, errback) {\n                let iq = $iq({\n                    type: 'get',\n                    to: this.model.get('full_jid') || this.model.get('jid')})\n                    .c('query', {xmlns: Strophe.NS.GROUP_CHAT + '#invite'});\n                this.account.sendFast(iq, callback, errback);\n            },\n\n            deleteGroup: function () {\n                this.model.deleteWithDialog();\n            },\n\n            blockContact: function () {\n                this.model.blockWithDialog();\n            },\n\n            unblockContact: function () {\n                this.model.unblockWithDialog();\n            },\n\n            updateStatus: function () {\n                this.$('.main-info .status-message').text(this.model.getStatusMessage());\n            },\n\n            updateAvatar: function () {\n                let image = this.model.cached_image;\n                this.$('.main-info .circle-avatar').setAvatar(image, this.avatar_size);\n            },\n\n            openChat: function (ev) {\n                this.model.showDetailsRight('all-chats');\n            },\n\n            changeAvatar: function (ev) {\n                let field = ev.target;\n                if (!field.files.length) {\n                    return;\n                }\n                let file = field.files[0];\n                field.value = '';\n                if (file.size > constants.MAX_AVATAR_FILE_SIZE) {\n                    utils.dialogs.error(xabber.getString(\"group_settings__error__avatar_too_large\"));\n                    return;\n                } else if (!file.type.startsWith('image')) {\n                    utils.dialogs.error(xabber.getString(\"group_settings__error__wrong_image\"));\n                    return;\n                }\n                $(field).siblings('.preloader-wrap').addClass('visible').find('.preloader-wrapper').addClass('active');\n                utils.images.getAvatarFromFile(file).done((image) => {\n                    if (image) {\n                        file.base64 = image;\n                        this.model.pubAvatar(file, \"\", function () {\n                            $(field).siblings('.preloader-wrap').removeClass('visible').find('.preloader-wrapper').removeClass('active');\n                        }, function (error) {\n                            $(field).siblings('.preloader-wrap').removeClass('visible').find('.preloader-wrapper').removeClass('active');\n\n                            let error_text = $(error).find('text').text() || xabber.getString(\"groupchat_you_have_no_permissions_to_do_it\");\n                            utils.dialogs.error(error_text);\n                        });\n                    }\n                });\n            },\n\n            retractAllMessages: function () {\n                let group_chat = this.account.chats.getChat(this.model);\n                utils.dialogs.ask(xabber.getString(\"delete_messages__header\"), xabber.getString(\"delete_messages__confirm\"), null, { ok_button_text: xabber.getString(\"delete\")}).done((result) => {\n                    if (result) {\n                        group_chat.retractAllMessages(true);\n                    }\n                });\n            }\n        });\n\n        xabber.GroupChatStatusView = xabber.BasicView.extend({\n            template: templates.group_chats.group_status,\n            events: {\n                \"click .status-wrap\": \"setStatus\",\n                \"click .btn-edit-status\": \"setStatus\"\n            },\n\n            _initialize: function () {\n                this.$el.html(this.template());\n                this.render();\n                this.model.on(\"change:status\", this.render, this);\n                this.model.on(\"change:group_info\", this.render, this);\n            },\n\n            render: function () {\n                let group_info = this.model.get('group_info');\n                if (!group_info)\n                    return;\n                this.$('.status').attr('data-status', group_info.status || this.model.get('status'));\n                this.$('.status-message').text(group_info.status_msg);\n            },\n\n            setStatus: function () {\n                let set_status_view = new xabber.SetGroupchatStatusView();\n                set_status_view.open(this.model);\n            }\n        });\n\n        xabber.GroupChatStatusViewRight = xabber.BasicView.extend({\n            template: templates.group_chats.group_status_right,\n            events: {\n                \"click .group-chat-status-wrap\": \"setStatus\",\n                \"click .btn-edit-status\": \"setStatus\"\n            },\n\n            _initialize: function () {\n                this.$el.html(this.template());\n                this.render();\n                this.model.on(\"change:status\", this.render, this);\n                this.model.on(\"change:group_info\", this.render, this);\n            },\n\n            render: function () {\n                let group_info = this.model.get('group_info');\n                if (!group_info)\n                    return;\n                this.updateIcon()\n                this.$('.status').attr('data-status', group_info.status || this.model.get('status'));\n                this.$('.status-message').text(group_info.status_msg);\n            },\n\n            updateIcon: function () {\n                let ic_name = this.model.getIcon();\n                this.$('.status-bulb').addClass('hidden');\n                if (this.model.get('invitation'))\n                    return;\n                ic_name && this.$('.status-bulb').removeClass('hidden').switchClass(ic_name, ic_name == 'server' || ic_name == 'blocked').html(env.templates.svg[ic_name]());\n            },\n\n            setStatus: function () {\n                let set_status_view = new xabber.SetGroupchatStatusView();\n                set_status_view.open(this.model);\n            }\n        });\n\n        xabber.GroupChatPropertiesView = xabber.BasicView.extend({\n            template: templates.group_chats.group_chat_properties,\n\n            events: {\n                \"click .group-chat-properties .details-icon\": \"onClickIcon\"\n            },\n\n            _initialize: function () {\n                this.$el.html(this.template());\n                this.contact = this.model;\n                this.account = this.model.account;\n                this.model.on(\"change:group_info\", this.update, this);\n                this.model.on(\"change:vcard_updated\", this.update, this);\n            },\n\n            render: function () {\n                if (!this.model.get('vcard_updated'))\n                    this.model.vcard && this.model.vcard.refresh();\n                this.update();\n            },\n\n            update: function () {\n                let info = this.model.get('group_info') || {};\n                this.$('.block-name').text(this.model.get('incognito_group') ? xabber.getString(\"incognito_group_settings__header\") : xabber.getString(\"public_group_settings__header\"));\n                this.$('.jabber-id .value').text(info.jid);\n                this.$('.name .value').text(info.name);\n                this.$('.description .value').text(info.description);\n                this.$('.model .value').text(utils.pretty_name(info.model));\n                this.$('.status .value').text(utils.pretty_name(info.status));\n                this.$('.searchable .value').text((info.searchable === 'none') ? xabber.getString(\"groupchat_index_type_none\") : utils.pretty_name(info.searchable));\n                this.$('.name-info-wrap').switchClass('hidden', !info.name);\n                this.$('.description-info-wrap').switchClass('hidden', !info.description);\n                this.$('.model-info-wrap').switchClass('hidden', !info.model);\n                this.$('.status-info-wrap').switchClass('hidden', !info.status);\n                this.$('.searchable-info-wrap').switchClass('hidden', !info.searchable);\n            },\n\n            onClickIcon: function (ev) {\n                let $target_info = $(ev.target).closest('.info-wrap'),\n                    $target_value = $target_info.find('.value'), copied_text = \"\";\n                $target_value.each((idx, item) => {\n                    let $item = $(item),\n                        value_text = $item.text();\n                    if ($target_info.hasClass('searchable-info-wrap')) {\n                        let label_name = $target_info.find('.label').first().text();\n                        if (value_text === xabber.getString(\"groupchat_index_type_none\"))\n                            value_text += ' ' + label_name.toLowerCase();\n                    }\n                    value_text && (copied_text != \"\") && (copied_text += '\\n');\n                    value_text && (copied_text += value_text);\n                    copied_text && utils.copyTextToClipboard(copied_text, xabber.getString(\"toast__copied_in_clipboard\"), xabber.getString(\"toast__not_copied_in_clipboard\"));\n                });\n            }\n        });\n\n        xabber.GroupChatPropertiesViewRight = xabber.BasicView.extend({\n            template: templates.group_chats.group_chat_properties_right,\n\n            events: {\n                \"click .btn-vcard-refresh\": \"refresh\",\n                \"click .info-hover\": \"onClickIcon\",\n                \"click .btn-back\": \"hideVCard\"\n            },\n\n            _initialize: function () {\n                this.$el.html(this.template());\n                this.contact = this.model;\n                this.account = this.model.account;\n                this.model.on(\"change:group_info\", this.update, this);\n                this.model.on(\"change:vcard_updated\", this.update, this);\n                this.ps_container = this.$('.full-vcard-content');\n                if (this.ps_container.length) {\n                    this.ps_container.perfectScrollbar(\n                        _.extend(this.ps_settings || {}, xabber.ps_settings)\n                    );\n                }\n                this.ps_container.on(\"ps-scroll-up ps-scroll-down\", this.onScroll.bind(this));\n                this.model.set('vcard_hidden', true)\n            },\n\n            render: function () {\n                if (!this.model.get('vcard_updated'))\n                    this.model.vcard && this.model.vcard.refresh();\n                this.$('.full-vcard-wrap').hideIf(this.model.get('vcard_hidden'))\n                if (this.parent.ps_container.length) {\n                    if(!this.model.get('vcard_hidden'))\n                        this.parent.ps_container.perfectScrollbar('destroy')\n                    else\n                        this.parent.ps_container.perfectScrollbar(\n                            _.extend(this.parent.ps_settings || {}, xabber.ps_settings)\n                        );\n                }\n                this.model.updateName();\n                this.model.updateAvatar();\n                this.hideMoreDescription();\n                this.model.getVCard(() => {\n                    this.updateName()\n                    this.update();\n                    if (this.parent.contact_edit_view)\n                        this.parent.contact_edit_view.update();\n                });\n            },\n\n            onScroll: function () {\n                if(this.ps_container[0].scrollTop >= 170) {\n                    this.$('.vcard-header-title').addClass('fixed-scroll');\n                    this.$('.vcard-header-title').css({'background-color': 'rgba(255,255,255,1)'});\n                }\n                else if(this.ps_container[0].scrollTop >= 40) {\n                    this.$('.vcard-header-title').removeClass('fixed-scroll');\n                    this.$('.vcard-header-title').css({'background-color': 'rgba(255,255,255,0.5)'});\n                }\n                else {\n                    this.$('.vcard-header-title').removeClass('fixed-scroll');\n                    this.$('.vcard-header-title').css({'background-color': 'rgba(255,255,255,0)'});\n                }\n\n            },\n\n            hideMoreDescription: function (ev) {\n                if (!this.$('.vcard-wrap .info.description').hasClass('short')) {\n                    this.$('.vcard-wrap .info.description').addClass('short');\n                    this.$('.show-vcard').hideIf(false);\n                }\n            },\n\n\n            showVCard: function (ev) {\n                this.model.set('vcard_hidden', false);\n                this.$('.full-vcard-wrap').hideIf(this.model.get('vcard_hidden'))\n                this.model.getVCard(() => {\n                    this.updateName()\n                    this.update();\n                });\n                this.parent.$('.main-info').removeClass('fixed-scroll');\n                this.$('.vcard-header').css({width: xabber.right_contact_panel.$el.find('.details-panel-right').width()});\n                this.parent.scrollToTop();\n                if (this.parent.ps_container.length) {\n                    this.parent.ps_container.perfectScrollbar('destroy')\n                }\n            },\n\n            hideVCard: function (ev) {\n                this.model.set('vcard_hidden', true);\n                if (this.parent.ps_container.length) {\n                    this.parent.ps_container.perfectScrollbar(\n                        _.extend(this.parent.ps_settings || {}, xabber.ps_settings)\n                    );\n                }\n                this.scrollToTop();\n                this.onScroll();\n                this.parent.onScroll();\n                this.$('.full-vcard-wrap').hideIf(this.model.get('vcard_hidden'))\n            },\n\n            updateName: function () {\n                this.$('.main-info .name-wrap').text(this.model.get('name'));\n                if (this.model.get('name') != this.model.get('roster_name'))\n                    this.$('.main-info .name-wrap').addClass('name-is-custom');\n                else\n                    this.$('.main-info .name-wrap').removeClass('name-is-custom');\n            },\n\n            update: function () {\n                let info = this.model.get('group_info') || {};\n                this.$('.block-name').text(this.model.get('incognito_group') ? xabber.getString(\"incognito_group_settings__header\") : xabber.getString(\"public_group_settings__header\"));\n                this.$('.jabber-id .value').text(info.jid);\n                this.$('.name .value').text(info.name);\n                this.$('.description .value').text(info.description);\n                this.$('.model .value').text(utils.pretty_name(info.model));\n                this.$('.status .value').text(utils.pretty_name(info.status));\n                this.$('.searchable .value').text((info.searchable === 'none') ? xabber.getString(\"groupchat_index_type_none\") : utils.pretty_name(info.searchable));\n                this.$('.name-info-wrap').switchClass('hidden', !info.name);\n                this.$('.description-info-wrap').switchClass('hidden', !info.description);\n                this.$('.model-info-wrap').switchClass('hidden', !info.model);\n                this.$('.status-info-wrap').switchClass('hidden', !info.status);\n                this.$('.searchable-info-wrap').switchClass('hidden', !info.searchable);\n            },\n\n            onClickIcon: function (ev) {\n                let $target_info = $(ev.target),\n                    $target_value = $target_info.find('.value'), copied_text = \"\";\n                $target_value.each((idx, item) => {\n                    let $item = $(item),\n                        value_text = $item.text();\n                    value_text && (copied_text != \"\") && (copied_text += '\\n');\n                    value_text && (copied_text += value_text);\n                    copied_text && utils.copyTextToClipboard(copied_text, xabber.getString(\"toast__copied_in_clipboard\"), xabber.getString(\"toast__not_copied_in_clipboard\"));\n                });\n            }\n        });\n\n        xabber.GroupChatPropertiesEditView = xabber.BasicView.extend({\n            className: 'modal dialog-modal group-chat-properties-edit',\n\n            events: {\n                \"click .btn-save\": \"saveChanges\",\n                \"click .btn-cancel\": \"close\",\n                \"change input\": \"updateSaveButton\",\n                \"keyup .property-wrap .text-field\": \"updateSaveButton\"\n            },\n\n            _initialize: function () {\n                this.account = this.model.account;\n                this.contact = this.model;\n                this.model.on(\"change:name\", this.updateName, this);\n            },\n\n            open: function (data_form) {\n                this.data_form = data_form;\n                let all_fixed = this.data_form.fields.filter(f => f.type == 'fixed' || f.type == 'hidden').length == this.data_form.fields.length;\n                this.$el.html(templates.group_chats.group_chat_properties_edit({all_fixed: all_fixed, fields: data_form.fields, privacy: this.contact.get('incognito_group'), jid: this.model.get('jid')}));\n                this.$el.openModal({\n                    ready: () => {\n                        this.$('.modal-content').css('height', this.$el.height() - 115).perfectScrollbar({theme: 'item-list'});\n                        this.updateScrollBar();\n                    },\n                    complete: () => {\n                        this.$el.detach();\n                        this.$('.modal-content').css('height', '100%');\n                        this.data.set('visible', false);\n                    }\n                });\n            },\n\n            close: function () {\n                this.$el.closeModal({\n                    complete: () => {\n                        this.$el.detach();\n                        this.$('.modal-content').css('height', '100%');\n                        this.data.set('visible', false);\n                    }\n                });\n            },\n\n            updateName: function () {\n                this.$('.name-info-wrap').find('.name').find('.value').text(this.model.get('name'));\n            },\n\n            saveChanges: function() {\n                if (this.$('.btn-save').hasClass('non-active'))\n                    return;\n\n                let has_changes = false,\n                    iq = $iq({type: 'set', to: this.contact.get('full_jid') || this.contact.get('jid')})\n                        .c('query', {xmlns: Strophe.NS.GROUP_CHAT});\n                this.data_form.fields.forEach((field) => {\n                    if (field.type === 'hidden' || field.type === 'fixed')\n                        return;\n                    let value = field.values ? field.values[0] : null,\n                        checked_inp = this.$('.' + field.var + '-field input:checked'),\n                        text_inp = this.$('.' + field.var + '-field input[type=\"text\"]'),\n                        textarea = this.$('.' + field.var + '-field textarea'),\n                        new_value = \"\";\n                    checked_inp.length && (new_value = checked_inp[0].id);\n                    text_inp.length && (new_value = text_inp.val());\n                    textarea.length && (new_value = textarea.val());\n                    if (value !== new_value) {\n                        let field_idx = this.data_form.fields.indexOf(field);\n                        field.values = [new_value];\n                        this.data_form.fields[field_idx] = field;\n                        has_changes = true;\n                    }\n                });\n\n                if (has_changes) {\n                    iq = this.account.addDataFormToStanza(iq, this.data_form);\n                    this.account.sendIQFast(iq, (result) => {\n                        let $result  = $(result),\n                            group_info = _.clone(this.contact.get('group_info')),\n                            attrs = {\n                                name: $result.find('field[var=\"name\"] value').text(),\n                                searchable: $result.find('field[var=\"index\"]').children('value').text(),\n                                model: $result.find('field[var=\"membership\"]').children('value').text(),\n                                description: $result.find('field[var=\"description\"] value').text(),\n                                status: $result.find('field[var=\"status\"]').children('value').text()\n                        };\n                        this.$('button').addClass('non-active');\n                        this.close();\n                        _.extend(group_info, attrs);\n                        this.model.set('group_info', group_info);\n                    }, (error) => {\n                        this.$('button').addClass('non-active');\n                        let err_text = $(error).find('error text').text() || xabber.getString(\"groupchat_you_have_no_permissions_to_do_it\");\n                        this.close();\n                        utils.dialogs.error(err_text);\n                    });\n                } else\n                    this.$('button').removeClass('non-active');\n            },\n\n            updateSaveButton: function () {\n                let has_changes = false;\n                this.data_form.fields.forEach((field) => {\n                    if (field.type === 'hidden' || field.type === 'fixed')\n                        return;\n                    let value = field.values ? field.values[0] : null,\n                        checked_inp = this.$('.' + field.var + '-field input:checked'),\n                        text_inp = this.$('.' + field.var + '-field input[type=\"text\"]'),\n                        textarea = this.$('.' + field.var + '-field textarea'),\n                        new_value = \"\";\n                    checked_inp.length && (new_value = checked_inp[0].id);\n                    text_inp.length && (new_value = text_inp.val());\n                    textarea.length && (new_value = textarea.val());\n                    (value !== new_value) && (has_changes = true);\n                });\n                this.$('.btn-save').switchClass('non-active', !has_changes);\n            }\n\n        });\n\n        xabber.InvitationsView = xabber.BasicView.extend({\n            events: {\n            },\n            status: 'invitations',\n            member_avatar_size: constants.AVATAR_SIZES.GROUPCHAT_MEMBER_ITEM,\n\n            _initialize: function (options) {\n                this.contact = options.model;\n                this.contact.participants.on(\"participants_updated\", this._render, this);\n                this.contact.on(\"invitations_send\", this._render, this);\n                this.account = this.contact.account;\n                this.$error = $('<p class=\"errors\"/>');\n            },\n\n            _render: function () {\n                if (this.$el.length && this.$el.closest(\"body\").length == 0)\n                    this.$el = this.parent.$('.participants-edit-wrap')\n                this.$el.html($(templates.preloader()));\n                this.updateInvitations();\n            },\n\n            updateInvitations: function () {\n                this.parent.$('.block-name-panel:not(.second-text)').html(xabber.getString(\"groupchat_invitations\"))\n                this.parent.getInvitations((response) => {\n                    this.$el.html(\"\");\n                    $(response).find('query').find('user').each((idx, item) => {\n                        let user = {jid: $(item).attr('jid'), status: this.status},\n                            $item_view = $(templates.group_chats.invited_member_item(user)),\n                            avatar = Images.getDefaultAvatar(user.jid);\n                        this.$el.append($item_view);\n                        $item_view.find('.circle-avatar').setAvatar(avatar, this.member_avatar_size);\n                    });\n                    if (!$(response).find('query').find('user').length)\n                        this.$el.html(this.$error.text(xabber.getString(\"group_settings__invitations__no_pending_invitations\")));\n                    if (this.parent.contact_edit_view)\n                        this.parent.contact_edit_view.showInviteButton();\n                }, (err) => {\n\n                    this.$el.html(this.$error.text($(err).find('text').text() || xabber.getString(\"groupchat_you_have_no_permissions_to_do_it\")));\n                });\n            },\n\n            revokeInvitation: function (ev) {\n                let $member_item = $(ev.target).closest('.invitations-user'),\n                    member_jid = $member_item.data('jid'),\n                    iq = $iq({to: this.contact.get('full_jid') || this.contact.get('jid'), type: 'set'})\n                        .c('revoke', {xmlns: `${Strophe.NS.GROUP_CHAT}#invite`})\n                        .c('jid').t(member_jid);\n                this.account.sendIQFast(iq, () => {\n                    $member_item.remove();\n                    if (this.parent.contact_edit_view)\n                        this.parent.contact_edit_view.updateRemoveParticipantButton();\n                    !this.$el.children().length && this.$el.html(this.$error.text(xabber.getString(\"group_settings__invitations__no_pending_invitations\")));\n                });\n            },\n\n            revokeInvitationByElement: function ($member_item) {\n                let member_jid = $member_item.data('jid'),\n                    iq = $iq({to: this.contact.get('full_jid') || this.contact.get('jid'), type: 'set'})\n                        .c('revoke', {xmlns: `${Strophe.NS.GROUP_CHAT}#invite`})\n                        .c('jid').t(member_jid);\n                this.account.sendIQFast(iq, () => {\n                    $member_item.remove();\n                    !this.$el.children().length && this.$el.html(this.$error.text(xabber.getString(\"group_settings__invitations__no_pending_invitations\")));\n                });\n            }\n        });\n\n        xabber.MediaBaseView = xabber.BasicView.extend({\n            status: 'base',\n            member_avatar_size: constants.AVATAR_SIZES.GROUPCHAT_MEMBER_ITEM,\n\n            _initialize: function (options) {\n                this.contact = options.model;\n                this.participant = options.participant;\n                this.encrypted = options.encrypted;\n                this.account = this.contact.account;\n                this.chat = this.account.chats.getChat(this.contact, this.encrypted && 'encrypted');\n                this.temporary_items = []\n                this.parent.ps_container.on(\"ps-scroll-up.mediagallery ps-scroll-down.mediagallery\", this.onScroll.bind(this));\n            },\n\n            _render: function () {\n                if (this.$el.length && this.$el.closest(\"body\").length == 0)\n                    this.$el = this.parent.$('.participants-details-media-wrap')\n                this.$el.html($(templates.preloader()));\n                this.all_messages_loaded = false;\n                this.temporary_items = [];\n                this.messagesFileRequest({}, () => {\n                    this.$el.html(\"<div class='gallery-files'></div>\");\n                    this.updateMedia();\n                });\n            },\n\n            onScroll: function () {\n                if (!this.active)\n                    return\n                let scrollTop = this.parent.ps_container[0].scrollTop,\n                    scrollHeight = this.parent.ps_container[0].scrollHeight,\n                    offsetHeight = this.parent.ps_container[0].offsetHeight,\n                    persentScrolled = scrollTop / (scrollHeight - offsetHeight);\n                if (persentScrolled > 0.8 && this.last_rsm_message && !this.all_messages_loaded && !this.loading_messages){\n                    this.loadMoreFiles();\n                }\n            },\n\n            updateForParticipant: function () {\n                this.delegateEvents({})\n                this.parent.ps_container.off('ps-scroll-up.mediagallery').off('ps-scroll-down.mediagallery').on(\"ps-scroll-up.mediagallery ps-scroll-down.mediagallery\", this.onScroll.bind(this));\n                this.$('.gallery-file').on('click', (ev) => {\n                    this.onClickFile(ev);\n                });\n            },\n\n            loadMoreFiles: function () {\n                $(templates.preloader()).appendTo(this.$('.gallery-files'))\n                this.messagesFileRequest({[this.filter_type]: true, before: this.last_rsm_message}, () => {\n                    this.updateMedia(true);\n                });\n            },\n\n            filterEncryptedFiles: function () {\n                return this.temporary_items;\n            },\n\n            encryptedFilesHandler: function () {\n                let files_count = 0;\n                this.temporary_items = this.filterEncryptedFiles();\n\n                if (this.temporary_items.length)\n                    this.temporary_items.forEach((item, idx) => {\n                        let source = item.sources[0];\n                        if (!item.key){\n                            files_count++;\n                            return;\n                        }\n                        this.chat.messages.decryptFile(source, item.key).then((result) => {\n                            if (!this.active)\n                                return\n                            item.sources[0] = result\n                            files_count++;\n                            if (files_count === this.temporary_items.length) {\n                                this.updateEncryptedMedia()\n                                this.loading_messages = false;\n                            }\n                        });\n                    });\n                else {\n                    this.updateEncryptedMedia()\n                    this.loading_messages = false;\n                    if (!this.all_messages_loaded){\n                        this.loadMoreFiles();\n                    }\n                }\n            },\n\n            updateEncryptedMedia: function (is_loaded) {\n                !this.$('.gallery-files').length && this.$el.html(\"<div class='gallery-files'></div>\");\n                this.updateMedia();\n            },\n\n            updateMedia: function (is_loaded) {\n                if (!this.active)\n                    return;\n                if (this.temporary_items.length){\n                    this.temporary_items.reverse();\n                    this.temporary_items.forEach((item) => {\n                        if (this.filter_type === 'filter_voice')\n                            item.true_voice = true;\n                        let $gallery_file = $(templates.media_item({file: item, svg_icon: utils.file_type_icon_svg(item.media_type), filesize: utils.pretty_size(item.size), duration: utils.pretty_duration(item.duration)}));\n                        $gallery_file.appendTo(this.$('.gallery-files'));\n                    });\n                }\n                this.temporary_items = [];\n                this.$('.gallery-files .gallery-empty').remove();\n                $(templates.media_items_empty()).appendTo(this.$('.gallery-files'));\n                this.$('.gallery-files .preloader-wrapper').remove();\n            },\n\n            messagesFileRequest: function (query, callback) {\n                if (!this.active || this.loading_messages)\n                    return;\n                let options = query || {},\n                    queryid = uuid();\n                this.loading_messages = true;\n                !options.max && (options.max = xabber.settings.mam_messages_limit);\n                !options.after && !options.before && (options.before = '');\n                this.encrypted && (options.encrypted = this.encrypted)\n                this.parent.participant && (options.var = [{var: 'with', value: this.parent.participant.id}]);\n                this.contact.MAMRequest(options, (success, messages, rsm) => {\n                    let messages_count = 0;\n                    if (this.encrypted) {\n                        $(templates.preloader()).appendTo(this.$('.gallery-files'))\n                    }\n                    $(messages).each((idx, message) => {\n                        let $message = $(message),\n                            msg_items = [];\n                        if (this.encrypted) {\n                            let deferred = new $.Deferred();\n                            deferred.done(($msg) => {\n                                msg_items = this.contact.getFilesFromStanza($msg);\n                                if (msg_items.length)\n                                    this.temporary_items = this.temporary_items.concat(msg_items)\n                                messages_count++;\n                                if (messages_count === messages.length){\n                                    this.last_rsm_message = rsm.first;\n                                    this.encryptedFilesHandler();\n                                }\n                            }).fail(() => {\n                                messages_count++;\n                                if (messages_count === messages.length){\n                                    this.last_rsm_message = rsm.first;\n                                    this.all_messages_loaded = true;\n                                    this.encryptedFilesHandler();\n                                }\n                            });\n                            this.account.omemo.receiveChatMessage($message, {\n                                searched_message: true,\n                                gallery: true,\n                                query: query\n                            }, deferred);\n                        } else{\n                            msg_items = this.contact.getFilesFromStanza($message);\n                            this.account.chats.receiveChatMessage($message, {\n                                searched_message: true,\n                                query: query\n                            });\n                            if (msg_items.length)\n                                this.temporary_items = this.temporary_items.concat(msg_items)\n                        }\n                    });\n                    if (!this.encrypted){\n                        this.last_rsm_message = rsm.first;\n                        if (!messages.length)\n                            this.all_messages_loaded = true;\n                        this.loading_messages = false;\n                        (this.filter_type === 'filter_files') && (this.temporary_items = this.temporary_items.filter(file => !(file.media_type && (file.media_type.includes('image') || (file.media_type.includes('video') && !file.has_encrypted_files)))));\n                        if (!(this.temporary_items.length >= xabber.settings.mam_messages_limit) && this.filter_type === 'filter_files' && !this.all_messages_loaded) {\n                            this.messagesFileRequest({[this.filter_type]: true, before: this.last_rsm_message}, callback);\n                        }else\n                            callback && callback();\n                    }\n                }, () => {\n\n                });\n            },\n\n            onClickFile: function (ev) {\n                let $elem = $(ev.target);\n                if ($elem.hasClass('no-uploaded') || $elem.hasClass('gallery-audio-file-not-uploaded')) {\n                    let $audio_elem = $elem.closest('.gallery-file'),\n                        f_url = $audio_elem.attr('data-file');\n                    $audio_elem.find('.mdi-play').removeClass('audio-file-play');\n                    $audio_elem[0].voice_message = this.renderVoiceMessage($audio_elem.find('.gallery-file-audio-container')[0], f_url);\n                    this.prev_audio_message && this.prev_audio_message.voice_message.pause();\n                    this.prev_audio_message = $audio_elem[0];\n                    return;\n                }\n                else if ($elem.hasClass('mdi-play') || $elem.children('.mdi-play').length) {\n                    let $audio_elem = $elem.closest('.gallery-file');\n                    this.prev_audio_message.voice_message.pause();\n                    this.prev_audio_message = $audio_elem[0];\n                    $audio_elem[0].voice_message.play();\n                    return;\n                }\n                else if ($elem.hasClass('mdi-pause') || $elem.children('.mdi-pause').length) {\n                    this.prev_audio_message.voice_message.pause();\n                    return;\n                }\n                else if (!$elem.parents('.gallery-file-audio-container').length) {\n                    let $file = $elem.closest('.gallery-file');\n                    this.parent.saveScrollBarOffset()\n                    xabber.body.data.set('contact_details_view', this.parent)\n                    this.chat.getMessageContext($file.data('uniqueid'), {searched_messages: true, encrypted: this.encrypted});\n                }\n            },\n\n            renderVoiceMessage: function (element, file_url) {\n                let not_expanded_msg = element.innerHTML,\n                    unique_id = 'waveform' + moment.now(),\n                    $elem = $(element),\n                    $msg_element = $elem.closest('.gallery-file');\n                $elem.addClass('voice-message-rendering').html($(templates.audio_file_waveform({waveform_id: unique_id})));\n                let aud = this.createAudio(file_url, unique_id);\n\n                aud.on('ready', () => {\n                    $msg_element.find('.gallery-file-placeholder-background .mdi').removeClass('no-uploaded');\n                    $msg_element.find('.gallery-file-placeholder-background').removeClass('gallery-audio-file-not-uploaded');\n                    let duration = Math.round(aud.getDuration());\n                    $elem.find('.voice-msg-total-time').text(utils.pretty_duration(duration));\n                    aud.play();\n                });\n\n                aud.on('error', () => {\n                    $elem.removeClass('voice-message-rendering');\n                    element.innerHTML = not_expanded_msg;\n                    aud.unAll();\n                    $elem.find('.voice-message-play').get(0).remove();\n                    utils.callback_popup_message(xabber.getString(\"jingle__error__audio_not_supported\"), 3000);\n                });\n\n                aud.on('play', () => {\n                    $msg_element.find('.gallery-file-placeholder-background .mdi').addClass('mdi-pause').removeClass('mdi-play');\n                    $msg_element.addClass('playing');\n                    let timerId = setInterval(function() {\n                        let cur_time = Math.round(aud.getCurrentTime());\n                        if (aud.isPlaying())\n                            $elem.find('.voice-msg-current-time').text(utils.pretty_duration(cur_time));\n                        else\n                            clearInterval(timerId);\n                    }, 100);\n                });\n\n                aud.on('finish', () => {\n                    $msg_element.find('.gallery-file-placeholder-background .mdi').removeClass('mdi-pause').addClass('mdi-play');\n                    $msg_element.removeClass('playing');\n                });\n\n                aud.on('pause', () => {\n                    $msg_element.find('.gallery-file-placeholder-background .mdi').removeClass('mdi-pause').addClass('mdi-play');\n                    $msg_element.removeClass('playing');\n                });\n\n                $elem.find('.voice-message-volume')[0].onchange = () => {\n                    aud.setVolume($elem.find('.voice-message-volume').val()/100);\n                };\n                return aud;\n            },\n\n            createAudio: function(file_url, unique_id) {\n                let audio = WaveSurfer.create({\n                    container: \"#\" + unique_id,\n                    scrollParent: false,\n                    barWidth: 3,\n                    height: 48,\n                    barHeight: 48,\n                    cursorColor: 'rgba(211,47,47,0.8)',\n                    autoCenter: false,\n                    normalize: true,\n                    hideScrollBar: true,\n                    progressColor: '#757575'\n                });\n                audio.load(file_url);\n                audio.setVolume(0.5);\n                return audio;\n            },\n        });\n\n        xabber.MediaImagesView = xabber.MediaBaseView.extend({\n            events: {\n                \"click .gallery-files.images .gallery-file\": \"onClickFile\",\n            },\n            status: 'image',\n\n            _render: function () {\n                if (this.$el.length && this.$el.closest(\"body\").length == 0)\n                    this.$el = this.parent.$('.participants-details-media-wrap')\n                this.$el.html($(templates.preloader()));\n                this.active = true;\n                this.parent.children.video && (this.parent.children.video.active = false);\n                this.parent.children.files && (this.parent.children.files.active = false);\n                this.parent.children.voice && (this.parent.children.voice.active = false);\n                this.all_messages_loaded = false;\n                this.filter_type = 'filter_image';\n                this.temporary_items = [];\n                this.messagesFileRequest({[this.filter_type]: true}, () => {\n                    this.temporary_items = this.temporary_items.filter(item => utils.pretty_file_type(item.media_type) === 'image')\n                    this.$el.html(\"<div class='gallery-files images grid'></div>\");\n                    this.updateMedia();\n                    this.participant && this.updateForParticipant();\n                });\n            },\n\n            filterEncryptedFiles: function () {\n                return this.temporary_items.filter(item => utils.pretty_file_type(item.media_type) === 'image');\n            },\n\n            updateEncryptedMedia: function (is_loaded) {\n                !this.$('.gallery-files.images.grid').length && this.$el.html(\"<div class='gallery-files images grid'></div>\");\n                this.updateMedia();\n            },\n\n            loadMoreFiles: function () {\n                $(templates.preloader()).appendTo(this.$('.gallery-files'))\n                this.messagesFileRequest({[this.filter_type]: true, before: this.last_rsm_message}, () => {\n                    this.temporary_items = this.temporary_items.filter(item => utils.pretty_file_type(item.media_type) === 'image')\n                    this.updateMedia(true);\n                });\n            },\n\n        });\n\n        xabber.MediaVideosView = xabber.MediaBaseView.extend({\n            events: {\n                \"click .gallery-files.videos .gallery-file\": \"onClickFile\",\n            },\n            status: 'video',\n\n            _render: function () {\n                if (this.$el.length && this.$el.closest(\"body\").length == 0)\n                    this.$el = this.parent.$('.participants-details-media-wrap')\n                this.$el.html($(templates.preloader()));\n                this.active = true;\n                this.parent.children.image && (this.parent.children.image.active = false);\n                this.parent.children.files && (this.parent.children.files.active = false);\n                this.parent.children.voice && (this.parent.children.voice.active = false);\n                this.all_messages_loaded = false;\n                this.filter_type = 'filter_video';\n                this.temporary_items = [];\n                this.messagesFileRequest({[this.filter_type]: true}, () => {\n                    this.temporary_items = this.temporary_items.filter(item => utils.pretty_file_type(item.media_type) === 'video')\n                    this.$el.html(\"<div class='gallery-files videos grid'></div>\");\n                    this.updateMedia();\n                    this.participant && this.updateForParticipant();\n                });\n            },\n\n            filterEncryptedFiles: function () {\n                return this.temporary_items.filter(item => utils.pretty_file_type(item.media_type) === 'video');\n            },\n\n            updateEncryptedMedia: function (is_loaded) {\n                !this.$('.gallery-files.videos.grid').length && this.$el.html(\"<div class='gallery-files videos grid'></div>\");\n                this.updateMedia();\n            },\n\n            loadMoreFiles: function () {\n                $(templates.preloader()).appendTo(this.$('.gallery-files'))\n                this.messagesFileRequest({[this.filter_type]: true, before: this.last_rsm_message}, () => {\n                    this.temporary_items = this.temporary_items.filter(item => utils.pretty_file_type(item.media_type) === 'video')\n                    this.updateMedia(true);\n                });\n            },\n        });\n\n        xabber.MediaFilesView = xabber.MediaBaseView.extend({\n            events: {\n                \"click .gallery-files.files .gallery-file\": \"onClickFile\",\n            },\n            status: 'files',\n\n            _render: function () {\n                if (this.$el.length && this.$el.closest(\"body\").length == 0)\n                    this.$el = this.parent.$('.participants-details-media-wrap')\n                this.$el.html($(templates.preloader()));\n                this.active = true;\n                this.parent.children.image && (this.parent.children.image.active = false);\n                this.parent.children.video && (this.parent.children.video.active = false);\n                this.parent.children.voice && (this.parent.children.voice.active = false);\n                this.all_messages_loaded = false;\n                this.filter_type = 'filter_files';\n                this.temporary_items = [];\n                this.messagesFileRequest({[this.filter_type]: true}, () => {\n                    this.temporary_items = this.temporary_items.filter(item => (utils.pretty_file_type(item.media_type) != 'video' && utils.pretty_file_type(item.media_type) != 'image'))\n                    this.$el.html(\"<div class='gallery-files files'></div>\");\n                    this.updateMedia();\n                    this.participant && this.updateForParticipant();\n                });\n            },\n\n            filterEncryptedFiles: function () {\n                return this.temporary_items.filter(item => (utils.pretty_file_type(item.media_type) != 'video' && utils.pretty_file_type(item.media_type) != 'image'));\n            },\n\n            updateEncryptedMedia: function (is_loaded) {\n                !this.$('.gallery-files.files').length && this.$el.html(\"<div class='gallery-files files'></div>\");\n                this.updateMedia();\n            },\n\n            loadMoreFiles: function () {\n                $(templates.preloader()).appendTo(this.$('.gallery-files'))\n                this.messagesFileRequest({[this.filter_type]: true, before: this.last_rsm_message}, () => {\n                    this.temporary_items = this.temporary_items.filter(item => (utils.pretty_file_type(item.media_type) != 'video' && utils.pretty_file_type(item.media_type) != 'image'))\n                    this.updateMedia(true);\n                });\n            },\n        });\n\n        xabber.MediaVoiceView = xabber.MediaBaseView.extend({\n            events: {\n                \"click .gallery-files.voice .gallery-file\": \"onClickFile\",\n            },\n            status: 'files',\n\n            _render: function () {\n                if (this.$el.length && this.$el.closest(\"body\").length == 0)\n                    this.$el = this.parent.$('.participants-details-media-wrap')\n                this.$el.html($(templates.preloader()));\n                this.active = true;\n                this.parent.children.image && (this.parent.children.image.active = false);\n                this.parent.children.video && (this.parent.children.video.active = false);\n                this.parent.children.files && (this.parent.children.files.active = false);\n                this.all_messages_loaded = false;\n                this.filter_type = 'filter_voice'\n                this.temporary_items = [];\n                this.messagesFileRequest({[this.filter_type]: true}, () => {\n                    this.temporary_items = this.temporary_items.filter(item => item.voice)\n                    this.$el.html(\"<div class='gallery-files voice'></div>\");\n                    this.updateMedia();\n                    this.participant && this.updateForParticipant();\n                });\n            },\n\n            filterEncryptedFiles: function () {\n                return this.temporary_items.filter(item => item.voice);\n            },\n\n            updateEncryptedMedia: function (is_loaded) {\n                !this.$('.gallery-files.voice').length && this.$el.html(\"<div class='gallery-files voice'></div>\");\n                this.updateMedia();\n            },\n\n            loadMoreFiles: function () {\n                $(templates.preloader()).appendTo(this.$('.gallery-files'))\n                this.messagesFileRequest({[this.filter_type]: true, before: this.last_rsm_message}, () => {\n                    this.temporary_items = this.temporary_items.filter(item => item.voice)\n                    this.updateMedia(true);\n                });\n            },\n        });\n\n        xabber.BlockedView = xabber.BasicView.extend({\n            status: 'blocked',\n            member_avatar_size: constants.AVATAR_SIZES.GROUPCHAT_MEMBER_ITEM,\n\n            _initialize: function (options) {\n                this.contact = options.model;\n                this.account = this.contact.account;\n                this.$error = $('<p class=\"errors\"/>');\n            },\n\n            _render: function () {\n                if (this.$el.length && this.$el.closest(\"body\").length == 0)\n                    this.$el = this.parent.$('.participants-edit-wrap')\n                this.$el.html($(templates.preloader()));\n                this.updateBlockedParticipants();\n            },\n\n            updateBlockedParticipants: function () {\n                this.parent.$('.block-name-panel:not(.second-text)').html(xabber.getString(\"group_settings__block_list__header\"))\n                this.contact.getBlockedParticipants((response) => {\n                    this.$el.html(\"\");\n                    $(response).find('query').children().each((idx, item) => {\n                        let jid = $(item).attr('jid') ? $(item).attr('jid') : $(item).text(),\n                            user = {jid: jid, status: this.status},\n                            $item_view = $(templates.group_chats.invited_member_item(user)),\n                            avatar = Images.getDefaultAvatar(user.jid);\n                        this.$el.append($item_view);\n                        $item_view.find('.circle-avatar').setAvatar(avatar, this.member_avatar_size);\n                    });\n                    if (!$(response).find('query').children.length)\n                        this.$el.append(this.$error.text(xabber.getString(\"groupchat_blocklist_empty\")));\n                    if (this.parent.contact_edit_view)\n                        this.parent.contact_edit_view.showBlockButton();\n                }, (err) => {\n\n                    this.$el.html(this.$error.text($(err).find('text').text() || xabber.getString(\"groupchat_you_have_no_permissions_to_do_it\")));\n                });\n            },\n\n            unblockUser: function (ev) {\n                let $member_item = $(ev.target).closest('.blocked-user'),\n                    member_jid = $member_item.data('jid'),\n                    tag = member_jid.toString().includes('@') ? 'jid' : 'domain',\n                    iq = $iq({type: 'set', to: this.contact.get('full_jid') || this.contact.get('jid')})\n                        .c('unblock', {xmlns: `${Strophe.NS.GROUP_CHAT}#block`})\n                        .c(tag).t(member_jid);\n                this.account.sendFast(iq, () => {\n                    $member_item.remove();\n                    if (this.parent.contact_edit_view)\n                        this.parent.contact_edit_view.updateRemoveParticipantButton();\n                    !this.$el.children().length && this.$el.html(this.$error.text(xabber.getString(\"groupchat_blocklist_empty\")));\n                });\n            },\n\n            unblockUserByElement: function ($member_item) {\n                let member_jid = $member_item.data('jid'),\n                    tag = member_jid.toString().includes('@') ? 'jid' : 'domain',\n                    iq = $iq({type: 'set', to: this.contact.get('full_jid') || this.contact.get('jid')})\n                        .c('unblock', {xmlns: `${Strophe.NS.GROUP_CHAT}#block`})\n                        .c(tag).t(member_jid);\n                this.account.sendFast(iq, () => {\n                    $member_item.remove();\n                    !this.$el.children().length && this.$el.html(this.$error.text(xabber.getString(\"groupchat_blocklist_empty\")));\n                });\n            },\n\n            blockId: function () {\n                utils.dialogs.ask_enter_value(xabber.getString(\"contact_bar_block\"), xabber.getString(\"groupchat_dialog_block__text\"), {input_placeholder_value: xabber.getString(\"groupchat_dialog_block__input_placeholder\")}, { ok_button_text: xabber.getString(\"contact_bar_block\")}).done((result) => {\n                    if (result) {\n                        let tag = result.includes('@') ? 'jid' : 'domain',\n                            iq = $iq({type: 'set', to: this.contact.get('full_jid') || this.contact.get('jid')})\n                                .c('block', {xmlns: `${Strophe.NS.GROUP_CHAT}#block`})\n                                .c(tag).t(result);\n                        this.account.sendIQFast(iq, () => {\n                            this.updateBlockedParticipants()\n                        }, function (err) {\n                            utils.dialogs.error(xabber.getString(\"groupchat_you_have_no_permissions_to_do_it\"));\n                        });\n                    }\n                });\n            },\n        });\n\n        xabber.ParticipantsView = xabber.BasicView.extend({\n            className: 'overflow-visible',\n            ps_selector: '.members-list-wrap',\n            ps_settings: {theme: 'item-list'},\n            template: templates.group_chats.participants,\n            member_avatar_size: constants.AVATAR_SIZES.GROUPCHAT_MEMBER_ITEM,\n\n            events: {\n                \"click .participant-wrap\": \"showParticipantProperties\",\n                \"keyup .participants-search-form\" : \"keyUpSearch\",\n                \"click .close-search-icon\": \"clearSearch\",\n                \"click .btn-block\": \"blockParticipant\",\n                \"click .btn-kick\": \"kickParticipant\"\n            },\n\n            _initialize: function () {\n                this.account = this.model.account;\n                this.participants = this.model.participants;\n                this.participants.on(\"participants_updated\", this.onParticipantsUpdated, this);\n                this.model.on(\"change:status_updated\", this.updateParticipantsList, this);\n                this.$(this.ps_selector).perfectScrollbar(this.ps_settings);\n            },\n\n            _render: function () {\n                this.$el.html(this.template()).addClass('request-waiting');\n                this.participant_properties_panel = new xabber.ParticipantPropertiesView({model: this.model});\n                this.updateParticipants();\n                this.$('.members-list-wrap').perfectScrollbar({theme: 'item-list'});\n                if (!this.model.all_rights)\n                    this.model.getAllRights();\n                return this;\n            },\n\n            updateParticipants: function () {\n                this.model.participants.participantsRequest({version: this.participants.version }, (response) => {\n                    let $response = $(response),\n                        version = $response.find('query').attr('version');\n                    if (this.model.get('group_info')) {\n                        (this.participants.version === 0) && (this.model.get('group_info').members_num = this.participants.length);\n                        if (this.participants.length != this.model.get('group_info').members_num) {\n                            this.account.groupchat_settings.resetParticipantsList(this.model.get('jid'));\n                            this.participants.resetParticipants();\n                            this.updateParticipants();\n                            return;\n                        }\n                    }\n                    if (this.participants.version > version)\n                        return;\n                    version && this.account.groupchat_settings.setParticipantsListVersion(this.model.get('jid'), version);\n                    (this.participants.version < version) && this.participants.updateVersion();\n                    this.renderParticipants();\n                }, () => {\n                    this.$el.removeClass('request-waiting');\n                });\n            },\n\n            updateParticipantsList: function () {\n                this.$el.find('.members-list-wrap tbody').html('');\n                this.updateParticipants();\n                if (!this.model.all_rights)\n                    this.model.getAllRights();\n            },\n\n            onParticipantsUpdated: function () {\n                this.isVisible() && this.renderParticipants();\n            },\n\n            renderParticipants: function () {\n                this.participants.each((participant) => {\n                    this.renderMemberItem(participant);\n                });\n                this.$el.removeClass('request-waiting');\n            },\n\n            blockParticipant: function (ev) {\n                let $target = $(ev.target).closest('.participant-wrap');\n                utils.dialogs.ask(xabber.getString(\"groupchat__dialog_block_member__header\"), xabber.getString(\"groupchat__dialog_block_member__confirm\", [$target.find('.participant-info .nickname').text()]),\n                    null, { ok_button_text: xabber.getString(\"groupchat_block\")}).done((result) => {\n                    if (result) {\n                        let participant = this.participants.get($target.attr('data-id'));\n                        if (participant)\n                            participant.block(() => {\n                                    $target.remove();\n                                    this.parent.updateScrollBar();\n                                }, (error) => {\n                                    if ($(error).find('not-allowed').length)\n                                        utils.dialogs.error(xabber.getString(\"groupchat_you_have_no_permissions_to_do_it\"));\n                                });\n                    }\n                });\n            },\n\n            kickParticipant: function (ev) {\n                let $target = $(ev.target).closest('.participant-wrap');\n                utils.dialogs.ask(xabber.getString(\"groupchat_kick_member\"), xabber.getString(\"groupchat_do_you_really_want_to_kick_membername\", [$target.find('.participant-info .nickname').text()]),\n                    null, { ok_button_text: xabber.getString(\"groupchat_kick\")}).done((result) => {\n                    if (result) {\n                        let participant = this.participants.get($target.attr('data-id'));\n                        if (participant)\n                            participant.kick(() => {\n                                    $target.remove();\n                                    this.parent.updateScrollBar();\n                                }, (error) => {\n                                    if ($(error).find('not-allowed').length)\n                                        utils.dialogs.error(xabber.getString(\"groupchat_you_have_no_permissions_to_do_it\"));\n                                });\n                    }\n                });\n            },\n\n            renderMemberItem: function (participant) {\n                let attrs = _.clone(participant.attributes);\n                attrs.nickname = _.escape(attrs.nickname);\n                attrs.badge = _.escape(attrs.badge);\n                attrs.is_me = attrs.jid == this.account.get('jid');\n                attrs.pretty_present = attrs.present ? (moment(attrs.present).isValid() ? moment(attrs.present).fromNow() : moment(attrs.present.substr(0, attrs.present.length - 1)).fromNow()) : \"\";\n                let $item_view = $(templates.group_chats.group_member_item(attrs)),\n                    view = this.$('tr[data-id=\"' + attrs.id + '\"]');\n                $item_view.emojify('.badge', {emoji_size: 16});\n                if (view.length) {\n                    view.hasClass('active') && $item_view.addClass('active');\n                    $item_view.insertBefore(view);\n                    view.detach();\n                }\n                else {\n                    if (attrs.is_me) {\n                        $item_view.prependTo(this.$('.members-list-wrap tbody'));\n                    }\n                    else\n                        $item_view.appendTo(this.$('.members-list-wrap tbody'));\n                }\n                this.updateMemberAvatar(attrs);\n            },\n\n            updateMemberAvatar: function (member) {\n                let image = Images.getDefaultAvatar(member.nickname || member.jid || member.id),\n                    $avatar = (member.id) ? this.$('tr[data-id=\"'+ member.id +'\"] .circle-avatar') : this.$('.list-item[data-jid=\"'+ member.jid +'\"] .circle-avatar');\n                $avatar.setAvatar(image, this.member_avatar_size);\n                if (member.avatar) {\n                    let cached_avatar = this.account.chat_settings.getB64Avatar(member.id);\n                    if (this.account.chat_settings.getHashAvatar(member.id) == member.avatar && cached_avatar)\n                        $avatar.setAvatar(cached_avatar, this.member_avatar_size);\n                    else {\n                        if (member.avatar_url){\n                            this.account.chat_settings.updateCachedAvatars(member.id, member.avatar, member.avatar_url);\n                            this.$('.list-item[data-id=\"'+ member.id +'\"] .circle-avatar').setAvatar(member.avatar_url, this.member_avatar_size);\n                            if (this.account.get('jid') === member.jid) {\n                                this.model.my_info.set({avatar: member.avatar, 'b64_avatar': member.avatar_url});\n                                this.model.trigger('update_my_info');\n                            }\n                        }\n                        else {\n                            let node = `${Strophe.NS.PUBSUB_AVATAR_DATA}#${member.id}`;\n                            this.model.getAvatar(member.avatar, node, (avatar) => {\n                                this.account.chat_settings.updateCachedAvatars(member.id, member.avatar, avatar);\n                                this.$('.list-item[data-id=\"'+ member.id +'\"] .circle-avatar').setAvatar(avatar, this.member_avatar_size);\n                                if (this.account.get('jid') === member.jid) {\n                                    this.model.my_info.set('b64_avatar', avatar);\n                                    this.model.trigger('update_my_info');\n                                }\n                            });\n                        }\n                    }\n                }\n            },\n\n            showParticipantProperties: function (ev) {\n                let $target = $(ev.target);\n                if ($target.closest('.buttons-wrap').length)\n                    return;\n                let participant_item = $target.closest('.participant-wrap'),\n                    participant_id = participant_item.attr('data-id'),\n                    participant = this.model.participants.get(participant_id);\n                (participant_item.attr('data-jid') && participant_item.attr('data-jid') === this.account.get('jid')) && (participant_id = '');\n                this.model.participants.participantsRequest({id: participant_id}, (response) => {\n                    let data_form = this.account.parseDataForm($(response).find(`x[xmlns=\"${Strophe.NS.DATAFORM}\"]`));\n                    this.participant_properties_panel.open(participant, data_form);\n                });\n            },\n\n            keyUpSearch: function (ev) {\n                if (ev.keyCode === constants.KEY_ESCAPE && !xabber.body.screen.get('right_contact'))\n                    this.clearSearch(ev);\n                else\n                    this.searchParticipant();\n            },\n\n            searchParticipant: function () {\n                let query = this.$('.participants-search-form input').val().toLowerCase();\n                this.$('.members-list-wrap .participant-wrap').each((idx, item) => {\n                    let $this = $(item),\n                        participant_id = $this.data('id'),\n                        participant = this.model.participants.find(participant => participant.get('id') === participant_id),\n                        jid = participant.get('jid').toLowerCase(),\n                        name = participant.get('nickname').toLowerCase();\n                    $this.hideIf(name.indexOf(query) < 0 && jid.indexOf(query) < 0);\n                });\n                if (query)\n                    this.$('.close-search-icon').show();\n                else\n                    this.$('.close-search-icon').hide();\n            },\n\n            clearSearch: function (ev) {\n                ev && ev.preventDefault();\n                this.$('.search-input').val('');\n                this.searchParticipant();\n            }\n        });\n\n        xabber.ParticipantsViewRight = xabber.BasicView.extend({\n            className: 'overflow-visible',\n            ps_settings: {theme: 'item-list'},\n            template: templates.group_chats.participants_right_panel,\n            member_avatar_size: constants.AVATAR_SIZES.GROUPCHAT_MEMBER_ITEM,\n\n            events: {\n                \"click .participant-wrap\": \"showParticipantProperties\",\n                \"keyup .participants-search-form\" : \"keyUpSearch\",\n                \"click .close-search-icon\": \"clearSearch\",\n                \"click .btn-kick\": \"kickParticipantDialog\",\n                \"click .btn-edit-member\": \"showParticipantPropertiesEdit\",\n                \"click .btn-mute\": \"kickParticipantDialog\",\n            },\n\n            _initialize: function () {\n                this.account = this.model.account;\n                this.participants = this.model.participants;\n                this.participants.on(\"change\", this.onParticipantsChanged, this);\n                this.participants.on(\"participants_updated\", this.onParticipantsUpdated, this);\n                this.model.on(\"change:status_updated\", this.updateParticipantsList, this);\n                this.participant_properties_panel = this.addChild('participant_properties_panel', xabber.ParticipantPropertiesViewRight, {model: this.model, el: this.parent.$('.participant-view-wrap')[0], parent: this.parent});\n            },\n\n            _render: function () {\n                this.$el.html(this.template()).addClass('request-waiting');\n                this.updateParticipants();\n                if (!this.model.all_rights)\n                    this.model.getAllRights();\n                return this;\n            },\n\n            updateParticipants: function () {\n                this.model.participants.participantsRequest({version: this.participants.version }, (response) => {\n                    let $response = $(response),\n                        version = $response.find('query').attr('version');\n                    if (this.model.get('group_info')) {\n                        (this.participants.version === 0) && (this.model.get('group_info').members_num = this.participants.length);\n                        if (this.participants.length != this.model.get('group_info').members_num) {\n                            this.account.groupchat_settings.resetParticipantsList(this.model.get('jid'));\n                            this.participants.resetParticipants();\n                            this.updateParticipants();\n                            return;\n                        }\n                    }\n                    if (this.participants.version > version)\n                        return;\n                    version && this.account.groupchat_settings.setParticipantsListVersion(this.model.get('jid'), version);\n                    (this.participants.version < version) && this.participants.updateVersion();\n                    this.renderParticipants();\n                }, () => {\n                    this.$el.removeClass('request-waiting');\n                });\n            },\n\n            updateParticipantsList: function () {\n                this.updateParticipants();\n                if (!this.model.all_rights)\n                    this.model.getAllRights();\n            },\n\n            onParticipantsUpdated: function () {\n                this.isVisible() && this.renderParticipants();\n            },\n\n            onParticipantsChanged: function () {\n                this.updateParticipants();\n            },\n\n            renderParticipants: function () {\n                this.participants.each((participant) => {\n                    this.renderMemberItem(participant);\n                });\n                if (this.$('.participants-search-form input').val())\n                    this.searchParticipant();\n                this.$el.removeClass('request-waiting');\n            },\n\n            blockParticipant: function (ev) {\n                let $target = $(ev.target).closest('.participant-wrap');\n                utils.dialogs.ask(xabber.getString(\"groupchat__dialog_block_member__header\"), xabber.getString(\"groupchat__dialog_block_member__confirm\", [$target.find('.participant-info .nickname').text()]),\n                    null, { ok_button_text: xabber.getString(\"groupchat_block\")}).done((result) => {\n                    if (result) {\n                        let participant = this.participants.get($target.attr('data-id'));\n                        if (participant)\n                            participant.block(() => {\n                                    $target.remove();\n                                    this.parent.updateScrollBar();\n                                }, (error) => {\n                                    if ($(error).find('not-allowed').length)\n\n                                        utils.dialogs.error(xabber.getString(\"groupchat_you_have_no_permissions_to_do_it\"));\n                                });\n                    }\n                });\n            },\n\n            kickParticipant: function (ev) {\n                let $target = $(ev.target).closest('.participant-wrap');\n                utils.dialogs.ask(xabber.getString(\"groupchat_kick_member\"), xabber.getString(\"groupchat_do_you_really_want_to_kick_membername\", [$target.find('.participant-info .nickname').text()]),\n                    null, { ok_button_text: xabber.getString(\"groupchat_kick\")}).done((result) => {\n                    if (result) {\n                        let participant = this.participants.get($target.attr('data-id'));\n                        if (participant)\n                            participant.kick(() => {\n                                    $target.remove();\n                                    this.parent.updateScrollBar();\n                                }, (error) => {\n\n                                    if ($(error).find('not-allowed').length)\n                                        utils.dialogs.error(xabber.getString(\"groupchat_you_have_no_permissions_to_do_it\"));\n                                });\n                    }\n                });\n            },\n\n            kickParticipantDialog: function (ev) {\n                let $target = $(ev.target).closest('.participant-wrap');\n                utils.dialogs.ask_extended(xabber.getString(\"groupchat_kick_member\"), xabber.getString(\"groupchat_do_you_really_want_to_kick_membername\", [$target.find('.participant-info .nickname').text()]), null, { ok_button_text: xabber.getString(\"groupchat_kick\"), optional_button: 'block', optional_button_text: xabber.getString(\"groupchat_block\")}).done((result) => {\n                    if (result) {\n                        if (result === 'block'){\n                            let participant = this.participants.get($target.attr('data-id'));\n                            if (participant)\n                                participant.block(() => {\n                                    $target.remove();\n                                    this.parent.updateScrollBar();\n                                }, (error) => {\n                                    if ($(error).find('not-allowed').length)\n\n                                        utils.dialogs.error(xabber.getString(\"groupchat_you_have_no_permissions_to_do_it\"));\n                                });\n                        }\n                        else{\n                            let participant = this.participants.get($target.attr('data-id'));\n                            participant.kick(() => {\n                                $target.remove();\n                                this.parent.updateScrollBar();\n                            }, (error) => {\n\n                                if ($(error).find('not-allowed').length)\n                                    utils.dialogs.error(xabber.getString(\"groupchat_you_have_no_permissions_to_do_it\"));\n                            });\n                        }\n                    }\n                });\n            },\n\n            renderMemberItem: function (participant) {\n                let attrs = _.clone(participant.attributes);\n                attrs.nickname = _.escape(attrs.nickname);\n                attrs.badge = _.escape(attrs.badge);\n                attrs.is_me = attrs.jid == this.account.get('jid');\n                attrs.pretty_present = attrs.present ? (moment(attrs.present).isValid() ? moment(attrs.present).fromNow() : moment(attrs.present.substr(0, attrs.present.length - 1)).fromNow()) : \"\";\n                let $item_view = $(templates.group_chats.group_member_item_right(attrs)),\n                    view = this.$('tr[data-id=\"' + attrs.id + '\"]');\n                if (view.length) {\n                    view.hasClass('active') && $item_view.addClass('active');\n                    $item_view.insertBefore(view);\n                    view.detach();\n                }\n                else {\n                    if (attrs.is_me) {\n                        $item_view.prependTo(this.$('.members-list-wrap tbody'));\n                    }\n                    else\n                        $item_view.appendTo(this.$('.members-list-wrap tbody'));\n                }\n                this.updateMemberAvatar(attrs);\n            },\n\n            updateMemberAvatar: function (member) {\n                let image = Images.getDefaultAvatar(member.nickname || member.jid || member.id),\n                    $avatar = (member.id) ? this.$('tr[data-id=\"'+ member.id +'\"] .circle-avatar') : this.$('.list-item[data-jid=\"'+ member.jid +'\"] .circle-avatar');\n                $avatar.setAvatar(image, this.member_avatar_size);\n                if (member.avatar) {\n                    let cached_avatar = this.account.chat_settings.getB64Avatar(member.id);\n                    if (this.account.chat_settings.getHashAvatar(member.id) == member.avatar && cached_avatar)\n                        $avatar.setAvatar(cached_avatar, this.member_avatar_size);\n                    else {\n                        if (member.avatar_url){\n                            this.account.chat_settings.updateCachedAvatars(member.id, member.avatar, member.avatar_url);\n                            this.$('.list-item[data-id=\"'+ member.id +'\"] .circle-avatar').setAvatar(member.avatar_url, this.member_avatar_size);\n                            if (this.account.get('jid') === member.jid) {\n                                this.model.my_info.set({avatar: member.avatar, 'b64_avatar': member.avatar_url});\n                                this.model.trigger('update_my_info');\n                            }\n                        }\n                        else {\n                            let node = `${Strophe.NS.PUBSUB_AVATAR_DATA}#${member.id}`;\n                            this.model.getAvatar(member.avatar, node, (avatar) => {\n                                this.account.chat_settings.updateCachedAvatars(member.id, member.avatar, avatar);\n                                this.$('.list-item[data-id=\"'+ member.id +'\"] .circle-avatar').setAvatar(avatar, this.member_avatar_size);\n                                if (this.account.get('jid') === member.jid) {\n                                    this.model.my_info.set('b64_avatar', avatar);\n                                    this.model.trigger('update_my_info');\n                                }\n                            });\n                        }\n                    }\n                }\n            },\n\n            showParticipantProperties: function (ev) {\n                let $target = $(ev.target);\n                if ($target.closest('.buttons-wrap').length)\n                    return;\n                let participant_item = $target.closest('.participant-wrap'),\n                    participant_id = participant_item.attr('data-id'),\n                    participant = this.model.participants.get(participant_id);\n                (participant_item.attr('data-jid') && participant_item.attr('data-jid') === this.account.get('jid')) && (participant_id = '');\n                this.model.participants.participantsRequest({id: participant_id}, (response) => {\n                    let data_form = this.account.parseDataForm($(response).find(`x[xmlns=\"${Strophe.NS.DATAFORM}\"]`));\n                    this.participant_properties_panel.open(participant, data_form);\n                });\n            },\n\n            showParticipantPropertiesEdit: function (ev) {\n                let $target = $(ev.target),\n                    participant_item = $target.closest('.participant-wrap'),\n                    participant_id = participant_item.attr('data-id'),\n                    participant = this.model.participants.get(participant_id);\n                (participant_item.attr('data-jid') && participant_item.attr('data-jid') === this.account.get('jid')) && (participant_id = '');\n                this.model.participants.participantsRequest({id: participant_id}, (response) => {\n                    let data_form = this.account.parseDataForm($(response).find(`x[xmlns=\"${Strophe.NS.DATAFORM}\"]`));\n                    this.participant_properties_panel.open(participant, data_form);\n                    this.participant_properties_panel.showNamePanel();\n                    this.participant_properties_panel.changeBackButton();\n                });\n            },\n\n            keyUpSearch: function (ev) {\n                if (ev.keyCode === constants.KEY_ESCAPE && !xabber.body.screen.get('right_contact'))\n                    this.clearSearch(ev);\n                else\n                    this.searchParticipant();\n            },\n\n            searchParticipant: function () {\n                let query = this.$('.participants-search-form input').val().toLowerCase();\n                this.$('.members-list-wrap .participant-wrap').each((idx, item) => {\n                    let $this = $(item),\n                        participant_id = $this.data('id'),\n                        participant = this.model.participants.find(participant => participant.get('id') === participant_id),\n                        jid = participant.get('jid').toLowerCase(),\n                        name = participant.get('nickname').toLowerCase();\n                    $this.hideIf(name.indexOf(query) < 0 && jid.indexOf(query) < 0);\n                });\n                if (query)\n                    this.$('.close-search-icon').show();\n                else\n                    this.$('.close-search-icon').hide();\n            },\n\n            clearSearch: function (ev) {\n                ev && ev.preventDefault();\n                this.$('.search-input').val('');\n                this.searchParticipant();\n            }\n        });\n\n        xabber.ParticipantPropertiesView = xabber.BasicView.extend({\n            className: 'modal dialog-modal edit-rights',\n            template: templates.group_chats.participant_rights,\n            member_details_avatar_size: constants.AVATAR_SIZES.PARTICIPANT_DETAILS_ITEM,\n            ps_selector: '.modal-content',\n            ps_settings: {theme: 'item-list'},\n\n            events: {\n                \"click .btn-cancel-changes\": \"close\",\n                \"change .clickable-field input\": \"changeRights\",\n                \"click .btn-save-user-rights\": \"saveRights\",\n                \"click .participant-details-item:not(.unsubscribed) .nickname\": \"editNickname\",\n                \"change .circle-avatar input\": \"changeAvatar\",\n                \"click .btn-block-participant\": \"block\",\n                \"click .btn-kick-participant\": \"kick\",\n                \"click .btn-set-badge\": \"editBadge\",\n                \"click .btn-participant-messages\": \"getMessages\",\n                \"click .btn-chat\": \"getPrivateChat\",\n                \"click .property-variant\": \"changeTimerValue\",\n                \"keydown .rich-textarea\": \"checkKeydown\",\n                \"keyup .rich-textarea\": \"checkKeyup\"\n            },\n\n            _initialize: function () {\n                this.contact = this.model;\n                this.account = this.model.account;\n            },\n\n            open: function (participant, data_form) {\n                if (!participant) return;\n                this.participant = participant;\n                this.participant.on(\"change:badge\", this.onBadgeUpdated, this);\n                this.data_form = data_form;\n                this.render();\n                this.$el.openModal({\n                    ready: () => {\n                        this.$el.css('height', \"\");\n                        if (($(window).height() * 0.1 + this.$el.height()) > $(window).height())\n                            this.$el.css('height', $(window).height() * 0.9);\n                        this.$('.modal-content').css('max-height', 'calc(100% - ' + (64 + this.$('.header').height()) + 'px)');\n                        this.scrollToTop();\n                        this.updateSaveButton();\n                        let dropdown_settings = {\n                            inDuration: 100,\n                            outDuration: 100,\n                            constrainWidth: false,\n                            hover: false,\n                            alignment: 'left'\n                        };\n                        this.$('.select-timer .dropdown-button').dropdown(dropdown_settings);\n                        this.$('.participant-details-item .dropdown-button').dropdown(_.extend(dropdown_settings, {alignment: 'right'}));\n                    },\n                    complete: () => {\n                        this.render();\n                        this.$el.detach();\n                        this.data.set('visible', false);\n                    }\n                });\n            },\n\n            close: function () {\n                this.$el.closeModal({\n                    complete: () => {\n                        this.render();\n                        this.$el.detach();\n                        this.data.set('visible', false);\n                    }\n                });\n            },\n\n            render: function () {\n                this.new_avatar = \"\";\n                let attrs = _.clone(this.participant.attributes);\n                attrs.nickname = _.escape(attrs.nickname);\n                attrs.blocked = attrs.blocked;\n                attrs.subscription = attrs.subscription === null ? null : 'both';\n                attrs.badge = _.escape(attrs.badge);\n                attrs.is_myself = attrs.jid === this.account.get('jid');\n                attrs.is_blocked_contact = this.account.blocklist.isBlocked(attrs.jid);\n                attrs.incognito_chat = (this.contact.get('group_info') && this.contact.get('group_info').privacy === 'incognito') ? true : false;\n                let $member_info_view;\n                if (this.contact.get('private_chat')) {\n                    this.$el.addClass('edit-rights-private');\n                    $member_info_view = $(templates.group_chats.private_participant_details(attrs));\n                }\n                else\n                    $member_info_view = $(templates.group_chats.participant_details_item(attrs));\n                this.$('.header').html($member_info_view);\n                this.$('.buttons-wrap .button-wrap:not(.btn-chat-wrap):not(.btn-participant-messages-wrap)').switchClass('non-active', attrs.subscription === null);\n                this.$('.btn-chat-wrap').switchClass('non-active', this.participant.get('jid') === this.account.get('jid'));\n                this.updateMemberAvatar(this.participant);\n                this.participant_messages = [];\n                this.actual_rights = [];\n                if (!this.contact.get('private_chat'))\n                    this.setActualRights();\n                else {\n                    this.$('.modal-content').addClass('hidden');\n                    this.$('.modal-footer').switchClass('hidden', this.participant.get('jid') !== this.account.get('jid'));\n                }\n                this.updateScrollBar();\n                this.$('.participant-info #edit-nickname').on(\"focusout\", () => {\n                    let new_nickname = this.$('#edit-nickname').getTextFromRichTextarea().trim();\n                    if (new_nickname === \"\")\n                        new_nickname = this.participant.get('nickname');\n                    this.$('.participant-info #edit-nickname').hide();\n                    this.$('.participant-info .nickname').show();\n                    this.updateNickname(new_nickname);\n                });\n                this.$('.content').perfectScrollbar({theme: 'item-list'});\n            },\n\n            updateMemberAvatar: function (member) {\n                let participant_id = member.get('id'),\n                    $avatar = this.$(`.participant-details-item[data-id=\"${participant_id}\"] .circle-avatar`);\n                member.image = Images.getDefaultAvatar(member.get('nickname') || member.get('jid') || participant_id);\n                $avatar.setAvatar(member.image, this.member_details_avatar_size);\n                this.$('.participant-details-item[data-id=\"'+ member.id +'\"]').emojify('.badge', {emoji_size: 18});\n                if (member.get('avatar')) {\n                    if (this.account.chat_settings.getHashAvatar(participant_id) == member.get('avatar') && (this.account.chat_settings.getB64Avatar(participant_id)))\n                        $avatar.setAvatar(this.account.chat_settings.getB64Avatar(participant_id), this.member_details_avatar_size);\n                    else {\n                        if (member.get('avatar_url')){\n                            $avatar.setAvatar(member.get('avatar_url'), this.member_details_avatar_size);\n                        }\n                        else {\n                            let node = Strophe.NS.PUBSUB_AVATAR_DATA + '#' + participant_id;\n                            this.contact.getAvatar(member.get('avatar'), node, (avatar) => {\n                                this.$(`.circle-avatar`).setAvatar(avatar, this.member_details_avatar_size);\n                            });\n                        }\n                    }\n                }\n                else {\n                    if (this.account.chat_settings.getHashAvatar(participant_id))\n                        $avatar.setAvatar(this.account.chat_settings.getB64Avatar(participant_id), this.member_details_avatar_size);\n                }\n            },\n\n            updateRightsView: function (ev) {\n                !$(ev.target).hasClass('non-active') && this.render(this.participant);\n            },\n\n            getMessages: function (options) {\n                let chat = this.account.chats.getChat(this.contact);\n                chat.messages_view = new xabber.ParticipantMessagesView({ model: chat, contact: this.contact, participant: this.participant.attributes });\n                chat.messages_view.messagesRequest(options, () => {\n                    this.close();\n                    xabber.body.setScreen('all-chats', {right: 'participant_messages', model: chat});\n                });\n            },\n\n            changeAvatar: function (ev) {\n                let field = ev.target;\n                if (!field.files.length)\n                    return;\n                let file = field.files[0];\n                field.value = '';\n                if (file.size > constants.MAX_AVATAR_FILE_SIZE) {\n                    utils.dialogs.error(xabber.getString(\"group_settings__error__avatar_too_large\"));\n                    return;\n                } else if (!file.type.startsWith('image')) {\n                    utils.dialogs.error(xabber.getString(\"group_settings__error__wrong_image\"));\n                    return;\n                }\n\n                utils.images.getAvatarFromFile(file).done((image) => {\n                    if (image) {\n                        file.base64 = image;\n                        this.new_avatar = file;\n                        this.$('.circle-avatar').addClass('changed').setAvatar(image, this.member_details_avatar_size);\n                        this.updateSaveButton();\n                    }\n                });\n            },\n\n            changeTimerValue: function (ev) {\n                let $property_item = $(ev.target),\n                    $property_value = $property_item.closest('.select-timer').find('.property-value'),\n                    $input_item = $property_item.closest('.right-item').find('input');\n                if ($property_item.attr('data-value') !== $property_value.attr('data-value')) {\n                    $property_item.closest('.right-item').addClass('changed-timer changed');\n                    this.updateSaveButton();\n                }\n                $property_value.text($property_item.text());\n                $property_value.attr('data-value', $property_item.attr('data-value'));\n                if ($property_item.attr('data-value') === '0') {\n                    $property_value.addClass('default-value').text(xabber.getString(\"dialog_rights__button_set_timer\"));\n                } else if ($property_value.hasClass('default-value'))\n                    $property_value.removeClass('default-value');\n                if (!$input_item.prop('checked')) {\n                    $input_item.click();\n                }\n            },\n\n            onBadgeUpdated: function (participant) {\n                let badge = _.escape(participant.get('badge'));\n                this.updateBadge(badge);\n            },\n\n            updateBadge: function (badge) {\n                this.$('.badge').html(badge).switchClass('hidden', !badge);\n                this.$('.participant-info').emojify('.badge');\n            },\n\n            updateButtons: function (has_changes) {\n                this.$('.btn-save-user-rights').switchClass('non-active', !has_changes);\n            },\n\n            updateSaveButton: function () {\n                let has_changes = this.$('.changed').length;\n                this.updateButtons(has_changes);\n            },\n\n            updateNickname: function (nickname) {\n                let $member_item = this.$('.participant-details-item[data-id=\"' + this.participant.get('id') + '\"]'),\n                    $member_item_nickname = $member_item.find('.nickname');\n                $member_item_nickname.html(Strophe.xmlescape(nickname));\n                $member_item.emojify('.nickname');\n                if (nickname !== this.participant.get('nickname'))\n                    $member_item_nickname.addClass('changed');\n                else\n                    $member_item_nickname.removeClass('changed');\n                this.updateSaveButton();\n            },\n\n            editNickname: function () {\n                if (this.contact.get('private_chat') && this.account.get('jid') !== this.participant.get('jid'))\n                    return;\n                this.$('.participant-info .nickname').hide();\n                this.$('.participant-info #edit-nickname').text(this.$('.participant-info .nickname').text()).show().placeCaretAtEnd();\n            },\n\n            editBadge: function (ev) {\n                if ($(ev.target).closest('.button-wrap').hasClass('non-active'))\n                    return;\n                this.edit_badge_panel = new xabber.EditBadgeView({model: this});\n            },\n\n            checkKeydown: function (ev) {\n                if (ev && ev.keyCode === constants.KEY_ENTER) {\n                    ev.preventDefault();\n                    $(document.activeElement).blur();\n                }\n            },\n\n            checkKeyup: function (ev) {\n                let $richtextarea = $(ev.target),\n                    new_value = $richtextarea.getTextFromRichTextarea().trim();\n                if (ev.target.id === 'edit-nickname') {\n                    let has_changes = (new_value !== this.participant.get('nickname'));\n                    this.updateButtons(has_changes);\n                }\n            },\n\n            retractUserMessages: function () {\n                utils.dialogs.ask(xabber.getString(\"dialog_delete_user_messages__header\"), xabber.getString(\"dialog_delete_user_messages__header\", [this.participant.get('nickname') || this.participant.get('jid') || this.participant.get('id')]), null, { ok_button_text: xabber.getString(\"delete\")}).done((result) => {\n                    if (result) {\n                        if (this.participant.get('id')) {\n                            let group_chat = this.account.chats.getChat(this.contact);\n                            group_chat.retractMessagesByUser(this.participant.get('id'));\n                        }\n                    }\n                });\n            },\n\n            block: function () {\n                utils.dialogs.ask(xabber.getString(\"groupchat__dialog_block_member__header\"), xabber.getString(\"groupchat__dialog_block_member__confirm\", [this.participant.get('nickname')]),\n                    null, { ok_button_text: xabber.getString(\"groupchat_block\")}).done((result) => {\n                    if (result) {\n                        this.participant.block(() => {this.close();},\n                            function (error) {\n                                if ($(error).find('not-allowed').length)\n                                    utils.dialogs.error(xabber.getString(\"groupchat_you_have_no_permissions_to_do_it\"));\n                            });\n                    }\n                });\n            },\n\n            kick: function (ev) {\n                if ($(ev.target).closest('.button-wrap').hasClass('non-active'))\n                    return;\n                utils.dialogs.ask(xabber.getString(\"groupchat_kick_member\"), xabber.getString(\"groupchat_do_you_really_want_to_kick_membername\", [this.participant.get('nickname')]),\n                    null, { ok_button_text: xabber.getString(\"groupchat_kick\")}).done((result) => {\n                    if (result) {\n                        this.participant.kick(() => {\n                                this.close();\n                            }, (error) => {\n                                if ($(error).find('not-allowed').length)\n                                    utils.dialogs.error(xabber.getString(\"groupchat_you_have_no_permissions_to_do_it\"));\n                            });\n                    }\n                });\n            },\n\n            setActualRights: function () {\n                this.$('.rights-wrap').html(\"\");\n                this.data_form.fields && this.data_form.fields.forEach((field) => {\n                    field = _.clone(field);\n                    if (field.type  === 'list-single' || field.type  === 'fixed' && (!field.values || field.values[0] == 0)) {\n                        !field.values && (field.values = []);\n                        let attrs = {\n                                pretty_name: field.label,\n                                name: field.var,\n                                expires: field.values ? field.values[0] : undefined\n                            },\n                            restriction_item = $(templates.group_chats.restriction_item({name: attrs.name, pretty_name: attrs.pretty_name, type: field.type})),\n                            restriction_expire;\n                        if (field.options) {\n                            restriction_expire = $(templates.group_chats.right_expire_variants({\n                                right_name: ('default-' + attrs.name),\n                                expire_options: field.options\n                            }));\n                            restriction_item.append(restriction_expire);\n                        }\n                        this.$('.rights-wrap').append(restriction_item);\n                        if (attrs.expires) {\n                            this.actual_rights.push({name: attrs.name, expires: attrs.expires});\n                            this.$('.right-item #' + attrs.name).prop('checked', true).addClass(attrs.expires);\n                            if (attrs.expires != 0) {\n                                let $current_restriction = this.$('.right-item.restriction-' + attrs.name);\n                                $current_restriction.find('.select-timer .property-value').attr('data-value', attrs.expires)\n                                    .removeClass('default-value')\n                                    .text(moment(Number(attrs.expires)*1000).fromNow());\n                            }\n                        }\n                    } else if (field.type  === 'fixed')\n                        field.values && this.$('.rights-wrap').append($('<div class=\"rights-header\"/>').text(field.values[0]));\n                });\n            },\n\n            getPrivateChat: function (ev) {\n                if ($(ev.target).closest('.button-wrap').hasClass('non-active'))\n                    return;\n                let participant_jid = this.participant.get('jid'),\n                    participant_in_roster = this.account.contacts.get(participant_jid);\n                if (!participant_jid || this.contact.get('incognito_chat')) {\n                    let iq = $iq({to: this.contact.domain, type: 'set'})\n                        .c('query', {xmlns: `${Strophe.NS.GROUP_CHAT}#create`})\n                        .c('peer-to-peer', { jid: this.contact.get('jid'),  id: this.participant.get('id')});\n                    this.account.sendIQFast(iq, (iq_response) => {\n                        let group_jid = $(iq_response).find('query localpart').text() + '@' + this.contact.domain,\n                            contact = this.account.contacts.mergeContact(group_jid);\n                        contact.set('group_chat', true);\n                        contact.set('subscription_preapproved', true);\n                        contact.pres('subscribed');\n                        contact.pushInRoster(null, () => {\n                            contact.pres('subscribe');\n                            contact.getMyInfo();\n                            this.close();\n                            contact.sendPresent();\n                            this.account.chats.openChat(contact);\n                            let chat = this.account.chats.getChat(contact);\n                            chat.messages.createSystemMessage({\n                                from_jid: group_jid,\n                                message: xabber.getString(\"groupchat__private_chat__text_message_init\", [this.participant.get('nickname'), this.contact.get('jid')])\n                            });\n                        });\n                    }, (error) => {\n                        let $error = $(error),\n                            private_chat_jid = $error.find(`x[xmlns=\"${Strophe.NS.GROUP_CHAT}\"] jid`).text();\n                        if (private_chat_jid) {\n                            let contact = this.account.contacts.mergeContact(private_chat_jid),\n                                chat = this.account.chats.getChat(contact);\n                            this.close();\n                            chat && chat.trigger('open');\n                            return;\n                        }\n                        let err_text = $(error).find('text[lang=\"en\"]').text() || $(error).find('text').first().text() || xabber.getString(\"groupchat_you_have_no_permissions_to_do_it\");\n                        this.close();\n                        utils.dialogs.error(err_text);\n                    });\n                }\n                else {\n                    if (participant_in_roster)\n                        if (participant_in_roster.get('in_roster')) {\n                            this.close();\n                            participant_in_roster.trigger('open_chat', participant_in_roster);\n                            return;\n                        }\n                    this.close();\n                    xabber.add_contact_view.show({\n                        account: this.account,\n                        jid: participant_jid\n                    });\n                }\n            },\n\n            changeRights: function (ev) {\n                let $target = $(ev.target),\n                    $right_item = $target.closest('.right-item'),\n                    right_name = $target.prop('id');\n                if ($target.prop('checked')) {\n                    if (!this.actual_rights.find(right => right.name === right_name))\n                        $right_item.addClass('changed');\n                    else\n                        if ($right_item.hasClass('changed-timer'))\n                            $right_item.addClass('changed');\n                        else\n                            $right_item.removeClass('changed');\n                }\n                else {\n                    if (this.actual_rights.find(right => right.name === right_name))\n                        $right_item.addClass('changed');\n                    else {\n                        $right_item.removeClass('changed');\n                        if ($right_item.hasClass('changed-timer'))\n                            $right_item.find('.timer-item-wrap .property-value').addClass('default-value').text(xabber.getString(\"dialog_rights__button_set_timer\")).attr('data-value', \"\");\n                    }\n                }\n                this.updateSaveButton();\n            },\n\n            saveRights: function (ev) {\n                if ($(ev.target).hasClass('non-active'))\n                    return;\n                let $btn = $(ev.target),\n                    jid = this.account.get('jid'),\n                    member_id = this.participant.get('id'),\n                    $participant_avatar = this.$('.participant-details-item .circle-avatar'),\n                    nickname_value = this.$('.participant-info .nickname').text(),\n                    changed_avatar = this.new_avatar,\n                    rights_changed = false,\n                    has_changes = false,\n                    iq_changes = $iq({type: 'set', to: this.contact.get('full_jid') || this.contact.get('jid')})\n                        .c('query', {xmlns: Strophe.NS.GROUP_CHAT + \"#members\"})\n                        .c('user', {xmlns: Strophe.NS.GROUP_CHAT, id: member_id});\n                this.$('.buttons-wrap .btn-save-user-rights').addClass('non-active');\n                changed_avatar && $participant_avatar.find('.preloader-wrap').addClass('visible').find('.preloader-wrapper').addClass('active');\n                if (nickname_value != this.participant.get('nickname')) {\n                    has_changes = true;\n                    iq_changes.c('nickname').t(nickname_value).up();\n                }\n                this.$('.right-item').each((idx, right_item) => {\n                    if ($(right_item).hasClass('changed')) {\n                        let $right_item = $(right_item),\n                            right_name = $right_item.find('.field input')[0].id;\n                        if ($right_item.find('.field input:checked').val()) {\n                            let right_expire = $right_item.find('.select-timer .timer-item-wrap .property-value').attr('data-value'),\n                                field = this.data_form.fields.find(f => f.var === right_name),\n                                field_idx = this.data_form.fields.indexOf(field);\n                            field.values = [right_expire];\n                            this.data_form.fields[field_idx] = field;\n                            rights_changed = true;\n                        }\n                        else {\n                            let field = this.data_form.fields.find(f => f.var === right_name);\n                            if (field.values.length) {\n                                let field_idx = this.data_form.fields.indexOf(field);\n                                field.values = [];\n                                this.data_form.fields[field_idx] = field;\n                                rights_changed = true;\n                            }\n                        }\n                    }\n                });\n                if (changed_avatar)\n                    this.contact.pubAvatar(changed_avatar, ('#' + member_id), () => {\n                        this.$('.buttons-wrap button').removeClass('non-active');\n                        $participant_avatar.find('.preloader-wrap').removeClass('visible').find('.preloader-wrapper').removeClass('active');\n                        this.$(`.participant-details-item[data-id=\"${member_id}\"] .circle-avatar`).setAvatar(changed_avatar.base64, this.member_details_avatar_size);\n                        this.close();\n                    }, function (error) {\n                        this.$('.buttons-wrap button').removeClass('non-active');\n                        $participant_avatar.find('.preloader-wrap').removeClass('visible').find('.preloader-wrapper').removeClass('active');\n\n                        let error_text = $(error).find('text').text() || xabber.getString(\"groupchat_you_have_no_permissions_to_do_it\");\n                        !has_changes && utils.dialogs.error(error_text);\n                    });\n                if (has_changes)\n                    this.account.sendIQFast(iq_changes,\n                        () => {\n                            this.$('.buttons-wrap button').removeClass('non-active');\n                            this.participant.set('nickname', nickname_value);\n                            this.close();\n                        },\n                        (error) => {\n                            this.$('.buttons-wrap button').removeClass('non-active');\n                            this.close();\n\n                            if ($(error).find('not-allowed').length)\n                                utils.dialogs.error(xabber.getString(\"groupchat_you_have_no_permissions_to_do_it\"));\n                        });\n                if (rights_changed) {\n                    let iq_rights_changes = $iq({type: 'set', to: this.contact.get('full_jid') || this.contact.get('jid')})\n                        .c('query', {xmlns: Strophe.NS.GROUP_CHAT + '#rights'});\n                    iq_rights_changes = this.account.addDataFormToStanza(iq_rights_changes, this.data_form);\n                    this.account.sendIQFast(iq_rights_changes, () => {\n                            this.close();\n                        },\n                        (error) => {\n                            this.close();\n                            if ($(error).find('not-allowed').length)\n                                utils.dialogs.error(xabber.getString(\"groupchat_you_have_no_permissions_to_do_it\"));\n                        });\n                }\n                $btn.blur();\n            }\n        });\n\n        xabber.ParticipantPropertiesViewRight = xabber.BasicView.extend({\n            className: 'modal dialog-modal edit-rights',\n            template: templates.group_chats.participant_details_right,\n            member_details_avatar_size: constants.AVATAR_SIZES.PARTICIPANT_DETAILS_ITEM,\n\n            events: {\n                \"click .btn-back:not(.btn-top)\": \"close\",\n                \"click .btn-back.btn-top\": \"scrollToTopSmooth\",\n                'click .btn-edit-participant': 'showNamePanel',\n                'click .btn-back-name': 'hidePanel',\n                \"change .clickable-field input\": \"changeRights\",\n                \"click .btn-reset\": \"render\",\n                \"click .btn-reset-name\": \"resetPanel\",\n                \"click .btn-save-user-rights\": \"saveRights\",\n                \"change .circle-avatar input\": \"changeAvatar\",\n                \"click .btn-kick-participant\": \"kickParticipantDialog\",\n                \"click .btn-set-visibility-wrap\": \"setVisibility\",\n                \"click .info-hover\": \"onClickIcon\",\n                \"click .btn-set-badge\": \"editBadge\",\n                \"click .btn-participant-messages\": \"getMessages\",\n                \"click .btn-chat-participant\": \"getPrivateChat\",\n                \"click .property-variant\": \"changeTimerValue\",\n                \"click .set-groupchat-avatar-text\": \"clickAvatarInput\",\n                \"keydown .rich-textarea\": \"checkKeydown\",\n                \"keyup .rich-textarea\": \"checkKeyup\",\n                \"click .list-variant\": \"changeList\"\n            },\n\n            _initialize: function () {\n                this.contact = this.model;\n                this.account = this.model.account;\n            },\n\n            open: function (participant, data_form) {\n                this.model.set('participant_hidden', false);\n                this.parent.scrollToTop();\n                if (this.parent.ps_container.length) {\n                    this.parent.ps_container.perfectScrollbar('destroy')\n                }\n                this.$('.participant-details-wrap').hideIf(this.model.get('participant_hidden'))\n                if (!participant) return;\n                this.participant = participant;\n                this.participant.on(\"change:badge\", this.onBadgeUpdated, this);\n                this.data_form = data_form;\n                this.render();\n                this.updateSaveButton();\n                let dropdown_settings = {\n                    inDuration: 100,\n                    outDuration: 100,\n                    constrainWidth: false,\n                    hover: false,\n                    alignment: 'left'\n                };\n                this.$('.select-timer .dropdown-button').dropdown(dropdown_settings);\n                this.$('.participant-details-item .dropdown-button').dropdown(_.extend(dropdown_settings, {alignment: 'right'}));\n            },\n\n            close: function () {\n                this.model.set('participant_hidden', true);\n                if (this.parent.ps_container.length) {\n                    this.parent.ps_container.perfectScrollbar(\n                        _.extend(this.parent.ps_settings || {}, xabber.ps_settings)\n                    );\n                    this.parent.onScroll();\n                };\n                if (this.ps_container && this.ps_container.length) {\n                    this.ps_container.perfectScrollbar('destroy')\n                }\n                this.$('.participant-details-wrap').hideIf(this.model.get('participant_hidden'));\n            },\n\n            render: function () {\n                this.$el.html(this.template(_.extend({view: this}, constants)));\n                this.new_avatar = \"\";\n                let attrs = _.clone(this.participant.attributes);\n                attrs.nickname = _.escape(attrs.nickname);\n                attrs.blocked = attrs.blocked;\n                attrs.pretty_present = attrs.present ? (moment(attrs.present).isValid() ? moment(attrs.present).fromNow() : moment(attrs.present.substr(0, attrs.present.length - 1)).fromNow()) : \"\";\n                attrs.subscription = attrs.subscription === null ? null : 'both';\n                attrs.badge = _.escape(attrs.badge);\n                attrs.is_myself = attrs.jid === this.account.get('jid');\n                attrs.is_blocked_contact = this.account.blocklist.isBlocked(attrs.jid);\n                attrs.incognito_chat = (this.contact.get('group_info') && this.contact.get('group_info').privacy === 'incognito') ? true : false;\n                let $member_info_view;\n                if (this.contact.get('private_chat')) {\n                    this.$el.addClass('edit-rights-private');\n                    $member_info_view = $(templates.group_chats.private_participant_details_item_right(attrs));\n                }\n                else\n                    $member_info_view = $(templates.group_chats.participant_details_item_right(attrs));\n                this.$('.participant-details-info-wrap').html($member_info_view);\n                this.$('.buttons-wrap .button-wrap:not(.btn-chat-wrap):not(.btn-participant-messages-wrap)').switchClass('non-active', attrs.subscription === null);\n                this.$('.btn-chat-wrap').switchClass('non-active', this.participant.get('jid') === this.account.get('jid'));\n                this.updateMemberAvatar(this.participant);\n                this.participant_messages = [];\n                this.actual_rights = [];\n                if (!this.contact.get('private_chat'))\n                    this.setActualRights();\n                else {\n                    this.$('.modal-content').addClass('hidden');\n                    this.$('.modal-footer').switchClass('hidden', this.participant.get('jid') !== this.account.get('jid'));\n                }\n                this.updateScrollBar();\n                this.$('.participant-info #edit-nickname').on(\"focusout\", () => {\n                    let new_nickname = this.$('#edit-nickname').getTextFromRichTextarea().trim();\n                    if (new_nickname === \"\")\n                        new_nickname = this.participant.get('nickname');\n                    this.$('.participant-info #edit-nickname').hide();\n                    this.$('.participant-info .nickname').show();\n                    this.updateNickname(new_nickname);\n                });\n                this.ps_container = this.$('.participant-details-wrap');\n                if (this.ps_container.length) {\n                    this.ps_container.perfectScrollbar(\n                        _.extend(this.parent.ps_settings || {}, xabber.ps_settings)\n                    );\n                }\n                this.ps_container.on(\"ps-scroll-up ps-scroll-down\", this.onScroll.bind(this));\n                this.onScroll();\n                this.participant_name_field = new xabber.ParticipantNameRightWidget({\n                    el: this.$('.edit-participant-name-wrap')[0],\n                    model: this.participant,\n                    parent: this,\n                });\n                this.participant_badge_field = new xabber.ParticipantBadgeRightWidget({\n                    el: this.$('.edit-participant-badge-wrap')[0],\n                    model: this.participant,\n                    parent: this,\n                });\n                this.updateList('image');\n                xabber.once(\"update_css\", this.updateIndicator, this);\n                this.updateIndicator()\n                this.$('.participant-details-edit-wrap').hideIf(true);\n                this.$('.block-name:not(.second-text)').hideIf(true);\n            },\n\n            updateIndicator: function () {\n                this.$('.tabs .indicator').remove();\n                this.$('.tabs').tabs();\n                this.$('.indicator').addClass('ground-color-500');\n            },\n\n            showNamePanel: function () {\n                this.$('.participant-details-edit-wrap').hideIf(false)\n                this.$('.btn-edit-participant').hideIf(true)\n                this.$('.parent-btn').hideIf(true)\n                this.$('.child-btn').hideIf(false)\n                this.$('.block-header').css({'background-color': 'rgba(255,255,255,0)'});\n                this.$('.block-name.second-text').text('');\n                this.$('.block-name:not(.second-text)').text(xabber.getString(\"groupchat_member_edit\"));\n                this.$('.block-name:not(.second-text)').hideIf(false);\n                if (this.ps_container && this.ps_container.length) {\n                    this.ps_container.perfectScrollbar('destroy')\n                }\n                this.ps_container = this.$('.participant-details-edit-wrap');\n                if (this.ps_container.length) {\n                    this.ps_container.perfectScrollbar(\n                        _.extend(this.parent.ps_settings || {}, xabber.ps_settings)\n                    );\n                }\n            },\n\n            changeBackButton: function () {\n                this.$('.parent-btn').hideIf(false)\n                this.$('.child-btn').hideIf(true)\n            },\n\n            hidePanel: function () {\n                this.$('.participant-details-edit-wrap').hideIf(true)\n                this.$('.btn-edit-participant').hideIf(false)\n                this.$('.parent-btn').hideIf(false)\n                this.$('.child-btn').hideIf(true)\n                this.$('.block-name:not(.second-text)').hideIf(true);\n                this.ps_container = this.$('.participant-details-wrap');\n                if (this.ps_container.length) {\n                    this.ps_container.perfectScrollbar(\n                        _.extend(this.parent.ps_settings || {}, xabber.ps_settings)\n                    );\n                }\n                if (this.ps_container && this.ps_container.length) {\n                    this.ps_container.perfectScrollbar(\n                        _.extend(this.parent.ps_settings || {}, xabber.ps_settings)\n                    );\n                }\n                this.onScroll();\n            },\n\n            resetPanel: function () {\n                this.participant_name_field.updateValue(true);\n                this.participant_badge_field.updateValue(true);\n                this.new_avatar = \"\";\n                this.updateMemberAvatar(this.participant);\n                this.updateSaveButton()\n            },\n\n            changeList: function (ev) {\n                let $target = $(ev.target).closest('.list-variant'),\n                    list_name = $target.data('value');\n                this.$('.tabs').animate({scrollLeft: $target.position().left}, 400);\n                this.updateList(list_name);\n            },\n\n            updateList: function (name) {\n                let view = this.child(name);\n                !view && (view = this.addList(name));\n                if (view) {\n                    this.$('.tabs .list-variant a').removeClass('active');\n                    this.$('.tabs .list-variant[data-value=\"' + name + '\"] a').addClass('active');\n                    view._render();\n                }\n            },\n\n            addList: function (name) {\n                let constructor_func;\n                switch (name) {\n                    case 'image':\n                        constructor_func = xabber.MediaImagesView;\n                        break;\n                    case 'video':\n                        constructor_func = xabber.MediaVideosView;\n                        break;\n                    case 'files':\n                        constructor_func = xabber.MediaFilesView;\n                        break;\n                    case 'voice':\n                        constructor_func = xabber.MediaVoiceView;\n                        break;\n                };\n                if (constructor_func)\n                    return this.addChild(name, constructor_func, {model: this.model, participant: true, el: this.$('.participants-details-media-wrap')[0]});\n                else\n                    return;\n            },\n\n            changeName: function (value) {\n                this.updateSaveButton()\n            },\n\n            changeBadge: function (value) {\n                this.updateSaveButton()\n            },\n\n            onClickIcon: function (ev) {\n                let $target_info = $(ev.target),\n                    $target_value = $target_info.find('.value'), copied_text = \"\";\n                $target_value.each((idx, item) => {\n                    let $item = $(item),\n                        value_text = $item.text();\n                    value_text && (copied_text != \"\") && (copied_text += '\\n');\n                    value_text && (copied_text += value_text);\n                    copied_text && utils.copyTextToClipboard(copied_text, xabber.getString(\"toast__copied_in_clipboard\"), xabber.getString(\"toast__not_copied_in_clipboard\"));\n                });\n            },\n\n            scrollToTopSmooth: function () {\n                this.ps_container.animate(\n                    {scrollTop: 0},\n                    400,\n                    () => {\n                        this.onScroll();\n                    });\n            },\n\n            onScroll: function () {\n                if(this.ps_container[0].scrollTop >= 220) {\n                    this.$('.block-header').css({'background-color': 'rgba(255,255,255,1)'});\n                    this.$('.block-name.second-text').text(this.participant.get('nickname'));\n                    this.$('.block-name.second-text').removeClass('fade-out');\n                    this.$('.block-name:not(.second-text)').addClass('fade-out');\n                }\n                else if(this.ps_container[0].scrollTop >= 170) {\n                    this.$('.block-header').css({'background-color': 'rgba(255,255,255,1)'});\n                    this.$('.block-name.second-text').addClass('fade-out');\n                    this.$('.block-name:not(.second-text)').removeClass('fade-out');\n                }\n                else if(this.ps_container[0].scrollTop >= 1) {\n                    this.$('.block-header').css({'background-color': 'rgba(255,255,255,0.5)'});\n                    this.$('.block-name.second-text').addClass('fade-out');\n                    this.$('.block-name:not(.second-text)').removeClass('fade-out');\n                }\n                else {\n                    this.$('.block-header').css({'background-color': 'rgba(255,255,255,0)'});\n                    this.$('.block-name.second-text').text('');\n                    this.$('.block-name.second-text').addClass('fade-out');\n                    this.$('.block-name:not(.second-text)').removeClass('fade-out');\n                }\n                let bottom_block_scroll\n                if (this.$('.bottom-block'))\n                    bottom_block_scroll = this.$('.bottom-block').get(0).getBoundingClientRect().top;\n                if (bottom_block_scroll && bottom_block_scroll < 150) {\n                    this.$('.bottom-block .tabs').addClass('fixed-scroll');\n                    this.$('.btn-back').addClass('btn-top');\n                    this.$('.btn-back i').addClass('mdi-arrow-right').removeClass('mdi-close');\n                    this.$('.bottom-block .participants-search-form').addClass('fixed-scroll');\n                    this.$('.buttons-wrap').hideIf(true);\n                    this.$('.btn-edit').hideIf(true);\n                    this.$('.btn-qr-code').hideIf(true);\n                    this.$('.header-buttons .block-name:not(.second-text)').addClass('fade-out');\n                    this.$('.header-buttons .block-name.second-text').removeClass('fade-out');\n                    this.$('.header-buttons .block-name.second-text').text(this.$('.tabs:not(.participant-tabs) .list-variant .active').text())\n                }\n                else {\n                    this.$('.btn-back').removeClass('btn-top');\n                    this.$('.btn-back i').addClass('mdi-close').removeClass('mdi-arrow-right');\n                    this.$('.bottom-block .tabs').removeClass('fixed-scroll');\n                    this.$('.bottom-block .participants-search-form').removeClass('fixed-scroll');\n                    this.$('.buttons-wrap').hideIf(false);\n                    this.$('.btn-edit').hideIf(false);\n                    this.$('.btn-qr-code').hideIf(false);\n                }\n            },\n\n            clickAvatarInput: function (ev) {\n                this.$('.circle-avatar input').click();\n            },\n\n            updateMemberAvatar: function (member) {\n                let participant_id = member.get('id'),\n                    $avatar = this.$(`.circle-avatar`);\n                member.image = Images.getDefaultAvatar(member.get('nickname') || member.get('jid') || participant_id);\n                $avatar.setAvatar(member.image, this.member_details_avatar_size);\n                $avatar.removeClass('changed');\n                if (member.get('avatar')) {\n                    if (this.account.chat_settings.getHashAvatar(participant_id) == member.get('avatar') && (this.account.chat_settings.getB64Avatar(participant_id)))\n                        $avatar.setAvatar(this.account.chat_settings.getB64Avatar(participant_id), this.member_details_avatar_size);\n                    else {\n                        if (member.get('avatar_url')){\n                            $avatar.setAvatar(member.get('avatar_url'), this.member_details_avatar_size);\n                        }\n                        else {\n                            let node = Strophe.NS.PUBSUB_AVATAR_DATA + '#' + participant_id;\n                            this.contact.getAvatar(member.get('avatar'), node, (avatar) => {\n                                this.$(`.circle-avatar`).setAvatar(avatar, this.member_details_avatar_size);\n                            });\n                        }\n                    }\n                }\n                else {\n                    if (this.account.chat_settings.getHashAvatar(participant_id))\n                        $avatar.setAvatar(this.account.chat_settings.getB64Avatar(participant_id), this.member_details_avatar_size);\n                }\n            },\n\n            updateRightsView: function (ev) {\n                !$(ev.target).hasClass('non-active') && this.render(this.participant);\n            },\n\n            getMessages: function (options) {\n                let chat = this.account.chats.getChat(this.contact);\n                chat.messages_view = new xabber.ParticipantMessagesView({ model: chat, contact: this.contact, participant: this.participant.attributes });\n                chat.messages_view.messagesRequest(options, () => {\n                    xabber.body.setScreen('all-chats', {right: 'participant_messages', model: chat});\n                    this.open(this.participant, this.data_form);\n                });\n            },\n\n            changeAvatar: function (ev) {\n                let field = ev.target;\n                if (!field.files.length)\n                    return;\n                let file = field.files[0];\n                field.value = '';\n                if (file.size > constants.MAX_AVATAR_FILE_SIZE) {\n                    utils.dialogs.error(xabber.getString(\"group_settings__error__avatar_too_large\"));\n                    return;\n                } else if (!file.type.startsWith('image')) {\n                    utils.dialogs.error(xabber.getString(\"group_settings__error__wrong_image\"));\n                    return;\n                }\n\n                utils.images.getAvatarFromFile(file).done((image) => {\n                    if (image) {\n                        file.base64 = image;\n                        this.new_avatar = file;\n                        this.$('.participant-details-edit-wrap .circle-avatar').addClass('changed');\n                        this.$('.circle-avatar').setAvatar(image, this.member_details_avatar_size);\n                        this.updateSaveButton();\n                    }\n                });\n            },\n\n            changeTimerValue: function (ev) {\n                let $property_item = $(ev.target),\n                    $property_value = $property_item.closest('.select-timer').find('.property-value'),\n                    $input_item = $property_item.closest('.right-item').find('input');\n                if ($property_item.attr('data-value') !== $property_value.attr('data-value')) {\n                    $property_item.closest('.right-item').addClass('changed-timer changed');\n                    this.updateSaveButton();\n                }\n                $property_value.text($property_item.text());\n                $property_value.attr('data-value', $property_item.attr('data-value'));\n                if ($property_item.attr('data-value') === '0') {\n                    $property_value.addClass('default-value').text(xabber.getString(\"dialog_rights__button_set_timer\"));\n                } else if ($property_value.hasClass('default-value'))\n                    $property_value.removeClass('default-value');\n                if (!$input_item.prop('checked')) {\n                    $input_item.click();\n                }\n            },\n\n            onBadgeUpdated: function (participant) {\n                let badge = _.escape(participant.get('badge'));\n                this.updateBadge(badge);\n            },\n\n            updateBadge: function (badge) {\n                this.$('.badge').html(badge).switchClass('hidden', !badge);\n                this.$('.participant-info').emojify('.badge');\n                this.$('.participant-info').emojify('.participant-edit-badge');\n            },\n\n            updateButtons: function (has_changes) {\n                this.$('.btn-save-user-rights').switchClass('non-active', !has_changes);\n                this.$('.btn-save-user-rights').switchClass('fade-out', !has_changes);\n                this.$('.btn-edit-participant').switchClass('fade-out', has_changes);\n                if (has_changes) {\n                    this.$('.block-name.second-text').html(xabber.getString(\"edit_vcard\"))\n                    this.$('.block-header .details-icon').removeClass('mdi-arrow-right').addClass('mdi-close')\n                    this.$('.block-header .details-icon.parent-btn').removeClass('btn-back').addClass('btn-reset')\n                    this.$('.block-header .details-icon.child-btn').removeClass('btn-back-name').addClass('btn-reset-name')\n                    this.$('.block-header .block-name:not(.second-text)').addClass('fade-out');\n                    this.$('.block-header .block-name.second-text').removeClass('fade-out');\n                }\n                else{\n                    this.$('.block-header .details-icon').addClass('mdi-arrow-right').removeClass('mdi-close')\n                    this.$('.block-header .details-icon.parent-btn').addClass('btn-back').removeClass('btn-reset')\n                    this.$('.block-header .details-icon.child-btn').addClass('btn-back-name').removeClass('btn-reset-name')\n                    this.$('.block-header .block-name:not(.second-text)').removeClass('fade-out');\n                    this.$('.block-header .block-name.second-text').addClass('fade-out');\n                }\n            },\n\n            updateSaveButton: function () {\n                let has_changes = this.$('.changed').length;\n                this.updateButtons(has_changes);\n            },\n\n            updateNickname: function (nickname) {\n                let $member_item = this.$('.participant-details-item[data-id=\"' + this.participant.get('id') + '\"]'),\n                    $member_item_nickname = $member_item.find('.nickname');\n                $member_item_nickname.html(Strophe.xmlescape(nickname));\n                $member_item.emojify('.nickname');\n                if (nickname !== this.participant.get('nickname'))\n                    $member_item_nickname.addClass('changed');\n                else\n                    $member_item_nickname.removeClass('changed');\n                this.updateSaveButton();\n            },\n\n            editNickname: function () {\n                if (this.contact.get('private_chat') && this.account.get('jid') !== this.participant.get('jid'))\n                    return;\n                this.$('.participant-info .nickname').hide();\n                this.$('.participant-info #edit-nickname').text(this.$('.participant-info .nickname').text()).show().placeCaretAtEnd();\n            },\n\n            editBadge: function (ev) {\n                if ($(ev.target).closest('.button-wrap').hasClass('non-active'))\n                    return;\n                this.edit_badge_panel = new xabber.EditBadgeView({model: this});\n            },\n\n            checkKeydown: function (ev) {\n                if (ev && ev.keyCode === constants.KEY_ENTER) {\n                    ev.preventDefault();\n                    $(document.activeElement).blur();\n                }\n            },\n\n            checkKeyup: function (ev) {\n                let $richtextarea = $(ev.target),\n                    new_value = $richtextarea.getTextFromRichTextarea().trim();\n                if (ev.target.id === 'edit-nickname') {\n                    let has_changes = (new_value !== this.participant.get('nickname'));\n                    this.updateButtons(has_changes);\n                }\n            },\n\n            retractUserMessages: function () {\n                utils.dialogs.ask(xabber.getString(\"dialog_delete_user_messages__header\"), xabber.getString(\"dialog_delete_user_messages__header\", [this.participant.get('nickname') || this.participant.get('jid') || this.participant.get('id')]), null, { ok_button_text: xabber.getString(\"delete\")}).done((result) => {\n                    if (result) {\n                        if (this.participant.get('id')) {\n                            let group_chat = this.account.chats.getChat(this.contact);\n                            group_chat.retractMessagesByUser(this.participant.get('id'));\n                        }\n                    }\n                });\n            },\n\n            block: function () {\n                utils.dialogs.ask(xabber.getString(\"groupchat__dialog_block_member__header\"), xabber.getString(\"groupchat__dialog_block_member__confirm\", [this.participant.get('nickname')]),\n                    null, { ok_button_text: xabber.getString(\"groupchat_block\")}).done((result) => {\n                    if (result) {\n                        this.participant.block(() => {this.close();},\n                            function (error) {\n\n                                if ($(error).find('not-allowed').length)\n                                    utils.dialogs.error(xabber.getString(\"groupchat_you_have_no_permissions_to_do_it\"));\n                            });\n                    }\n                });\n            },\n\n            kick: function (ev) {\n                if ($(ev.target).closest('.button-wrap').hasClass('non-active'))\n                    return;\n                utils.dialogs.ask(xabber.getString(\"groupchat_kick_member\"), xabber.getString(\"groupchat_do_you_really_want_to_kick_membername\", [this.participant.get('nickname')]),\n                    null, { ok_button_text: xabber.getString(\"groupchat_kick\")}).done((result) => {\n                    if (result) {\n                        this.participant.kick(() => {\n                                this.close();\n                            }, (error) => {\n\n                                if ($(error).find('not-allowed').length)\n                                    utils.dialogs.error(xabber.getString(\"groupchat_you_have_no_permissions_to_do_it\"));\n                            });\n                    }\n                });\n            },\n\n            kickParticipantDialog: function (ev) {\n                if ($(ev.target).closest('.button-wrap').hasClass('non-active'))\n                    return;\n                utils.dialogs.ask_extended(xabber.getString(\"groupchat_kick_member\"), xabber.getString(\"groupchat_do_you_really_want_to_kick_membername\", [this.participant.get('nickname')]), null, { ok_button_text: xabber.getString(\"groupchat_kick\"), optional_button: 'block', optional_button_text: xabber.getString(\"groupchat_block\")}).done((result) => {\n                    if (result) {\n                        if (result === 'block'){\n                            this.participant.block(() => {\n                                this.close();\n                                },\n                                function (error) {\n\n                                    if ($(error).find('not-allowed').length)\n                                        utils.dialogs.error(xabber.getString(\"groupchat_you_have_no_permissions_to_do_it\"));\n                                });\n                        }\n                        else{\n                            this.participant.kick(() => {\n                                this.close();\n                            }, (error) => {\n\n                                if ($(error).find('not-allowed').length)\n                                    utils.dialogs.error(xabber.getString(\"groupchat_you_have_no_permissions_to_do_it\"));\n                            });\n                        }\n                    }\n                });\n            },\n\n            setVisibility: function (ev) {\n                    utils.dialogs.error('Feature not yet implemented')\n            },\n\n            setActualRights: function () {\n                this.$('.rights-wrap').html(\"\");\n                this.data_form.fields && this.data_form.fields.forEach((field) => {\n                    field = _.clone(field);\n                    if (field.type  === 'list-single' || field.type  === 'fixed' && (!field.values || field.values[0] == 0 || field.values && field.label)) {\n                        !field.values && (field.values = []);\n                        let attrs = {\n                                pretty_name: field.label,\n                                name: field.var,\n                                expires: field.values ? field.values[0] : undefined\n                            },\n                            restriction_item = $(templates.group_chats.restriction_item({name: attrs.name, pretty_name: attrs.pretty_name, type: field.type})),\n                            restriction_expire;\n                        if (field.options) {\n                            restriction_expire = $(templates.group_chats.right_expire_variants({\n                                right_name: ('default-' + attrs.name),\n                                expire_options: field.options\n                            }));\n                            restriction_item.append(restriction_expire);\n                        }\n                        this.$('.rights-wrap').append(restriction_item);\n                        if (attrs.expires) {\n                            this.actual_rights.push({name: attrs.name, expires: attrs.expires});\n                            this.$('.right-item #' + attrs.name).prop('checked', true).addClass(attrs.expires);\n                            if (attrs.expires != 0) {\n                                let $current_restriction = this.$('.right-item.restriction-' + attrs.name);\n                                if ($current_restriction.find('.select-timer .property-value').length)\n                                    $current_restriction.find('.select-timer .property-value').attr('data-value', attrs.expires)\n                                        .removeClass('default-value')\n                                        .text(moment(Number(attrs.expires)*1000).fromNow());\n                                else{\n                                    $current_restriction.append($('<div class=\"select-timer\"/>'));\n                                    $current_restriction.find('.select-timer').attr('data-value', attrs.expires)\n                                        .text(moment(Number(attrs.expires)*1000).fromNow())\n                                }\n                            }\n                        }\n                    } else if (field.type  === 'fixed')\n                        field.values && this.$('.rights-wrap').append($('<div class=\"rights-header\"/>').text(field.values[0]));\n                });\n            },\n\n            getPrivateChat: function (ev) {\n                if ($(ev.target).closest('.button-wrap').hasClass('non-active'))\n                    return;\n                let participant_jid = this.participant.get('jid'),\n                    participant_in_roster = this.account.contacts.get(participant_jid);\n                if (!participant_jid || this.contact.get('incognito_chat')) {\n                    let iq = $iq({to: this.contact.domain, type: 'set'})\n                        .c('query', {xmlns: `${Strophe.NS.GROUP_CHAT}#create`})\n                        .c('peer-to-peer', { jid: this.contact.get('jid'),  id: this.participant.get('id')});\n                    this.account.sendIQFast(iq, (iq_response) => {\n                        let group_jid = $(iq_response).find('query localpart').text() + '@' + this.contact.domain,\n                            contact = this.account.contacts.mergeContact(group_jid);\n                        contact.set('group_chat', true);\n                        contact.set('subscription_preapproved', true);\n                        contact.pres('subscribed');\n                        contact.pushInRoster(null, () => {\n                            contact.pres('subscribe');\n                            contact.getMyInfo();\n                            this.close();\n                            contact.sendPresent();\n                            this.account.chats.openChat(contact);\n                            let chat = this.account.chats.getChat(contact);\n                            chat.messages.createSystemMessage({\n                                from_jid: group_jid,\n                                message: xabber.getString(\"groupchat__private_chat__text_message_init\", [this.participant.get('nickname'), this.contact.get('jid')])\n                            });\n                        });\n                    }, (error) => {\n                        let $error = $(error),\n                            private_chat_jid = $error.find(`x[xmlns=\"${Strophe.NS.GROUP_CHAT}\"] jid`).text();\n                        if (private_chat_jid) {\n                            let contact = this.account.contacts.mergeContact(private_chat_jid),\n                                chat = this.account.chats.getChat(contact);\n                            this.close();\n                            chat && chat.trigger('open');\n                            return;\n                        }\n                        let err_text = $(error).find('text[lang=\"en\"]').text() || $(error).find('text').first().text() || xabber.getString(\"groupchat_you_have_no_permissions_to_do_it\");\n                        this.close();\n                        utils.dialogs.error(err_text);\n                    });\n                }\n                else {\n                    if (participant_in_roster)\n                        if (participant_in_roster.get('in_roster')) {\n                            this.close();\n                            participant_in_roster.trigger('open_chat', participant_in_roster);\n                            return;\n                        }\n                    this.close();\n                    xabber.add_contact_view.show({\n                        account: this.account,\n                        jid: participant_jid\n                    });\n                }\n            },\n\n            changeRights: function (ev) {\n                let $target = $(ev.target),\n                    $right_item = $target.closest('.right-item'),\n                    right_name = $target.prop('id');\n                if ($target.prop('checked')) {\n                    if (this.actual_rights && !this.actual_rights.find(right => right.name === right_name))\n                        $right_item.addClass('changed');\n                    else\n                        if ($right_item.hasClass('changed-timer'))\n                            $right_item.addClass('changed');\n                        else\n                            $right_item.removeClass('changed');\n                }\n                else {\n                    if (this.actual_rights && this.actual_rights.find(right => right.name === right_name))\n                        $right_item.addClass('changed');\n                    else {\n                        $right_item.removeClass('changed');\n                        if ($right_item.hasClass('changed-timer'))\n                            $right_item.find('.timer-item-wrap .property-value').addClass('default-value').text(xabber.getString(\"dialog_rights__button_set_timer\")).attr('data-value', \"\");\n                    }\n                }\n                this.updateSaveButton();\n            },\n\n            saveRights: function (ev) {\n                if ($(ev.target).hasClass('non-active'))\n                    return;\n                let $btn = $(ev.target),\n                    jid = this.account.get('jid'),\n                    member_id = this.participant.get('id'),\n                    $participant_avatar = this.$('.participant-details-item .circle-avatar'),\n                    nickname_value = this.$('.participant-name-input').val(),\n                    new_badge = this.$('.participant-badge-input').val(),\n                    changed_avatar = this.new_avatar,\n                    rights_changed = false,\n                    has_changes = false,\n                    iq_changes = $iq({type: 'set', to: this.contact.get('full_jid') || this.contact.get('jid')})\n                        .c('query', {xmlns: Strophe.NS.GROUP_CHAT + \"#members\"})\n                        .c('user', {xmlns: Strophe.NS.GROUP_CHAT, id: member_id});\n                this.$('.buttons-wrap .btn-save-user-rights').addClass('non-active');\n                changed_avatar && $participant_avatar.find('.preloader-wrap').addClass('visible').find('.preloader-wrapper').addClass('active');\n                if (nickname_value != this.participant.get('nickname')) {\n                    has_changes = true;\n                    iq_changes.c('nickname').t(nickname_value).up();\n                }\n                if (Array.from(new_badge).length > 32)\n                    utils.dialogs.error(xabber.getString(\"groupchat__set_badge__error_length\"));\n                else {\n                    if (new_badge != this.participant.get('badge')) {\n                        has_changes = true;\n                        iq_changes.c('badge').t(new_badge).up();\n                    }\n                }\n                this.$('.right-item').each((idx, right_item) => {\n                    if ($(right_item).hasClass('changed')) {\n                        let $right_item = $(right_item),\n                            right_name = $right_item.find('.field input')[0].id;\n                        if ($right_item.find('.field input:checked').val()) {\n                            let right_expire = $right_item.find('.select-timer .timer-item-wrap .property-value').attr('data-value'),\n                                field = this.data_form.fields.find(f => f.var === right_name),\n                                field_idx = this.data_form.fields.indexOf(field);\n                            field.values = [right_expire];\n                            this.data_form.fields[field_idx] = field;\n                            rights_changed = true;\n                        }\n                        else {\n                            let field = this.data_form.fields.find(f => f.var === right_name);\n                            if (field.values.length) {\n                                let field_idx = this.data_form.fields.indexOf(field);\n                                field.values = [];\n                                this.data_form.fields[field_idx] = field;\n                                rights_changed = true;\n                            }\n                        }\n                    }\n                });\n                if (changed_avatar)\n                    this.contact.pubAvatar(changed_avatar, ('#' + member_id), () => {\n                        $participant_avatar.find('.preloader-wrap').removeClass('visible').find('.preloader-wrapper').removeClass('active');\n                        // this.$(`.participant-details-item[data-id=\"${member_id}\"] .circle-avatar`).setAvatar(changed_avatar.base64, this.member_details_avatar_size);\n                        this.$(`.circle-avatar`).setAvatar(changed_avatar.base64, this.member_details_avatar_size);\n                        this.close();\n                    }, function (error) {\n                        $participant_avatar.find('.preloader-wrap').removeClass('visible').find('.preloader-wrapper').removeClass('active');\n\n                        let error_text = $(error).find('text').text() || xabber.getString(\"groupchat_you_have_no_permissions_to_do_it\");\n                        !has_changes && utils.dialogs.error(error_text);\n                        this.close();\n                    });\n                if (has_changes)\n                    this.account.sendIQFast(iq_changes,\n                        () => {\n                            this.$('.buttons-wrap button').removeClass('non-active');\n                            this.participant.set('nickname', nickname_value);\n                            this.close();\n                        },\n                        (error) => {\n                            this.$('.buttons-wrap button').removeClass('non-active');\n                            this.close();\n                            if ($(error).find('not-allowed').length)\n                                utils.dialogs.error(xabber.getString(\"groupchat_you_have_no_permissions_to_do_it\"));\n                        });\n                if (rights_changed) {\n                    let iq_rights_changes = $iq({type: 'set', to: this.contact.get('full_jid') || this.contact.get('jid')})\n                        .c('query', {xmlns: Strophe.NS.GROUP_CHAT + '#rights'});\n                    iq_rights_changes = this.account.addDataFormToStanza(iq_rights_changes, this.data_form);\n                    this.account.sendIQFast(iq_rights_changes, () => {\n                            this.close();\n                        },\n                        (error) => {\n                            this.close();\n                            if ($(error).find('not-allowed').length)\n                                utils.dialogs.error(xabber.getString(\"groupchat_you_have_no_permissions_to_do_it\"));\n                        });\n                }\n                $btn.blur();\n            }\n        });\n\n        xabber.EditBadgeView = xabber.BasicView.extend({\n            className: 'modal edit-badge',\n            template: templates.group_chats.badge_edit_view,\n\n            events: {\n                \"click .btn-cancel\": \"close\",\n                \"click .btn-save\": \"saveNewBadge\",\n                \"keydown .badge-text\": \"checkKey\"\n            },\n\n            _initialize: function () {\n                this.account = this.model.account;\n                this.contact = this.model.contact;\n                this.participant = this.model.participant;\n                this.$el.openModal({\n                    ready: () => {\n                        if (this.participant.get('badge'))\n                            this.typeEmoticon(this.participant.get('badge'));\n                        else\n                            this.$('.badge-text').focus();\n                    },\n                    complete: () => {\n                        this.$el.detach();\n                        this.data.set('visible', false);\n                    }\n                });\n                let $insert_emoticon = this.$('.insert-emoticon'),\n                    $emoji_panel_wrap = this.$('.emoticons-panel-wrap'),\n                    $emoji_panel = this.$('.emoticons-panel'),\n                    _timeout;\n\n                for (let emoji_list in Emoji.all) {\n                    let $emoji_list_wrap = $(`<div class=\"emoji-list-wrap\"/>`),\n                        list_name = emoji_list.replace(/ /g, '_');\n                    $(`<div id=${list_name} class=\"emoji-list-header\">${xabber.getString(constants.EMOJI_LIST_NAME(emoji_list))}</div>`).appendTo($emoji_list_wrap);\n                    _.each(Emoji.all[emoji_list], function (emoji) {\n                        $('<div class=\"emoji-wrap\"/>').html(\n                            emoji.emojify({emoji_size: 24, sprite: list_name})\n                        ).appendTo($emoji_list_wrap);\n                    });\n                    $emoji_list_wrap.appendTo($emoji_panel);\n                    $emoji_panel.siblings('.emoji-menu').append(Emoji.all[emoji_list][0].emojify({href: list_name, title: constants.EMOJI_LIST_NAME(emoji_list), tag_name: 'a', emoji_size: 20}));\n                }\n                $emoji_panel.perfectScrollbar(\n                    _.extend({theme: 'item-list'}, xabber.ps_settings));\n                this.$('.emoji-menu .emoji').click((ev) => {\n                    $emoji_panel[0].scrollTop = this.$('.emoji-list-wrap ' + ev.target.attributes.href.value)[0].offsetTop - 4;\n                });\n                $insert_emoticon.hover((ev) => {\n                    if (ev && ev.preventDefault) { ev.preventDefault(); }\n                    $emoji_panel_wrap.addClass('opened');\n                    if (_timeout) {\n                        clearTimeout(_timeout);\n                    }\n                    $emoji_panel.perfectScrollbar('update');\n                }, (ev) => {\n                    if (ev && ev.preventDefault) { ev.preventDefault(); }\n                    if (_timeout) {\n                        clearTimeout(_timeout);\n                    }\n                    _timeout = setTimeout(function () {\n                        if (!$emoji_panel_wrap.is(':hover')) {\n                            $emoji_panel_wrap.removeClass('opened');\n                        }\n                    }, 800);\n                });\n                $emoji_panel_wrap.hover(null, (ev) => {\n                    if (ev && ev.preventDefault) { ev.preventDefault(); }\n                    if (_timeout) {\n                        clearTimeout(_timeout);\n                    }\n                    _timeout = setTimeout(function () {\n                        $emoji_panel_wrap.removeClass('opened');\n                    }, 200);\n                });\n                $emoji_panel_wrap.mousedown((ev) => {\n                    if (ev && ev.preventDefault) { ev.preventDefault(); }\n                    if (ev.button)\n                        return;\n                    let $target = $(ev.target).closest('.emoji-wrap').find('.emoji');\n                    $target.length && this.typeEmoticon($target.data('emoji'));\n                });\n            },\n\n            close: function () {\n                this.$el.closeModal({ complete: () => {\n                        this.$el.detach();\n                        this.data.set('visible', false);\n                }});\n            },\n\n            saveNewBadge: function () {\n                let new_badge = this.$('.badge-text').getTextFromRichTextarea();\n                if (Array.from(new_badge).length > 32)\n                    this.$('.modal-content .error').text(xabber.getString(\"groupchat__set_badge__error_length\"));\n                else {\n                    if (new_badge != this.participant.get('badge')) {\n                        let iq_changes = $iq({type: 'set', to: this.contact.get('full_jid') || this.contact.get('jid')})\n                            .c('query', {xmlns: `${Strophe.NS.GROUP_CHAT}#members`})\n                            .c('user', {xmlns: Strophe.NS.GROUP_CHAT, id: this.participant.get('id')})\n                            .c('badge').t(new_badge);\n                        this.account.sendIQFast(iq_changes, () => {\n                            this.model.updateBadge(new_badge);\n                            this.close();\n                        }, () => {\n                            this.$('.modal-content .error').text(xabber.getString(\"groupchat_you_have_no_permissions_to_do_it\"));\n                        })\n                    }\n                }\n            },\n\n            typeEmoticon: function (emoji) {\n                let emoji_node = emoji.emojify({tag_name: 'span'}),\n                    $textarea = this.$('.badge-text');\n                $textarea.focus().pasteHtmlAtCaret(emoji_node);\n            },\n\n            checkKey: function (ev) {\n                if (ev.keyCode === constants.KEY_ENTER) {\n                    ev.preventDefault();\n                    this.saveNewBadge();\n                }\n            }\n\n        });\n\n        xabber.DefaultRestrictionsView = xabber.BasicView.extend({\n            className: 'modal dialog-modal edit-default-restrictions',\n            template: templates.group_chats.default_restrictions,\n            events: {\n                \"click .btn-default-restrictions-save\": \"saveChanges\",\n                \"click .btn-default-restrictions-cancel\": \"close\",\n                \"change #default_restriction_expires\": \"changeExpiresTime\",\n                \"click .group-info-editor .property-variant\": \"changePropertyValue\",\n                \"click .select-timer .property-variant\": \"changeTimerValue\",\n                \"click .clickable-field input\": \"changeRestriction\",\n                \"keyup .clickable-field input\": \"keyUpInput\",\n                \"change .clickable-field input\": \"updateSaveButton\"\n            },\n\n            _initialize: function () {\n                this.contact = this.model;\n                this.account = this.contact.account;\n            },\n\n            open: function () {\n                this.update(() => {\n                    this.$el.openModal({\n                        ready: () => {\n                            this.$('.select-timer .dropdown-button').dropdown({\n                                inDuration: 100,\n                                outDuration: 100,\n                                constrainWidth: false,\n                                hover: false,\n                                alignment: 'left'\n                            });\n                            this.updateScrollBar();\n                        },\n                        complete: () => {\n                            this.$el.detach();\n                            this.data.set('visible', false);\n                        }\n                    });\n                });\n            },\n\n            close: function () {\n                this.$el.closeModal({\n                    complete: () => {\n                        this.hide.bind(this);\n                    }\n                });\n            },\n\n            update: function (callback) {\n                this.$('.btn-default-restrictions-save').addClass('non-active');\n                this.default_restrictions = [];\n                this.actual_default_restrictions = [];\n                this.$('button').blur();\n                let iq_get_rights = $iq({type: 'get', to: this.contact.get('full_jid') || this.contact.get('jid')})\n                    .c('query', {xmlns: `${Strophe.NS.GROUP_CHAT}#default-rights`});\n                this.account.sendFast(iq_get_rights, (iq_all_rights) => {\n                    this.showDefaultRestrictions(iq_all_rights);\n                    callback && callback();\n                }, () => {\n                    utils.callback_popup_message(xabber.getString(\"groupchat_you_have_no_permissions_to_do_it\"), 3000);\n                });\n            },\n\n            updateSaveButton: function () {\n                let has_changes = false;\n                this.$('.default-restrictions-list-wrap .right-item').each((idx, item) => {\n                    let $item = $(item),\n                        restriction_name = $item.find('input').attr('id'),\n                        restriction_expires = $item.find('.select-timer .property-value').attr('data-value');\n                    restriction_name = restriction_name.slice(8, restriction_name.length);\n                    if (!this.actual_default_restrictions.find(restriction => ((restriction.name == restriction_name) && (restriction.expires == restriction_expires)))) {\n                        if ($item.find('input').prop('checked'))\n                            has_changes = true;\n                        else if (this.actual_default_restrictions.find(restriction => restriction.name == restriction_name))\n                            has_changes = true;\n                    }\n                });\n                this.$('.btn-default-restrictions-save').switchClass('non-active', !has_changes);\n            },\n\n            changeRestriction: function (ev) {\n                let $target = $(ev.target);\n                if (!$target.prop('checked')) {\n                    $target.closest('.right-item').find('.select-timer .property-value').attr('data-value', \"\").addClass('default-value')\n                        .text(xabber.getString(\"dialog_rights__button_set_timer\"));\n                }\n            },\n\n            keyUpInput: function (ev) {\n                if (ev && ev.keyCode === constants.KEY_ENTER)\n                    $(ev.target).click();\n            },\n\n            changePropertyValue: function (ev) {\n                let $property_item = $(ev.target),\n                    $property_value = $property_item.closest('.property-field').find('.property-value');\n                $property_value.text($property_item.text());\n                $property_value.attr('data-value', $property_item.attr('data-value'));\n            },\n\n            changeTimerValue: function (ev) {\n                let $property_item = $(ev.target),\n                    $property_value = $property_item.closest('.select-timer').find('.property-value'),\n                    $input_item = $property_item.closest('.right-item').find('input');\n                $property_value.text($property_item.text());\n                $property_value.attr('data-value', $property_item.attr('data-value'));\n                if ($property_item.attr('data-value') == 0) {\n                    $property_value.addClass('default-value');\n                    $property_value.text(xabber.getString(\"dialog_rights__button_set_timer\"));\n                } else if ($property_value.hasClass('default-value'))\n                    $property_value.removeClass('default-value');\n                if (!$input_item.prop('checked'))\n                    $input_item.prop('checked', true);\n                this.updateSaveButton();\n            },\n\n            showDefaultRestrictions: function (iq_all_rights) {\n                let data_form = this.account.parseDataForm($(iq_all_rights).find(`x[xmlns=\"${Strophe.NS.DATAFORM}\"]`));\n                data_form && (this.default_restrictions = _.clone(data_form));\n                data_form.fields.forEach((field) => {\n                    if (field.type === 'fixed' || field.type === 'hidden')\n                        return;\n                    let attrs = {\n                            pretty_name: field.label,\n                            name: field.var,\n                            expires: field.values ? field.values[0] : undefined\n                        },\n                        view = this.$('.default-restrictions-list-wrap .right-item.restriction-default-' + attrs.name),\n                        restriction_item = $(templates.group_chats.restriction_item({name: ('default-' + attrs.name), pretty_name: attrs.pretty_name, type: field.type})),\n                        restriction_expire = $(templates.group_chats.right_expire_variants({right_name: ('default-' + attrs.name), expire_options: field.options}));\n                    if (view.length)\n                        view.detach();\n                    restriction_item.append(restriction_expire);\n                    this.$('.default-restrictions-list-wrap').append(restriction_item);\n                    if (attrs.expires) {\n                        this.actual_default_restrictions.push({name: attrs.name, expires: attrs.expires});\n                        this.$('.right-item #default-' + attrs.name).prop('checked', true).addClass(attrs.expires);\n                        if (attrs.expires != 0) {\n                            let $current_restriction = this.$('.right-item.restriction-default-' + attrs.name);\n                            $current_restriction.find('.select-timer .property-value').attr('data-value', attrs.expires)\n                                .removeClass('default-value')\n                                .text(field.options.find(x => x.value === attrs.expires).label);\n                        }\n                    }\n                });\n            },\n\n            saveChanges: function () {\n                if (this.$('.btn-default-restrictions-save').hasClass('non-active'))\n                    return;\n                this.$('button').blur();\n                let iq_change_default_rights = $iq({to: this.contact.get('full_jid') || this.contact.get('jid'), type: 'set'})\n                        .c('query', {xmlns: `${Strophe.NS.GROUP_CHAT}#default-rights`}),\n                    has_new_default_restrictions = false,\n                    data_form = _.clone(this.default_restrictions);\n                this.$('.default-restrictions-list-wrap .right-item').each((idx, item) => {\n                    let $item = $(item),\n                        restriction_name = $item.find('input').attr('id'),\n                        restriction_expires = $item.find('.select-timer .property-value').attr('data-value');\n                    restriction_name = restriction_name.slice(8, restriction_name.length);\n                    if (!this.actual_default_restrictions.find(restriction => ((restriction.name == restriction_name) && (restriction.expires == restriction_expires)))) {\n                        if ($item.find('input').prop('checked')) {\n                            let field = data_form.fields.find(f => f.var === restriction_name),\n                                field_idx = data_form.fields.indexOf(field);\n                            field.values = [restriction_expires];\n                            data_form.fields[field_idx] = field;\n                            has_new_default_restrictions = true;\n                        }\n                        else if (this.actual_default_restrictions.find(restriction => restriction.name == restriction_name)) {\n                            let field = data_form.fields.find(f => f.var === restriction_name),\n                                field_idx = data_form.fields.indexOf(field);\n                            field.values = [\"\"];\n                            data_form.fields[field_idx] = field;\n                            has_new_default_restrictions = true;\n                        }\n                    }\n                });\n\n                if (has_new_default_restrictions) {\n                    this.account.addDataFormToStanza(iq_change_default_rights, data_form);\n                    this.account.sendIQFast(iq_change_default_rights, () => {\n                        this.close();\n                    }, (error) => {\n                        let err_text = $(error).find('error text').text() || xabber.getString(\"groupchat_you_have_no_permissions_to_do_it\");\n                        utils.dialogs.error(err_text);\n                        this.close();\n                    });\n                }\n            },\n\n            changeExpiresTime: function (ev) {\n                let expire_time_item = $(ev.target),\n                    new_expire_time = expire_time_item.val(),\n                    $restriction_item = expire_time_item.prev();\n                if (expire_time_item.val() == '0')\n                    $restriction_item .find('.restriction-description').text(xabber.getString(\"groupchat__rights_timer__indefinitely\"));\n                else\n                    $restriction_item .find('.restriction-description').text(xabber.getString(\"groupchat__rights_timer__text_expire\", [Number(new_expire_time)]));\n                $restriction_item .find('input').removeClass().addClass(new_expire_time);\n                expire_time_item.remove();\n            }\n        });\n\n        xabber.DefaultRestrictionsRightView = xabber.BasicView.extend({\n            className: 'modal dialog-modal edit-default-restrictions',\n            template: templates.group_chats.default_restrictions_right,\n            events: {\n                \"click .btn-default-restrictions-save\": \"saveChanges\",\n                \"click .btn-default-restrictions-cancel\": \"hideRestrictions\",\n                \"click .btn-back\": \"hideRestrictions\",\n                \"click .btn-reset\": \"showRestrictions\",\n                \"change #default_restriction_expires\": \"changeExpiresTime\",\n                \"click .group-info-editor .property-variant\": \"changePropertyValue\",\n                \"click .select-timer .property-variant\": \"changeTimerValue\",\n                \"click .clickable-field input\": \"changeRestriction\",\n                \"keyup .clickable-field input\": \"keyUpInput\",\n                \"change .clickable-field input\": \"updateSaveButton\"\n            },\n\n            _initialize: function () {\n                this.contact = this.model;\n                this.account = this.contact.account;\n                this.model.set('restrictions_hidden', true)\n            },\n\n            render: function () {\n                this.$el.html(this.template(_.extend({view: this}, constants)));\n                this.$('.restrictions-wrap').hideIf(this.model.get('restrictions_hidden'))\n            },\n\n            showRestrictions: function (ev) {\n                this.model.set('restrictions_hidden', false);\n                this.update(() => {\n                    this.$('.select-timer .dropdown-button').dropdown({\n                        inDuration: 100,\n                        outDuration: 100,\n                        constrainWidth: false,\n                        hover: false,\n                        alignment: 'left'\n                    });\n                    this.$('.restrictions-wrap').hideIf(this.model.get('restrictions_hidden'))\n                    this.updateSaveButton()\n                });\n            },\n\n            hideRestrictions: function (ev) {\n                this.parent.hideRestrictions();\n            },\n\n            open: function () {\n                this.update(() => {\n                    this.$el.openModal({\n                        ready: () => {\n                            this.$('.select-timer .dropdown-button').dropdown({\n                                inDuration: 100,\n                                outDuration: 100,\n                                constrainWidth: false,\n                                hover: false,\n                                alignment: 'left'\n                            });\n                            this.updateScrollBar();\n                        },\n                        complete: () => {\n                            this.$el.detach();\n                            this.data.set('visible', false);\n                        }\n                    });\n                });\n            },\n\n            update: function (callback) {\n                this.$('.btn-default-restrictions-save').addClass('fade-out');\n                this.default_restrictions = [];\n                this.actual_default_restrictions = [];\n                this.$('button').blur();\n                let iq_get_rights = $iq({type: 'get', to: this.contact.get('full_jid') || this.contact.get('jid')})\n                    .c('query', {xmlns: `${Strophe.NS.GROUP_CHAT}#default-rights`});\n                this.account.sendFast(iq_get_rights, (iq_all_rights) => {\n                    this.showDefaultRestrictions(iq_all_rights);\n                    callback && callback();\n                }, () => {\n\n                    utils.callback_popup_message(xabber.getString(\"groupchat_you_have_no_permissions_to_do_it\"), 3000);\n                });\n            },\n\n            updateSaveButton: function () {\n                let has_changes = false;\n                this.$('.default-restrictions-list-wrap .right-item').each((idx, item) => {\n                    let $item = $(item),\n                        restriction_name = $item.find('input').attr('id'),\n                        restriction_expires = $item.find('.select-timer .property-value').attr('data-value');\n                    restriction_name = restriction_name.slice(8, restriction_name.length);\n                    if (!this.actual_default_restrictions.find(restriction => ((restriction.name == restriction_name) && (restriction.expires == restriction_expires)))) {\n                        if ($item.find('input').prop('checked'))\n                            has_changes = true;\n                        else if (this.actual_default_restrictions.find(restriction => restriction.name == restriction_name))\n                            has_changes = true;\n                    }\n                });\n                this.$('.btn-default-restrictions-save').switchClass('fade-out', !has_changes);\n                if (has_changes) {\n                    this.$('.block-name.second-text').html(xabber.getString(\"edit_vcard\"))\n                    this.$('.restrictions-header .details-icon').removeClass('mdi-arrow-right').addClass('mdi-close')\n                    this.$('.restrictions-header .details-icon').removeClass('btn-back').addClass('btn-reset')\n                    this.$('.restrictions-header .block-name:not(.second-text)').addClass('fade-out');\n                    this.$('.restrictions-header .block-name.second-text').removeClass('fade-out');\n                }\n                else{\n                    this.$('.restrictions-header .details-icon').addClass('mdi-arrow-right').removeClass('mdi-close')\n                    this.$('.restrictions-header .details-icon').addClass('btn-back').removeClass('btn-reset')\n                    this.$('.restrictions-header .block-name:not(.second-text)').removeClass('fade-out');\n                    this.$('.restrictions-header .block-name.second-text').addClass('fade-out');\n                }\n            },\n\n            changeRestriction: function (ev) {\n                let $target = $(ev.target);\n                if (!$target.prop('checked')) {\n                    $target.closest('.right-item').find('.select-timer .property-value').attr('data-value', \"\").addClass('default-value')\n                        .text(xabber.getString(\"dialog_rights__button_set_timer\"));\n                }\n            },\n\n            keyUpInput: function (ev) {\n                if (ev && ev.keyCode === constants.KEY_ENTER)\n                    $(ev.target).click();\n            },\n\n            changePropertyValue: function (ev) {\n                let $property_item = $(ev.target),\n                    $property_value = $property_item.closest('.property-field').find('.property-value');\n                $property_value.text($property_item.text());\n                $property_value.attr('data-value', $property_item.attr('data-value'));\n            },\n\n            changeTimerValue: function (ev) {\n                let $property_item = $(ev.target),\n                    $property_value = $property_item.closest('.select-timer').find('.property-value'),\n                    $input_item = $property_item.closest('.right-item').find('input');\n                $property_value.text($property_item.text());\n                $property_value.attr('data-value', $property_item.attr('data-value'));\n                if ($property_item.attr('data-value') == 0) {\n                    $property_value.addClass('default-value');\n                    $property_value.text(xabber.getString(\"dialog_rights__button_set_timer\"));\n                } else if ($property_value.hasClass('default-value'))\n                    $property_value.removeClass('default-value');\n                if (!$input_item.prop('checked'))\n                    $input_item.prop('checked', true);\n                this.updateSaveButton();\n            },\n\n            showDefaultRestrictions: function (iq_all_rights) {\n                let data_form = this.account.parseDataForm($(iq_all_rights).find(`x[xmlns=\"${Strophe.NS.DATAFORM}\"]`));\n                data_form && (this.default_restrictions = _.clone(data_form));\n                data_form.fields.forEach((field) => {\n                    if (field.type === 'fixed' || field.type === 'hidden')\n                        return;\n                    let attrs = {\n                            pretty_name: field.label,\n                            name: field.var,\n                            expires: field.values ? field.values[0] : undefined\n                        },\n                        view = this.$('.default-restrictions-list-wrap .right-item.restriction-default-' + attrs.name),\n                        restriction_item = $(templates.group_chats.restriction_item({name: ('default-' + attrs.name), pretty_name: attrs.pretty_name, type: field.type})),\n                        restriction_expire = $(templates.group_chats.right_expire_variants({right_name: ('default-' + attrs.name), expire_options: field.options}));\n                    if (view.length)\n                        view.detach();\n                    restriction_item.append(restriction_expire);\n                    this.$('.default-restrictions-list-wrap').append(restriction_item);\n                    if (attrs.expires) {\n                        this.actual_default_restrictions.push({name: attrs.name, expires: attrs.expires});\n                        this.$('.right-item #default-' + attrs.name).prop('checked', true).addClass(attrs.expires);\n                        if (attrs.expires != 0) {\n                            let $current_restriction = this.$('.right-item.restriction-default-' + attrs.name);\n                            $current_restriction.find('.select-timer .property-value').attr('data-value', attrs.expires)\n                                .removeClass('default-value')\n                                .text(field.options.find(x => x.value === attrs.expires).label);\n                        }\n                    }\n                });\n            },\n\n            saveChanges: function () {\n                if (this.$('.btn-default-restrictions-save').hasClass('fade-out'))\n                    return;\n                this.$('.btn-default-restrictions-save').addClass('fade-out')\n                this.$('.edit-save-preloader.preloader-wrap').addClass('visible').find('.preloader-wrapper').addClass('active');\n                this.$('button').blur();\n                let iq_change_default_rights = $iq({to: this.contact.get('full_jid') || this.contact.get('jid'), type: 'set'})\n                        .c('query', {xmlns: `${Strophe.NS.GROUP_CHAT}#default-rights`}),\n                    has_new_default_restrictions = false,\n                    data_form = _.clone(this.default_restrictions);\n                this.$('.default-restrictions-list-wrap .right-item').each((idx, item) => {\n                    let $item = $(item),\n                        restriction_name = $item.find('input').attr('id'),\n                        restriction_expires = $item.find('.select-timer .property-value').attr('data-value');\n                    restriction_name = restriction_name.slice(8, restriction_name.length);\n                    if (!this.actual_default_restrictions.find(restriction => ((restriction.name == restriction_name) && (restriction.expires == restriction_expires)))) {\n                        if ($item.find('input').prop('checked')) {\n                            let field = data_form.fields.find(f => f.var === restriction_name),\n                                field_idx = data_form.fields.indexOf(field);\n                            field.values = [restriction_expires];\n                            data_form.fields[field_idx] = field;\n                            has_new_default_restrictions = true;\n                        }\n                        else if (this.actual_default_restrictions.find(restriction => restriction.name == restriction_name)) {\n                            let field = data_form.fields.find(f => f.var === restriction_name),\n                                field_idx = data_form.fields.indexOf(field);\n                            field.values = [\"\"];\n                            data_form.fields[field_idx] = field;\n                            has_new_default_restrictions = true;\n                        }\n                    }\n                });\n\n                if (has_new_default_restrictions) {\n                    this.account.addDataFormToStanza(iq_change_default_rights, data_form);\n                    this.account.sendIQFast(iq_change_default_rights, () => {\n                        this.$('.edit-save-preloader.preloader-wrap').removeClass('visible').find('.preloader-wrapper').removeClass('active');\n                        this.hideRestrictions();\n                    }, (error) => {\n\n                        let err_text = $(error).find('error text').text() || xabber.getString(\"groupchat_you_have_no_permissions_to_do_it\");\n                        utils.dialogs.error(err_text);\n                        this.$('.edit-save-preloader.preloader-wrap').removeClass('visible').find('.preloader-wrapper').removeClass('active');\n                        this.hideRestrictions();\n                    });\n                }\n            },\n\n            changeExpiresTime: function (ev) {\n                let expire_time_item = $(ev.target),\n                    new_expire_time = expire_time_item.val(),\n                    $restriction_item = expire_time_item.prev();\n                if (expire_time_item.val() == '0')\n                    $restriction_item .find('.restriction-description').text(xabber.getString(\"groupchat__rights_timer__indefinitely\"));\n                else\n                    $restriction_item .find('.restriction-description').text(xabber.getString(\"groupchat__rights_timer__text_expire\", [Number(new_expire_time)]));\n                $restriction_item .find('input').removeClass().addClass(new_expire_time);\n                expire_time_item.remove();\n            }\n        });\n\n        xabber.Participant = Backbone.Model.extend({\n            idAttribute: 'id',\n\n            initialize: function (_attrs, options) {\n                let attrs = _.clone(_attrs);\n                this.model = options.model;\n                this.contact = options.contact ? options.contact : this.model.contact;\n                this.account = this.contact.account;\n                this.on(\"change:avatar\", this.getBase64Avatar, this);\n                this.set(attrs);\n                this.getBase64Avatar();\n            },\n\n            getBase64Avatar: function () {\n                if (!this.get('id'))\n                    return;\n                if (this.get('avatar')) {\n                    let cached_info = this.account.chat_settings.getAvatarInfoById(this.get('id'));\n                    if (cached_info) {\n                        if (cached_info.avatar_hash == this.get('avatar')) {\n                            this.set('b64_avatar', cached_info.avatar_b64);\n                            (this.get('jid') === this.account.get('jid')) && this.contact.trigger('update_my_info');\n                            return;\n                        }\n                    }\n                    if (this.get('avatar_url')){\n                        this.account.chat_settings.updateCachedAvatars(this.get('id'), this.get('avatar'), this.get('avatar_url'));\n                        this.set('b64_avatar', this.get('avatar_url'));\n                        (this.get('jid') === this.account.get('jid')) && this.contact.trigger('update_my_info');\n\n                    } else {\n                        let node = Strophe.NS.PUBSUB_AVATAR_DATA + '#' + this.get('id');\n                        this.contact.getAvatar(this.get('avatar'), node, (avatar) => {\n                            this.account.chat_settings.updateCachedAvatars(this.get('id'), this.get('avatar'), avatar);\n                            this.set('b64_avatar', avatar);\n                            (this.get('jid') === this.account.get('jid')) && this.contact.trigger('update_my_info');\n                        });\n\n                    }\n                }\n            },\n\n            kick: function (callback, errback) {\n                let id = this.get('id'),\n                    jid = this.get('jid'),\n                    iq = $iq({type: 'set', to: this.contact.get('full_jid') || this.contact.get('jid')})\n                        .c('kick', {xmlns: Strophe.NS.GROUP_CHAT});\n                if (jid)\n                    iq.c('jid').t(jid);\n                else\n                    iq.c('id').t(id);\n                this.account.sendIQFast(iq, () => {\n                    callback && callback();\n                }, (err) => {\n                    errback && errback(err);\n                });\n            },\n\n            block: function (callback, errback) {\n                let id = this.get('id'),\n                    iq = $iq({type: 'set', to: this.contact.get('full_jid') || this.contact.get('jid')})\n                        .c('block', {xmlns: `${Strophe.NS.GROUP_CHAT}#block`})\n                        .c('id').t(id);\n                this.account.sendIQFast(iq, () => {\n                    callback && callback();\n                }, function (err) {\n                    errback && errback(err);\n                });\n            }\n        });\n\n        xabber.Participants = Backbone.Collection.extend({\n            model: xabber.Participant,\n            comparator: 'nickname',\n\n            initialize: function (models, options) {\n                this.contact = options.contact;\n                this.account = this.contact.account;\n                this.version = this.account.groupchat_settings.getParticipantsListVersion(this.contact.get('jid'));\n                this.getCachedParticipants();\n                this.contact.on(\"update_participants\", this.updateParticipants, this);\n                this.on(\"change:nickname\", this.sort, this);\n            },\n\n            updateVersion: function () {\n                this.version = this.account.groupchat_settings.getParticipantsListVersion(this.contact.get('jid')) || this.version;\n            },\n\n            getCachedParticipants: function () {\n                this.account.groupchat_settings.getParticipantsList(this.contact.get('jid')).forEach((participant) => {\n                    this.mergeParticipant(participant);\n                });\n            },\n\n            mergeParticipant: function (attrs) {\n                if (typeof attrs !== \"object\")\n                    attrs = {id: attrs};\n                let participant = this.get(attrs.id);\n                if (participant)\n                    participant.set(attrs);\n                else {\n                    participant = this.create(attrs, {model: this});\n                }\n                return participant;\n            },\n\n            resetParticipants: function () {\n                this.version = 0;\n                _.each(_.clone(this.models), function (participant) {\n                    participant.destroy();\n                });\n            },\n\n            getRights: function (rights) {\n                let pretty_rights = [];\n                $(rights).each((idx, permission) => {\n                    let name = $(permission).attr('name'),\n                        pretty_name = $(permission).attr('translation'),\n                        issued_time = $(permission).attr('issued-at'),\n                        expires_time = $(permission).attr('expires');\n                    pretty_rights.push({\n                        name: name,\n                        pretty_name: pretty_name,\n                        issued_time: issued_time,\n                        expires_time: expires_time\n                    });\n                });\n                return pretty_rights;\n            },\n\n            updateParticipants: function () {\n                this.participantsRequest({version: this.version}, () => {\n                    this.trigger(\"participants_updated\");\n                    chat = this.account.chats.getChat(this.contact);\n                    if (chat.item_view) {\n                        if (!chat.item_view.content)\n                            chat.item_view.content = new xabber.ChatContentView({chat_item: chat.item_view});\n                        chat.item_view.content.updatePinnedMessage()\n                    }\n                });\n            },\n\n            participantsRequest: function (options, callback, errback) {\n                options = options || {};\n                let participant_id = options.id,\n                    version = options.version || 0,\n                    iq = $iq({to: this.contact.get('full_jid'), type: 'get'});\n                if (participant_id != undefined) {\n                    if (options.properties)\n                        iq.c('query', {xmlns: `${Strophe.NS.GROUP_CHAT}#members`, id: participant_id});\n                    else\n                        iq.c('query', {xmlns: `${Strophe.NS.GROUP_CHAT}#rights`}).c('user', {xmlns: Strophe.NS.GROUP_CHAT, id: participant_id});\n                }\n                else\n                    iq.c('query', {xmlns: `${Strophe.NS.GROUP_CHAT}#members`, version: version});\n                this.account.sendFast(iq, (response) => {\n                    let $response = $(response),\n                        version = $response.find('query').attr('version');\n                    version && (this.version = Number(version));\n                    $response.find(`query user`).each((idx, item) => {\n                        let $item = $(item),\n                            subscription = $item.find('subscription').text(),\n                            id = $item.find('id').text();\n                        if (subscription === 'none') {\n                            this.get(id) && this.get(id).destroy();\n                            this.account.groupchat_settings.removeParticipantFromList(this.get('jid'), id);\n                        }\n                        else\n                            this.createFromStanza($item);\n                    });\n                    callback && callback(response);\n                }, (error) => {\n                    errback && errback(error);\n                });\n            },\n\n            search: function (query) {\n                let list = [];\n                this.models.forEach((participant) => {\n                    let jid = participant.get('jid');\n                    if (query) {\n                        query = query.toLowerCase();\n                        let nickname = participant.get('nickname');\n                        if (jid && jid.toLowerCase().indexOf(query) > -1 || nickname && nickname.toLowerCase().indexOf(query) > -1)\n                            list.push(participant);\n                    } else\n                        list.push(participant);\n                });\n                return list;\n            },\n\n            createFromStanza: function ($item) {\n                let jid = $item.find('jid').text(),\n                    nickname = $item.find('nickname').text(),\n                    id = $item.attr('id'),\n                    badge = $item.find('badge').text(),\n                    present = $item.find('present').text(),\n                    photo = $item.find(`metadata[xmlns=\"${Strophe.NS.PUBSUB_AVATAR_METADATA}\"]`).find('info').attr('id'),\n                    photo_url = $item.find(`metadata[xmlns=\"${Strophe.NS.PUBSUB_AVATAR_METADATA}\"]`).find('info').attr('url'),\n                    role = $item.find('role').text();\n                !nickname.trim().length && (nickname = jid || id);\n\n                let attrs = {\n                    jid: jid,\n                    id: id,\n                    avatar: photo,\n                    avatar_url: photo_url,\n                    nickname: nickname,\n                    badge: badge,\n                    present: present,\n                    role: role\n                };\n\n                let participant = this.mergeParticipant(attrs);\n                (this.account.get('jid') === participant.get('jid')) && (this.contact.my_info = participant) && this.contact.trigger('update_my_info');\n                this.account.groupchat_settings.updateParticipant(this.contact.get('jid'), attrs);\n                return participant;\n            }\n        });\n\n        xabber.GroupChatSettings = Backbone.ModelWithStorage.extend({\n            defaults: {\n                participants_lists: []\n            },\n\n            getParticipantsListVersion: function (jid) {\n                let all_participants_lists = _.clone(this.get('participants_lists')),\n                    result = all_participants_lists.find(list => list.jid === jid);\n                if (result)\n                    return result.version;\n                else\n                    return 0;\n            },\n\n            setParticipantsListVersion: function (jid, version) {\n                let all_participants_lists = _.clone(this.get('participants_lists')),\n                    participants_list = all_participants_lists.find(list => list.jid === jid),\n                    participants_list_idx = all_participants_lists.indexOf(participants_list);\n                if (participants_list_idx != -1) {\n                    all_participants_lists.splice(participants_list_idx, 1);\n                }\n                if (!participants_list) {\n                    participants_list = {jid: jid, participants_list: [], version: 0};\n                }\n                else\n                    participants_list.version = version;\n                all_participants_lists.push(participants_list);\n                this.save('participants_lists', all_participants_lists);\n            },\n\n            getParticipantsList: function (jid) {\n                let all_participants_lists = _.clone(this.get('participants_lists')),\n                    result = all_participants_lists.find(list => list.jid === jid);\n                if (result && result.participants_list)\n                    return result.participants_list;\n                else\n                    return [];\n            },\n\n            updateParticipant: function (jid, participant_info) {\n                let all_participants_lists = _.clone(this.get('participants_lists')),\n                    chat_participants = all_participants_lists.find(list => list.jid === jid),\n                    version = chat_participants && chat_participants.version || 0,\n                    participants_list = chat_participants && chat_participants.participants_list || [],\n                    participants_list_idx = all_participants_lists.indexOf(chat_participants);\n                if (participants_list.length) {\n                    let participant = participants_list.find(participant_item => participant_item.id === participant_info.id),\n                        participant_idx = participants_list.indexOf(participant);\n                    if (participant_idx != -1)\n                        participants_list[participant_idx] = participant_info;\n                    else\n                        participants_list.push(participant_info);\n                }\n                else\n                    participants_list.push(participant_info);\n                if (participants_list_idx != -1) {\n                    all_participants_lists.splice(participants_list_idx, 1);\n                }\n                all_participants_lists.push({jid: jid, participants_list: participants_list, version: version});\n                this.save('participants_lists', all_participants_lists);\n            },\n\n            setParticipantsList: function (jid, updated_participants_list) {\n                let all_participants_lists = _.clone(this.get('participants_lists')),\n                    participants_list = all_participants_lists.find(list => list.jid === jid) || [],\n                    participants_list_idx = all_participants_lists.indexOf(participants_list);\n                if (participants_list_idx != -1)\n                    all_participants_lists.splice(participants_list_idx, 1);\n                all_participants_lists.push({jid: jid, participants_list: updated_participants_list, version: participants_list.version});\n                this.save('participants_lists', all_participants_lists);\n            },\n\n            removeParticipantFromList: function (jid, participant_id) {\n                let participants_list = this.getParticipantsList(jid);\n                if (participants_list.length) {\n                    let participant_idx = participants_list.indexOf(participants_list.find(participant => participant.id === participant_id));\n                    if (participant_idx != -1)\n                        participants_list.splice(participant_idx, 1);\n                    this.setParticipantsList(jid, participants_list);\n                }\n            },\n\n            resetParticipantsList: function (jid) {\n                let all_participants_lists = _.clone(this.get('participants_lists')),\n                    participants_list_idx = all_participants_lists.indexOf(all_participants_lists.find(list => list.jid === jid));\n                if (participants_list_idx != -1)\n                    all_participants_lists.splice(participants_list_idx, 1);\n                all_participants_lists.push({jid: jid, participants_list: [], version: 0});\n                this.save('participants_lists', all_participants_lists);\n            }\n        });\n\n        xabber.GroupchatInvitationView = xabber.BasicView.extend({\n            className: 'details-panel invitation-view',\n            template: templates.group_chats.invitation,\n            ps_selector: '.panel-content',\n            avatar_size: constants.AVATAR_SIZES.CONTACT_DETAILS,\n\n            events: {\n                \"click .btn-join\": \"join\",\n                \"click .btn-decline\": \"reject\",\n                \"click .btn-block\": \"blockContact\"\n            },\n\n            _initialize: function (options) {\n                this.account = this.model.account;\n                this.$('.msg-text').text(options.message && options.message.get('message') ? options.message.get('message') : xabber.getString(\"groupchat__public_group__text_invitation\", [this.account.get('jid')]));\n                this.message = options.message;\n                this.model.on(\"change\", this.update, this);\n            },\n\n            render: function () {\n                this.model.set('visible', true);\n                this.updateAvatar();\n                this.updateName();\n            },\n\n            hide: function () {\n                this.trigger('before_hide', this);\n                this.data.set('visible', false);\n                this.model.set('visible', false);\n                this.onHide.apply(this, arguments);\n            },\n\n            update: function () {\n                let changed = this.model.changed;\n                if (_.has(changed, 'name')) this.updateName();\n                if (_.has(changed, 'image')) this.updateAvatar();\n            },\n\n            openChat: function () {\n                this.model.set('in_roster', true);\n                this.model.trigger(\"open_chat\", this.model);\n            },\n\n            closeChat: function () {\n                let chat = this.account.chats.getChat(this.model);\n                chat.set({'opened': false, 'display': false, 'active': false});\n                xabber.body.setScreen('all-chats', { right: undefined });\n                chat.item_view.content.readMessages();\n            },\n\n            updateAvatar: function () {\n                let image = this.model.cached_image;\n                this.$('.circle-avatar').setAvatar(image, this.avatar_size);\n            },\n\n            updateName: function () {\n                this.$('.main-info  .name-wrap').text(this.model.get('name'));\n                if (this.model.get('name-wrap') == this.model.get('jid')) {\n                    this.$('.main-info .name-wrap').addClass('name-is-jid');\n                    this.$('.main-info  .jid').text('');\n                }\n                else {\n                    this.$('.main-info .name-wrap').removeClass('name-is-jid');\n                    this.$('.main-info  .jid').text(this.model.get('jid'));\n                }\n            },\n\n            blockInvitation: function () {\n                if (this.account.connection && this.account.connection.do_synchronization)\n                    return;\n                let contact_jid = this.model.get('jid'),\n                    iq_get_blocking = $iq({type: 'get'}).c('blocklist', {xmlns: Strophe.NS.BLOCKING}),\n                    iq_unblocking = $iq({type: 'set'}).c('unblock', {xmlns: Strophe.NS.BLOCKING}),\n                    iq_set_blocking = $iq({type: 'set'}).c('block', {xmlns: Strophe.NS.BLOCKING})\n                    .c('item', {jid: this.model.get('jid') + '/' + moment.now()});\n                this.account.sendIQFast(iq_get_blocking, (iq_blocking_items) => {\n                    let items = $(iq_blocking_items).find('item');\n                    if (items.length > 0) {\n                        items.each(function (idx, item) {\n                            let item_jid = $(item).attr('jid');\n                            if (item_jid.indexOf(contact_jid) > -1)\n                                iq_unblocking.c('item', {jid: item_jid}).up();\n                        });\n                    }\n                    if ($(iq_unblocking.nodeTree).find('item').length)\n                        this.account.sendIQFast(iq_unblocking, () => {\n                            this.account.sendIQFast(iq_set_blocking);\n                        });\n                    else\n                        this.account.sendIQFast(iq_set_blocking);\n                });\n            },\n\n            join: function () {\n                let contact = this.model;\n                contact.set('subscription_preapproved', true);\n                contact.acceptRequest();\n                contact.pushInRoster(null, () => {\n                    contact.askRequest();\n                    this.blockInvitation();\n                    contact.getMyInfo();\n                    contact.sendPresent();\n                    this.openChat();\n                });\n                contact.trigger('remove_invite', contact);\n            },\n\n            reject: function () {\n                let contact = this.model;\n                this.closeChat();\n                let iq = $iq({to: contact.get('full_jid') || contact.get('jid'), type: 'set'})\n                    .c('decline', {xmlns: `${Strophe.NS.GROUP_CHAT}#invite`});\n                this.account.sendFast(iq, () => {}, () => {\n                    contact.declineRequest();\n                    this.blockInvitation();\n                });\n            },\n\n            blockContact: function () {\n                let contact = this.model;\n                utils.dialogs.ask(xabber.getString(\"contact_block\"), xabber.getString(\"block_contact_confirm\", [contact.get('name'), this.account.get('jid')]), null, { ok_button_text: xabber.getString(\"contact_bar_block\")}).done(function (result) {\n                    if (result) {\n                        contact.trigger('remove_invite', contact);\n                        contact.block();\n                        xabber.trigger(\"clear_search\");\n                    }\n                });\n                this.blockInvitation();\n                this.closeChat();\n            }\n        });\n\n        xabber.ContactNameWidget = xabber.InputWidget.extend({\n            field_name: 'contact-name',\n            placeholder: \"\",\n            model_field: 'name',\n\n            setValue: function (value) {\n                if (name === \"\") {\n                    this.model.set('roster_name', null);\n                    let name = this.getDefaultName();\n                    this.model.set('name', name);\n                }\n                this.model.pushInRoster({name: value});\n            },\n\n            showInput: function () {\n                if (this.$input.prop('disabled'))\n                    return;\n                this.data.set('input_mode', true);\n                this.updateValue();\n            },\n\n            getDefaultName: function () {\n                let name = null;\n                if (this.model.get('group_chat')) {\n                    if (this.model.get('group_info'))\n                        name = this.model.get('group_info').name;\n                    else\n                        name = this.model.get('jid');\n                }\n                else {\n                    let vcard = this.model.get('vcard');\n                    name = vcard.nickname || (vcard.first_name + ' ' + vcard.last_name).trim() || vcard.fullname || this.model.get('jid');\n                }\n                return name;\n            },\n\n            keyUp: function () {\n                let value = this.getValue();\n                this.$input.switchClass('changed', this.$input.val() !== value);\n                if (!this.$input.val())\n                    this.$input.prop('placeholder', this.getDefaultName() || xabber.getString(\"contact_settings__hint_set_name\"));\n            }\n        });\n\n        xabber.ContactNameRightWidget = xabber.InputWidget.extend({\n            field_name: 'contact-name',\n            placeholder: \"\",\n            model_field: 'name',\n            template: templates.group_chats.group_name_input_widget,\n\n            setValue: function (value) {\n                if (name === \"\") {\n                    this.model.set('roster_name', null);\n                    let name = this.getDefaultName();\n                    this.model.set('name', name);\n                }\n                this.model.pushInRoster({name: value});\n            },\n\n            getDefaultName: function () {\n                let name = null;\n                if (this.model.get('group_chat')) {\n                    if (this.model.get('group_info'))\n                        name = this.model.get('group_info').name;\n                    else\n                        name = this.model.get('jid');\n                }\n                else {\n                    let vcard = this.model.get('vcard');\n                    name = vcard.nickname || (vcard.first_name + ' ' + vcard.last_name).trim() || vcard.fullname || this.model.get('jid');\n                }\n                return name;\n            },\n\n            updateValue: function () {\n                let value = this.getValue();\n                this.$value.text(value);\n                if (!this.$input.val()) {\n                    this.$input.prop('placeholder', this.getDefaultName() || xabber.getString(\"contact_settings__hint_set_name\"));\n                    if (this.model.get('roster_name'))\n                        this.$input.val(this.model.get('roster_name'))\n                }\n                if (!this.model.get('roster_name'))\n                    this.$value.addClass('name-is-default');\n                else\n                    this.$value.removeClass('name-is-default');\n            },\n\n            keyUp: function () {\n                let value = this.getValue();\n                this.$input.switchClass('changed', this.$input.val() !== value);\n                if (!this.$input.val())\n                    this.$input.prop('placeholder', this.getDefaultName() || xabber.getString(\"contact_settings__hint_set_name\"));\n            },\n        });\n\n        xabber.GroupNameRightWidget = xabber.InputWidget.extend({\n            field_name: 'group-name',\n            placeholder: \"\",\n            template: templates.group_chats.group_name_input_widget,\n\n            initialize: function (options) {\n                this.parent = options.parent\n                this.$el.html(this.template({\n                    field_name: this.field_name,\n                    field_type: this.field_type,\n                    placeholder: this.placeholder\n                }));\n                this.$value = this.$('.field-text');\n                this.$btn = this.$('.btn-rename');\n                this.$input = this.$('.field-input');\n                let $insert_emoticon = this.$('.insert-emoticon'),\n                    $emoji_panel_wrap = this.$('.emoticons-panel-wrap'),\n                    $emoji_panel = this.$('.emoticons-panel'),\n                    _timeout;\n\n                for (let emoji_list in Emoji.all) {\n                    let $emoji_list_wrap = $(`<div class=\"emoji-list-wrap\"/>`),\n                        list_name = emoji_list.replace(/ /g, '_');\n                    $(`<div id=${list_name} class=\"emoji-list-header\">${xabber.getString(constants.EMOJI_LIST_NAME(emoji_list))}</div>`).appendTo($emoji_list_wrap);\n                    _.each(Emoji.all[emoji_list], function (emoji) {\n                        $('<div class=\"emoji-wrap\"/>').html(\n                            emoji.emojify({emoji_size: 24, sprite: list_name})\n                        ).appendTo($emoji_list_wrap);\n                    });\n                    $emoji_list_wrap.appendTo($emoji_panel);\n                    $emoji_panel.siblings('.emoji-menu').append(Emoji.all[emoji_list][0].emojify({href: list_name, title: constants.EMOJI_LIST_NAME(emoji_list), tag_name: 'a', emoji_size: 20}));\n                }\n                $emoji_panel.perfectScrollbar(\n                    _.extend({theme: 'item-list'}, xabber.ps_settings));\n                this.$('.emoji-menu .emoji').click((ev) => {\n                    $emoji_panel[0].scrollTop = this.$('.emoji-list-wrap ' + ev.target.attributes.href.value)[0].offsetTop - 4;\n                });\n                $insert_emoticon.hover((ev) => {\n                    if (ev && ev.preventDefault) { ev.preventDefault(); }\n                    $emoji_panel_wrap.addClass('opened');\n                    if (_timeout) {\n                        clearTimeout(_timeout);\n                    }\n                    $emoji_panel.perfectScrollbar('update');\n                }, (ev) => {\n                    if (ev && ev.preventDefault) { ev.preventDefault(); }\n                    if (_timeout) {\n                        clearTimeout(_timeout);\n                    }\n                    _timeout = setTimeout(function () {\n                        if (!$emoji_panel_wrap.is(':hover')) {\n                            $emoji_panel_wrap.removeClass('opened');\n                        }\n                    }, 800);\n                });\n                $emoji_panel_wrap.hover(null, (ev) => {\n                    if (ev && ev.preventDefault) { ev.preventDefault(); }\n                    if (_timeout) {\n                        clearTimeout(_timeout);\n                    }\n                    _timeout = setTimeout(function () {\n                        $emoji_panel_wrap.removeClass('opened');\n                    }, 200);\n                });\n                $emoji_panel_wrap.mousedown((ev) => {\n                    if (ev && ev.preventDefault) { ev.preventDefault(); }\n                    if (ev.button)\n                        return;\n                    let $target = $(ev.target).closest('.emoji-wrap').find('.emoji');\n                    if ($target.length) {\n                        this.$input.val(function () {\n                            return this.value + $target.data('emoji');\n                        });\n                        this.$input.scrollLeft(1000)\n                        this.changeValue();\n                    }\n                });\n                this.updateValue();\n                this.data = new Backbone.Model({input_mode: false});\n            },\n\n            changeValue: function () {\n                this.setValue(this.$input.val());\n            },\n\n            setValue: function (value) {\n                if (this.$input.val())\n                    this.parent.changeName(value);\n                else\n                    this.parent.changeName(this.getDefaultName());\n                this.updateValue();\n            },\n\n            getDefaultName: function () {\n                let name = null;\n                if (this.model.get('group_chat')) {\n                    if (this.model.get('group_info') && this.model.get('group_info').name)\n                        name = this.model.get('group_info').name;\n                    else\n                        name = this.model.get('jid');\n                }\n                return name;\n            },\n\n            updateValue: function (force_reset) {\n                let value = this.getValue();\n                this.$value.text(value);\n                if (!this.$input.val() || force_reset) {\n                    this.$input.prop('placeholder', this.getDefaultName() || xabber.getString(\"contact_settings__hint_set_name\"));\n                    if (this.model.get('group_info') && this.model.get('group_info').name)\n                        this.$input.val(this.model.get('group_info').name)\n                    if (force_reset)\n                        this.changeValue();\n                }\n            },\n\n            getValue: function () {\n                if (this.model.get('group_info'))\n                    return this.model.get('group_info').name;\n            },\n\n            keyUp: function () {\n                let value = this.getValue();\n                this.$input.switchClass('changed', this.$input.val() !== value);\n                if (!this.$input.val())\n                    this.$input.prop('placeholder', this.getDefaultName() || xabber.getString(\"contact_settings__hint_set_name\"));\n                else\n                    this.changeValue();\n\n            },\n        });\n\n        xabber.ParticipantNameRightWidget = xabber.InputWidget.extend({\n            field_name: 'participant-name',\n            placeholder: \"\",\n            template: templates.group_chats.group_name_input_widget,\n\n            initialize: function (options) {\n                this.parent = options.parent\n                this.$el.html(this.template({\n                    field_name: this.field_name,\n                    field_type: this.field_type,\n                    placeholder: this.placeholder\n                }));\n                this.$value = this.$('.field-text');\n                this.$btn = this.$('.btn-rename');\n                this.$input = this.$('.field-input');\n                let $insert_emoticon = this.$('.insert-emoticon'),\n                    $emoji_panel_wrap = this.$('.emoticons-panel-wrap'),\n                    $emoji_panel = this.$('.emoticons-panel'),\n                    _timeout;\n\n                for (let emoji_list in Emoji.all) {\n                    let $emoji_list_wrap = $(`<div class=\"emoji-list-wrap\"/>`),\n                        list_name = emoji_list.replace(/ /g, '_');\n                    $(`<div id=${list_name} class=\"emoji-list-header\">${xabber.getString(constants.EMOJI_LIST_NAME(emoji_list))}</div>`).appendTo($emoji_list_wrap);\n                    _.each(Emoji.all[emoji_list], function (emoji) {\n                        $('<div class=\"emoji-wrap\"/>').html(\n                            emoji.emojify({emoji_size: 24, sprite: list_name})\n                        ).appendTo($emoji_list_wrap);\n                    });\n                    $emoji_list_wrap.appendTo($emoji_panel);\n                    $emoji_panel.siblings('.emoji-menu').append(Emoji.all[emoji_list][0].emojify({href: list_name, title: constants.EMOJI_LIST_NAME(emoji_list), tag_name: 'a', emoji_size: 20}));\n                }\n                $emoji_panel.perfectScrollbar(\n                    _.extend({theme: 'item-list'}, xabber.ps_settings));\n                this.$('.emoji-menu .emoji').click((ev) => {\n                    $emoji_panel[0].scrollTop = this.$('.emoji-list-wrap ' + ev.target.attributes.href.value)[0].offsetTop - 4;\n                });\n                $insert_emoticon.hover((ev) => {\n                    if (ev && ev.preventDefault) { ev.preventDefault(); }\n                    $emoji_panel_wrap.addClass('opened');\n                    if (_timeout) {\n                        clearTimeout(_timeout);\n                    }\n                    $emoji_panel.perfectScrollbar('update');\n                }, (ev) => {\n                    if (ev && ev.preventDefault) { ev.preventDefault(); }\n                    if (_timeout) {\n                        clearTimeout(_timeout);\n                    }\n                    _timeout = setTimeout(function () {\n                        if (!$emoji_panel_wrap.is(':hover')) {\n                            $emoji_panel_wrap.removeClass('opened');\n                        }\n                    }, 800);\n                });\n                $emoji_panel_wrap.hover(null, (ev) => {\n                    if (ev && ev.preventDefault) { ev.preventDefault(); }\n                    if (_timeout) {\n                        clearTimeout(_timeout);\n                    }\n                    _timeout = setTimeout(function () {\n                        $emoji_panel_wrap.removeClass('opened');\n                    }, 200);\n                });\n                $emoji_panel_wrap.mousedown((ev) => {\n                    if (ev && ev.preventDefault) { ev.preventDefault(); }\n                    if (ev.button)\n                        return;\n                    let $target = $(ev.target).closest('.emoji-wrap').find('.emoji');\n                    if ($target.length) {\n                        this.$input.val(function () {\n                            return this.value + $target.data('emoji');\n                        });\n                        this.$input.scrollLeft(1000)\n                        this.changeValue();\n                    }\n                });\n                this.updateValue();\n                this.data = new Backbone.Model({input_mode: false});\n            },\n\n            changeValue: function () {\n                this.setValue(this.$input.val());\n            },\n\n            setValue: function (value) {\n                this.updateValue();\n                if (this.$input.val())\n                    this.parent.changeName(value);\n                else\n                    this.parent.changeName(this.getDefaultName());\n            },\n\n            getDefaultName: function () {\n                let name = null;\n                if (this.model.get('nickname'))\n                    name = this.model.get('nickname');\n                else\n                    name = this.model.get('jid');\n                return name;\n            },\n\n            updateValue: function (force_reset) {\n                let value = this.getValue();\n                this.$value.text(value);\n                if (!this.$input.val() || force_reset) {\n                    this.$input.prop('placeholder', this.getDefaultName() || xabber.getString(\"contact_settings__hint_set_name\"));\n                    if (this.model.get('nickname'))\n                        this.$input.val(this.model.get('nickname'))\n                    if (force_reset)\n                        this.changeValue();\n                }\n                this.$input.switchClass('changed', this.$input.val() !== value);\n            },\n\n            getValue: function () {\n                if (this.model.get('nickname'))\n                    return this.model.get('nickname');\n            },\n\n            keyUp: function () {\n                let value = this.getValue();\n                if (!this.$input.val())\n                    this.$input.prop('placeholder', this.getDefaultName() || xabber.getString(\"contact_settings__hint_set_name\"));\n                else\n                    this.changeValue();\n\n            },\n        });\n\n        xabber.ParticipantBadgeRightWidget = xabber.InputWidget.extend({\n            field_name: 'participant-badge',\n            placeholder: \"\",\n            template: templates.group_chats.group_name_input_widget,\n\n            initialize: function (options) {\n                this.parent = options.parent\n                this.$el.html(this.template({\n                    field_name: this.field_name,\n                    field_type: this.field_type,\n                    placeholder: this.placeholder\n                }));\n                this.$value = this.$('.field-text');\n                this.$btn = this.$('.btn-rename');\n                this.$input = this.$('.field-input');\n                let $insert_emoticon = this.$('.insert-emoticon'),\n                    $emoji_panel_wrap = this.$('.emoticons-panel-wrap'),\n                    $emoji_panel = this.$('.emoticons-panel'),\n                    _timeout;\n\n                for (let emoji_list in Emoji.all) {\n                    let $emoji_list_wrap = $(`<div class=\"emoji-list-wrap\"/>`),\n                        list_name = emoji_list.replace(/ /g, '_');\n                    $(`<div id=${list_name} class=\"emoji-list-header\">${xabber.getString(constants.EMOJI_LIST_NAME(emoji_list))}</div>`).appendTo($emoji_list_wrap);\n                    _.each(Emoji.all[emoji_list], function (emoji) {\n                        $('<div class=\"emoji-wrap\"/>').html(\n                            emoji.emojify({emoji_size: 24, sprite: list_name})\n                        ).appendTo($emoji_list_wrap);\n                    });\n                    $emoji_list_wrap.appendTo($emoji_panel);\n                    $emoji_panel.siblings('.emoji-menu').append(Emoji.all[emoji_list][0].emojify({href: list_name, title: constants.EMOJI_LIST_NAME(emoji_list), tag_name: 'a', emoji_size: 20}));\n                }\n                $emoji_panel.perfectScrollbar(\n                    _.extend({theme: 'item-list'}, xabber.ps_settings));\n                this.$('.emoji-menu .emoji').click((ev) => {\n                    $emoji_panel[0].scrollTop = this.$('.emoji-list-wrap ' + ev.target.attributes.href.value)[0].offsetTop - 4;\n                });\n                $insert_emoticon.hover((ev) => {\n                    if (ev && ev.preventDefault) { ev.preventDefault(); }\n                    $emoji_panel_wrap.addClass('opened');\n                    if (_timeout) {\n                        clearTimeout(_timeout);\n                    }\n                    $emoji_panel.perfectScrollbar('update');\n                }, (ev) => {\n                    if (ev && ev.preventDefault) { ev.preventDefault(); }\n                    if (_timeout) {\n                        clearTimeout(_timeout);\n                    }\n                    _timeout = setTimeout(function () {\n                        if (!$emoji_panel_wrap.is(':hover')) {\n                            $emoji_panel_wrap.removeClass('opened');\n                        }\n                    }, 800);\n                });\n                $emoji_panel_wrap.hover(null, (ev) => {\n                    if (ev && ev.preventDefault) { ev.preventDefault(); }\n                    if (_timeout) {\n                        clearTimeout(_timeout);\n                    }\n                    _timeout = setTimeout(function () {\n                        $emoji_panel_wrap.removeClass('opened');\n                    }, 200);\n                });\n                $emoji_panel_wrap.mousedown((ev) => {\n                    if (ev && ev.preventDefault) { ev.preventDefault(); }\n                    if (ev.button)\n                        return;\n                    let $target = $(ev.target).closest('.emoji-wrap').find('.emoji');\n                    if ($target.length) {\n                        this.$input.val(function () {\n                            return this.value + $target.data('emoji');\n                        });\n                        this.$input.scrollLeft(1000)\n                        this.changeValue();\n                    }\n                });\n                this.updateValue(true);\n            },\n\n            changeValue: function () {\n                this.setValue(this.$input.val());\n            },\n\n            setValue: function (value) {\n                this.updateValue();\n                this.parent.changeBadge(value);\n            },\n\n            updateValue: function (force_reset) {\n                let value = this.getValue();\n                if (!this.$input.val())\n                    this.$input.prop('placeholder', xabber.getString(\"groupchat_member_badge\"));\n                if (force_reset) {\n                    this.$input.val(value);\n                    this.changeValue();\n                }\n                this.$input.switchClass('changed', this.$input.val() !== value);\n            },\n\n            getValue: function () {\n                let badge = _.escape(this.model.get('badge'));\n                return badge;\n            },\n\n            keyUp: function () {\n                if (!this.$input.val())\n                    this.$input.prop('placeholder', xabber.getString(\"groupchat_member_badge\"));\n                this.changeValue();\n            },\n        });\n\n        xabber.GroupDescriptionRightWidget = xabber.InputWidget.extend({\n            field_name: 'group-description',\n            template: templates.group_chats.description_input_widget,\n            placeholder: \"\",\n\n            initialize: function (options) {\n                this.parent = options.parent\n                this.$el.html(this.template({\n                    field_name: this.field_name,\n                    field_type: this.field_type,\n                    placeholder: this.placeholder\n                }));\n                this.$value = this.$('.field-text');\n                this.$btn = this.$('.btn-rename');\n                this.$input = this.$('.field-input');\n                this.updateValue();\n                this.data = new Backbone.Model({input_mode: false});\n            },\n\n            changeValue: function () {\n                this.setValue(this.$input.val());\n            },\n\n            setValue: function (value) {\n                this.parent.changeDescription(value);\n                this.updateValue();\n            },\n\n            getDefaultName: function () {\n                let name = null;\n                if (this.model.get('group_chat')) {\n                    if (this.model.get('group_info') && this.model.get('group_info').description)\n                        name = this.model.get('group_info').description;\n                }\n                return name;\n            },\n\n            updateValue: function (force_reset) {\n                let value = this.getValue();\n                if (!this.$input.val() || force_reset) {\n                    this.$input.prop('placeholder', xabber.getString(\"groupchat_example_description\"));\n                    if (force_reset && this.model.get('group_info'))\n                        this.$input.val(this.model.get('group_info').description)\n                    if (force_reset)\n                        this.changeValue();\n                }\n            },\n\n            keyDown: function (ev) {\n                ev.stopPropagation();\n                let value = this.getValue();\n                if (ev.keyCode === constants.KEY_ESCAPE && !xabber.body.screen.get('right_contact')) {\n                    this.$input.removeClass('changed').val(value);\n                    this.data.set('input_mode', false);\n                }\n            },\n\n            getValue: function () {\n                if (this.model.get('group_info'))\n                    return this.model.get('group_info').description;\n            },\n\n            keyUp: function () {\n                let value = this.getValue();\n                this.$input.switchClass('changed', this.$input.val() !== value);\n                if (!this.$input.val())\n                    this.$input.prop('placeholder', xabber.getString(\"groupchat_example_description\"));\n                this.changeValue();\n            },\n        });\n\n        xabber.ContactEditGroupsView = xabber.BasicView.extend({\n            template: templates.groups,\n            events: {\n                'click .group': 'removeGroup',\n                'click .existing-group-field label': 'editGroup',\n                'change .new-group-name input': 'checkNewGroup',\n                'keyup .new-group-name input': 'checkNewGroup',\n                'click .new-group-checkbox': 'addNewGroup',\n                \"keyup #new-group-name\": \"keyupAddNewGroup\",\n                \"focusin #new-group-name\": \"focusinAddNewGroup\",\n                \"focusout #new-group-name\": \"focusoutAddNewGroup\",\n                \"keydown #new-group-name\": \"keydownAddNewGroup\",\n            },\n\n            _initialize: function (options) {\n                this.account = this.parent.account;\n                this.model = this.parent.model;\n                this.model.set('groups_hidden', true)\n                this.model.on(\"change:in_roster update_groups\", this.onUpdate, this);\n            },\n\n            render: function (view, arguments) {\n                this.$el.html(this.template());\n                if (this.model.get('in_roster')) {\n                    let groups = _.clone(this.model.get('groups')),\n                        all_groups = _.map(this.account.groups.notSpecial(), function (group) {\n                            let name = group.get('name');\n                            return {name: name, checked: _.contains(groups, name), id: uuid()};\n                        }),\n                        all_groups_unchecked = all_groups.filter(function(group) {\n                            if (group.checked)\n                                return false;\n                            return true;\n                        }).length;\n                    if (all_groups_unchecked)\n                        this.$('.groups-wrap').removeClass('empty-groups-wrap')\n                    else\n                        this.$('.groups-wrap').addClass('empty-groups-wrap')\n\n                    this.$('.checkbox-list').html(templates.groups_checkbox_list({\n                        groups: all_groups\n                    })).appendTo(this.$('.groups-wrap'));\n                    this.ps_container = this.$('.checkbox-list');\n                    if (this.ps_container.length) {\n                        this.ps_container.perfectScrollbar(\n                            _.extend(this.ps_settings || {}, xabber.ps_settings)\n                        );\n                    }\n                    this.scrollToTop();\n                    if (groups.length)\n                        this.$('.groups').html(templates.groups_list({\n                            groups: all_groups\n                        })).appendTo(this.$('.groups-wrap-list'));\n                    else\n                        this.$('.groups').html('<div class=\"empty-groups\">'+ xabber.getString(\"contact_circles_empty\") + '</div>')\n                    this.$('.groups').append(templates.groups_new_group());\n\n                }\n                this.$el.showIf(this.model.get('in_roster'));\n                if (arguments && arguments.on_add)\n                    this.$('.groups-wrap').hideIf(false)\n                else\n                    this.$('.groups-wrap').hideIf(true)\n                this.parent.updateScrollBar();\n            },\n\n            onUpdate: function (ev) {\n                if (this._update_template){\n                    this.render(this, {on_add: true});\n                    this.$('.new-group-name input').addClass('visible');\n                    this.$('.new-group-name input').focus();\n                }\n                else{\n                    this.render();\n                    this.$('.new-group-name input').addClass('visible');\n                }\n\n            },\n\n            removeGroup: function (ev) {\n                let $target = $(ev.target).closest('.group'),\n                    group_name = $target.attr('data-groupname'),\n                    groups = _.clone(this.model.get('groups')),\n                    idx = groups.indexOf(group_name);\n                if (idx >= 0) {\n                    groups.splice(idx, 1);\n                }\n                this._update_template = false\n                this.model.pushInRoster({groups: groups});\n            },\n\n            removeLastGroup: function (ev) {\n                let groups = _.clone(this.model.get('groups'));\n                if (groups.length) {\n                    groups.pop();\n                    this._update_template = true\n                    this.model.pushInRoster({groups: groups});\n                }\n            },\n\n            editGroup: function (ev) {\n                clearTimeout(this._hide_timeout)\n                let $target = $(ev.target),\n                    $input = $target.siblings('input'),\n                    checked = !$input.prop('checked'),\n                    group_name = $input.attr('data-groupname'),\n                    groups = _.clone(this.model.get('groups')),\n                    idx = groups.indexOf(group_name);\n                $input.prop('checked', checked);\n                if (checked) {\n                    groups.push(group_name);\n                } else if (idx >= 0) {\n                    groups.splice(idx, 1);\n                }\n                this._update_template = true\n                this.model.pushInRoster({groups: groups});\n            },\n\n            checkNewGroup: function (ev) {\n                let name = $(ev.target).val(),\n                    $checkbox = this.$('.new-group-checkbox');\n                $checkbox.showIf(name && !this.account.groups.get(name));\n            },\n\n            keyupAddNewGroup: function (ev) {\n                let $input = this.$('.new-group-name input'),\n                    name = $input.val();\n                if (ev.keyCode === constants.KEY_ENTER && name) {\n                    this.addNewGroup();\n                }\n            },\n\n            keydownAddNewGroup: function (ev) {\n                let $input = this.$('.new-group-name input'),\n                    name = $input.val();\n                if (ev.keyCode === constants.KEY_BACKSPACE && !name) {\n                    this.removeLastGroup();\n                }\n            },\n\n            focusinAddNewGroup: function (ev) {\n                clearTimeout(this._hide_timeout)\n                this.$('.groups-wrap').hideIf(false)\n                this.$('.empty-groups').hideIf(true)\n            },\n\n            focusoutAddNewGroup: function (ev) {\n                this.$('.empty-groups').hideIf(false)\n                if (this.$('.new-group-name input').val())\n                    this.addNewGroup();\n                this._hide_timeout = setTimeout(() => {\n                    this.$('.new-group-name input').removeClass('visible');\n                    this.$('.groups-wrap').hideIf(true)\n                    this.$('.new-group-name input').val('')\n                }, 100)\n            },\n\n            addNewGroup: function () {\n                let $input = this.$('.new-group-name input'),\n                    name = $input.val(),\n                    groups = _.clone(this.model.get('groups')),\n                    idx = groups.indexOf(name);\n                if (idx < 0) {\n                    groups.push(name);\n                }\n                this.model.pushInRoster({groups: groups});\n            }\n        });\n\n        xabber.ContactEditView = xabber.BasicView.extend({\n            template: templates.edit_contact,\n            events: {\n                'click .btn-back': 'hideEdit',\n                'click .btn-request': 'requestSubscription',\n                'click .btn-allow': 'allowSubscription',\n                'click .btn-cancel-request': 'cancelSubscriptionRequest',\n                'click .btn-allow-request': 'handleSubscriptionRequest',\n                'click .btn-disallow-request': 'cancelSubscriptionIn',\n                'click .btn-disallow-preapproved': 'cancelSubscriptionIn',\n                'click .btn-cancel-subscription-out': 'cancelSubscriptionOut',\n                'click .btn-cancel-subscription-in': 'cancelSubscriptionIn',\n            },\n\n            _initialize: function (options) {\n                this.account = this.parent.account;\n                this.model = this.parent.model;\n                this.model.set('edit_hidden', true)\n                this.model.on(\"change:status_updated\", this.updateStatuses, this);\n                this.model.on(\"change:subscription\", this.updateStatuses, this);\n                this.model.on(\"change:subscription_preapproved\", this.updateStatuses, this);\n                this.model.on(\"change:blocked\", this.updateStatuses, this);\n                this.model.on(\"change:subscription_request_in\", this.updateStatuses, this);\n                this.model.on(\"change:subscription_request_out\", this.updateStatuses, this);\n            },\n\n            render: function () {\n                this.$el.html(this.template(_.extend({view: this}, constants)));\n                this.$('.edit-wrap').hideIf(this.model.get('edit_hidden'))\n                this.name_field = new xabber.ContactNameRightWidget({\n                    el: this.$('.name-wrap')[0],\n                    model: this.model\n                });\n                this.$('.status-out.dropdown-button').dropdown({\n                    inDuration: 100,\n                    outDuration: 100,\n                    hover: false\n                });\n                this.$('.status-in.dropdown-button').dropdown({\n                    inDuration: 100,\n                    outDuration: 100,\n                    hover: false\n                });\n                this.updateStatuses();\n            },\n\n            showEdit: function () {\n                this.model.set('edit_hidden', false);\n                this.parent.scrollToTop();\n                if (this.parent.ps_container.length) {\n                    this.parent.ps_container.perfectScrollbar('destroy')\n                }\n                this.$('.edit-wrap').hideIf(this.model.get('edit_hidden'))\n            },\n\n            updateStatuses: function () {\n                let statuses = this.model.getSubscriptionStatuses(),\n                    subscription_preapproved = this.model.get('subscription_preapproved');\n                if (statuses){\n                    this.$('.status-out').addClass(statuses.status_out_class)\n                    this.$('.status-out .value').text(statuses.status_out)\n                    this.$('.status-out').showIf(statuses.status_out)\n                    this.$('.status-in').addClass(statuses.status_in_class)\n                    this.$('.status-in  .value').text(statuses.status_in)\n                    this.$('.status-in').showIf(statuses.status_in)\n                    this.$('.status-description .value').html(statuses.status_description)\n                    this.$('.status-description').showIf(statuses.status_description)\n                    this.$('.btn-delete').hideIf(!this.model.get('in_roster'));\n                    if (statuses.status_out_color === 'request') {\n                        this.$('.status-out').addClass('text-color-500').addClass('request').removeClass('subbed')\n                        this.$('.status-out').addClass('text-decoration-color-300')\n                    }\n                    if (statuses.status_in_color === 'request') {\n                        this.$('.status-in').addClass('text-color-500').addClass('request').removeClass('subbed')\n                        this.$('.status-in').addClass('text-decoration-color-300')\n                    }\n                    if (statuses.status_out_color === 'subbed') {\n                        this.$('.status-out').addClass('text-color-500').addClass('subbed').removeClass('request')\n                        this.$('.status-out').addClass('text-decoration-color-300')\n                    }\n                    if (statuses.status_in_color === 'subbed') {\n                        this.$('.status-in').addClass('text-color-500').addClass('subbed').removeClass('request')\n                        this.$('.status-in').addClass('text-decoration-color-300')\n                    }\n                    if (statuses.status_out_color === '') {\n                        this.$('.status-out').removeClass('text-color-500').removeClass('request').removeClass('subbed')\n                        this.$('.status-out').removeClass('text-decoration-color-300')\n                    }\n                    if (statuses.status_in_color === '') {\n                        this.$('.status-in').removeClass('text-color-500').removeClass('request').removeClass('subbed')\n                        this.$('.status-in').removeClass('text-decoration-color-300')\n                    }\n                    this.$('.btn-request').hideIf(!(statuses.status_out_color === ''))\n                    this.$('.btn-allow').hideIf(!(statuses.status_in_color === '' && !subscription_preapproved))\n                    this.$('.btn-disallow-preapproved').hideIf(!(statuses.status_in_color === '' && subscription_preapproved))\n                    this.$('.btn-cancel-request').hideIf(!(statuses.status_out_color === 'request'))\n                    this.$('.btn-allow-request').hideIf(!(statuses.status_in_color === 'request'))\n                    this.$('.btn-disallow-request').hideIf(!(statuses.status_in_color === 'request'))\n                    this.$('.btn-cancel-subscription-out').hideIf(!(statuses.status_out_color === 'subbed'))\n                    this.$('.btn-cancel-subscription-in').hideIf(!(statuses.status_in_color === 'subbed'))\n                }\n            },\n\n            requestSubscription: function () {\n                this.model.askRequest();\n            },\n\n            allowSubscription: function () {\n                this.model.acceptRequest();\n                !this.account.server_features.get(Strophe.NS.SUBSCRIPTION_PREAPPROVAL) && this.set('subscription_preapproved', true)\n            },\n\n            cancelSubscriptionRequest: function () {\n                this.model.declineSubscription();\n            },\n\n            handleSubscriptionRequest: function () {\n                this.model.acceptRequest();\n            },\n\n            cancelSubscriptionOut: function () {\n                this.model.declineSubscription();\n            },\n\n            cancelSubscriptionIn: function () {\n                this.model.declineSubscribe();\n                this.model.set('subscription_request_in', false);\n            },\n\n            hideEdit: function (ev) {\n                this.model.set('edit_hidden', true);\n                if (this.parent.ps_container.length) {\n                    this.parent.ps_container.perfectScrollbar(\n                        _.extend(this.parent.ps_settings || {}, xabber.ps_settings)\n                    );\n                };\n                this.$('.edit-wrap').hideIf(this.model.get('edit_hidden'));\n            },\n        });\n\n        xabber.GroupEditView = xabber.BasicView.extend({\n            template: templates.edit_group,\n            events: {\n                \"click .btn-save\": \"saveChanges\",\n                'click .edit-header:not(.property-header) .btn-back': 'hideEdit',\n                'click .btn-reset': 'resetPanel',\n                'click .btn-edit': 'showDescriptionProperty',\n                'click .btn-back-panel': 'hidePanel',\n                'click .membership-field .property-radio input': 'changeMembership',\n                'click .index-field .property-radio input ': 'changeIndex',\n                'click .index-property:not(.property-disabled)': 'showIndexProperty',\n                'click .membership-property:not(.property-disabled)': 'showMembershipProperty',\n                'click .btn-back.btn-property-back': 'hideProperty',\n                \"click .list-variant\": \"showPanel\",\n                \"click .revoke-invitation\": \"revokeInvitation\",\n                \"click .btn-reset-panel\": \"deselectParticipants\",\n                \"click .btn-remove-selected\": \"actionSelectedParticipants\",\n                \"click .participants-edit-wrap .list-item\": \"selectParticipant\",\n                \"click .unblock-user\": \"unblockUser\",\n                \"click .set-groupchat-avatar-text\": \"clickAvatarInput\",\n                \"click .btn-add-block\": \"blockId\",\n                \"keydown .field-input\": \"keyDownName\",\n                \"keyup .field-input\": \"keyUp\",\n                \"focusout .field-input\": \"changeValue\"\n            },\n\n            _initialize: function (options) {\n                this.account = this.parent.account;\n                this.model = this.parent.model;\n                this.model.set('edit_hidden', true)\n                this.model.on('change:group_info', this.update, this)\n            },\n\n            render: function () {\n                this.$el.html(this.template(_.extend({view: this}, constants)));\n                this.$('.edit-wrap').hideIf(this.model.get('edit_hidden'))\n                this.$('.index-property-edit-wrap').hideIf(true)\n                this.$('.membership-property-edit-wrap').hideIf(true)\n                this.$('.description-edit-wrap').hideIf(true)\n                let dropdown_settings = {\n                    inDuration: 100,\n                    outDuration: 100,\n                    constrainWidth: false,\n                    hover: false,\n                    alignment: 'right'\n                };\n                this.$('.property-dropdown').dropdown(dropdown_settings);\n                // this.name_field = new xabber.ContactNameRightWidget({\n                //     el: this.$('.name-wrap')[0],\n                //     model: this.model\n                // });\n                this.group_name_field = new xabber.GroupNameRightWidget({\n                    el: this.$('.edit-group-name-wrap')[0],\n                    model: this.model,\n                    parent: this,\n                });\n                this.group_description_field = new xabber.GroupDescriptionRightWidget({\n                    el: this.$('.edit-group-description-wrap')[0],\n                    model: this.model,\n                    parent: this,\n                });\n                this.update();\n            },\n\n            update: function () {\n                let info = this.model.get('group_info') || {},\n                    model, searchable, privacy;\n                if (info){\n                    if (info.privacy === 'public')\n                        privacy = xabber.getString(\"groupchat_public_group\");\n                    if (info.privacy === 'incognito')\n                        privacy = xabber.getString(\"groupchat_incognito_group\");\n                    if (info.searchable === 'none') {\n                        searchable = xabber.getString(\"groupchat_index_type_none\");\n                        this.$('.property-wrap #none').prop(\"checked\", true);\n                    }\n                    if (info.searchable === 'local') {\n                        searchable = xabber.getString(\"groupchat_index_type_local\");\n                        this.$('.property-wrap #local').prop(\"checked\", true);\n                    }\n                    if (info.searchable === 'global') {\n                        searchable = xabber.getString(\"groupchat_index_type_global\");\n                        this.$('.property-wrap #global').prop(\"checked\", true);\n                    }\n                    if (info.model === 'open') {\n                        model = xabber.getString(\"groupchat_membership_type_open\");\n                        this.$('.property-wrap #open').prop(\"checked\", true);\n                    }\n                    if (info.model === 'member-only') {\n                        model = xabber.getString(\"groupchat_membership_type_members_only\");\n                        this.$('.property-wrap #member-only').prop(\"checked\", true);\n                    }\n                }\n                this.$('.main-edit-header .block-name:not(.second-text)').text(privacy);\n                this.$('.membership-property span').text(model);\n                this.$('.index-property span').text(searchable);\n                this.$('.edit-group-name').text(info.name);\n                this.$('.edit-group-description').text(info.description);\n                this.group_name_field.updateValue(true);\n                this.group_description_field.updateValue(true);\n                this.$('.btn-save').switchClass('fade-out', true);\n                let is_owner = this.model.my_rights && this.model.my_rights.fields.find(permission => permission.var == 'owner' && permission.values);\n                if (is_owner){\n                    let iq_get_rights = $iq({type: 'get', to: this.model.get('full_jid') || this.model.get('jid')})\n                        .c('query', {xmlns: `${Strophe.NS.GROUP_CHAT}#default-rights`});\n                    this.account.sendFast(iq_get_rights, (iq_all_rights) => {\n                        let data_form = this.account.parseDataForm($(iq_all_rights).find(`x[xmlns=\"${Strophe.NS.DATAFORM}\"]`)),\n                            restrictions_count = 0;\n                        data_form.fields.forEach((field) => {\n                            if (field.type === 'fixed' || field.type === 'hidden')\n                                return;\n                            let expires = field.values ? field.values[0] : undefined;\n                            if (expires) {\n                                restrictions_count++;\n                            }\n                        });\n                        this.$('.btn-default-restrictions .edit-button-value').text(restrictions_count);\n                    }, () => {\n                        utils.callback_popup_message(xabber.getString(\"groupchat_you_have_no_permissions_to_do_it\"), 3000);\n                    });\n                }\n                this.updateAvatar();\n\n            },\n\n            updateAvatar: function () {\n                let image = this.model.cached_image;\n                this.$('.main-info .circle-avatar').setAvatar(image, this.avatar_size);\n            },\n\n            showMembershipProperty: function () {\n                this.$('.membership-property-edit-wrap').hideIf(false)\n                if (this.ps_container.length) {\n                    this.ps_container.perfectScrollbar('destroy')\n                }\n            },\n\n            showIndexProperty: function () {\n                this.$('.index-property-edit-wrap').hideIf(false)\n                if (this.ps_container.length) {\n                    this.ps_container.perfectScrollbar('destroy')\n                }\n            },\n\n            showDescriptionProperty: function () {\n                this.$('.description-edit-wrap').hideIf(false)\n                this.group_description_field.$input.height(this.group_description_field.$input[0].scrollHeight - 8)\n                if (this.ps_container.length) {\n                    this.ps_container.perfectScrollbar('destroy')\n                }\n            },\n\n            hideProperty: function () {\n                this.$('.index-property-edit-wrap').hideIf(true)\n                this.$('.description-edit-wrap').hideIf(true)\n                this.$('.membership-property-edit-wrap').hideIf(true)\n                if (this.ps_container.length) {\n                    this.ps_container.perfectScrollbar(\n                        _.extend(this.parent.ps_settings || {}, xabber.ps_settings)\n                    );\n                }\n            },\n\n            revokeInvitation: function (ev) {\n                let $member_item = $(ev.target).closest('.invitations-user');\n                if (this.parent.children && this.parent.children.invitations)\n                    this.parent.children.invitations.revokeInvitation(ev)\n            },\n\n            showBlockButton: function (ev) {\n                this.$('.edit-bottom-block .btn-add-block').hideIf(false);\n            },\n\n            showInviteButton: function (ev) {\n                this.$('.edit-bottom-block .btn-invite').hideIf(false);\n            },\n\n            unblockUser: function (ev) {\n                if (this.parent.children && this.parent.children.blocked)\n                    this.parent.children.blocked.unblockUser(ev)\n            },\n\n            actionSelectedParticipants: function (ev) {\n                let selected = this.$('.list-item.selected');\n                selected.each((index, item) => {\n                    if ($(item).hasClass('invitations-user') && this.parent.children && this.parent.children.invitations)\n                        this.parent.children.invitations.revokeInvitationByElement($(item))\n                    if ($(item).hasClass('blocked-user') && this.parent.children && this.parent.children.blocked)\n                        this.parent.children.blocked.unblockUserByElement($(item))\n                    if ($(item).hasClass('blocked-user') || $(item).hasClass('invitations-user'))\n                        $(item).removeClass('selected')\n                });\n                this.updateRemoveParticipantButton();\n            },\n\n            blockId: function () {\n                if (this.parent.children && this.parent.children.blocked)\n                    this.parent.children.blocked.blockId()\n            },\n\n            deselectParticipants: function (ev) {\n                this.$('.list-item.selected').removeClass('selected')\n                this.updateRemoveParticipantButton();\n            },\n\n            selectParticipant: function (ev) {\n                if ($(ev.target).parent().hasClass('revoke-invitation') || $(ev.target).parent().hasClass('unblock-user') ||\n                    $(ev.target).hasClass('revoke-invitation') || $(ev.target).hasClass('unblock-user'))\n                    return;\n                let $member_item = $(ev.target).closest('.list-item'),\n                    is_selected = $member_item.hasClass('selected');\n                $member_item.switchClass('selected', !is_selected)\n                this.updateRemoveParticipantButton();\n            },\n\n            updateRemoveParticipantButton: function () {\n                let has_changes = this.$('.list-item.selected').length;\n                this.$('.block-name-panel.second-text span').html(has_changes)\n                if (has_changes) {\n                    this.$('.participants-edit-back').removeClass('mdi-arrow-right').addClass('mdi-close')\n                    this.$('.participants-edit-back').removeClass('btn-back-panel').addClass('btn-reset-panel')\n                    this.$('.block-name-panel:not(.second-text)').addClass('fade-out');\n                    this.$('.edit-bottom-block .btn-invite').addClass('fade-out');\n                    this.$('.edit-bottom-block .btn-add-block').addClass('fade-out');\n                    this.$('.block-name-panel.second-text').removeClass('fade-out');\n                    this.$('.btn-remove-selected').removeClass('fade-out');\n                }\n                else{\n                    this.$('.participants-edit-back').addClass('mdi-arrow-right').removeClass('mdi-close')\n                    this.$('.participants-edit-back').addClass('btn-back-panel').removeClass('btn-reset-panel')\n                    this.$('.block-name-panel:not(.second-text)').removeClass('fade-out');\n                    this.$('.edit-bottom-block .btn-invite').removeClass('fade-out');\n                    this.$('.edit-bottom-block .btn-add-block').removeClass('fade-out');\n                    this.$('.block-name-panel.second-text').addClass('fade-out');\n                    this.$('.btn-remove-selected').addClass('fade-out');\n                }\n            },\n\n            clickAvatarInput: function (ev) {\n                this.$('.circle-avatar input').click();\n            },\n\n            hidePanel: function () {\n                this.parent.getInvitations((response) => {\n                    this.$('.invitations-variant .counted').html($(response).find('query').find('user').length);\n                });\n                this.model.getBlockedParticipants((response) => {\n                    this.$('.blocked-variant .counted').html($(response).find('query').children().length);\n                });\n                this.$('.btn-back-panel').hideIf(true)\n                this.$('.block-name-panel').hideIf(true)\n                this.$('.edit-bottom-block .btn-add-block').hideIf(true)\n                this.$('.edit-bottom-block .btn-invite').hideIf(true)\n                this.$('.btn-remove-selected').hideIf(true)\n                this.$('.participants-edit-wrap').hideIf(true)\n                // if (this.ps_container.length) {\n                //     this.ps_container.perfectScrollbar('destroy')\n                // }\n                // this.ps_container = this.$('.edit-wrap');\n                // if (this.ps_container.length) {\n                //     this.ps_container.perfectScrollbar(\n                //         _.extend(this.parent.ps_settings || {}, xabber.ps_settings)\n                //     );\n                // }\n                // this.hideEdit();\n            },\n\n            showPanel: function () {\n                this.$('.btn-back-panel').hideIf(false)\n                this.$('.block-name-panel').hideIf(false)\n                this.$('.btn-remove-selected').hideIf(false)\n                this.$('.participants-edit-wrap').hideIf(false)\n                this.updateRemoveParticipantButton();\n                if (this.ps_container.length) {\n                    this.ps_container.perfectScrollbar('destroy')\n                }\n                this.ps_container = this.$('.participants-edit-wrap');\n                if (this.ps_container.length) {\n                    this.ps_container.perfectScrollbar(\n                        _.extend(this.parent.ps_settings || {}, xabber.ps_settings)\n                    );\n                }\n            },\n\n            resetPanel: function () {\n                this.updateSaveButton()\n                this.showEdit()\n            },\n\n            updateSaveButton: function () {\n                let has_changes = false;\n                this.data_form.fields.forEach((field) => {\n                    if (field.type === 'hidden' || field.type === 'fixed')\n                        return;\n                    let value = field.values ? field.values[0] : null;\n                    if ((field.var in this.original_data_form_values) && this.original_data_form_values[field.var] != value) {\n                        has_changes = true;\n                    }\n                });\n                this.$('.btn-save').switchClass('fade-out', !has_changes);\n                this.$('.btn-qr-code').hideIf(has_changes);\n                if (has_changes) {\n                    this.$('.block-name.second-text').html(xabber.getString(\"edit_vcard\"))\n                    this.$('.edit-header:not(.main-edit-header) .details-icon').removeClass('mdi-arrow-right').addClass('mdi-close')\n                    this.$('.edit-header:not(.main-edit-header) .details-icon').removeClass('btn-back').addClass('btn-reset')\n                    this.$('.edit-header:not(.main-edit-header) .block-name:not(.second-text)').addClass('fade-out');\n                    this.$('.edit-header:not(.main-edit-header) .block-name.second-text').removeClass('fade-out');\n                }\n                else{\n                    this.$('.edit-header:not(.main-edit-header) .details-icon').addClass('mdi-arrow-right').removeClass('mdi-close')\n                    this.$('.edit-header:not(.main-edit-header) .details-icon').addClass('btn-back').removeClass('btn-reset')\n                    this.$('.edit-header:not(.main-edit-header) .block-name:not(.second-text)').removeClass('fade-out');\n                    this.$('.edit-header:not(.main-edit-header) .block-name.second-text').addClass('fade-out');\n                }\n                let info = this.model.get('group_info') || {};\n                if (info){\n                    if (info.privacy === 'public')\n                        this.$('.main-edit-header .block-name:not(.second-text)').html(xabber.getString(\"groupchat_public_group\"));\n                    if (info.privacy === 'incognito')\n                        this.$('.main-edit-header .block-name:not(.second-text)').html(xabber.getString(\"groupchat_incognito_group\"));\n                }\n            },\n\n            changeName: function (value) {\n                if (this.data_form && value){\n                    let data_form_index = this.data_form.fields.findIndex(x => x.var == 'name')\n                    if (!this.original_data_form_values.name)\n                        this.original_data_form_values.name = this.data_form.fields[data_form_index].values[0]\n                    this.data_form.fields[data_form_index].values = [value]\n                    this.updateSaveButton()\n                }\n            },\n\n            changeDescription: function (value) {\n                if (this.data_form){\n                    let data_form_index = this.data_form.fields.findIndex(x => x.var == 'description')\n                    if (!this.original_data_form_values.description)\n                        this.original_data_form_values.description = this.data_form.fields[data_form_index].values[0]\n                    this.data_form.fields[data_form_index].values = [value]\n                    this.updateSaveButton()\n                }\n            },\n\n            changeMembership: function (ev) {\n                let membership = $(ev.target).attr('id'),\n                    membership_text;\n                if (this.data_form && membership){\n                    let data_form_index = this.data_form.fields.findIndex(x => x.var == 'membership')\n                    if (!this.original_data_form_values.membership)\n                        this.original_data_form_values.membership = this.data_form.fields[data_form_index].values[0]\n                    this.data_form.fields[data_form_index].values = [membership]\n                    if (membership === 'open')\n                        membership_text = xabber.getString(\"groupchat_membership_type_open\");\n                    if (membership === 'member-only')\n                        membership_text = xabber.getString(\"groupchat_membership_type_members_only\");\n                    this.$('.membership-property span').text(membership_text);\n                    this.updateSaveButton()\n                }\n            },\n\n            changeIndex: function (ev) {\n                let index = $(ev.target).attr('id'),\n                    index_text;\n                if (this.data_form && index){\n                    let data_form_index = this.data_form.fields.findIndex(x => x.var == 'index')\n                    if (!this.original_data_form_values.index)\n                        this.original_data_form_values.index = this.data_form.fields[data_form_index].values[0]\n                    this.data_form.fields[data_form_index].values = [index]\n                    if (index === 'none')\n                        index_text = xabber.getString(\"groupchat_index_type_none\");\n                    if (index === 'local')\n                        index_text = xabber.getString(\"groupchat_index_type_local\");\n                    if (index === 'global')\n                        index_text = xabber.getString(\"groupchat_index_type_global\");\n                    this.$('.index-property span').text(index_text);\n                    this.updateSaveButton()\n                }\n            },\n\n\n            saveChanges: function() {\n                if (this.$('.btn-save').hasClass('fade-out'))\n                    return;\n                this.$('.btn-save').addClass('fade-out')\n                this.group_name_field.$input.prop('disabled', true);\n                this.group_description_field.$input.prop('disabled', true);\n                this.$('.edit-save-preloader.preloader-wrap').addClass('visible').find('.preloader-wrapper').addClass('active');\n                let iq = $iq({type: 'set', to: this.model.get('full_jid') || this.model.get('jid')})\n                        .c('query', {xmlns: Strophe.NS.GROUP_CHAT});\n                iq = this.account.addDataFormToStanza(iq, this.data_form);\n                this.account.sendIQFast(iq, (result) => {\n                    let $result  = $(result),\n                        group_info = _.clone(this.model.get('group_info')),\n                        attrs = {\n                            name: $result.find('field[var=\"name\"] value').text(),\n                            searchable: $result.find('field[var=\"index\"]').children('value').text(),\n                            model: $result.find('field[var=\"membership\"]').children('value').text(),\n                            description: $result.find('field[var=\"description\"] value').text(),\n                            status: $result.find('field[var=\"status\"]').children('value').text()\n                        };\n                    _.extend(group_info, attrs);\n                    this.model.set('group_info', group_info);\n                    this.group_name_field.$input.prop('disabled', false);\n                    this.group_description_field.$input.prop('disabled', false);\n                    this.hideProperty()\n                    this.$('.edit-save-preloader.preloader-wrap').removeClass('visible').find('.preloader-wrapper').removeClass('active');\n                    this.resetPanel()\n                }, (error) => {\n\n                    let err_text = $(error).find('error text').text() || xabber.getString(\"groupchat_you_have_no_permissions_to_do_it\");\n                    utils.dialogs.error(err_text);\n                    this.group_name_field.$input.prop('disabled', false);\n                    this.group_description_field.$input.prop('disabled', false);\n                    this.hideProperty()\n                    this.$('.edit-save-preloader.preloader-wrap').removeClass('visible').find('.preloader-wrapper').removeClass('active');\n                });\n            },\n\n            showEdit: function (ev) {\n                let iq_get_properties = $iq({to: this.model.get('full_jid') || this.model.get('jid'), type: 'get'})\n                    .c('query', {xmlns: Strophe.NS.GROUP_CHAT});\n                this.parent.$('.group-edit-preloader').html(env.templates.contacts.preloader())\n                this.account.sendIQFast(iq_get_properties, (properties) => {\n                    this.data_form = this.account.parseDataForm($(properties).find(`x[xmlns=\"${Strophe.NS.DATAFORM}\"]`));\n                    this.original_data_form_values = {}\n                    this.model.set('edit_hidden', false);\n                    this.parent.scrollToTop();\n                    if (this.parent.ps_container.length) {\n                        this.parent.ps_container.perfectScrollbar('destroy')\n                    }\n                    this.ps_container = this.$('.edit-wrap');\n                    if (this.ps_container.length) {\n                        this.ps_container.perfectScrollbar(\n                            _.extend(this.parent.ps_settings || {}, xabber.ps_settings)\n                        );\n                    }\n                    this.update()\n                    this.$('.group-property:not(.privacy-property)').removeClass('disabled')\n                    this.group_name_field.$input.hideIf(false)\n                    this.group_description_field.$input.hideIf(false)\n                    this.group_name_field.$input.prop('disabled', false);\n                    this.group_description_field.$input.prop('disabled', false);\n                    this.$('.circle-avatar input').prop('disabled', false);\n                    this.$('.set-groupchat-avatar-text').hideIf(false);\n                    this.$('.group-property').removeClass('property-disabled');\n                    this.$('.membership-property .details-icon-right').hideIf(false);\n                    this.$('.index-property .details-icon-right').hideIf(false);\n                    this.$('.circle-avatar .set-groupchat-avatar').hideIf(false);\n                    this.$('.btn-edit').hideIf(false)\n                    this.$('.edit-bottom-block').hideIf(false)\n                    this.$('.btn-default-restrictions').hideIf(false)\n                    this.$('.btn-delete-group').hideIf(false)\n                    this.$('.btn-clear-history-chat').hideIf(false)\n                    this.$('.btn-back-panel').hideIf(true)\n                    this.$('.block-name-panel').hideIf(true)\n                    this.$('.edit-bottom-block .btn-add-block').hideIf(true)\n                    this.$('.edit-bottom-block .btn-invite').hideIf(true)\n                    this.$('.btn-remove-selected').hideIf(true)\n                    this.$('.participants-edit-wrap').hideIf(true)\n                    this.parent.getInvitations((response) => {\n                        this.$('.invitations-variant .counted').html($(response).find('query').find('user').length);\n                    });\n                    this.model.getBlockedParticipants((response) => {\n                        this.$('.blocked-variant .counted').html($(response).find('query').children().length);\n                    });\n                    this.$('.edit-wrap').hideIf(this.model.get('edit_hidden'))\n                    this.parent.$('.group-edit-preloader').html('')\n                    this.group_description_field.$input.height(this.group_description_field.$input[0].scrollHeight - 8)\n                    this.$('.tabs .indicator').remove();\n                }, () => {\n                    this.model.set('edit_hidden', false);\n                    this.parent.scrollToTop();\n                    if (this.parent.ps_container.length) {\n                        this.parent.ps_container.perfectScrollbar('destroy')\n                    }\n                    this.ps_container = this.$('.edit-wrap');\n                    if (this.ps_container.length) {\n                        this.ps_container.perfectScrollbar(\n                            _.extend(this.parent.ps_settings || {}, xabber.ps_settings)\n                        );\n                    }\n                    this.update()\n                    this.group_name_field.$input.prop('disabled', true);\n                    this.group_description_field.$input.prop('disabled', true);\n                    if (!this.group_description_field.$input.val())\n                        this.group_description_field.$input.hideIf(true)\n                    this.$('.circle-avatar input').prop('disabled', true);\n                    this.$('.set-groupchat-avatar-text').hideIf(true);\n                    this.$('.group-property').addClass('property-disabled');\n                    this.$('.membership-property .details-icon-right').hideIf(true);\n                    this.$('.index-property .details-icon-right').hideIf(true);\n                    this.$('.circle-avatar .set-groupchat-avatar').hideIf(true);\n                    this.$('.group-property:not(.privacy-property)').addClass('disabled')\n                    this.$('.btn-edit').hideIf(true)\n                    this.$('.edit-bottom-block').hideIf(true)\n                    this.$('.btn-default-restrictions').hideIf(true)\n                    this.$('.btn-delete-group').hideIf(true)\n                    this.$('.btn-clear-history-chat').hideIf(true)\n                    this.$('.btn-back-panel').hideIf(true)\n                    this.$('.block-name-panel').hideIf(true)\n                    this.$('.edit-bottom-block .btn-add-block').hideIf(true)\n                    this.$('.edit-bottom-block .btn-invite').hideIf(true)\n                    this.$('.btn-remove-selected').hideIf(true)\n                    this.$('.participants-edit-wrap').hideIf(true)\n                    let info = this.model.get('group_info') || {};\n                    this.$('.edit-wrap').hideIf(this.model.get('edit_hidden'))\n                    this.parent.$('.group-edit-preloader').html('')\n                    this.group_description_field.$input.height(this.group_description_field.$input[0].scrollHeight - 8)\n                    this.$('.tabs .indicator').remove();\n                });\n            },\n\n            hideEdit: function (ev) {\n                this.model.set('edit_hidden', true);\n                if (this.parent.ps_container.length) {\n                    this.parent.ps_container.perfectScrollbar(\n                        _.extend(this.parent.ps_settings || {}, xabber.ps_settings)\n                    );\n                };\n                if (this.ps_container.length) {\n                    this.ps_container.perfectScrollbar('destroy')\n                }\n                this.$('.edit-wrap').hideIf(this.model.get('edit_hidden'));\n            },\n        });\n\n        xabber.ContactsBase = Backbone.Collection.extend({\n            model: xabber.Contact\n        });\n\n        xabber.GroupContacts = xabber.ContactsBase.extend({\n            initialize: function (models, options) {\n                this.group = options.group;\n                this.on(\"change\", this.onContactChanged, this);\n            },\n\n            comparator: function (contact1, contact2) {\n                if (xabber.settings.roster.sorting === 'online-first') {\n                    let s1 = contact1.get('status'),\n                        s2 = contact2.get('status'),\n                        sw1 = constants.STATUS_WEIGHTS[s1],\n                        sw2 = constants.STATUS_WEIGHTS[s2],\n                        sw1_offline = sw1 >= constants.STATUS_WEIGHTS.offline,\n                        sw2_offline = sw2 >= constants.STATUS_WEIGHTS.offline;\n                    if (sw1_offline ^ sw2_offline) {\n                        return sw1_offline ? 1 : -1;\n                    }\n                }\n                let name1, name2;\n                name1 = contact1.get('name').toLowerCase();\n                name2 = contact2.get('name').toLowerCase();\n                return name1 < name2 ? -1 : (name1 > name2 ? 1 : 0);\n            },\n\n            onContactChanged: function (contact) {\n                let changed = contact.changed;\n                if (_.has(changed, 'name') || _.has(changed, 'status_updated')) {\n                    this.sort();\n                    this.trigger('update_contact_item', contact);\n                }\n            }\n        });\n\n        xabber.Group = Backbone.Model.extend({\n            defaults: {\n                counter: {all: 0, online: 0}\n            },\n\n            initialize: function (attrs, options) {\n                this.account = options.account;\n                attrs.name || (attrs.name = attrs.id);\n                this.set(attrs);\n                this._settings = this.account.groups_settings.get(attrs.name);\n                if (!this._settings)\n                    this._settings = this.account.groups_settings.create({name: attrs.name});\n                this.settings = this._settings.attributes;\n                this.contacts = new xabber.GroupContacts(null, {group: this});\n                this.settings_view = new xabber.GroupSettingsView({model: this});\n                this.contacts.on(\"add update_contact_item\", this.updateCounter, this);\n                this.contacts.on(\"destroy\", this.onContactRemoved, this);\n                xabber._roster_settings.on(\"change\", this.onChangedRosterSettings, this);\n            },\n\n            isSpecial: function () {\n                return _.isNumber(this.get('id'));\n            },\n\n            updateCounter: function () {\n                let all = this.contacts.length,\n                    online = all - this.contacts.where({status: 'offline'}).length;\n                this.set('counter', {all: all, online: online});\n            },\n\n            renameGroup: function (new_name) {\n                let name = this.get('name'),\n                    attrs = _.clone(this.settings);\n                attrs.name = new_name;\n                this._settings.destroy();\n                this._settings = this.account.groups_settings.create(attrs);\n                this.settings = this._settings.attributes;\n                this.set({id: new_name, name: new_name});\n                this.trigger('rename', this, name);\n                _.each(_.clone(this.contacts.models), function (contact) {\n                    let groups = _.clone(contact.get('groups')),\n                        index = groups.indexOf(name);\n                    if (index >= 0) {\n                        groups.splice(index, 1);\n                    }\n                    index = groups.indexOf(new_name);\n                    if (index < 0) {\n                        groups.push(new_name);\n                    }\n                    contact.pushInRoster({groups: groups});\n                });\n            },\n\n            deleteGroup: function () {\n                let name = this.get('name');\n                this._settings.destroy();\n                _.each(_.clone(this.contacts.models), function (contact) {\n                    let groups = _.clone(contact.get('groups')),\n                        index = groups.indexOf(name);\n                    if (index >= 0) {\n                        groups.splice(index, 1);\n                    }\n                    contact.pushInRoster({groups: groups});\n                });\n            },\n\n            removeContact: function (contact) {\n                if (this.contacts.get(contact)) {\n                    this.contacts.remove(contact);\n                    this.onContactRemoved(contact);\n                }\n            },\n\n            onContactRemoved: function (contact) {\n                this.updateCounter();\n                this.trigger('remove_contact', contact);\n                this.contacts.length || this.destroy();\n            },\n\n            onChangedRosterSettings: function () {\n                let changed = xabber._roster_settings.changed;\n                if (_.has(changed, 'show_offline')) {\n                    this._settings.trigger('change:show_offline');\n                }\n                if (_.has(changed, 'sorting')) {\n                    this.contacts.sort();\n                    this._settings.trigger('change:sorting');\n                }\n            },\n\n            showSettings: function () {\n                this.settings_view.show();\n            }\n        });\n\n        xabber.GroupView = xabber.BasicView.extend({\n            className: 'roster-group',\n            events: {\n                \"click .group-head\": \"toggle\",\n                \"click .group-head .group-icon\": \"showGroupSettings\",\n                \"mouseover .group-head\": \"showSettingsIcon\",\n                \"mouseleave .group-head\": \"updateGroupIcon\"\n            },\n\n            _initialize: function () {\n                this.account = this.model.account;\n                this.updateName();\n                this.updateGroupIcon();\n                this.updateMembersCounter();\n                this.model.contacts.on(\"add\", this.onContactAdded, this);\n                this.model.on(\"remove_contact\", this.onContactRemoved, this);\n                this.model.contacts.on(\"update_contact_item\", this.updateContactItem, this);\n                this.model.on(\"change:name\", this.updateName, this);\n                this.model.on(\"change:counter\", this.updateMembersCounter, this);\n                this.model._settings.on(\"change:show_offline\", this.onChangedOfflineSetting, this);\n                this.model._settings.on(\"change:sorting\", this.onChangedSortingSetting, this);\n                this.data.on(\"change:expanded\", this.updateExpanded, this);\n            },\n\n            updateExpanded: function () {\n                let expanded = this.data.get('expanded');\n                this.$el.switchClass('shrank', !expanded);\n                this.$('.arrow').switchClass('mdi-chevron-down', expanded);\n                this.$('.arrow').switchClass('mdi-chevron-right', !expanded);\n                this.$('.roster-contact').showIf(expanded);\n                this.parent.parent.onListChanged();\n            },\n\n            updateGroupIcon: function () {\n                let mdi_icon, show_offline = this.model.settings.show_offline;\n                if (show_offline === 'default') {\n                    mdi_icon = 'settings';\n                } else if (show_offline === 'yes') {\n                    mdi_icon = 'group-filled';\n                } else if (show_offline === 'no') {\n                    mdi_icon = 'group-outline';\n                }\n                this.$('.group-icon').attr('data-mdi', mdi_icon).hideIf(mdi_icon === 'settings');\n            },\n\n            updateName: function () {\n                this.$('.group-name').text(this.model.get('name'));\n            },\n\n            updateMembersCounter: function () {\n                let counter = this.model.get('counter');\n                this.$('.participant-counter').text('('+counter.online+'/'+counter.all+')');\n            },\n\n            onContactAdded: function (contact) {\n                let view = this.addChild(contact.get('jid'), this.item_view, {model: contact});\n                this.updateContactItem(contact);\n            },\n\n            onContactRemoved: function (contact) {\n                this.removeChild(contact.get('jid'));\n                this.parent.parent.onListChanged();\n            },\n\n            updateContactItem: function (contact) {\n                let view = this.child(contact.get('jid'));\n                if (!view) return;\n                let roster_settings = xabber.settings.roster,\n                    group_settings = this.model.settings,\n                    is_default_show_offline = group_settings.show_offline === 'default',\n                    show_offline = group_settings.show_offline === 'yes' ||\n                        (is_default_show_offline && roster_settings.show_offline === 'yes'),\n                    is_offline = constants.STATUS_WEIGHTS[contact.get('status')] >= 6;\n\n                view.$el.switchClass('invisible', is_offline && !show_offline).detach();\n                let index = this.model.contacts.indexOf(contact);\n                if (index === 0) {\n                    this.$('.group-head').after(view.$el);\n                } else {\n                    this.$('.roster-contact').eq(index - 1).after(view.$el);\n                }\n                view.$el.showIf(this.data.get('expanded'));\n                this.parent.parent.onListChanged();\n                return view;\n            },\n\n            showSettingsIcon: function () {\n                this.$('.group-icon').attr('data-mdi', 'settings').removeClass('hidden');\n            },\n\n            showGroupSettings: function (ev) {\n                ev.stopPropagation();\n                this.model.showSettings();\n            },\n\n            onChangedOfflineSetting: function () {\n                this.updateGroupIcon();\n                let roster_settings = xabber.settings.roster,\n                    group_settings = this.model.settings,\n                    is_default_show_offline = group_settings.show_offline === 'default',\n                    show_offline = group_settings.show_offline === 'yes' ||\n                        (is_default_show_offline && roster_settings.show_offline === 'yes');\n                _.each(this.children, function (view) {\n                    let is_offline = constants.STATUS_WEIGHTS[view.model.get('status')] >= 6;\n                    view.$el.switchClass('invisible', is_offline && !show_offline);\n                });\n                this.parent.parent.onListChanged();\n            },\n\n            onChangedSortingSetting: function () {\n                _.each(this.children, function (view) { view.$el.detach(); });\n                this.model.contacts.each((c) => { this.updateContactItem(c); });\n                this.parent.parent.onListChanged();\n            }\n        });\n\n        xabber.GroupRightView = xabber.GroupView.extend({\n            template: templates.group_right,\n            item_view: xabber.ContactItemRightView,\n\n            __initialize: function () {\n                this.data.set('expanded', this.model.settings.expanded);\n            },\n\n            toggle: function () {\n                let expanded = !this.data.get('expanded');\n                this.data.set('expanded', expanded);\n                this.model._settings.save('expanded', expanded);\n            }\n        });\n\n        xabber.GroupLeftView = xabber.GroupView.extend({\n            template: templates.group_left,\n            item_view: xabber.ContactItemLeftView,\n\n            __initialize: function () {\n                this.data.set('expanded', true);\n            },\n\n            toggle: function (ev) {\n                ev.stopPropagation();\n                this.data.set('expanded', !this.data.get('expanded'));\n            }\n        });\n\n        xabber.GroupSettingsView = xabber.BasicView.extend({\n            className: 'modal main-modal group-settings',\n            template: templates.group_settings,\n            ps_selector: '.modal-content',\n            avatar_size: constants.AVATAR_SIZES.GROUP_SETTINGS,\n\n            events: {\n                \"change .offline input[type=radio][name=offline]\": \"setOffline\",\n                \"click .btn-apply\": \"applySettings\",\n                \"click .btn-delete\": \"deleteGroup\",\n                \"click .btn-cancel\": \"close\"\n            },\n\n            _initialize: function () {\n                this._settings = this.model._settings;\n                let name = this.model.get('name');\n                if (this.model.isSpecial()) {\n                    this.$('.group-name input').attr('readonly', true);\n                    this.$('.btn-delete').addClass('hidden');\n                }\n                this.model.on(\"destroy\", this.onDestroy, this);\n            },\n\n            render: function () {\n                this.$('.group-name input').val(this.model.get('name'));\n                this.$('.group-name .errors').addClass('hidden');\n                this.$('.offline input[type=radio][name=offline][value='+\n                    (this.model.settings.show_offline)+']').prop('checked', true);\n                this.$el.openModal({\n                    ready: function () {\n                        Materialize.updateTextFields();\n                    },\n                    complete: this.hide.bind(this)\n                });\n            },\n\n            setOffline: function (ev) {\n                this.model._settings.save('show_offline', ev.target.value);\n            },\n\n            validateName: function (name) {\n                if (!name) {\n                    return xabber.getString(\"dialog_add_circle__error__text_input_name\");\n                }\n                if (this.model.collection.get(name)) {\n                    return xabber.getString(\"dialog_add_circle__error__text_wrong_name\");\n                }\n            },\n\n            applySettings: function () {\n                let new_name = this.$('.group-name input').val();\n                if (new_name !== this.model.get('name')) {\n                    let name_error = this.validateName(new_name);\n                    if (name_error) {\n                        this.$('.group-name .errors').text(name_error).removeClass('hidden');\n                        return;\n                    } else {\n                        this.model.renameGroup(new_name);\n                    }\n                }\n                this.close();\n            },\n\n            deleteGroup: function () {\n                let name = this.model.get('name');\n                utils.dialogs.ask(xabber.getString(\"circle_remove\"), xabber.getString(\"circle_remove_confirm\", [name]), null, { ok_button_text: xabber.getString(\"remove\")})\n                    .done((result) => {\n                        result && this.model.deleteGroup();\n                    });\n            },\n\n            onHide: function () {\n                this.$el.detach();\n            },\n\n            close: function () {\n                this.$el.closeModal({ complete: this.hide.bind(this) });\n            },\n\n            onDestroy: function () {\n                this.$el.closeModal({ complete: this.remove.bind(this) });\n            }\n        });\n\n        xabber.Groups = Backbone.Collection.extend({\n            model: xabber.Group,\n\n            initialize: function (models, options) {\n                this.account = options.account;\n                this.on(\"change:id\", this.sort, this);\n                this.account.on('render_settings', this.render, this);\n            },\n\n            comparator: function (a, b) {\n                if (a.isSpecial() === b.isSpecial()) {\n                    return a.get('id') < b.get('id') ? -1 : 1;\n                }\n                return a.isSpecial() ? 1 : -1;\n            },\n\n            notSpecial: function () {\n                return this.filter(function (group) { return !group.isSpecial(); });\n            },\n\n            onGroupAdded: function (group) {\n                group.acc_view = new xabber.AccountGroupView({model: group});\n            },\n\n            render: function () {\n                this.on(\"add\", this.onGroupAdded, this);\n                this.models.forEach((group) => {\n                    group.acc_view = new xabber.AccountGroupView({model: group});\n                });\n            }\n        });\n\n        xabber.Contacts = xabber.ContactsBase.extend({\n            initialize: function (models, options) {\n                this.account = options.account;\n                this.account.on(\"deactivate destroy\", this.removeAllContacts, this);\n                this.collections = [];\n                this.on(\"add\", _.bind(this.updateInCollections, this, 'add'));\n                this.on(\"change\", _.bind(this.updateInCollections, this, 'change'));\n            },\n\n            addCollection: function (collection) {\n                this.collections.push(collection);\n            },\n\n            updateInCollections: function (event, contact) {\n                _.each(this.collections, function (collection) {\n                    collection.update(contact, event);\n                });\n            },\n\n            mergeContact: function (attrs) {\n                if (typeof attrs !== \"object\") {\n                    attrs = {jid: attrs};\n                }\n                let contact = this.get(attrs.jid);\n                if (contact) {\n                    if (attrs.avatar) {\n                        attrs.image = attrs.avatar;\n                        delete attrs.avatar;\n                        contact.cached_image = Images.getCachedImage(attrs.image);\n                    }\n                    contact.set(attrs);\n                } else {\n                    contact = this.create(attrs, {account: this.account});\n                }\n                return contact;\n            },\n\n            blockContact: function (jid, callback, errback) {\n                let iq = $iq({type: 'set'}).c('block', {xmlns: Strophe.NS.BLOCKING})\n                    .c('item', {jid: jid});\n                this.account.sendIQFast(iq, callback, errback);\n            },\n\n            unblockContact: function (jid, callback, errback) {\n                let iq = $iq({type: 'set'}).c('unblock', {xmlns: Strophe.NS.BLOCKING})\n                    .c('item', {jid: jid});\n                this.account.sendIQFast(iq, callback, errback);\n            },\n\n            removeAllContacts: function () {\n                _.each(_.clone(this.models), function (contact) {\n                    contact.destroy();\n                });\n                this.account.trigger('remove_saved_chat');\n            },\n\n            handlePresence: function (presence, jid) {\n                let contact = this.mergeContact(jid);\n                contact.handlePresence(presence);\n            }\n        });\n\n        xabber.BlockList = Backbone.Model.extend({\n            initialize: function (models, options) {\n                this.account = options.account;\n                this.list = {};\n                this.contacts = this.account.contacts;\n                this.contacts.on(\"add_to_blocklist\", this.onContactAdded, this);\n                this.contacts.on(\"remove_from_blocklist\", this.onContactRemoved, this);\n            },\n\n            length: function () {\n                return Object.keys(this.list).length;\n            },\n\n            isBlocked: function (jid) {\n                return this.list.hasOwnProperty(jid);\n            },\n\n            onContactRemoved: function (jid) {\n                delete this.list[jid];\n            },\n\n            onContactAdded: function (attrs) {\n                this.list[attrs.jid] = attrs;\n            },\n\n            registerHandler: function () {\n                this.account.connection.deleteHandler(this._stanza_handler);\n                this._stanza_handler = this.account.connection.addHandler(\n                    this.onBlockingIQ.bind(this),\n                    Strophe.NS.BLOCKING, 'iq', \"set\", null, this.account.get('jid')\n                );\n            },\n\n            getFromServer: function () {\n                let iq = $iq({type: 'get'}).c('blocklist', {xmlns: Strophe.NS.BLOCKING});\n                this.account.sendIQFast(iq, this.onBlockingIQ.bind(this));\n            },\n\n            onBlockingIQ: function (iq) {\n                let $elem = $(iq).find(`[xmlns=\"${Strophe.NS.BLOCKING}\"]`),\n                    tag = $elem[0].tagName.toLowerCase(),\n                    blocked = tag.startsWith('block');\n                $elem.find('item').each((idx, item) => {\n                    let jid = item.getAttribute('jid'),\n                        resource = Strophe.getResourceFromJid(jid),\n                        domain = Strophe.getDomainFromJid(jid),\n                        attrs = {jid},\n                        contact = this.contacts.get(jid);\n                    resource && (attrs.resource = true);\n                    (domain === jid) && (attrs.domain = true);\n                    if (blocked)\n                        this.contacts.trigger(\"add_to_blocklist\", attrs);\n                    else {\n                        this.contacts.trigger(\"remove_from_blocklist\", jid);\n                        contact && contact.trigger(\"remove_from_blocklist\", contact);\n                    }\n                    contact && contact.set('blocked', blocked);\n                });\n                return true;\n            }\n        });\n\n        xabber.Roster = xabber.ContactsBase.extend({\n            initialize: function (models, options) {\n                this.account = options.account;\n                this.roster_version = this.account.get('roster_version') || 0;\n                this.groups = this.account.groups;\n                this.contacts = this.account.contacts;\n                this.contacts.on(\"add_to_roster\", this.onContactAdded, this);\n                this.contacts.on(\"change_in_roster\", this.onContactChanged, this);\n                this.contacts.on(\"remove_from_roster\", this.onContactRemoved, this);\n            },\n\n            update: function (contact, event) {\n                let contains = contact.get('in_roster') || contact.get('known');\n                if (contains) {\n                    if (!this.get(contact)) {\n                        this.add(contact);\n                        contact.trigger(\"add_to_roster\", contact);\n                    } else if (event === 'change') {\n                        contact.trigger(\"change_in_roster\", contact);\n                    }\n                } else if (this.get(contact)) {\n                    this.remove(contact);\n                    contact.trigger(\"remove_from_roster\", contact);\n                }\n            },\n\n            onContactAdded: function (contact) {\n                if (!contact.get('in_roster'))\n                    return;\n                let groups = contact.get('groups');\n                if (!groups.length) {\n                    this.addContactToGroup(contact, constants.GENERAL_GROUP_ID);\n                } else {\n                    _.each(groups, _.bind(this.addContactToGroup, this, contact));\n                }\n            },\n\n            onContactChanged: function (contact) {\n                let changed = contact.changed,\n                    known_changed = _.has(changed, 'known'),\n                    in_roster_changed = _.has(changed, 'in_roster'),\n                    groups_changed = _.has(changed, 'groups');\n                if (in_roster_changed || known_changed || groups_changed) {\n                    let groups;\n                    if (contact.get('in_roster')) {\n                        groups = _.clone(contact.get('groups'));\n                        if (!groups.length) {\n                            groups.push(constants.GENERAL_GROUP_ID);\n                        }\n                    } else if (contact.get('known')) {\n                        groups = [];\n                    }\n                    // TODO: optimize\n                    let groups_to_remove = this.groups.filter(function (group) {\n                        return !_.contains(groups, group.get('id'));\n                    });\n                    _.each(groups_to_remove, function (group) {\n                        group.removeContact(contact);\n                    });\n                    _.each(groups, _.bind(this.addContactToGroup, this, contact));\n                    contact.trigger('update_groups');\n                }\n            },\n\n            onContactRemoved: function (contact) {\n                _.each(this.groups.filter(), function (group) {\n                    group.removeContact(contact);\n                });\n            },\n\n            getGroup: function (name) {\n                let group = this.groups.get(name);\n                if (group)\n                    return group;\n                let attrs = {id: name};\n                if (name === constants.GENERAL_GROUP_ID) {\n                    attrs.name = xabber.settings.roster.general_group_name;\n                } else if (name === constants.NON_ROSTER_GROUP_ID) {\n                    attrs.name = xabber.settings.roster.non_roster_group_name;\n                }\n                return this.groups.create(attrs, {account: this.account});\n            },\n\n            addContactToGroup: function (contact, name) {\n                let group = this.getGroup(name);\n                group.contacts.add(contact);\n            },\n\n            registerHandler: function () {\n                this.account.connection.deleteHandler(this._stanza_handler);\n                this._stanza_handler = this.account.connection.addHandler(\n                    this.onRosterIQ.bind(this),\n                    Strophe.NS.ROSTER, 'iq', \"set\", null, this.account.get('jid')\n                );\n            },\n\n            syncFromServer: function (options, synchronization_with_stamp, is_first_sync) {\n                options = options || {};\n                let request_attrs = {xmlns: Strophe.NS.SYNCHRONIZATION};\n                if (!options.after) {\n                    if (options.stamp)\n                        request_attrs.stamp = options.stamp;\n                    else if (this.account.last_msg_timestamp)\n                        request_attrs.stamp = this.account.last_msg_timestamp * 1000;\n                }\n                delete(options.stamp);\n                let iq = $iq({type: 'get'}).c('query', request_attrs).cnode(new Strophe.RSM(options).toXML());\n                this.account.sendFast(iq, (response) => {\n                    this.onSyncIQ(response, request_attrs.stamp, synchronization_with_stamp, is_first_sync, options.last_version_sync);\n                });\n            },\n\n            syncCachedConversations: function (conv_list, request_with_stamp, is_first_sync) {\n                $(conv_list).each((idx, item) => {\n                    this.syncConversation(null, null, item.conversation, is_first_sync);\n                });\n            },\n\n            syncConversations: function (iq, request_with_stamp, is_first_sync) {\n                $(iq).find('conversation').each((idx, item) => {\n                    this.syncConversation(iq, request_with_stamp, item, is_first_sync);\n                });\n            },\n\n            syncConversation: function (iq, request_with_stamp, item, is_first_sync) {\n                if (!$(item).length){\n                    return;\n                }\n                if (!iq)\n                    item = $($.parseXML(item)).find('conversation')[0];\n                let $item = $(item),\n                    jid = $item.attr('jid'), saved = false;\n                if (jid === this.account.get('jid'))\n                    saved = true;\n                if ($item.attr('type') === Strophe.NS.SYNCHRONIZATION_OLD_OMEMO)\n                    return true;\n                let $sync_metadata = $item.children('metadata[node=\"' + Strophe.NS.SYNCHRONIZATION + '\"]'),\n                    type = $item.attr('type'),\n                    presence = $item.children('presence'),\n                    $group_metadata = $item.children('metadata[node=\"' + Strophe.NS.GROUP_CHAT + '\"]'),\n                    is_incognito =  type === Strophe.NS.GROUP_CHAT && $group_metadata.children('x[xmlns=\"' + Strophe.NS.GROUP_CHAT + '\"]').children('privacy').text() === 'incognito',\n                    is_private = is_incognito && $group_metadata.children('x[xmlns=\"' + Strophe.NS.GROUP_CHAT + '\"]').children('parent').text(),\n                    is_group_chat =  type === Strophe.NS.GROUP_CHAT || is_private || is_incognito,\n                    encrypted = type === Strophe.NS.SYNCHRONIZATION_OMEMO,\n                    contact = !saved && this.contacts.mergeContact({jid: jid, group_chat: is_group_chat, private_chat: is_private, incognito_chat: is_incognito}),\n                    chat = saved ? this.account.chats.getSavedChat() : this.account.chats.getChat(contact, encrypted && 'encrypted', true),\n                    message = $sync_metadata.children('last-message').children('message'),\n                    current_call = $item.children('metadata[node=\"' + Strophe.NS.JINGLE_MSG + '\"]').children('call'),\n                    $unread_messages = $sync_metadata.children('unread'),\n                    chat_timestamp = Math.trunc(Number($item.attr('stamp'))/1000),\n                    last_read_msg = $unread_messages.attr('after'),\n                    last_delivered_msg = $sync_metadata.children('delivered').attr('id'),\n                    last_displayed_msg = $sync_metadata.children('displayed').attr('id'),\n                    unread_msgs_count = Number($unread_messages.attr('count')) || 0,\n                    is_invite =  message.find('invite').length,\n                    msg_retraction_version = $item.children('metadata[node=\"' + Strophe.NS.REWRITE + '\"]').children('retract').attr('version'),\n                    msg, options = {synced_msg: true,};\n                (iq && !($item.attr('status') === 'deleted')) && this.account.cached_sync_conversations.putInCachedConversations({\n                    account_conversation_type: $(item).attr('jid') +  '/' + $(item).attr('type'),\n                    conversation: item.outerHTML,\n                });\n                if (!chat.item_view.content && (is_invite || encrypted && this.account.omemo)) {\n                    chat.item_view.content = new xabber.ChatContentView({chat_item: chat.item_view});\n                }\n                if ($item.attr('pinned') || $item.attr('pinned') === '0'){\n                    chat.set('pinned', $item.attr('pinned'));\n                }\n                if (encrypted && this.account.omemo) {\n                    chat.set('timestamp', chat_timestamp);\n                    chat.set('opened', true);\n                    if (iq && $(iq).attr('type') != 'set')\n                        chat.item_view.updateEncryptedChat();\n                }\n                if (!saved) {\n                    if ($item.attr('mute') || $item.attr('mute') === '0') {\n                        if ($item.attr('mute') < (Date.now() / 1000))\n                            chat.set('muted', false);\n                        else\n                            chat.set('muted', $item.attr('mute'));\n                        this.account.chat_settings.updateMutedList(contact.get('jid'), $item.attr('mute'));\n                        if (contact.details_view_right)\n                            contact.details_view_right.updateNotifications();\n                    }\n                    else{\n                        chat.set('muted', false);\n                    }\n                }\n                if ($item.attr('status') === 'archived')\n                    chat.set('archived', true);\n                else if ($item.attr('status') === 'active' && !saved)\n                    chat.set('archived', false);\n                if ($item.attr('status') === 'deleted') {\n                    contact && contact.details_view && contact.details_view.isVisible() && xabber.body.setScreen(xabber.body.screen.get('name'), {right: undefined});\n                    chat.get('display') && xabber.body.setScreen(xabber.body.screen.get('name'), {right_contact: '', right: undefined});\n                    chat.set('opened', false);\n                    chat.set('const_unread', 0);\n                    this.account.cached_sync_conversations.removeFromCachedConversations($(item).attr('jid') +  '/' + $(item).attr('type'));\n                    this.account.chat_settings.updateGroupChatsList(contact.get('jid'), false);\n                    xabber.toolbar_view.recountAllMessageCounter();\n                    xabber.chats_view.clearSearch();\n                    contact && contact.set('sync_deleted', true);\n                    if (is_group_chat) {\n                        contact && contact.set('in_roster', false);\n                        contact && contact.set('known', false);\n                        contact && contact.set('removed', true);\n                        this.account.cached_roster.removeFromRoster(jid);\n                    }\n                }\n                else\n                    contact && contact.set('sync_deleted', false);\n                if ($group_metadata.length) {\n                    contact.participants && contact.participants.createFromStanza($group_metadata.children(`user[xmlns=\"${Strophe.NS.GROUP_CHAT}\"]`));\n                }\n                if (current_call.length) {\n                    let $jingle_message = current_call.children('message'),\n                        full_jid = $jingle_message.attr('from'),\n                        session_id = $jingle_message.children('propose').attr('id');\n                    chat.initIncomingCall(full_jid, session_id);\n                }\n                chat.set('last_delivered_id', last_delivered_msg);\n                chat.set('last_displayed_id', last_displayed_msg);\n                chat.set('last_read_msg', last_read_msg);\n                chat.set('sync_type', type);\n                if (!message.length) {\n                    chat.set('timestamp', chat_timestamp);\n                    if (!(Number(last_delivered_msg) || Number(last_displayed_msg) || Number(last_read_msg))\n                        && !chat.item_view.content && !chat.get('group_chat')){\n                        chat.item_view.content = new xabber.ChatContentView({chat_item: chat.item_view});\n                    }\n                    chat.item_view.updateEmptyChat();\n                }\n                if (is_group_chat) {\n                    if (request_with_stamp && !is_first_sync) {\n                        if (chat.retraction_version < msg_retraction_version)\n                            chat.trigger(\"get_retractions_list\");\n                    } else\n                        chat.retraction_version = msg_retraction_version;\n                }\n                if (request_with_stamp && chat.item_view && chat.item_view.content) {\n                    chat.trigger('get_missed_history', request_with_stamp/1000);\n                }\n                unread_msgs_count && (options.is_unread = true);\n                options.delay = message.children('time');\n                if (encrypted && this.account.omemo)\n                    unread_msgs_count && unread_msgs_count--;\n                message.length && (msg = this.account.chats.receiveChatMessage(message, options));\n                if (!(encrypted && !this.account.omemo)){\n                    chat.messages_unread.reset();\n                    chat.set('unread', 0);\n                    chat.set('const_unread', unread_msgs_count);\n                }\n                if (msg) {\n                    if (!msg.get('is_unread') && $unread_messages.attr('count') > 0 && !msg.isSenderMe() && ($unread_messages.attr('after') < msg.get('stanza_id') || $unread_messages.attr('after') < msg.get('contact_stanza_id')))\n                        msg.set('is_unread', true);\n                    if(!(is_invite || encrypted && this.account.omemo)) {\n                        if (msg.isSenderMe() && msg.get('stanza_id') == last_displayed_msg)\n                            msg.set('state', constants.MSG_DISPLAYED);\n                        else if (msg.isSenderMe() && msg.get('stanza_id') == last_delivered_msg)\n                            msg.set('state', constants.MSG_DELIVERED);\n                        this.account.messages.add(msg);\n                        if ((chat.last_message && (msg.get('timestamp') > chat.last_message.get('timestamp'))) || !chat.last_message){\n                            chat.last_message = msg;\n                            chat.item_view.updateLastMessage(msg);\n                        }\n                    }\n                    chat.set('first_archive_id', msg.get('stanza_id'));\n                }\n                if (presence.length)\n                    contact && contact.handlePresence(presence[0]);\n                else {\n                    contact && contact.set('subscription_request_in', false)\n                }\n                xabber.toolbar_view.recountAllMessageCounter();\n            },\n\n            onSyncIQ: function (iq, request_with_stamp, synchronization_with_stamp, is_first_sync, is_last_sync) {\n                let sync_timestamp = Number($(iq).children(`query[xmlns=\"${Strophe.NS.SYNCHRONIZATION}\"]`).attr('stamp')),\n                    sync_rsm_after = $(iq).find(`query set[xmlns=\"${Strophe.NS.RSM}\"]`).children('last').text();\n                this.account.last_msg_timestamp = Math.round(sync_timestamp/1000);\n                let last_chat_msg_id = $(iq).find('set last'),\n                    encrypted_retract_version = $(iq).find('query conversation[type=\"encrypted\"]').first().children('metadata[node=\"' + Strophe.NS.REWRITE + '\"]').children('retract').attr('version'),\n                    retract_version = $(iq).find('query conversation[type=\"chat\"]').first().children(`metadata[node=\"${Strophe.NS.REWRITE}\"]`).children('retract').attr('version');\n                if (!request_with_stamp)\n                    last_chat_msg_id.length ? (this.last_chat_msg_id = last_chat_msg_id.text()) : (this.conversations_loaded = true);\n                if (!_.isUndefined(encrypted_retract_version) && this.account.omemo && this.account.omemo.getRetractVersion() < encrypted_retract_version)\n                    this.account.getAllMessageRetractions(true);\n                if (request_with_stamp) {\n                    if (this.account.retraction_version < retract_version)\n                        this.account.getAllMessageRetractions();\n                } else {\n                    this.account.retraction_version = retract_version;\n                }\n                this.account.set('last_sync', sync_timestamp);\n                this.account.settings.update_settings({last_sync_timestamp: sync_timestamp});\n                let dfd = new $.Deferred();\n                dfd.done((is_cached) => {\n                    xabber.chats_view.hideChatsFeedback();\n                    if (!request_with_stamp)\n                        this.account.chats.getSavedChat();\n                    if (is_first_sync)\n                        this.account.set('first_sync', sync_timestamp);\n                    if (!$(iq).find('conversation').length || $(iq).find('conversation').length < constants.SYNCHRONIZATION_RSM_MAX ){\n                        if (is_first_sync) {\n                            this.getRoster();\n                        }\n                    }\n                    else if ($(iq).find('conversation').length) {\n                        if (!synchronization_with_stamp) {\n                            this.syncFromServer({max: constants.SYNCHRONIZATION_RSM_MAX, after: sync_rsm_after});\n                        }\n                        else {\n                            this.account.get('last_sync') && this.syncFromServer({stamp: this.account.get('last_sync'), max: constants.SYNCHRONIZATION_RSM_MAX}, true);\n                        }\n                    }\n                });\n                if (is_first_sync)\n                    this.account.cached_sync_conversations.getAllFromCachedConversations((res) => {\n                        let synced_conversations = $(iq).find('conversation').map(function () {\n                            return $(this).attr('jid') +  '/' + $(this).attr('type');\n                        }).toArray();\n                        res = res.filter(item => !synced_conversations.includes(item.account_conversation_type))\n                        this.syncCachedConversations(res, request_with_stamp, is_first_sync);\n                        this.syncConversations(iq, request_with_stamp, is_first_sync);\n                        dfd.resolve(true);\n                    });\n                else{\n                    this.syncConversations(iq, request_with_stamp);\n                    dfd.resolve();\n                }\n            },\n\n            getRoster: function () {\n                let request_ver = this.roster_version;\n                this.account.cached_roster.getAllFromRoster((roster_items) => {\n                    // $(roster_items).each((idx, roster_item) => {\n                    //     this.contacts.mergeContact(roster_item);\n                    // });\n                    if (!roster_items.length && request_ver != 0) {\n                        this.roster_version = 0;\n                    }\n                    this.getFromServer();\n                });\n            },\n\n            getFromServer: function () {\n                let iq = $iq({type: 'get'}).c('query', {xmlns: Strophe.NS.ROSTER, ver: this.roster_version});\n                this.account.sendIQFast(iq, (iq) => {\n                    this.onRosterIQ(iq);\n                    this.account.get('first_sync') && this.syncFromServer({stamp: this.account.get('first_sync'), max: constants.SYNCHRONIZATION_RSM_MAX, last_version_sync: true}, true);\n                    this.account.dfd_presence.resolve();\n                });\n            },\n\n            onRosterIQ: function (iq) {\n                let new_roster_version = $(iq).children('query').attr('ver');\n                if (iq.getAttribute('type') === 'set') {\n                    this.account.onSetIQResult(iq);\n                }\n                else {\n                    new_roster_version && (this.roster_version != new_roster_version) && this.account.cached_roster.clearDataBase();\n                    if (iq.getAttribute('type') === 'result') {\n                        new_roster_version && (this.roster_version = new_roster_version);\n                        this.account.save('roster_version', this.roster_version);\n                    }\n                }\n                $(iq).children('query').find('item').each((idx, item) => {\n                    this.onRosterItem(item);\n                });\n                return true;\n            },\n\n            onRosterItem: function (item) {\n                let jid = item.getAttribute('jid');\n                if (jid === this.account.get('jid'))\n                    return;\n                let contact = this.contacts.mergeContact(jid),\n                    subscription = item.getAttribute(\"subscription\"),\n                    subscription_preapproved = item.getAttribute(\"approved\"),\n                    ask = item.getAttribute(\"ask\");\n                if (contact.get('invitation') && (subscription === 'both' || subscription === 'to')) {\n                    contact.set('invitation', false);\n                    contact.trigger('remove_invite');\n                }\n                if (subscription === 'remove') {\n                    contact.set({\n                        in_roster: false,\n                        known: false,\n                        name: contact.get('jid'),\n                        subscription: undefined,\n                        subscription_request_out: false\n                    });\n                    contact.set('subscription_preapproved', false)\n                    this.account.cached_roster.removeFromRoster(jid);\n                    return;\n                }\n                let groups = [];\n                $(item).find('group').each(function () {\n                    let group = $(this).text();\n                    groups.indexOf(group) < 0 && groups.push(group);\n                });\n                let attrs = {\n                    subscription: subscription || 'none',\n                    in_roster: true,\n                    roster_name: item.getAttribute(\"name\"),\n                    groups: groups\n                };\n                if (subscription === 'both') {\n                    attrs.subscription_request_out = false;\n                    attrs.subscription_request_in = false;\n                }\n                if (subscription === 'from')\n                    attrs.subscription_request_in = false;\n                if (subscription === 'to')\n                    attrs.subscription_request_out = false;\n                if (ask === 'subscribe')\n                    attrs.subscription_request_out = true;\n                else\n                    attrs.subscription_request_out = false;\n                attrs.roster_name && (attrs.name = attrs.roster_name);\n                this.account.server_features.get(Strophe.NS.SUBSCRIPTION_PREAPPROVAL) && (attrs.subscription_preapproved = subscription_preapproved ? true : subscription_preapproved);\n                contact.set(attrs);\n                contact.updateCachedInfo();\n            }\n        });\n\n        xabber.AccountRosterView = xabber.BasicView.extend({\n            className: 'account-roster-wrap',\n\n            events: {\n                \"click .roster-account-info-wrap .status-button\": \"openChangeStatus\",\n                \"click .roster-account-info\": \"toggle\"\n            },\n\n            _initialize: function (options) {\n                this.account = options.account;\n                this.groups = this.account.groups;\n                this.roster = this.account.roster;\n                this.contacts = this.account.contacts;\n                this.$el.attr('data-jid', this.account.get('jid'));\n                this.$el.appendTo(this.parent.$('.contact-list'));\n                this.$info = this.$('.roster-account-info-wrap');\n                this.updateName();\n                this.updateStatus();\n                this.updateAvatar();\n                this.updateColorScheme();\n                this.account.on(\"change:name\", this.updateName, this);\n                this.account.on(\"change:image\", this.updateAvatar, this);\n                this.account.on(\"change:status_updated\", this.updateStatus, this);\n                this.account.settings.on(\"change:color\", this.updateColorScheme, this);\n                this.groups.on(\"add\", this.onGroupAdded, this);\n                this.groups.on(\"rename\", this.onGroupRenamed, this);\n                this.groups.on(\"destroy\", this.onGroupRemoved, this);\n                this.data.on(\"change:expanded\", this.updateExpanded, this);\n                this.data.set('expanded', true);\n            },\n\n            updateName: function () {\n                this.$info.find('.name').text(this.account.get('name'));\n            },\n\n            updateStatus: function () {\n                this.$info.find('.status').attr('data-status', this.account.get('status'));\n                this.$info.find('.status-message').text(this.account.getStatusMessage());\n            },\n\n            updateAvatar: function () {\n                let image = this.account.cached_image;\n                this.$info.find('.circle-avatar').setAvatar(image, this.avatar_size);\n            },\n\n            updateColorScheme: function () {\n                this.$el.attr('data-color', this.account.settings.get('color'));\n            },\n\n            updateExpanded: function () {\n                let expanded = this.data.get('expanded');\n                this.$el.switchClass('shrank', !expanded);\n                this.parent.updateScrollBar();\n            },\n\n            updateGroupPosition: function (view) {\n                view.$el.detach();\n                let index = this.groups.indexOf(view.model);\n                if (index === 0) {\n                    this.$info.after(view.$el);\n                } else {\n                    this.$('.roster-group').eq(index - 1).after(view.$el);\n                }\n                this.parent.updateScrollBar();\n            },\n\n            onGroupAdded: function (group) {\n                let view = this.addChild(group.get('id'), this.group_view, {model: group});\n                this.updateGroupPosition(view);\n            },\n\n            onGroupRenamed: function (group, old_name) {\n                let view = this.child(old_name);\n                delete this.children[old_name];\n                this.children[group.get('name')] = view;\n                view && this.updateGroupPosition(view);\n            },\n\n            onGroupRemoved: function (group) {\n                this.removeChild(group.get('id'));\n            },\n\n            toggle: function (ev) {\n                this.data.set('expanded', !this.data.get('expanded'));\n            },\n\n            openChangeStatus: function (ev) {\n                if (!xabber.change_status_view)\n                    xabber.change_status_view = new xabber.ChangeStatusView();\n                xabber.change_status_view.open(this.account);\n            }\n        });\n\n        xabber.AccountRosterRightView = xabber.AccountRosterView.extend({\n            template: templates.account_roster_right,\n            group_view: xabber.GroupRightView,\n            avatar_size: constants.AVATAR_SIZES.ROSTER_RIGHT_ACCOUNT_ITEM,\n\n            __initialize: function () {\n                this.contacts.on(\"add_to_roster change_in_roster remove_from_roster\",\n                    this.updateCounter, this);\n                this.contacts.on(\"add_to_roster remove_from_roster\",\n                    this.updateGlobalCounter, this);\n            },\n\n            updateCounter: function () {\n                let all = this.roster.length,\n                    online = all - this.roster.where({status: 'offline'}).length;\n                this.$info.find('.counter').text(online + '/' + all);\n            },\n\n            updateGlobalCounter: function () {\n                this.parent.updateCounter();\n            }\n        });\n\n        xabber.AccountRosterLeftView = xabber.AccountRosterView.extend({\n            template: templates.account_roster_left,\n            group_view: xabber.GroupLeftView,\n            avatar_size: constants.AVATAR_SIZES.ROSTER_LEFT_ACCOUNT_ITEM,\n\n            __initialize: function () {\n                this.$info.find('.jid').text(this.account.get('jid'));\n            },\n\n            search: function (query) {\n                this.$el.removeClass('shrank');\n                this.$('.group-head').addClass('hidden');\n                let count = 0, hashes = {};\n                this.$('.roster-contact').each((idx, item) => {\n                    let $item = $(item),\n                        jid = $item.data('jid'),\n                        contact = this.roster.get(jid);\n                    if (!contact) return;\n                    if (hashes[contact.hash_id]) {\n                        $item.addClass('hidden');\n                        return;\n                    }\n                    hashes[contact.hash_id] = true;\n                    let name = contact.get('name').toLowerCase(),\n                        hide = name.indexOf(query) < 0 && jid.indexOf(query) < 0;\n                    $item.hideIf(hide);\n                    hide || count++;\n                });\n                this.$('.roster-account-info-wrap').showIf(count);\n            },\n\n            searchAll: function () {\n                this.$el.switchClass('shrank', !this.data.get('expanded'));\n                this.$('.roster-account-info-wrap').removeClass('hidden');\n                this.$('.group-head').removeClass('hidden');\n                this.$('.list-item').removeClass('hidden');\n            }\n        });\n\n        xabber.BlockListView = xabber.BasicView.extend({\n            avatar_size: constants.AVATAR_SIZES.CONTACT_BLOCKED_ITEM,\n            events: {\n                \"click .blocked-item\": \"onTabClick\",\n                \"click .btn-reset-panel\": \"deselectParticipants\",\n                \"click .btn-remove-selected\": \"actionSelectedParticipants\",\n                \"click .blocked-contact input\": \"selectUnblock\",\n                \"click .btn-unblock-selected\": \"unblockSelected\"\n            },\n\n            _initialize: function (options) {\n                this.account = options.account;\n                for (let jid in this.account.blocklist.list) {\n                    this.onContactAdded(this.account.blocklist.list[jid], false);\n                };\n                this.$('.blocked-item:not(.hidden)').first().click().find('a').addClass('active');\n                this.hideTabs();\n                this.account.contacts.on(\"add_to_blocklist\", this.onContactAdded, this);\n                this.account.contacts.on(\"remove_from_blocklist\", this.onContactRemoved, this);\n            },\n\n            render: function (options) {\n                this.deselectBlocked();\n                this.updateIndicator();\n                xabber.once(\"update_css\", this.updateIndicator, this);\n            },\n\n            updateIndicator: function () {\n                this.$('.tabs .indicator').remove();\n                this.$('.tabs').tabs();\n                this.$('.indicator').addClass('ground-color-500');\n            },\n\n            selectUnblock: function (ev) {\n                this.updateUnblockButton();\n            },\n\n            deselectBlocked: function (ev) {\n                this.$('.blocked-contact input').prop('checked', false)\n                this.updateUnblockButton();\n            },\n\n            updateUnblockButton: function () {\n                let has_changes = this.$('.blocked-contact input:checked').length;\n                this.parent.$('.btn-unblock-selected').hideIf(!has_changes)\n                this.parent.$('.btn-deselect-blocked').hideIf(!has_changes)\n                this.parent.$('.btn-block').hideIf(has_changes)\n            },\n\n            unblockSelected: function (ev) {\n                let selected = this.$('.blocked-contact input:checked').closest('.blocked-contact');\n                selected.each((index, item) => {\n                    this.unblockContactByJid($(item).attr('data-jid'))\n                });\n            },\n\n            unblockContactByJid: function (jid) {\n                let contact = this.account.contacts.get(jid);\n                if (contact)\n                    contact.unblock();\n                else {\n                    this.account.contacts.unblockContact(jid);\n                }\n            },\n\n            onTabClick: function (ev) {\n                let tab = $(ev.target).closest('.blocked-item'),\n                    tab_name = $(ev.target).closest('.blocked-item').attr('data-tab-name');\n                this.$('.blocked-item a').removeClass('active');\n                tab.find('a').addClass('active');\n                this.$('.blocked-items-container').addClass('hidden');\n                this.$('.' + tab_name).removeClass('hidden');\n                this.$('.blocked-contact input').prop('checked', false)\n                this.updateUnblockButton();\n            },\n\n            hideTabs: function () {\n                this.$('.tabs').hideIf(this.$('.blocked-item:not(.hidden)').length === 1)\n            },\n\n            hideEmptyContainers: function () {\n                let tabs = this.$('.blocked-list:empty');\n                tabs.each((idx, item) => {\n                    let tab_name = $(item).closest('.blocked-items-container').addClass('hidden').attr('data-tab-name');\n                    this.$('.' + tab_name).addClass('hidden').removeClass('tab');\n                });\n                if (this.$('.blocked-item.hidden .active').length){\n                    this.$('.blocked-item:not(.hidden)').first().click().find('a').addClass('active');\n\n                }\n                this.hideTabs();\n                this.updateUnblockButton();\n                this.updateIndicator();\n            },\n\n            onContactAdded: function (attrs) {\n                let tmp = templates.contact_blocked_item({jid: attrs.jid});\n                if (attrs.resource) {\n                    this.$('.invitations-item').removeClass('hidden').addClass('tab');\n                    this.$('.blocked-invitations-wrap').find('.blocked-invitations').append(tmp);\n                }\n                else if (attrs.domain) {\n                    this.$('.domains-item').removeClass('hidden').addClass('tab');\n                    let $domain_wrap = this.$('.blocked-domains-wrap'),\n                        $desc = $domain_wrap.find('.blocked-item-description');\n                    $domain_wrap.find('.blocked-domains').append(tmp);\n                    $desc.text($desc.text() + ($desc.text() ? ', ' : \"\") + attrs.jid);\n                }\n                else {\n                    this.$('.contacts-item').removeClass('hidden').addClass('tab');\n                    this.$('.blocked-contacts-wrap').find('.blocked-contacts').append(tmp);\n                    let $desc = this.$('.blocked-contacts-wrap .blocked-item-description');\n                    $desc.text($desc.text() + ($desc.text() ? ', ' : \"\") + attrs.jid);\n                }\n                this.$('.placeholder').addClass('hidden');\n                this.hideTabs();\n                this.updateIndicator();\n                if (this.$('.blocked-items-container.hidden').length === 3)\n                    this.$('.blocked-list:not(:empty)').closest('.blocked-items-container').removeClass('hidden');\n                this.isVisible() && this.parent.updateScrollBar();\n            },\n\n            onContactRemoved: function (jid) {\n                let $elem = this.$(`.blocked-contact[data-jid=\"${jid}\"]`);\n                let blocked_list = $elem.closest('.blocked-list'),\n                    reg = new RegExp(('\\\\,\\\\s' + jid + '|' + jid + '\\\\,\\\\s' + '|' + jid)),\n                    blocked_contacts_desc = $elem.closest('.blocked-contacts-wrap').showIf(blocked_list.children().length > 1).find('.blocked-item-description'),\n                    blocked_domains_desc = $elem.closest('.blocked-domains-wrap').showIf(blocked_list.children().length > 1).find('.blocked-item-description');\n                $elem.closest('.blocked-invitations-wrap').showIf(blocked_list.children().length > 1);\n                blocked_contacts_desc.text(blocked_contacts_desc.text().replace(reg, \"\"));\n                blocked_domains_desc.text(blocked_domains_desc.text().replace(reg, \"\"));\n                $elem.detach();\n                this.$('.placeholder').hideIf(this.account.blocklist.length());\n                this.parent.updateScrollBar();\n                this.hideEmptyContainers();\n            },\n        });\n\n        xabber.RosterView = xabber.SearchPanelView.extend({\n            ps_selector: '.contact-list-wrap',\n\n            _initialize: function () {\n                this._settings = xabber._roster_settings;\n                this.model.on(\"activate\", this.updateOneRosterView, this);\n                this.model.on(\"update_order\", this.updateRosterViews, this);\n                this.model.on(\"deactivate destroy\", this.removeRosterView, this);\n                this.on(\"before_hide\", this.saveScrollBarOffset, this);\n                this.$('input').on('input', this.updateSearch.bind(this));\n            },\n\n            updateOneRosterView: function (account) {\n                let jid = account.get('jid'),\n                    view = this.child(jid);\n                if (view) {\n                    view.$el.detach();\n                } else if (account.isConnected()) {\n                    view = this.addChild(jid, this.account_roster_view, {account: account});\n                } else {\n                    return;\n                }\n                let index = this.model.connected.indexOf(account);\n                if (index === 0) {\n                    this.$('.contact-list').prepend(view.$el);\n                } else {\n                    this.$('.contact-list').children().eq(index - 1).after(view.$el);\n                }\n                this.updateScrollBar();\n            },\n\n            updateRosterViews: function () {\n                _.each(this.children, function (view) { view.detach(); });\n                this.model.each((account) => {\n                    let jid = account.get('jid'), view = this.child(jid);\n                    view && this.$('.contact-list').append(view.$el);\n                });\n                this.updateScrollBar();\n            },\n\n            removeRosterView: function (account) {\n                this.removeChild(account.get('jid'));\n                this.updateScrollBar();\n            }\n        });\n\n        xabber.RosterRightView = xabber.RosterView.extend({\n            className: 'roster-right-container container',\n            template: templates.roster_right,\n            ps_settings: {theme: 'roster-right'},\n            account_roster_view: xabber.AccountRosterRightView,\n\n            events: {\n                \"click .collapsed-wrap\": \"expand\",\n                \"mouseleave .expanded-wrap\": \"collaps\"\n            },\n\n            __initialize: function () {\n                this.updateCounter();\n                this.updateTheme();\n                this.updateBlur();\n                this.updateTransparency();\n                this.model.on(\"activate deactivate destroy\", this.updateCounter, this);\n                this.data.on(\"change\", this.updateLayout, this);\n                let pinned = this._settings.get('pinned');\n                this.data.set({expanded: false, pinned: false});\n            },\n\n            updateTheme: function (theme) {\n                theme = theme || xabber.settings.side_panel.theme;\n                this.$el.attr('data-theme', theme);\n                this.updateTransparency();\n            },\n\n            updateTransparency: function (transparency) {\n                transparency = transparency || xabber.settings.side_panel.transparency;\n                if (xabber.settings.side_panel.theme == 'dark')\n                    this.$el.css('background-color', `rgba(0, 0, 0, ${1 - transparency/100})`);\n                else\n                    this.$el.css('background-color', `rgba(255, 255, 255, ${1 - transparency/100})`);\n            },\n\n            updateBlur: function (blur) {\n                blur = _.isUndefined(blur) ? xabber.settings.side_panel.blur : blur;\n                this.$el.switchClass('with-blur', blur);\n            },\n\n            expand: function () {\n                this.data.set('expanded', true);\n            },\n\n            collaps: function () {\n                if (!this.data.get('pinned'))\n                    this.data.set('expanded', false);\n            },\n\n            updateLayout: function () {\n                let changed = this.data.changed;\n                if (_.has(changed, 'expanded') || _.has(changed, 'pinned')) {\n                    xabber.trigger('update_layout', {roster_state_changed: true});\n                }\n            },\n\n            updateCounter: function () {\n                this.$('.all-contacts-counter').text(\n                    _.reduce(this.children, function (counter, view) {\n                        return counter + view.roster.length;\n                    }, 0)\n                );\n            },\n\n            onListChanged: function () {\n                this.updateScrollBar();\n            }\n        });\n\n        xabber.RosterLeftView = xabber.RosterView.extend({\n            className: 'roster-left-container container',\n            template: templates.roster_left,\n            ps_settings: {theme: 'item-list'},\n            main_container: '.contact-list',\n            account_roster_view: xabber.AccountRosterLeftView,\n\n            __initialize: function () {\n                this.model.on(\"list_changed\", this.updateLeftIndicator, this);\n                this.ps_container.on(\"ps-scroll-y\", this.onScrollY.bind(this));\n            },\n\n            updateLeftIndicator: function () {\n                this.$el.attr('data-indicator', this.model.connected.length > 1);\n            },\n\n            getContactForItem: function (item) {\n                let $item = $(item),\n                    account_jid = $item.parent().parent().data('jid'),\n                    jid = $item.data('jid'),\n                    roster_view = this.child(account_jid);\n                return roster_view && roster_view.roster.get(jid);\n            },\n\n            render: function (options) {\n                (options.right !== 'chat' && options.right !== 'contact_details' && options.right !== 'message_context' && options.right !== 'participant_messages' || options.clear_search && options.right === 'chat') && this.clearSearch();\n            },\n\n            searchAll: function () {\n                _.each(this.children, function (view) {\n                    view.searchAll();\n                });\n            },\n\n            selectItem: function (id, arrow) {\n                if (!id) {\n                    (arrow === 'up') && (this.ps_container[0].scrollTop = 0);\n                    return;\n                }\n                this.clearSearchSelection();\n                let $selection = this.$('.list-item[data-id=\"'+id+'\"]');\n                if ($selection.length) {\n                    this.selection_id = id;\n                } else {\n                    this.ps_container[0].scrollTop = 0;\n                    $selection = this.$('.list-item:visible').first();\n                    this.selection_id = $selection.data('id');\n                }\n                if ($selection.length && arrow === 'down' && ($selection[0].clientHeight + $selection[0].offsetTop + $selection.parent()[0].offsetTop + $selection.closest('.account-roster-wrap')[0].offsetTop >= this.ps_container[0].clientHeight + this.ps_container[0].scrollTop\n                || $selection[0].clientHeight + $selection[0].offsetTop + $selection.parent()[0].offsetTop + $selection.closest('.account-roster-wrap')[0].offsetTop < this.ps_container[0].scrollTop))\n                    this.ps_container[0].scrollTop = $selection[0].offsetTop + $selection.parent()[0].offsetTop + $selection.closest('.account-roster-wrap')[0].offsetTop;\n                if ($selection.length && arrow === 'up' && ($selection[0].offsetTop + $selection.parent()[0].offsetTop + $selection.closest('.account-roster-wrap')[0].offsetTop <= this.ps_container[0].scrollTop\n                || $selection[0].offsetTop + $selection.parent()[0].offsetTop + $selection.closest('.account-roster-wrap')[0].offsetTop > this.ps_container[0].scrollTop + this.ps_container[0].clientHeight))\n                    this.ps_container[0].scrollTop = $selection[0].offsetTop + $selection.parent()[0].offsetTop + $selection.closest('.account-roster-wrap')[0].offsetTop;\n                $selection.addClass('selected');\n            },\n\n            onEnterPressed: function (selection) {\n                let view;\n                if (selection.closest('.searched-lists-wrap').length) {\n                    this.clearSearch();\n                    this.$('.list-item.active').removeClass('active');\n                    if (selection.hasClass('chat-item')) {\n                        view = xabber.chats_view.child(selection.data('id'));\n                        view && view.open({screen: xabber.body.screen.get('name'), clear_search: false});\n                        selection.addClass('active');\n                    }\n                    if (selection.hasClass('roster-contact')) {\n                        view = xabber.accounts.get(selection.data('account')).chats.get(xabber.accounts.get(selection.data('account')).contacts.get(selection.data('jid')).hash_id);\n                        view && (view = view.item_view);\n                        view && xabber.chats_view.openChat(view, {clear_search: false, screen: xabber.body.screen.get('name')});\n                        selection.addClass('active');\n                    }\n                    if (selection.hasClass('message-item')) {\n                        selection.click();\n                    }\n                }\n                else {\n                    let contact = this.getContactForItem(selection);\n                    contact && contact.showDetails();\n                }\n            },\n\n            onListChanged: function () {\n                this.updateSearch();\n            }\n        });\n\n        xabber.RosterSettingsView = xabber.BasicView.extend({\n            className: 'roster-settings-wrap',\n            template: templates.roster_settings,\n\n            events: {\n                \"change .offline-contacts input\": \"setOfflineSetting\",\n                \"change .sorting-contacts input\": \"setSortingSetting\"\n            },\n\n            _initialize: function () {\n                this.$el.appendTo(this.parent.$('.settings-subblock-wrap.contact-list'));\n            },\n\n            render: function () {\n                this.$('.offline-contacts input[type=radio][name=offline-contacts][value='+\n                    (this.model.get('show_offline'))+']').prop('checked', true);\n                this.$('.sorting-contacts input[type=radio][name=sorting-contacts][value='+\n                    (this.model.get('sorting'))+']').prop('checked', true);\n            },\n\n            setOfflineSetting: function () {\n                this.model.save('show_offline',\n                    this.$('.offline-contacts input[type=radio][name=offline-contacts]:checked').val());\n            },\n\n            setSortingSetting: function () {\n                this.model.save('sorting',\n                    this.$('.sorting-contacts input[type=radio][name=sorting-contacts]:checked').val());\n            }\n        });\n\n        xabber.AccountGroupView = xabber.BasicView.extend({\n            className: 'group',\n            template: function () {\n                this.$el.append('<div class=\"group-name one-line\"/><span class=\"group-members-count\"/>');\n            },\n\n            events: {\n                \"click\": \"showGroupSettings\"\n            },\n\n            _initialize: function (options) {\n                this.$('.group-name').text(this.model.get('name'));\n                this.$('.group-members-count').text(this.model.get('counter').all);\n                let index = this.model.collection.indexOf(this.model),\n                    $parent_el = this.model.account.settings_right.$('.groups');\n                if (index === 0) {\n                    $parent_el.prepend(this.$el);\n                } else {\n                    $parent_el.children().eq(index - 1).after(this.$el);\n                }\n                this.model.on(\"destroy\", this.remove, this);\n            },\n\n            showGroupSettings: function () {\n                this.model.showSettings();\n            }\n        });\n\n        xabber.ContactPlaceholderView = xabber.BasicView.extend({\n            className: 'placeholder-wrap contact-placeholder-wrap noselect',\n            template: templates.contact_placeholder\n        });\n\n        xabber.AddContactView = xabber.BasicView.extend({\n            className: 'modal main-modal add-contact-modal',\n            template: templates.add_contact,\n            avatar_size: constants.AVATAR_SIZES.SYNCHRONIZE_ACCOUNT_ITEM,\n\n            events: {\n                \"click .dropdown-content#select-account-for-add-contact\": \"selectAccount\",\n                \"click .existing-group-field label\": \"editGroup\",\n                \"change .new-group-name input\": \"checkNewGroup\",\n                \"keyup .new-group-name input\": \"checkNewGroup\",\n                \"keyup .name-field #new_contact_username\": \"checkJid\",\n                \"focusout .name-field #new_contact_username\": \"focusoutInputField\",\n                \"focusout .new-group-name #new-group-name\": \"addNewGroup\",\n                \"click .btn-add\": \"stepForward\",\n                \"click .btn-cancel\": \"close\"\n            },\n\n            _initialize: function () {\n                this.group_data = new Backbone.Model;\n                this.group_data.on(\"change\", this.updateGroups, this);\n            },\n\n            render: function (options) {\n                if (!xabber.accounts.connected.length) {\n                    utils.dialogs.error(xabber.getString(\"dialog_add_contact__error__text_no_accounts\"));\n                    return;\n                }\n                options || (options = {});\n                let accounts = options.account ? [options.account] : xabber.accounts.connected,\n                    jid = options.jid || '';\n                this.$('input[name=\"username\"]').val(jid).attr('readonly', !!jid)\n                    .removeClass('invalid');\n                this.$('.single-acc').showIf(accounts.length === 1);\n                this.$('.multiple-acc').hideIf(accounts.length === 1);\n                this.$('.dropdown-content#select-account-for-add-contact').empty();\n                _.each(accounts, (account) => {\n                    this.$('.dropdown-content#select-account-for-add-contact').append(\n                        this.renderAccountItem(account));\n                });\n                this.$('.account-dropdown-wrap').hideIf(accounts.length < 2)\n                this.bindAccount(accounts[0]);\n                this.$('span.errors').text('');\n                this.$el.openModal({\n                    ready: () => {\n                        Materialize.updateTextFields();\n                        this.$('.account-dropdown-wrap').dropdown({\n                            inDuration: 100,\n                            outDuration: 100,\n                            constrainWidth: false,\n                            hover: false,\n                            alignment: 'left'\n                        });\n                        this.$('input[name=\"username\"]').focus();\n                    },\n                    complete: this.close.bind(this)\n                });\n                return this;\n            },\n\n            bindAccount: function (account) {\n                this.account = account;\n                this.$('.account-dropdown-wrap .dropdown-button .account-item-wrap')\n                    .replaceWith(this.renderAccountItem(account));\n                this.renderGroupsForAccount(account);\n            },\n\n            stepForward: function () {\n                let jid = this.$('input[name=username]').val().trim();\n                this.$el.append($(templates.preloader()))\n                this.$('.btn-add').addClass('hidden-disabled')\n                this.$('input[name=contact_name]').val('');\n                if (this.account.connection && this.account.connection.connected) {\n                    this.account.getConnectionForIQ().vcard.get(jid, (vcard) => {\n                            let username = vcard.username ? vcard.username : vcard.fullname ? vcard.fullname : ''\n                            username && this.$('input[name=contact_name]').val(username);\n                            this.$('.preloader-wrapper').remove();\n                            this.$('.btn-add').removeClass('hidden-disabled');\n                            this.addContact()\n                        },\n                        (err) => {\n                            this.$('.preloader-wrapper').remove();\n                            this.$('.btn-add').removeClass('hidden-disabled');\n                            this.$('input[name=username]').addClass('invalid')\n                                .siblings('.errors').text($(err).find('error text').text());\n                        });\n                }\n            },\n\n            renderAccountItem: function (account) {\n                let $item = $(templates.add_contact_account_item({jid: account.get('jid'), name: account.get('name')}));\n                $item.find('.circle-avatar').setAvatar(account.cached_image, this.avatar_size);\n                return $item;\n            },\n\n            renderGroupsForAccount: function (account) {\n                this.group_data.set({\n                    selected: [],\n                    groups: _.map(account.groups.notSpecial(), function (group) {\n                        return group.get('name');\n                    })\n                }, {silent: true});\n                this.updateGroups();\n            },\n\n            updateGroups: function () {\n                let selected = this.group_data.get('selected');\n                this.$('.groups').html(templates.groups_checkbox_list_contact({\n                    groups: _.map(this.group_data.get('groups'), function (name) {\n                        return { name: name, id: uuid(), checked: _.contains(selected, name) };\n                    })\n                }));\n            },\n\n            selectAccount: function (ev) {\n                let $item = $(ev.target).closest('.account-item-wrap'),\n                    account = xabber.accounts.get($item.data('jid'));\n                this.bindAccount(account);\n            },\n\n            editGroup: function (ev) {\n                ev.preventDefault();\n                let $target = $(ev.target),\n                    $input = $target.siblings('input'),\n                    checked = !$input.prop('checked'),\n                    group_name = $input.attr('data-groupname'),\n                    selected = _.clone(this.group_data.get('selected')),\n                    idx = selected.indexOf(group_name);\n                $input.prop('checked', checked);\n                if (checked) {\n                    idx < 0 && selected.push(group_name);\n                } else if (idx >= 0) {\n                    selected.splice(idx, 1);\n                }\n                this.group_data.set('selected', selected);\n            },\n\n            checkNewGroup: function (ev) {\n                let name = $(ev.target).val(),\n                    $checkbox = this.$('.new-group-checkbox #new_group_checkbox');\n                $checkbox.prop('disabled', !(name && !_.contains(this.group_data.get('groups'), name)));\n                if (ev.keyCode === constants.KEY_ENTER)\n                    this.addNewGroup();\n            },\n\n            addNewGroup: function (ev) {\n                ev && ev.preventDefault();\n                if (this.$('.new-group-checkbox #new_group_checkbox').prop('disabled'))\n                    return;\n                let $input = this.$('.new-group-name input'),\n                    name = $input.val(),\n                    groups = _.clone(this.group_data.get('groups')),\n                    idx = groups.indexOf(name);\n                if (idx < 0) {\n                    let selected = _.clone(this.group_data.get('selected'));\n                    selected.push(name);\n                    groups.push(name);\n                    this.group_data.set({groups: groups, selected: selected});\n                }\n            },\n\n            focusoutInputField: function () {\n                if (!this.$('input[name=username]').val().trim()) {\n                    this.$('input[name=username]').removeClass('invalid');\n                    this.$('span.errors').text('').addClass('hidden');\n                }\n            },\n\n            checkJid: function (ev) {\n                let jid = this.$('input[name=username]').val().trim(),\n                    error_text,\n                    regexp_full_jid = /^(([^<>()[\\]\\\\.,;:\\s%@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s%@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([^<>()[\\]\\\\.,;:\\s%@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s%@\\\"]+)*)|(\\\".+\\\"))|(([0-9]{1,3}\\.){3}[0-9]{1,3})|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n                if (!regexp_full_jid.test(jid) && jid) {\n                    error_text = xabber.getString(\"dialog_add_contact__error__text_invalid_jid\");\n                }\n                if (error_text) {\n                    this.$('input[name=username]').addClass('invalid')\n                        .siblings('.errors').text(error_text);\n                }\n                else {\n                    this.$('input[name=username]').removeClass('invalid');\n                    this.$('span.errors').text('').addClass('hidden');\n                    if (ev.keyCode === constants.KEY_ENTER)\n                        this.stepForward();\n                }\n            },\n\n            addContact: function () {\n                this.$('span.errors').text('').addClass('hidden');\n                let jid = this.$('input[name=username]').removeClass('invalid').val().trim(),\n                    name = this.$('input[name=contact_name]').removeClass('invalid').val(),\n                    groups = this.group_data.get('selected'),\n                    contact, error_text,\n                    regexp = /^(([^<>()[\\]\\\\.,;:\\s%@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s%@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n                if (jid)\n                    jid = jid.toLowerCase()\n                jid = Strophe.getBareJidFromJid(jid);\n                if (!jid) {\n                    error_text = xabber.getString(\"dialog_add_contact__error__text_input_username\");\n                } else if (jid === this.account.get('jid')) {\n                    error_text = xabber.getString(\"dialog_add_contact__error__text_can_not_add_youself\");\n                } else if (!regexp.test(jid)) {\n                    error_text = xabber.getString(\"dialog_add_contact__error__text_invalid_jid\");\n                }\n                else {\n                    contact = this.account.contacts.mergeContact(jid);\n                    if (contact.get('in_roster')) {\n                        error_text = xabber.getString(\"dialog_add_contact__error__text_already_in_roster\");\n                    }\n                }\n                if (error_text) {\n                    this.$('input[name=username]').addClass('invalid')\n                        .siblings('.errors').text(error_text);\n                } else {\n                    !this.account.server_features.get(Strophe.NS.SUBSCRIPTION_PREAPPROVAL) && contact.set('subscription_preapproved', true);\n                    contact.pres('subscribed');\n                    contact.pushInRoster({name: name, groups: groups}, () => {\n                        contact.pres('subscribe');\n                        contact.trigger('presence', contact, 'subscribe_from');\n                        contact.trigger(\"open_chat\", contact);\n                    }, function () {\n                        contact.destroy();\n                    });\n                    this.close();\n                }\n            },\n\n            onHide: function () {\n                this.$el.detach();\n            },\n\n            close: function () {\n                this.$el.closeModal({ complete: this.hide.bind(this) });\n            }\n        });\n\n        xabber.GroupSettings = Backbone.Model.extend({\n            idAttribute: 'name',\n            defaults: {\n                expanded: true,\n                show_offline: 'default',\n                sorting: 'default',\n                custom_notifications: false,\n                notifications: false,\n                message_preview: false\n            }\n        });\n\n        xabber.GroupsSettings = Backbone.CollectionWithStorage.extend({\n            model: xabber.GroupSettings,\n\n            _initialize: function (models, options) {\n                this.account = options.account;\n                this.account.on(\"destroy\", this.clearStorage, this);\n                this.fetch();\n            }\n        });\n\n        xabber.RosterSettings = Backbone.ModelWithStorage.extend({\n\n            defaults: function () {\n                let general_group_name = xabber.getString(\"circles__name_general_circle\"),\n                    non_roster_group_name = xabber.getString(\"circles__name_non_roster_circle\");\n                return {\n                    pinned: false,\n                    show_offline: 'yes',\n                    sorting: 'online-first',\n                    general_group_name,\n                    non_roster_group_name\n                };\n            }\n        });\n\n        xabber.CachedRoster = Backbone.ModelWithDataBase.extend({\n            putInRoster: function (value, callback) {\n                this.database.put('roster_items', value, function (response_value) {\n                    callback && callback(response_value);\n                });\n            },\n\n            getFromRoster: function (value, callback) {\n                this.database.get('roster_items', value, function (response_value) {\n                    callback && callback(response_value);\n                });\n            },\n\n            getAllFromRoster: function (callback) {\n                this.database.get_all('roster_items', null, function (response_value) {\n                    callback && callback(response_value || []);\n                });\n            },\n\n            removeFromRoster: function (value, callback) {\n                this.database.remove('roster_items', value, function (response_value) {\n                    callback && callback(response_value);\n                });\n            },\n\n            clearDataBase: function () {\n                this.database.clear_database('roster_items');\n            }\n        });\n\n        xabber.CachedSyncСonversations = Backbone.ModelWithDataBase.extend({\n            putInCachedConversations: function (value, callback) {\n                this.database.put('conversation_items', value, function (response_value) {\n                    callback && callback(response_value);\n                });\n            },\n\n            getFromCachedConversations: function (value, callback) {\n                this.database.get('conversation_items', value, function (response_value) {\n                    callback && callback(response_value);\n                });\n            },\n\n            getAllFromCachedConversations: function (callback) {\n                this.database.get_all('conversation_items', null, function (response_value) {\n                    callback && callback(response_value || []);\n                });\n            },\n\n            removeFromCachedConversations: function (value, callback) {\n                this.database.remove('conversation_items', value, function (response_value) {\n                    callback && callback(response_value);\n                });\n            },\n\n            clearDataBase: function () {\n                this.database.clear_database('conversation_items');\n            }\n        });\n\n        xabber.CachedServerFeatures = Backbone.ModelWithDataBase.extend({\n            putInCachedFeatures: function (value, callback) {\n                this.database.put('server_features_items', value, function (response_value) {\n                    callback && callback(response_value);\n                });\n            },\n\n            getFromCachedFeatures: function (value, callback) {\n                this.database.get('server_features_items', value, function (response_value) {\n                    callback && callback(response_value);\n                });\n            },\n\n            getAllFromCachedFeatures: function (callback) {\n                this.database.get_all('server_features_items', null, function (response_value) {\n                    callback && callback(response_value || []);\n                });\n            },\n\n            removeFromCachedFeatures: function (value, callback) {\n                this.database.remove('server_features_items', value, function (response_value) {\n                    callback && callback(response_value);\n                });\n            },\n\n            clearDataBase: function () {\n                this.database.clear_database('server_features_items');\n            }\n        });\n\n        xabber.Account.addInitPlugin(function () {\n            this.groups_settings = new xabber.GroupsSettings(null, {\n                account: this,\n                storage_name: xabber.getStorageName() + '-groups-settings-' + this.get('jid')\n            });\n            this.cached_roster = new xabber.CachedRoster(null, {\n                name:'cached-roster-list-' + this.get('jid'),\n                objStoreName: 'roster_items',\n                primKey: 'jid'\n            });\n            this.cached_sync_conversations = new xabber.CachedSyncСonversations(null, {\n                name:'cached-conversation-list-' + this.get('jid'),\n                objStoreName: 'conversation_items',\n                primKey: 'account_conversation_type'\n            });\n            this.cached_server_features = new xabber.CachedServerFeatures(null, {\n                name:'cached-features-list-' + this.get('jid'),\n                objStoreName: 'server_features_items',\n                primKey: 'var'\n            });\n\n            this.groupchat_settings = new xabber.GroupChatSettings({id: 'group-chat-settings'}, {\n                account: this,\n                storage_name: xabber.getStorageName() + '-group-chat-settings-' + this.get('jid'),\n                fetch: 'after'\n            });\n            this.groups = new xabber.Groups(null, {account: this});\n            this.contacts = new xabber.Contacts(null, {account: this});\n            this.contacts.addCollection(this.roster = new xabber.Roster(null, {account: this}));\n            this.blocklist = new xabber.BlockList(null, {account: this});\n\n            this._added_pres_handlers.push(this.contacts.handlePresence.bind(this.contacts));\n\n            this.on(\"ready_to_get_roster\", function () {\n                this.resources.reset();\n                this.contacts.each(function (contact) {\n                    contact.resources.reset();\n                    contact.resetStatus();\n                });\n                this.cached_roster.getAllFromRoster((roster_items) => {\n                    $(roster_items).each((idx, roster_item) => {\n                        this.contacts.mergeContact(roster_item);\n                    });\n                    if (this.connection && this.connection.do_synchronization && xabber.chats_view) {\n                        let options = {},\n                            last_sync_timestamp = this.settings && this.settings.get('last_sync_timestamp') ? this.settings.get('last_sync_timestamp') : null\n                        !this.roster.last_chat_msg_id && (options.max = constants.SYNCHRONIZATION_RSM_MAX);\n                        last_sync_timestamp && (options.stamp = last_sync_timestamp);\n                        this.roster.syncFromServer(options, Boolean(last_sync_timestamp), true);\n                    }\n                    else {\n                        this.roster.getRoster();\n                    }\n                    this.blocklist.getFromServer();\n                });\n            }, this);\n        });\n\n        xabber.Account.addConnPlugin(function () {\n            this.registerIQHandler();\n            this.registerSyncedIQHandler();\n            this.roster.registerHandler();\n            this.blocklist.registerHandler();\n        }, true, true);\n\n        xabber.once(\"start\", function () {\n            this._roster_settings = new this.RosterSettings({id: 'roster-settings'},\n                {storage_name: this.getStorageName(), fetch: 'after'});\n            this.settings.roster = this._roster_settings.attributes;\n            this.roster_settings_view = xabber.settings_view.addChild(\n                'roster_settings', this.RosterSettingsView, {model: this._roster_settings});\n            this.contacts_view = this.left_panel.addChild('contacts', this.RosterLeftView,\n                {model: this.accounts});\n            this.roster_view = this.body.addChild('roster', this.RosterRightView,\n                {model: this.accounts});\n            this.contact_container = this.right_panel.addChild('details', this.Container);\n            this.details_container = this.right_contact_panel.addChild('details', this.Container);\n            this.contact_placeholder = this.right_contact_panel.addChild('contact_placeholder',\n                this.ContactPlaceholderView);\n            this.add_contact_view = new this.AddContactView();\n            this.on(\"add_contact\", function () {\n                this.add_contact_view.show();\n            }, this);\n        }, xabber);\n\n        return xabber;\n    };\n}).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack://xabber.web/./src/contacts.js?")},"./src/core.js":function(module,exports,__webpack_require__){eval("/* provided dependency */ var client_translation_progress = __webpack_require__(/*! xabber-translations-info */ \"./translations/translation_progress.js\");\n/* provided dependency */ var moment = __webpack_require__(/*! moment */ \"./node_modules/moment/min/moment-with-locales.min.js\");\n/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ \"./node_modules/console-browserify/index.js\");\n/* provided dependency */ var xabber = __webpack_require__(/*! xabber */ \"./src/xabber.js\");\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! xabber-environment */ \"./src/environment.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (env) {\n        return factory(env);\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n}(this, function (env) {\n    let constants = env.constants,\n        _ = env._,\n        $ = env.$,\n        xabber_i18next = env.xabber_i18next,\n        xabber_i18next_sprintf = env.xabber_i18next_sprintf,\n        uuid = env.uuid,\n        utils = env.utils,\n        bc = new BroadcastChannel(\"xabber-web\");\n\n    bc.onmessage = (event) => {\n        if (event.data === `1` && !bc.disabled_client) {\n            bc.postMessage(`2`);\n        }\n        if (event.data === `2`) {\n            bc.disabled_client = true\n        }\n    };\n\n    bc.postMessage(`1`);\n\n    let Xabber = Backbone.Model.extend({\n        defaults: {\n            version_number: env.version_number,\n            actual_version_number: env.version_number,\n            audio: false,\n            video: false,\n            client_id: uuid().substring(0, 8),\n            client_name: 'Xabber for Web'\n        },\n\n        initialize: function () {\n            this.env = env;\n            this.fetchURLParams();\n            this.cleanUpStorage();\n            this.initDefaultLanguage();\n            this.detectMediaDevices();\n            window.navigator.mediaDevices && (window.navigator.mediaDevices.ondevicechange = this.detectMediaDevices.bind(this));\n            this._settings = new this.Settings({id: 'settings'},\n                    {storage_name: this.getStorageName(), fetch: 'before'});\n            this.settings = this._settings.attributes;\n            let url = window.location.host + window.location.pathname.replace(/\\//g, \"-\");\n            if (url[url.length - 1] == \"-\")\n                url.slice(0, url.length - 1);\n            this._cache = new Backbone.ModelWithStorage({id: `cache-${url}`},\n                    {storage_name: this.getStorageName(), fetch: 'before'});\n            this.cache = this._cache.attributes;\n            this.cache.client_id && (this.set('client_id', this.cache.client_id));\n            this._cache.save('client_id', this.get('client_id'));\n            this.cacheFavicons();\n            this.extendFunction();\n            this.check_config = new $.Deferred();\n            this.plyr_players = [];\n            this.current_plyr_player = null;\n            this.on(\"change:actual_version_number\", this.throwNewVersion, this);\n            this.on(\"quit\", this.onQuit, this);\n            this._version_interval = setInterval(this.readActualVersion.bind(this), 600000);\n        },\n\n        initDefaultLanguage: function () {\n            let lang = window.navigator.language,\n                progress = Object.keys(client_translation_progress).find(key => !lang.indexOf(key)) || constants.languages_another_locales[lang] && Object.keys(client_translation_progress).find(key => !constants.languages_another_locales[lang].indexOf(key));\n            if (progress != 100)\n                lang = 'en';\n            this.set(\"default_language\", lang);\n        },\n\n        loadTranslations: async function (lang) {\n            return new Promise((resolve, reject) => {\n                let language = {};\n                language.lang = lang;\n                !language.lang && (language.lang = this.settings.language);\n                if (language.lang == 'default' && this.default_translation) {\n                    language.lang = this.get(\"default_language\");\n                    language.translation  = this.default_translation;\n                    resolve(language);\n                    return;\n                }\n                __webpack_require__.e(/*! AMD require */ \"translations_sync_recursive_js_\").then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(\"./translations sync recursive ^\\\\.\\\\/.*\\\\.js$\")(`./${language.lang.replace(/-/g, \"-r\")}.js`)]; ((translation) => {\n                    language.translation  = translation;\n                    resolve(language)\n                }).apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__);})['catch'](() => {\n                    resolve(language)\n                });\n            });\n        },\n\n        setLocale: function (lang, translations) {\n            let default_lang = this.get(\"default_language\"),\n                _translations = {\n                    [default_lang]: {\n                        translation: this.default_translation\n                    }\n                };\n            lang && (_translations[lang] = {translation: translations});\n            xabber_i18next.use(xabber_i18next_sprintf);\n            xabber_i18next.init({\n                lng: default_lang,\n                debug: false,\n                pluralSeparator: '-',\n                resources: _translations\n            });\n            if (lang) {\n                xabber_i18next.changeLanguage(lang);\n                moment.locale(lang);\n            }\n            xabber_i18next.default_lang = xabber_i18next.getFixedT(default_lang);\n        },\n        getOneLiners: function () {\n            if (xabber_i18next.exists(\"motivating_oneliner\")) {\n                return xabber_i18next.t(\"motivating_oneliner\").replace(/\\\\'/g, \"'\").split('\\n');\n            } else if (xabber_i18next.default_lang) {\n                return xabber_i18next.default_lang(\"motivating_oneliner\").replace(/\\\\'/g, \"'\").split('\\n');\n            } else\n                return [];\n        },\n        getString: function (id, params) {\n            if (xabber_i18next.exists(id)) {\n                return xabber_i18next.t(id, { postProcess: 'sprintf', sprintf: params}).replace(/\\\\'/g, \"'\").replace(/%+\\d+[$]/g, \"%\").replace(/\\\\n/g, '&#10;');\n            } else if (xabber_i18next.default_lang) {\n                return xabber_i18next.default_lang(id, { postProcess: 'sprintf', sprintf: params}).replace(/\\\\'/g, \"'\").replace(/%+\\d+[$]/g, \"%\").replace(/\\\\n/g, '&#10;');\n            } else\n                return \"\";\n        },\n\n        getQuantityString: function (id, count, params) {\n            let lang = xabber_i18next.language,\n                plurals = xabber_i18next.services.pluralResolver.getRule(lang);\n            if (!plurals)\n                return this.getString(`${id}_plural_0`, (params || [count]));\n            let _count = parseInt(count, 10);\n            xabber_i18next.services.pluralResolver.options.compatibilityJSON = 'v0';\n            let suffix = xabber_i18next.services.pluralResolver.getSuffix(lang, _count);\n            suffix = suffix.replace(/-/g, \"_\");\n            if (xabber_i18next.language == 'en' || !xabber_i18next.exists(`${id}_plural${suffix}`)) {\n                suffix = xabber_i18next.services.pluralResolver.getSuffix(\"en\", _count);\n                if (!suffix || suffix && !suffix.length)\n                    suffix = '_0';\n                else\n                    suffix = '_1';\n            }\n            return this.getString(`${id}_plural${suffix}`, (params || [count]));\n        },\n\n        error: function (msg) {\n            if (constants.LOG_LEVEL >= constants.LOG_LEVEL_ERROR) {\n                console.error(msg);\n            }\n        },\n\n        warn: function (msg) {\n            if (constants.LOG_LEVEL >= constants.LOG_LEVEL_WARN) {\n                console.warn(msg);\n            }\n        },\n\n        info: function (msg) {\n            if (constants.LOG_LEVEL >= constants.LOG_LEVEL_INFO) {\n                console.log(msg);\n            }\n        },\n\n        debug: function (msg) {\n            if (constants.LOG_LEVEL >= constants.LOG_LEVEL_DEBUG) {\n                console.log(msg);\n            }\n        },\n\n        pretty_last_seen: function (seconds) {\n            if (seconds >= 0 && seconds <= 120)\n                return this.getString(\"last_seen_now\");\n            if (seconds > 120 && seconds < 3600)\n                return this.getString(\"last_seen_minutes\", [Math.trunc(seconds/60)]);\n            if (seconds >= 3600 && seconds < 7200)\n                return this.getString(\"last_seen_hours\");\n            if (seconds >= 3600*48*2)\n                return this.getString(\"last_seen_date\", [env.moment().subtract(seconds, 'seconds').format('LL')]);\n            else\n                return this.getString(\"last_seen_date\", [env.moment().subtract(seconds, 'seconds').calendar().toLowerCase()]);\n        },\n\n        readActualVersion: function () {\n            if (!constants.CHECK_VERSION)\n                return;\n            // get version.js file from server and parse it\n            let rawFile = new XMLHttpRequest();\n            rawFile.open(\"GET\", \"version.js?\"+uuid(), true);\n            rawFile.onreadystatechange = () => {\n                if (rawFile.readyState === 4 && rawFile.status === 200) {\n                    let text, json;\n                    rawFile.onreadystatechange = null;\n                    try {\n                        text = rawFile.responseText;\n                        json = JSON.parse(text.split('\\n')[1].slice(1, -1));\n                    } catch (e) {\n                        return;\n                    }\n                    this.set({\n                        actual_version_number: json.version_number,\n                        version_description: json.version_description\n                    });\n                }\n            };\n            rawFile.send();\n        },\n\n        extendFunction: function () {\n            if (!String.prototype.trimStart) {\n                String.prototype.trimStart = function () {\n                    return this.replace(/^\\s+/, '');\n                }\n            }\n            if (!String.prototype.trimEnd) {\n                String.prototype.trimEnd = function () {\n                    return Array.from(Array.from(this).reverse().join(\"\").trimStart(/\\s$/, '')).reverse().join(\"\");\n                }\n            }\n        },\n\n        onQuit: function () {\n            if (window.indexedDB.databases) {\n                window.indexedDB.databases().then((a) => {\n                    a.forEach((db) => {\n                        window.indexedDB.deleteDatabase(db.name)\n                    });\n                });\n            } else {\n                this.accounts.forEach((acc) => {\n                    indexedDB.deleteDatabase(acc.cached_roster.database.name);\n                    indexedDB.deleteDatabase(acc.cached_sync_conversations.database.name);\n                });\n            }\n            let full_storage_name = xabber.getStorageName();\n            for (let key in window.localStorage) {\n                if (key.startsWith(full_storage_name) || key.startsWith(constants.STORAGE_NAME + '-' + constants.STORAGE_VERSION + '-' + this.cache.id)) {\n                    window.localStorage.removeItem(key);\n                }\n            }\n        },\n\n        cacheFavicons: async function () {\n            this._cache.save('favicon', URL.createObjectURL(await fetch(constants.FAVICON_DEFAULT).then(r => r.blob())));\n            this._cache.save('favicon_message', URL.createObjectURL(await fetch(constants.FAVICON_MESSAGE).then(r => r.blob())));\n        },\n\n        detectMediaDevices: function () {\n            this.getMediaDevices((media_devices) => {\n                this.set(media_devices);\n            });\n        },\n\n        getMediaDevices: function (callback, errback) {\n            if (window.navigator && window.navigator.mediaDevices) {\n                window.navigator.mediaDevices.enumerateDevices()\n                    .then((devices) => {\n                        let media_devices = {audio: false, video: false};\n                        (devices.find(device => device.kind === 'audioinput')) && (media_devices.audio = true);\n                        (devices.find(device => device.kind === 'videoinput')) && (media_devices.video = true);\n                        callback && callback(media_devices);\n                    })\n                    .catch((err) => {\n                        errback && errback(err);\n                    });\n            }\n        },\n\n        throwNewVersion: function () {\n            if (!constants.CHECK_VERSION)\n                return;\n            let version_number = this.get('actual_version_number'),\n                version_description = this.get('version_description');\n            utils.dialogs.common(this.getString(\"dialog_version_update__header\", [constants.CLIENT_NAME]), `${this.getString(\"dialog_version_update__confirm_text__new_version\", [version_number])}<div class=\"new-version-description\">${version_description}</div>${this.getString(\"dialog_version_update__confirm_text__question_reload_page\")}`,\n                {ok_button: {text: this.getString(\"dialog_version_update__button_reload\")}, cancel_button: {text: this.getString(\"dialog_version_update__option_not_now\")}}\n            ).done((result) => {\n                if (result) {\n                    window.location.reload(true);\n                }\n            });\n        },\n\n        Settings: Backbone.ModelWithStorage.extend({\n            defaults: {\n                max_connection_retries: -1,\n                notifications: true,\n                notifications_private: true,\n                notifications_group: true,\n                notifications_volume: 0.50,\n                message_preview_private: false,\n                message_preview_group: false,\n                private_sound: true,\n                group_sound: true,\n                background: {type: 'default'},\n                side_panel: {theme: 'dark', blur: false, transparency: 50},\n                appearance: {blur: 0, vignetting: 0, color: '#E0E0E0'},\n                main_color: 'default',\n                sound_on_private_message: 'beep_up',\n                sound_on_group_message: 'beep_up',\n                call_attention: true,\n                load_media: 'default',\n                typing_notifications: 'default',\n                mapping_service: 'default',\n                sound_on_call: 'call',\n                sound_on_dialtone: 'call',\n                sound_on_connection: 'connecting',\n                sound_on_attention: 'attention',\n                sound_on_auth_request: 'beep_a',\n                hotkeys: 'enter',\n                avatar_shape: 'circle',\n                language: 'default',\n                load_history: true,\n                mam_requests_limit: 200,\n                mam_messages_limit_start: 1,\n                mam_messages_limit: 20,\n                ping_interval: 60,\n                reconnect_interval: 90\n            }\n        }),\n\n        start: function () {\n            this.check_config.done((result) => {\n                this.check_config = undefined;\n                result && this.trigger('start');\n            });\n        },\n\n        configure: function (config) {\n            this.loadTranslations(this.get('default_language')).then((language) => {\n                this.default_translation = language.translation ;\n                return this.loadTranslations();}).then((language) => {\n                    this.setLocale(language.lang, language.translation);\n                _.extend(constants, _.pick(config, [\n                    'CONNECTION_URL',\n                    'PERSONAL_AREA_URL',\n                    'LOG_LEVEL',\n                    'SYNCHRONIZATION_RSM_MAX',\n                    'XABBER_ACCOUNT_URL',\n                    'REGISTER_XMPP_ACCOUNT',\n                    'REGISTER_XMPP_ACCOUNT_URL',\n                    'REGISTER_XMPP_ACCOUNT_TEXT',\n                    'API_SERVICE_URL',\n                    'USE_SOCIAL_AUTH',\n                    'CONTAINER',\n                    'CHECK_VERSION',\n                    'DEFAULT_LOGIN_SCREEN',\n                    'STORAGE_NAME_ENDING',\n                    'CLIENT_NAME',\n                    'SHORT_CLIENT_NAME',\n                    'CLIENT_LOGO',\n                    'TOOLBAR_LOGO',\n                    'ENABLE_XABBER_ACCOUNT',\n                    'SCREEN_ABOUT',\n                    'DISABLE_LOOKUP_WS',\n                    'PRIVACY_LOAD_MEDIA',\n                    'PRIVACY_TYPING_NOTIFICATIONS',\n                    'PRIVACY_MAPPING_SERVICE',\n                ]));\n\n                let log_level = constants['LOG_LEVEL_'+constants.LOG_LEVEL];\n                constants.LOG_LEVEL = log_level || constants.LOG_LEVEL_ERROR;\n                constants.MATERIAL_COLORS.includes(config.MAIN_COLOR) && (constants.MAIN_COLOR = config.MAIN_COLOR);\n                (this._settings.get(\"main_color\") == 'default') && this._settings.set(\"main_color\", constants.MAIN_COLOR);\n                this.trigger(\"update_main_color\");\n                if (this._settings.get(\"load_media\") === 'default' && config.PRIVACY_LOAD_MEDIA != null)\n                    this._settings.set(\"load_media\", config.PRIVACY_LOAD_MEDIA);\n                else if (this._settings.get(\"load_media\") === 'default')\n                    this._settings.set(\"load_media\", true);\n                if (this._settings.get(\"typing_notifications\") === 'default' && config.PRIVACY_TYPING_NOTIFICATIONS != null)\n                    this._settings.set(\"typing_notifications\", config.PRIVACY_TYPING_NOTIFICATIONS);\n                else if (this._settings.get(\"typing_notifications\") === 'default')\n                    this._settings.set(\"typing_notifications\", true);\n                if (this._settings.get(\"mapping_service\") === 'default' && config.PRIVACY_MAPPING_SERVICE != null)\n                    this._settings.set(\"mapping_service\", config.PRIVACY_MAPPING_SERVICE);\n                else if (this._settings.get(\"mapping_service\") === 'default')\n                    this._settings.set(\"mapping_service\", true);\n\n                window.xabber = this;\n                _.extend(window, env);\n                if (config.SYNCHRONIZATION_RSM_MAX)\n                    constants.SYNCHRONIZATION_RSM_MAX = config.SYNCHRONIZATION_RSM_MAX;\n                if (config.REGISTRATION_DOMAINS)\n                    constants.REGISTRATION_DOMAINS = config.REGISTRATION_DOMAINS;\n                if (config.LOGIN_DOMAINS)\n                    constants.LOGIN_DOMAINS = config.LOGIN_DOMAINS;\n                if (config.TRUSTED_DOMAINS)\n                    constants.TRUSTED_DOMAINS = config.TRUSTED_DOMAINS;\n                if (config.RECOMMENDED_DOMAIN)\n                    constants.RECOMMENDED_DOMAIN = config.RECOMMENDED_DOMAIN;\n                if (config.REGISTRATION_BUTTON != null)\n                    constants.REGISTRATION_BUTTON = config.REGISTRATION_BUTTON;\n                if (config.REGISTRATION_CUSTOM_DOMAIN != null)\n                    constants.REGISTRATION_CUSTOM_DOMAIN = config.REGISTRATION_CUSTOM_DOMAIN;\n                if (config.LOGIN_CUSTOM_DOMAIN != null)\n                    constants.LOGIN_CUSTOM_DOMAIN = config.LOGIN_CUSTOM_DOMAIN;\n                if (config.SHORT_CLIENT_DESCRIPTION)\n                    constants.SHORT_CLIENT_DESCRIPTION = config.SHORT_CLIENT_DESCRIPTION;\n\n                if (config.CLIENT_NAME && !config.SHORT_CLIENT_NAME)\n                    constants.SHORT_CLIENT_NAME = config.CLIENT_NAME;\n                else if (!config.CLIENT_NAME && config.SHORT_CLIENT_NAME)\n                    constants.CLIENT_NAME = config.SHORT_CLIENT_NAME;\n\n                if (config.TURN_SERVERS_LIST) {\n                    if (_.isArray(config.TURN_SERVERS_LIST))\n                        _.extend(constants, {TURN_SERVERS_LIST: config.TURN_SERVERS_LIST});\n                    else if (_.isObject(config.TURN_SERVERS_LIST) && Object.keys(config.TURN_SERVERS_LIST).length)\n                        _.extend(constants, {TURN_SERVERS_LIST: [config.TURN_SERVERS_LIST]});\n                }\n\n                if (utils.isMobile.any()) {\n                    let ios_msg = this.getString(\"warning__client_not_support_ios_browser\", [constants.CLIENT_NAME]),\n                        android_msg = this.getString(\"warning__client_not_support_android_browser\"),\n                        any_mobile_msg = this.getString(\"warning__client_not_support_mobile\", [constants.CLIENT_NAME]),\n                        msg;\n                    if (utils.isMobile.iOS()) {\n                        msg = ios_msg;\n                    } else if (utils.isMobile.Android()) {\n                        msg = any_mobile_msg + android_msg;\n                    } else {\n                        msg = any_mobile_msg;\n                    }\n                    utils.dialogs.error(msg);\n                    this.check_config.resolve(false);\n                    return;\n                }\n                if (!constants.CONNECTION_URL) {\n                    utils.dialogs.error(this.getString(\"client_error__missing_connection_url\"));\n                    this.check_config.resolve(false);\n                    return;\n                }\n                if (bc.disabled_client){\n                    utils.dialogs.error(this.getString(\"client_error__another_tab_active\"));\n                    this.check_config.resolve(false);\n                    return;\n                }\n\n                let self = this;\n                if (!Backbone.useLocalStorage && !this.cache.ignore_localstorage_warning) {\n                    utils.dialogs.warning(this.getString(\"client_warning__no_local_storage\"),\n                        [{name: this.getString(\"ignore\"), text: this.getString(\"client_error__option_show_msg_again\")}]\n                    ).done(function (res) {\n                        res && res.ignore && self._cache.save('ignore_localstorage_warning', true);\n                    });\n                }\n\n                this.requestNotifications().done(function (granted) {\n                    self._cache.save('notifications', granted);\n                    if (granted && 'serviceWorker' in navigator && 'PushManager' in window) {\n                        self.setUpPushNotifications().done(function (res) {\n                            self.check_config.resolve(true);\n                        });\n                    } else {\n                        self._cache.save('endpoint_key', undefined);\n                        self.check_config.resolve(true);\n                    }\n                });\n            });\n        },\n\n        fetchURLParams: function () {\n            let splitted_url = window.location.href.split(/[?#]/),\n                splitted_url_anchor = window.location.href.split('#');\n            this.url_params = {};\n            if (splitted_url.length > 1) {\n                let idx, param, params = splitted_url[1].split('&');\n                for (idx = 0; idx < params.length; idx++) {\n                    param = params[idx].split('=');\n                    if (param.length === 1) {\n                        this.url_params[param[0]] = null;\n                    } else {\n                        this.url_params[param[0]] = param[1];\n                    }\n                }\n            }\n            if (splitted_url_anchor.length > 1) {\n                this.url_params['anchor'] = splitted_url[1];\n            }\n            window.history.pushState(null, null, window.location.pathname);\n        },\n\n        getStorageName: function () {\n            let name = constants.STORAGE_NAME + '-' + constants.STORAGE_VERSION;\n            if (constants.STORAGE_NAME_ENDING) {\n                name = name + '-' + constants.STORAGE_NAME_ENDING;\n            }\n            return name;\n        },\n\n        cleanUpStorage: function () {\n            let full_storage_name = constants.STORAGE_NAME + '-' + constants.STORAGE_VERSION;\n            for (let key in window.localStorage) {\n                if (key.startsWith('xabber') &&\n                        !key.startsWith(full_storage_name)) {\n                    window.localStorage.removeItem(key);\n                }\n            }\n        },\n\n        requestNotifications: function () {\n            let result = new $.Deferred(),\n                self = this;\n            if (!window.Notification) {\n                result.resolve(null);\n            } else if (window.Notification.permission === 'granted') {\n                result.resolve(true);\n            } else {\n                if (!self.cache.ignore_notifications_warning)\n                    self.notifications_placeholder = new self.NotificationsPlaceholder();\n                result.resolve(false);\n            }\n            return result.promise();\n        },\n\n        setUpPushNotifications: function () {\n            let result = new $.Deferred(),\n                self = this;\n\n            firebase.initializeApp({\n                apiKey: constants.GCM_API_KEY,\n                messagingSenderId: constants.GCM_SENDER_ID\n            });\n\n            navigator.serviceWorker.register('./firebase-messaging-sw.js').then((registration) => {\n                firebase.messaging().useServiceWorker(registration);\n\n                self.messaging = firebase.messaging();\n                self.messaging.requestPermission().then(function () {\n                    self.messaging.getToken().then(function (currentToken) {\n                        self._cache.save('endpoint_key', currentToken || undefined);\n                        result.resolve(currentToken ? true : 'No Instance ID token available.');\n                    }).catch(function (err) {\n                        result.resolve(err);\n                    });\n\n                    self.messaging.onTokenRefresh(function () {\n                        self.messaging.getToken().then(function (refreshedToken) {\n                            self._cache.save('endpoint_key', refreshedToken);\n                        }).catch(function (err) {\n                            // TODO\n                        });\n                    });\n\n                    navigator.serviceWorker.addEventListener('message', function (event) {\n                        let data = event.data;\n                        if (data['firebase-messaging-msg-type'] === 'push-msg-received') {\n                            let message = data['firebase-messaging-msg-data'];\n                            if (message && message.data && message.from === constants.GCM_SENDER_ID) {\n                                let payload;\n                                try {\n                                    payload = JSON.parse(atob(message.data.body));\n                                } catch (e) {\n                                    payload = message.data;\n                                }\n                                self.trigger('push_message', payload);\n                            }\n                        }\n                    });\n                }).catch(function (err) {\n                    result.resolve({'error': err});\n                });\n            });\n            return result.promise();\n        },\n\n        extendWith: function () {\n            return _.reduce(arguments, function (instance, module) {\n                return module(instance);\n            }, this);\n        }\n    });\n\n    return new Xabber();\n}));\n\n\n//# sourceURL=webpack://xabber.web/./src/core.js?")},"./src/dependencies.js":(module,exports,__webpack_require__)=>{eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// only external libs and plugins for them\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    __webpack_require__(/*! backbone */ "./node_modules/backbone/backbone.js"),\n    __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js"),\n    __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),\n    __webpack_require__(/*! moment */ "./node_modules/moment/min/moment-with-locales.min.js"),\n    __webpack_require__(/*! wavesurfer */ "./node_modules/wavesurfer/dist/wavesurfer.js"),\n    __webpack_require__(/*! slug */ "./node_modules/slug/slug.js"),\n    __webpack_require__(/*! sha256 */ "./node_modules/js-sha256/src/sha256.js"),\n    __webpack_require__(/*! magnific-popup */ "./node_modules/magnific-popup/dist/jquery.magnific-popup.js"),\n    __webpack_require__(/*! i18next */ "./node_modules/i18next/i18next.min.js"),\n    __webpack_require__(/*! i18next-post */ "./src/lib/i18nextSprintfPostProcessor.min.js"),\n    __webpack_require__(/*! strophe */ "./node_modules/strophe.js/strophe.js"),\n    __webpack_require__(/*! Plyr */ "./src/lib/plyr.js"),\n    __webpack_require__(/*! Quill */ "./node_modules/quill/quill.js"),\n    __webpack_require__(/*! libsignal-protocol */ "./src/lib/libsignal-protocol.js"),\n    __webpack_require__(/*! strophe.disco */ "./node_modules/strophejs-plugins/disco/strophe.disco.js"),\n    __webpack_require__(/*! strophe.ping */ "./node_modules/strophejs-plugins/ping/strophe.ping.js"),\n    __webpack_require__(/*! strophe.rsm */ "./node_modules/strophejs-plugins/rsm/strophe.rsm.js"),\n    __webpack_require__(/*! strophe.caps */ "./src/lib/strophe.caps.js"),\n    __webpack_require__(/*! strophe.pubsub */ "./src/lib/strophe.pubsub.js"),\n    __webpack_require__(/*! omemo */ "./src/lib/omemo.js"),\n    __webpack_require__(/*! backbone.localsync */ "./src/lib/backbone.localsync.js"),\n    __webpack_require__(/*! sha1_hasher */ "./src/lib/sha1.min.js"),\n    __webpack_require__(/*! materialize */ "./src/lib/materialize.js"),\n    __webpack_require__(/*! qrcode */ "./src/lib/VanillaQR.min.js"),\n    __webpack_require__(/*! perfectScrollbarJQuery */ "./node_modules/perfect-scrollbar/dist/js/perfect-scrollbar.jquery.js")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function(Backbone, _, $, moment, WaveSurfer, slug, sha256, magnificPopup, i18next, i18next_sprintf, Strophe, plyr, Quill, libsignal) {\n    return _.extend({\n        $: $,\n        _: _,\n        ol: ol,\n        moment: moment,\n        WaveSurfer: WaveSurfer,\n        Plyr: plyr,\n        Quill: Quill,\n        libsignal: libsignal,\n        slug: slug,\n        xabber_i18next: i18next,\n        xabber_i18next_sprintf: i18next_sprintf,\n        sha256: sha256,\n        magnificPopup: magnificPopup,\n        Strophe: Strophe\n    }, Strophe);\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack://xabber.web/./src/dependencies.js?')},"./src/discovery.js":(module,exports,__webpack_require__)=>{eval("/* provided dependency */ var constants = __webpack_require__(/*! xabber-constants */ \"./src/constants.js\");\nvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n  return function (xabber) {\n    let env = xabber.env,\n        $ = env.$,\n        _ = env._,\n        moment = env.moment,\n        Strophe = env.Strophe,\n        $iq = env.$iq;\n\n    xabber.ClientFeature = Backbone.Model.extend({\n        idAttribute: 'namespace'\n    });\n\n    xabber.FeatureView = xabber.BasicView.extend({\n        className: 'client-feature',\n        template: function () {\n            this.$el.append('<div class=\"feature-name one-line\"/>')\n                    .append('<div class=\"supports\"/>');\n        },\n\n        _initialize: function () {\n            this.render();\n            this.$el.appendTo(this.model.collection.account.settings_right.$('.capabilities'));\n            this.model.on(\"change\", this.render, this);\n            this.model.on(\"destroy\", this.remove, this);\n        },\n\n        render: function () {\n            let name = this.model.get('verbose_name'),\n                supports = this.model.get('supports');\n            this.$('.feature-name').text(name);\n            this.$('.supports').text(supports ? xabber.getString(\"account_settings__server_info__status_available\") : xabber.getString(\"account_settings__server_info__status_unavailable\"))\n        }\n    });\n\n    xabber.ClientFeatures = Backbone.Collection.extend({\n        model: xabber.ClientFeature,\n\n        initialize: function (models, options) {\n            this.account = options.account;\n            this.account.on('render_settings', this.render, this);\n            this.connection = this.account.connection;\n            this.connection.disco.addIdentity(\n                'client',\n                'web',\n                xabber.get('client_name'),\n                'en'\n            );\n            this.addFeature(Strophe.NS.LAST, 'XEP-0012: Last Activity');\n            this.addFeature(Strophe.NS.VCARD, 'XEP-0054: vCard-temp');\n            this.addFeature(Strophe.NS.RSM, 'XEP-0059: Result Set Management');\n            this.connection.disco.addFeature(Strophe.NS.CHATSTATES);\n            this.addFeature(Strophe.NS.BLOCKING, 'XEP-0191: Blocking Command');\n            this.addFeature(Strophe.NS.PING, 'XEP-0199: XMPP Ping');\n            this.connection.disco.addFeature(Strophe.NS.ATTENTION, 'XEP-0244: Attention');\n            this.addFeature(Strophe.NS.CARBONS, 'XEP-0280: Message carbons');\n            this.addFeature(Strophe.NS.MAM, 'XEP-0313: Message archive management');\n            this.connection.disco.addFeature(Strophe.NS.CHAT_MARKERS);\n            this.connection.disco.addFeature(Strophe.NS.PUBSUB_AVATAR_METADATA + '+notify');\n            this.addFeature(Strophe.NS.HTTP_UPLOAD, 'XEP-0363: HTTP File Upload');\n            this.addFeature(Strophe.NS.SYNCHRONIZATION, 'XEP-SYNC: Client Synchronization');\n            this.addFeature(Strophe.NS.AUTH_DEVICES, 'XEP-DEVICES: HOTP and Device Management');\n            this.addFeature(Strophe.NS.GEOLOC, 'XEP-0080: User Location');\n            this.addFeature(Strophe.NS.PUBSUB, 'XEP-0060: Publish-Subscribe');\n            this.addFeature(Strophe.NS.ARCHIVE, 'XEP-ARCHIVED: Archived Chats');\n            this.addFeature(Strophe.NS.DELIVERY, 'XEP-DELIVERY: Reliable message delivery');\n            this.addFeature(Strophe.NS.GROUP_CHAT, 'XEP-GROUPS: Groups');\n            this.addFeature(Strophe.NS.REWRITE, 'XEP-RETRACT: Message Delete and Rewrite');\n            this.addFeature(Strophe.NS.REGISTER, 'XEP-0077: In-Band Registration');\n        },\n\n        addFeature: function (namespace, verbose_name) {\n            let feature = this.create({\n                namespace: namespace,\n                verbose_name: verbose_name\n            });\n            this.connection.disco.addFeature(namespace);\n        },\n\n        render: function () {\n            this.models.forEach((feature) => {\n                let view = new xabber.FeatureView({model: feature});\n            });\n        }\n    });\n\n    xabber.ServerFeature = Backbone.Model.extend({\n        idAttribute: 'var'\n    });\n\n    xabber.ServerFeatures = Backbone.Collection.extend({\n        model: xabber.ServerFeature,\n\n        initialize: function (models, options) {\n            this.account = options.account;\n            this.connection = this.account.connection;\n            this.on(\"add\", this.onFeatureAdded, this);\n        },\n\n        request: function () {\n            this.account.cached_server_features.getAllFromCachedFeatures((res) => {\n                if (res && res.length){\n                    res.forEach((item) => {\n                        this.create({\n                            'var': item.var,\n                            from: item.from\n                        });\n                    });\n                    this.is_cached = true;\n                } else {\n                    this.connection.disco.info(this.account.domain, null, this.onInfo.bind(this));\n                }\n                this.connection.disco.items(this.account.domain, null, this.onItems.bind(this));\n            });\n        },\n\n        onItems: function (stanza) {\n            let groupchat_servers_list = [];\n            $(stanza).find('query item').each((idx, item) => {\n                let jid = $(item).attr('jid'),\n                    name = $(item).attr('name'),\n                    node = $(item).attr('node');\n                if (node === Strophe.NS.GROUP_CHAT) {\n                    groupchat_servers_list.push(jid);\n                    this.account.set('groupchat_servers_list', groupchat_servers_list);\n                }\n                this.connection.disco.addItem(jid, name, node, () => {});\n                (!this.is_cached) && this.connection.disco.info(\n                    jid,\n                    null,\n                    this.onInfo.bind(this));\n            });\n        },\n\n        onInfo: function (stanza) {\n            let $stanza = $(stanza),\n                from = $stanza.attr('from'),\n                self = this;\n            $stanza.find('feature').each(function () {\n                let namespace = $(this).attr('var');\n                self.create({\n                    'var': namespace,\n                    from: from\n                });\n                if (namespace === Strophe.NS.AUTH_DEVICES)\n                    self.account.getAllXTokens();\n            });\n            $stanza.find('x').each(function () {\n                let form_type_val = $(this).find('field[var=\"FORM_TYPE\"] value');\n                if (form_type_val.length && form_type_val.text() === Strophe.NS.URLDISCO && self.account.domain === from){\n                    let media_gallery_url = $(this).find('field[var=\"' + Strophe.NS.MEDIAGALLERY + '\"] value');\n                    if (media_gallery_url.length && media_gallery_url.text()){\n                        self.create({\n                            'var': 'media-gallery',\n                            from: media_gallery_url.text()\n                        });\n                    }\n                }\n            });\n            if (this.account.auth_view && !(constants.TRUSTED_DOMAINS.indexOf(this.account.connection.domain) > -1)){\n                this.account.auth_view.first_features_received = true\n                if (this.account.auth_view.stepped_auth_complete)\n                    this.account.auth_view.successFeedback();\n            }\n        },\n\n        onFeatureAdded: function (feature) {\n            let _var = feature.get('var'),\n                client_feature = this.account.client_features.get(_var);\n            client_feature && client_feature.set('supports', true);\n            (_var != Strophe.NS.SUBSCRIPTION_PREAPPROVAL && _var != Strophe.NS.SYNCHRONIZATION) && this.account.cached_server_features.putInCachedFeatures({\n                var: _var,\n                from: feature.get('from'),\n            })\n\n            if (_var === 'media-gallery') {\n                this.account.set('gallery_auth', false)\n                if (!(this.account.get('gallery_token') && this.account.get('gallery_url')) || (this.account.get('gallery_url') != feature.get('from')))\n                    this.account.initGalleryAuth(feature);\n            }\n        },\n    });\n\n    xabber.Account.addInitPlugin(function () {\n        this.client_features = new xabber.ClientFeatures(null, {account: this});\n        this.server_features = new xabber.ServerFeatures(null, {account: this});\n    });\n\n    xabber.Account.addConnPlugin(function () {\n        this.last_stanza_timestamp = moment.now();\n\n        this.connection.deleteHandler(this._last_stanza_handler);\n        this._last_stanza_handler = this.connection.addHandler(() => {\n            this.last_stanza_timestamp = moment.now();\n            return true;\n        });\n\n        this.connection.deleteHandler(this._pong_handler);\n        this._pong_handler = this.connection.ping.addPingHandler((ping) => {\n            this.last_stanza_timestamp = moment.now();\n            this.connection.ping.pong(ping);\n            return true;\n        });\n\n        this.connection.deleteTimedHandler(this._ping_handler);\n        this._ping_handler = this.connection.addTimedHandler(30000, () => {\n            let downtime = moment.now() - this.last_stanza_timestamp;\n            if (downtime / 1000 > (xabber.settings.reconnect_interval || 90)) {\n                if (this.connection.connected)\n                    this.connection.disconnect();\n                else\n                    this.connect();\n                return false;\n            }\n            if (downtime / 1000 > (xabber.settings.ping_interval || 60)) {\n                this.connection.ping.ping(this.get('jid'));\n            }\n            return true;\n        });\n\n        this.server_features.request();\n    }, true, true);\n\n    xabber.Account.addFastConnPlugin(function () {\n        this.last_fast_stanza_timestamp = moment.now();\n\n        this.fast_connection.deleteHandler(this._last_fast_stanza_handler);\n        this._last_fast_stanza_handler = this.fast_connection.addHandler(() => {\n            this.last_fast_stanza_timestamp = moment.now();\n            return true;\n        });\n\n        this.fast_connection.deleteHandler(this._fast_pong_handler);\n        this._fast_pong_handler = this.fast_connection.ping.addPingHandler((ping) => {\n            this.last_fast_stanza_timestamp = moment.now();\n            this.fast_connection.ping.pong(ping);\n            return true;\n        });\n\n        this.fast_connection.deleteTimedHandler(this._fast_ping_handler);\n        this._fast_ping_handler = this.fast_connection.addTimedHandler(30000, () => {\n            let downtime = moment.now() - this.last_fast_stanza_timestamp;\n            if (downtime / 1000 > (xabber.settings.reconnect_interval || 90)) {\n                if (this.fast_connection.connected)\n                    this.fast_connection.disconnect();\n                else\n                    this.fast_connection.connect('password', this.fast_connection.jid, this.fast_connection.pass);\n                return false;\n            }\n            if (downtime / 1000 > (xabber.settings.ping_interval || 60)) {\n                this.fast_connection.ping.ping(this.fast_connection.jid);\n            }\n            return true;\n        });\n    }, true, true);\n\n    xabber.Account.addConnPlugin(function () {\n        let disco = this.connection.disco;\n        this.connection.addHandler(disco._onDiscoInfo.bind(disco),\n                Strophe.NS.DISCO_INFO, 'iq', 'get', null, null);\n        this.connection.addHandler(disco._onDiscoItems.bind(disco),\n                Strophe.NS.DISCO_ITEMS, 'iq', 'get', null, null);\n    }, false, true);\n\n    return xabber;\n  };\n}).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack://xabber.web/./src/discovery.js?")},"./src/environment.js":(module,exports,__webpack_require__)=>{eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// expands dependencies with internal xabber modules\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    __webpack_require__(/*! xabber-dependencies */ "./src/dependencies.js"),\n    __webpack_require__(/*! xabber-constants */ "./src/constants.js"),\n    __webpack_require__(/*! xabber-templates */ "./src/templates.js"),\n    __webpack_require__(/*! xabber-utils */ "./src/utils/utils.js"),\n    __webpack_require__(/*! xabber-translations-info */ "./translations/translation_progress.js"),\n    __webpack_require__(/*! xabber-version */ "./version.js"),\n    __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function(deps, constants, templates, utils, client_translation_progress, version, _) {\n    return _.extend({\n        constants: constants,\n        templates: templates,\n        client_translation_progress: client_translation_progress,\n        utils: utils,\n        uuid: utils.uuid\n    }, version, deps);\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack://xabber.web/./src/environment.js?')},"./src/mentions.js":(module,exports,__webpack_require__)=>{eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    return function (xabber) {\n        let env = xabber.env,\n            constants = env.constants,\n            templates = env.templates.mentions,\n            utils = env.utils,\n            $ = env.$,\n            Strophe = env.Strophe,\n            _ = env._,\n            Images = utils.images,\n            pretty_datetime = (timestamp) => { return utils.pretty_datetime(timestamp, (xabber.settings.language == 'ru-RU' || xabber.settings.language == 'default' && xabber.get(\"default_language\") == 'ru-RU') && 'D MMMM YYYY HH:mm:ss')};\n\n\n        xabber.Mention = Backbone.Model.extend({\n            defaults: {\n                active: false,\n                display: false,\n                timestamp: 0\n            },\n\n            initialize: function (attrs, options) {\n                this.contact = options.contact;\n                this.message = options.message;\n                this.id = this.message.get('unique_id');\n                this.set('timestamp', this.message.get('timestamp'));\n                this.account = this.contact.account;\n                this.item_view = new xabber.MentionItemView({model: this});\n                this.contact.on(\"destroy\", this.destroy, this);\n                this.message.on(\"change:last_replace_time\", this.onMessageUpdated, this);\n            },\n\n            onMessageUpdated: function () {\n                if (this.message.get('mentions') && this.message.get('mentions').length) {\n                    this.message.get('mentions').forEach((mention) => {\n                        let mention_target = mention.target || \"\",\n                            id = mention_target.match(/\\?id=\\w*/),\n                            jid = mention_target.match(/\\?jid=.*/);\n                        if (id)\n                            mention_target = id[0].slice(4);\n                        else if (jid)\n                            mention_target = jid[0].slice(5);\n                        else\n                            mention_target = \"\";\n                        if (id) {\n                            if (this.contact.my_info) {\n                                if (mention_target === this.contact.my_info.get('id'))\n                                    this.item_view.updateLastMessage();\n                                else\n                                    this.destroy();\n                            }\n                            else if (this.contact.get('group_chat')) {\n                                if (this._pending_my_info) {\n                                    this._pending_my_info.done(() => {\n                                        if (mention_target === this.contact.my_info.get('id'))\n                                            this.item_view.updateLastMessage();\n                                        else\n                                            this.destroy();\n                                        this._pending_my_info = null;\n                                    });\n                                }\n                                else {\n                                    this._pending_my_info = new $.Deferred();\n                                    this.contact.getMyInfo(() => {\n                                        if (mention_target === this.contact.my_info.get('id'))\n                                            this.item_view.updateLastMessage();\n                                        else\n                                            this.destroy();\n                                        this._pending_my_info.resolve();\n                                    });\n                                }\n                            }\n                        } else if (jid && mention_target === this.account.get('jid')) {\n                            this.item_view.updateLastMessage();\n                        }\n                        else\n                            this.destroy();\n                    });\n                } else\n                    this.destroy();\n            }\n        });\n\n        xabber.MentionsBase = Backbone.Collection.extend({\n            model: xabber.Mention\n        });\n\n        xabber.AccountMentions = xabber.MentionsBase.extend({\n            initialize: function (models, options) {\n                this.account = options.account;\n                this.on(\"add\", this.onMentionAdded, this)\n            },\n\n            onMentionAdded: function (mention) {\n                xabber.mentions.add(mention);\n            }\n        });\n\n        xabber.Mentions = xabber.MentionsBase.extend({\n            comparator: 'timestamp',\n            initialize: function () {\n                this.collections = [];\n                this.on(\"add\", _.bind(this.updateInCollections, this, 'add'));\n                this.on(\"change\", _.bind(this.updateInCollections, this, 'change'));\n            },\n\n            addCollection: function (collection) {\n                this.collections.push(collection);\n            },\n\n            updateInCollections: function (event, contact) {\n                _.each(this.collections, function (collection) {\n                    collection.update(contact, event);\n                });\n            }\n        });\n\n        xabber.MentionsView = xabber.SearchPanelView.extend({\n            className: 'mentions-container container',\n            ps_selector: '.mentions-list-wrap',\n            main_container: '.mentions-list',\n            ps_settings: {theme: 'item-list'},\n            template: templates.mentions_panel,\n\n            _initialize: function () {\n                this.active_mention = null;\n                this.keyup_timeout = null;\n                this.model.on(\"add\", this.onMentionAdded, this);\n                this.model.on(\"change:active\", this.onChangedActiveStatus, this);\n                this.model.on(\"destroy\", this.onMentionRemoved, this);\n                xabber.accounts.on(\"list_changed\", this.updateLeftIndicator, this);\n                this.ps_container.on(\"ps-scroll-y\", this.onScrollY.bind(this));\n                this.$('input').on('input', this.updateSearch.bind(this));\n            },\n\n            render: function (options) {\n                if (!options.right && this.active_mention) {\n                    this.active_mention.model.set('active', false);\n                    this.active_mention = null;\n                }\n                (options.right !== 'chat' && options.right !== 'contact_details' && options.right !== 'message_context' && options.right !== 'participant_messages' || options.clear_search && options.right === 'chat') && this.clearSearch();\n            },\n\n            onMentionAdded: function (mention) {\n                this.addChild(mention.id, mention.item_view);\n                this.updateMentionPosition(mention);\n            },\n\n            onMentionRemoved: function (mention, options) {\n                options = options || {};\n                if (this.active_mention === this.child(mention.id)) {\n                    this.active_mention = null;\n                }\n                this.removeChild(mention.id, options);\n                this.updateScrollBar();\n            },\n\n            selectItem: function (id) {\n                this.clearSearchSelection();\n                let $selection = this.$('.list-item[data-id=\"'+id+'\"]');\n                if ($selection.length) {\n                    this.selection_id = id;\n                } else {\n                    $selection = this.$('.list-item:visible').first();\n                    this.selection_id = $selection.data('id');\n                }\n                $selection.find('.mention-info-wrap').addClass('selected');\n            },\n\n            clearSearchSelection: function (ev) {\n                this.selection_id = null;\n                this.$('.list-item.selected').removeClass('selected');\n                this.$('.list-item .selected').removeClass('selected');\n            },\n\n            onEnterPressed: function (selection) {\n                let view;\n                if (selection.closest('.searched-lists-wrap').length) {\n                    this.clearSearch();\n                    this.$('.list-item.active').removeClass('active');\n                    if (selection.hasClass('chat-item')) {\n                        view = xabber.chats_view.child(selection.data('id'));\n                        view && view.open({screen: xabber.body.screen.get('name'), clear_search: false});\n                        selection.addClass('active');\n                    }\n                    if (selection.hasClass('roster-contact')) {\n                        view = xabber.accounts.get(selection.data('account')).chats.get(xabber.accounts.get(selection.data('account')).contacts.get(selection.data('jid')).hash_id);\n                        view && (view = view.item_view);\n                        view && xabber.chats_view.openChat(view, {clear_search: false, screen: xabber.body.screen.get('name')});\n                        selection.addClass('active');\n                    }\n                    if (selection.hasClass('message-item')) {\n                        selection.click();\n                    }\n                }\n                else {\n                    selection.find('.mention-info-wrap').click();\n                }\n            },\n\n            replaceMentionItem: function (item, mentions) {\n                let view = this.child(item.id);\n                if (view && item.get('timestamp')) {\n                    view.$el.detach();\n                    let index = mentions.indexOf(item);\n                    if (index === 0) {\n                        this.$('.mentions-list').append(view.$el);\n                    } else {\n                        this.$('.mention-item').eq(-index).before(view.$el);\n                    }\n                    let $prev_el = view.$el.prev('.mention-item'),\n                        $next_el = view.$el.next('.mention-item'),\n                        contact_jid = view.$el.data('contact-jid');\n                        if ($prev_el.length) {\n                            let prev_contact_jid = $prev_el.data('contact-jid');\n                            if (prev_contact_jid !== contact_jid)\n                                view.$el.find('.group-chat-title-wrap').removeClass('hidden');\n                        }\n                        else\n                            view.$el.find('.group-chat-title-wrap').removeClass('hidden');\n                        if ($next_el.length) {\n                            let next_contact_jid = $next_el.data('contact-jid');\n                            if (next_contact_jid === contact_jid) {\n                                $next_el.find('.group-chat-title-wrap').addClass('hidden');\n                            }\n                            else\n                                $next_el.find('.group-chat-title-wrap').removeClass('hidden');\n                        }\n                        else\n                            view.$el.find('.group-chat-title-wrap').removeClass('hidden');\n                }\n            },\n\n            readAllMentions: function () {\n                xabber.accounts.connected.forEach((account) => {\n                    let mentions = _.clone(account.unread_mentions.models);\n                    _.each(mentions, ((mention) => {\n                        let msgid = mention.message.get('msgid'),\n                            archive_id = mention.message.get('archive_id'),\n                            contact_archive_id = mention.message.get('contact_archive_id'),\n                            chat = account.chats.getChat(mention.contact);\n                        mention.message.set('is_unread', false);\n                        chat.sendMarker(msgid, 'displayed', archive_id, contact_archive_id);\n                    }));\n                });\n            },\n\n            updateLeftIndicator: function (accounts) {\n                this.$el.attr('data-indicator', accounts.connected.length > 1);\n            },\n\n            updateMentionPosition: function (item) {\n                let view = this.child(item.id);\n                if (!view)\n                    return;\n                this.replaceMentionItem(item, this.model);\n            },\n\n            onChangedActiveStatus: function (mention) {\n                if (mention.get('active')) {\n                    let previous_mention = this.active_mention;\n                    this.active_mention = this.child(mention.id);\n                    previous_mention && previous_mention.model.set('active', false);\n                }\n            }\n        });\n\n        xabber.MentionItemView = xabber.BasicView.extend({\n            className: 'mention-item list-item',\n            template: templates.mention_item,\n            avatar_size: constants.AVATAR_SIZES.CHAT_ITEM,\n\n            events: {\n                'click .mention-info-wrap': 'openByClick'\n            },\n\n            _initialize: function () {\n                this.account = this.model.account;\n                this.contact = this.model.contact;\n                this.$el.attr('data-id', this.model.id);\n                this.$el.attr('data-contact-jid', this.contact.get('jid'));\n                this.updateContactName();\n                this.updateGroupChat();\n                this.updateName();\n                this.updateLastMessage();\n                this.updateAvatar();\n                this.updateColorScheme();\n                this.updateCounter();\n                this.updateIcon();\n                this.model.on(\"change:active\", this.updateActiveStatus, this);\n                this.account.settings.on(\"change:color\", this.updateColorScheme, this);\n                this.contact.on(\"change:name\", this.updateContactName, this);\n                this.contact.on(\"change:group_chat\", this.updateGroupChat, this);\n                this.model.message.on(\"change:is_unread\", this.updateCounter, this);\n            },\n\n            updateName: function () {\n                let message = this.model.message,\n                    user_info = message.get('user_info') || message.isSenderMe() && this.contact.my_info && this.contact.my_info.attributes,\n                    contact_name = this.contact.get('name');\n                if (user_info)\n                    contact_name = user_info.nickname || user_info.jid || user_info.id || this.model.message.get('from_jid');\n                this.$('.chat-title').text(contact_name);\n            },\n\n            updateIcon: function () {\n                this.$('.contact-icon .group-chat-icon').hideIf(!this.contact.get('group_chat') && this.contact.get('jid') === this.account.domain);\n                this.$('.contact-icon .server-icon').hideIf(this.contact.get('jid') !== this.account.domain);\n            },\n\n            updateContactName: function () {\n                let contact_name = this.contact.get('name');\n                this.$('.group-chat-name').text(contact_name);\n                if (!this.contact.get('group_chat')) {\n                    this.updateName();\n                    if (!this.contact.get('photo_hash')) {\n                        let default_avatar = Images.getDefaultAvatar(contact_name);\n                        this.$('.circle-avatar').setAvatar(default_avatar, this.avatar_size);\n                    }\n                }\n            },\n\n            updateGroupChat: function () {\n                this.updateIcon();\n            },\n\n            updateCounter:function () {\n                let unread = this.model.message.get('is_unread');\n                this.$('.msg-counter').switchClass('hidden', !unread);\n                if (unread)\n                    this.account.unread_mentions.add(this.model);\n                else\n                    this.account.unread_mentions.remove(this.model);\n                xabber.toolbar_view.recountAllMessageCounter();\n            },\n\n            updateLastMessage: function () {\n                let msg = this.model.message;\n                if (!msg)\n                    return;\n                let msg_time = msg.get('time'),\n                    timestamp = msg.get('timestamp'),\n                    forwarded_message = msg.get('forwarded_message'),\n                    msg_files = msg.get('files') || [],\n                    msg_images = msg.get('images') || [],\n                    msg_locations = msg.get('locations') || [],\n                    msg_text = (forwarded_message) ? (msg.get('message') || xabber.getString(\"forwarded_messages_count\", forwarded_message.length).italics()) : msg.getText();\n                msg.get('videos') && msg.get('videos').length && (msg_files = msg_files.concat(msg.get('videos')));\n                this.model.set({timestamp: timestamp});\n                if (msg_files.length || msg_images.length || msg_locations.length) {\n                    let $colored_span = $('<span class=\"text-color-500\"/>');\n                    if (msg_files.length && msg_images.length)\n                        msg_text = $colored_span.text(xabber.getString(\"recent_chat__last_message__attachments\", [msg_files.length + msg_images.length]));\n                    else {\n                        if (msg_files.length > 0) {\n                            let total_size = 0;\n                            msg_files.forEach((f) => {total_size+=Number(f.size)});\n                            msg_text = $colored_span.text(xabber.getQuantityString(\"recent_chat__last_message__files\", msg_files.length) + (total_size > 0 ? `, ${utils.pretty_size(total_size)}` : \"\"));\n                        }\n                        if (msg_images.length > 0) {\n                            let total_size = 0;\n                            msg_images.forEach((f) => {total_size+=Number(f.size)});\n                            msg_text = $colored_span.text(xabber.getQuantityString(\"recent_chat__last_message__images\", msg_images.length) + (total_size > 0 ? `, ${utils.pretty_size(total_size)}` : \"\"));\n                        }\n                        if (msg_locations.length > 0) {\n                            msg_text = $colored_span.text(xabber.getQuantityString(\"recent_chat__last_message__locations\", msg_locations.length));\n                        }\n                    }\n                    this.$('.last-msg').text(\"\").append(msg_text);\n                }\n                else {\n                    this.$('.last-msg').text(msg_text);\n                }\n                this.$el.emojify('.last-msg', {emoji_size: 16});\n                this.$('.last-msg-date').text(utils.pretty_short_datetime(msg_time))\n                    .attr('title', pretty_datetime(msg_time));\n            },\n\n            updateActiveStatus: function () {\n                this.$el.find('.mention-info-wrap').switchClass('active', this.model.get('active'));\n            },\n\n            updateAvatar: function () {\n                let message = this.model.message,\n                    user_info = message.get('user_info') || message.isSenderMe() && this.contact.my_info && this.contact.my_info.attributes,\n                    image;\n                if (user_info) {\n                    if (user_info.avatar) {\n                        image = user_info.b64_avatar || this.account.chat_settings.getB64Avatar(user_info.id);\n                        if (image) {\n                            this.$('.circle-avatar').setAvatar(image, this.avatar_size);\n                        }\n                        else {\n                            let node = Strophe.NS.PUBSUB_AVATAR_DATA + '#' + user_info.id;\n                            this.contact.getAvatar(user_info.avatar, node, (data_avatar) => {\n                                image = data_avatar;\n                                this.account.chat_settings.updateCachedAvatars(user_info.id, user_info.avatar, data_avatar);\n                                this.$('.circle-avatar').setAvatar(image, this.avatar_size);\n                            }, () => {\n                                let default_avatar = Images.getDefaultAvatar(user_info.nickname || user_info.jid || user_info.id);\n                                this.$('.circle-avatar').setAvatar(default_avatar, this.avatar_size);\n                            });\n                        }\n                    }\n                    else {\n                        let default_avatar = Images.getDefaultAvatar(user_info.nickname || user_info.jid || user_info.id);\n                        this.$('.circle-avatar').setAvatar(default_avatar, this.avatar_size);\n                    }\n                }\n                else {\n                    image = this.contact.cached_image;\n                    this.$('.circle-avatar').setAvatar(image, this.avatar_size);\n                }\n            },\n\n            openByClick: function () {\n                let message = this.model.message,\n                    chat = this.account.chats.getChat(this.contact);\n                this.model.message.set('is_unread', false);\n                chat.sendMarker(message.get('origin_id'), 'displayed', message.get('stanza_id'), message.get('contact_stanza_id'));\n                this.model.set('active', true);\n                this.contact.trigger(\"open_mention\", this.contact, message.get('unique_id'));\n            },\n\n            updateColorScheme: function () {\n                let color = this.account.settings.get('color');\n                this.$el.attr('data-color', color);\n            }\n\n        });\n\n        xabber.MentionsPlaceholderView = xabber.BasicView.extend({\n            className: 'placeholder-wrap mentions-placeholder-wrap noselect',\n            template: templates.mentions_placeholder\n        });\n\n        xabber.Account.addInitPlugin(function () {\n           this.mentions = new xabber.AccountMentions(null, {account: this});\n           this.unread_mentions = new xabber.Mentions(null, {account: this});\n        });\n\n        xabber.once(\"start\", function () {\n            this.mentions = new this.Mentions;\n            this.mentions_view = this.left_panel.addChild('mentions',\n                this.MentionsView, {model: this.mentions});\n            this.mentions_placeholder = this.right_panel.addChild('mentions_placeholder',\n                this.MentionsPlaceholderView);\n        }, xabber);\n\n        return xabber;\n    };\n}).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceURL=webpack://xabber.web/./src/mentions.js?")},"./src/omemo.js":(module,exports,__webpack_require__)=>{eval("/* provided dependency */ var libsignal = __webpack_require__(/*! libsignal-protocol */ \"./src/lib/libsignal-protocol.js\");\n/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ \"./node_modules/console-browserify/index.js\");\nvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    return function (xabber) {\n        let env = xabber.env,\n            constants = env.constants,\n            utils = env.utils,\n            $ = env.$,\n            templates = env.templates.base,\n            Strophe = env.Strophe,\n            _ = env._,\n            KeyHelper = libsignal.KeyHelper,\n            SignalProtocolAddress = libsignal.SignalProtocolAddress,\n            SessionBuilder = libsignal.SessionBuilder,\n            SessionCipher = libsignal.SessionCipher;\n\n        xabber.Peer = Backbone.Model.extend({\n            idAttribute: 'jid',\n\n            initialize: function (attrs, options) {\n                attrs = attrs || {};\n                this.account = options.account;\n                this.devices = {};\n                this.store = this.account.omemo.store;\n                this.fingerprints = new xabber.Fingerprints({model: this});\n                this.updateDevices(attrs.devices);\n                this.set({\n                    jid: attrs.jid\n                });\n            },\n\n            updateDevices: function (devices) {\n                if (!devices)\n                    return;\n                for (let d in this.devices) {\n                    if (!devices[d]) {\n                        this.account.omemo.removeSession('session' + this.devices[d].address.toString());\n                        delete this.devices[d];\n                    }\n                }\n                for (let d in devices) {\n                    let device = this.getDevice(d),\n                        label = devices[d].label;\n                    label && device.set('label', label);\n                }\n            },\n\n            getDevicesNode: async function () {\n                if (!this._pending_devices) {\n                    this._pending_devices = true;\n                    this._dfd_devices = new $.Deferred();\n                    return new Promise((resolve, reject) => {\n                        this.account.getConnectionForIQ().omemo.getDevicesNode(this.get('jid'), (cb) => {\n                            this.updateDevices(this.account.getConnectionForIQ().omemo.parseUserDevices($(cb)));\n                            this._pending_devices = false;\n                            this._dfd_devices.resolve();\n                            resolve();\n                        }, () => {\n                            this._pending_devices = false;\n                            this._dfd_devices.resolve();\n                            resolve();\n                        });\n                    });\n                } else {\n                    return new Promise((resolve, reject) => {\n                        this._dfd_devices.done(() => {\n                            resolve();\n                        });\n                    });\n                }\n            },\n\n            encrypt: async function (message) {\n                let enc_promises = [],\n                    aes = await utils.AES.encrypt(message),\n                    is_trusted = true;\n\n                if (!_.keys(this.devices).length)\n                    await this.getDevicesNode();\n                for (let device in this.devices) {\n                    enc_promises.push(this.devices[device].encrypt(aes.keydata));\n                }\n\n                for (let device in this.account.omemo.own_devices) {\n                    enc_promises.push(this.account.omemo.own_devices[device].encrypt(aes.keydata));\n                }\n\n                let keys = await Promise.all(enc_promises);\n\n                keys = keys.filter(key => key !== null);\n\n                for (let device_id in this.devices) {\n                    let device = this.devices[device_id];\n                    if (device.get('ik') === null)\n                        continue;\n                    if (device.get('trusted') === null)\n                        is_trusted = 'error';\n                    if (is_trusted && device.get('trusted') === undefined)\n                        is_trusted = 'none';\n                }\n\n                return {\n                    keys: keys,\n                    payload: aes.payload,\n                    is_trusted: is_trusted\n                };\n            },\n\n            decrypt: async function (deviceId, ciphertext, preKey) {\n                let device = this.getDevice(deviceId);\n\n                return device.decrypt(ciphertext, preKey);\n            },\n\n            getDevice: function (id) {\n                if (!this.devices[id]) {\n                    this.devices[id] = new xabber.Device({jid: this.get('jid'), id: id }, { account: this.account, store: this.store});\n                }\n\n                return this.devices[id];\n            }\n        });\n\n        xabber.Peers = Backbone.Collection.extend({\n            model: xabber.Peer,\n\n            initialize: function (models, options) {\n                this.collections = [];\n                this.on(\"add\", _.bind(this.updateInCollections, this, 'add'));\n                this.on(\"change\", _.bind(this.updateInCollections, this, 'change'));\n            },\n\n            addCollection: function (collection) {\n                this.collections.push(collection);\n            },\n\n            updateInCollections: function (event, contact) {\n                _.each(this.collections, function (collection) {\n                    collection.update(contact, event);\n                });\n            }\n        });\n\n        xabber.Fingerprints = xabber.BasicView.extend({\n            className: 'modal main-modal fingerprints-wrap',\n            template: templates.fingerprints,\n            ps_selector: '.fingerprints-content',\n            ps_settings: {theme: 'item-list'},\n\n            events: {\n                'click .btn-trust': \"trustDevice\",\n                'click .btn-ignore': \"ignoreDevice\",\n                'click .btn-delete': \"deleteDevice\",\n                \"click .set-label + div\": \"editLabel\",\n                'click .btn-cancel': \"close\"\n            },\n\n            _initialize: function () {\n                if (this.model.own_devices) {\n                    this.account = this.model.account;\n                    this.omemo = this.model;\n                    this.jid = this.account.get('jid');\n                    this.is_own_devices = true;\n                } else {\n                    this.account = this.model.account;\n                    this.omemo = this.account.omemo;\n                    this.jid = this.model.get('jid');\n                }\n            },\n\n            open: function () {\n                this.omemo = this.account.omemo;\n                let name = \"\";\n                if (this.is_own_devices)\n                    name = this.account.get('name');\n                else {\n                    let contact = this.account.contacts.get(this.jid);\n                    name = contact ? contact.get('name') : this.jid;\n                }\n                this.$('.header').text(xabber.getString('omemo__dialog_fingerprints__header', [name]));\n                this.data.set('visible', true);\n                this.show();\n                this.$('div.fingerprints-content').html(env.templates.contacts.preloader());\n                if (this.is_own_devices)\n                    this.renderOwnDevices();\n                else\n                    this.renderDevices();\n            },\n\n            renderDevices: function () {\n                this.model.getDevicesNode().then(() => {\n                    let devices_count = _.keys(this.model.devices).length;\n                    this.updateFingerprints(this.model.devices);\n                });\n                this.updateOwnFingerprint();\n            },\n\n            renderOwnDevices: function () {\n                this.omemo.getMyDevices().then(() => {\n                    let devices_count = _.keys(this.model.own_devices).length;\n                    this.updateFingerprints(this.model.own_devices);\n                    this.updateOwnFingerprint();\n                });\n            },\n\n            render: function () {\n                this.$el.openModal({\n                    complete: () => {\n                        this.$el.detach();\n                        this.data.set('visible', false);\n                    }\n                });\n            },\n\n            editLabel: function () {\n                this.$('.set-label').removeClass('hidden');\n                this.$('.set-label').focus();\n                let saveLabel = (ev) => {\n                    let label = ev.target.value.trim();\n                    this.saveLabel(label);\n                };\n                this.$('.set-label')[0].onblur = saveLabel;\n                this.$('input.set-label')[0].onkeydown = (ev) => {\n                    if (ev.keyCode == constants.KEY_ENTER)\n                        saveLabel(ev);\n                };\n            },\n\n            saveLabel: function (label) {\n                this.$('.set-label').addClass('hidden');\n                if (label == this.account.settings.get('device_label_text'))\n                    return;\n                this.account.settings.save('device_label_text', label);\n                this.account.getConnectionForIQ().omemo.publishDevice(this.omemo.get('device_id'), label, () => {\n                    this.updateOwnFingerprint();\n                });\n            },\n\n            updateFingerprints: async function (devices) {\n                let counter = 0,\n                    devices_count = _.keys(devices).length,\n                    dfd = new $.Deferred(),\n                    $container = this.$('div.fingerprints-content');\n                dfd.done((f_count) => {\n                    if (!f_count)\n                        $container.html($(`<div class=\"empty-table\">${xabber.getString(\"omemo__dialog_fingerprints__text_no_fingerprints\")}</div>`));\n                    else\n                        this.$('.dropdown-button').dropdown({\n                            inDuration: 100,\n                            outDuration: 100,\n                            constrainWidth: false,\n                            hover: false,\n                            container: this.$('.fingerprints-content')[0],\n                            alignment: 'left'\n                        });\n                    this.jid == this.account.get('jid') && f_count++;\n                    this.$('.additional-info').text(xabber.getQuantityString(\"omemo__dialog_fingerprints__text_devices_count\", f_count, [this.jid, f_count]));\n                    $container.find('.preloader-wrapper').detach();\n                });\n                for (let device_id in devices) {\n                    if (device_id == this.omemo.get('device_id')) {\n                        counter++;\n                        if (devices_count == counter)\n                            dfd.resolve($container.find('div.row').length);\n                        continue;\n                    }\n                    let device = devices[device_id];\n                    if (device.get('ik')) {\n                        let options = {},\n                            f = device.generateFingerprint(),\n                            fing = (this.omemo.get('fingerprints')[this.jid] || [])[device_id],\n                            is_trusted = fing ? (fing.fingerprint != f ? 'error' : (fing.trusted ? 'trust' : 'ignore')) : 'unknown';\n                        is_trusted === 'error' && (options.old_fingerprint = fing.fingerprint);\n                        $container.append(this.addRow(device.id, device.get('label'), is_trusted, f, options));\n                        counter++;\n                        if (devices_count == counter)\n                            dfd.resolve($container.find('div.row').length);\n                    }\n                    else {\n                        this.account.getConnectionForIQ().omemo.getBundleInfo({jid: device.jid, id: device.id}, async (iq) => {\n                            let $iq = $(iq),\n                                $bundle = $iq.find(`item[id=\"${device.id}\"] bundle[xmlns=\"${Strophe.NS.OMEMO}\"]`),\n                                ik = $bundle.find(`ik`).text();\n                            if (ik) {\n                                device.set('ik', utils.fromBase64toArrayBuffer(ik));\n                                let options = {},\n                                    f = device.generateFingerprint(),\n                                    fing = (this.omemo.get('fingerprints')[this.jid] || [])[device.id],\n                                    is_trusted = fing ? (fing.fingerprint != f ? 'error' : (fing.trusted ? 'trust' : 'ignore')) : 'unknown';\n                                is_trusted === 'error' && (options.old_fingerprint = fing.fingerprint);\n                                $container.append(this.addRow(device.id, device.get('label'), is_trusted, f, options));\n                            }\n                            counter++;\n                            if (devices_count == counter)\n                                dfd.resolve($container.find('div.row').length);\n                        }, () => {\n                            counter++;\n                            if (devices_count == counter)\n                                dfd.resolve($container.find('div.row').length);\n                        });\n                    }\n                }\n            },\n\n            updateOwnFingerprint: async function () {\n                this.$('.this-device-content').html(\"\");\n                let omemo = this.account.omemo;\n                if (omemo) {\n                    let device = omemo.own_devices[omemo.get('device_id')];\n                    if (device) {\n                        if (device.get('fingerprint')) {\n                            this.$('.this-device-content').append(this.addRow(device.id, device.get('label'), null, device.get('fingerprint')));\n                        } else if (device.get('ik')) {\n                            device.set('fingerprint', device.generateFingerprint());\n                            this.$('.this-device-content').append(this.addRow(device.id, device.get('label'), null, device.get('fingerprint')));\n                        } else {\n                            device.getBundle().then(({pk, spk, ik}) => {\n                                device.set('ik', utils.fromBase64toArrayBuffer(ik));\n                                let fingerprint = device.generateFingerprint();\n                                if (!device.get('fingerprint') || device.get('fingerprint') !== fingerprint)\n                                    device.set('fingerprint', fingerprint);\n                                this.$('.this-device-content').append(this.addRow(device.id, device.get('label'), null, device.get('fingerprint')));\n                            });\n                        }\n                    } else {\n                        omemo.store.getIdentityKeyPair().then((ik) => {\n                            let pubKey = ik.pubKey;\n                            if (pubKey.byteLength == 33)\n                                pubKey = pubKey.slice(1);\n                            let fingerprint = Array.from(new Uint8Array(pubKey)).map(b => b.toString(16).padStart(2, \"0\")).join(\"\");\n                            this.$('.this-device-content').append(this.addRow(omemo.get('device_id'), this.account.settings.get('device_label_text'), null, fingerprint));\n                        });\n                    }\n\n                }\n            },\n\n            close: function () {\n                let deferred = new $.Deferred();\n                this.$el.closeModal({ complete: () => {\n                        this.$el.detach();\n                        this.data.set('visible', false);\n                        deferred.resolve();\n                    }});\n                return deferred.promise();\n            },\n\n            trustDevice: function (ev) {\n                let $target = $(ev.target).closest('div.row'),\n                    fingerprint = $target.find('.fingerprint').text().replace(/ /g, \"\"),\n                    is_trusted = $target.children('.buttons[data-trust]').attr('data-trust'),\n                    device_id = Number($target.find('div.device-id').text());\n                $target.children('.buttons[data-trust]').attr('data-trust', 'trust');\n                $target.find('.trust-item-wrap').children().attr('data-value', 'trust').text(xabber.getString('omemo__dialog_fingerprints__button_trust'));\n                this.omemo.updateFingerprints(this.jid, device_id, fingerprint, true);\n                let device = this.is_own_devices ? this.account.omemo.own_devices[device_id] : this.model.devices[device_id];\n                if (device && is_trusted != 'trusted') {\n                    if (is_trusted === 'error')\n                        $target.find('.old-fingerprint').detach();\n                    device.set('trusted', true);\n                    device.is_session_initiated = false;\n                    device.preKeys = null;\n                    this.account.trigger('trusting_updated');\n                }\n            },\n\n            ignoreDevice: function (ev) {\n                let $target = $(ev.target).closest('div.row'),\n                    fingerprint = $target.find('.fingerprint').text().replace(/ /g, \"\"),\n                    is_trusted = $target.children('.buttons[data-trust]').attr('data-trust'),\n                    device_id = Number($target.find('div.device-id').text());\n                $target.children('.buttons[data-trust]').attr('data-trust', 'ignore');\n                $target.find('.trust-item-wrap').children().attr('data-value', 'ignore').text(xabber.getString('omemo__dialog_fingerprints__button_error'));\n                this.omemo.updateFingerprints(this.jid, device_id, fingerprint, false);\n                let device = this.is_own_devices ? this.account.omemo.own_devices[device_id] : this.model.devices[device_id];\n                if (device && is_trusted != 'ignore') {\n                    if (is_trusted === 'error')\n                        $target.find('.old-fingerprint').detach();\n                    device.set('trusted', false);\n                    device.is_session_initiated = false;\n                    device.preKeys = null;\n                    this.account.trigger('trusting_updated');\n                }\n            },\n\n            addRow: function (id, label, trust, fingerprint, options) {\n                options = options || {};\n                let delete_button = this.is_own_devices ? true : false,\n                    edit_setting = id == this.omemo.get('device_id'),\n                    old_fingerprint = options.old_fingerprint,\n                    error;\n                if (fingerprint.match(/.{1,8}/g))\n                    fingerprint = fingerprint.match(/.{1,8}/g).join(\" \");\n                else {\n                    fingerprint = '';\n                    error = xabber.getString(\"omemo__dialog_fingerprints__invalid_fingerprint\");\n                    let device = this.is_own_devices ? this.account.omemo.own_devices[id] : this.model.devices[id];\n                    if (device && trust != 'ignore') {\n                        trust = 'ignore';\n                        this.omemo.updateFingerprints(this.jid, id, fingerprint, false);\n                        device.set('trusted', false);\n                        device.is_session_initiated = false;\n                        device.preKeys = null;\n                        this.account.trigger('trusting_updated');\n                    }\n                }\n                old_fingerprint && (old_fingerprint = old_fingerprint.match(/.{1,8}/g).join(\" \"));\n                let $row = templates.fingerprint_item({id,label,trust,fingerprint, delete_button, edit_setting, old_fingerprint, error});\n                return $row;\n            },\n\n            deleteDevice: function (ev) {\n                let $target = $(ev.target).closest('div.row'),\n                    device_id = Number($target.find('div.device-id').text());\n                utils.dialogs.ask(xabber.getString(\"omemo__dialog_delete_device__header\"), xabber.getString(\"omemo__dialog_delete_device__text\", [device_id]), null, { ok_button_text: xabber.getString(\"omemo__dialog_delete_device__button_delete\")}).done((result) => {\n                    if (result) {\n                        $target.detach();\n                        delete this.model.own_devices[device_id];\n                        let conn = this.account.getConnectionForIQ();\n                        if (conn && conn.omemo) {\n                            delete conn.omemo.devices[device_id];\n                            conn.omemo.publishDevice(null, null, () => {\n                                $target.detach();\n                            });\n                            conn.omemo.removeItemFromNode(`${Strophe.NS.OMEMO}:bundles`, device_id);\n                        }\n                    }\n                });\n            },\n        });\n\n        xabber.Bundle = Backbone.Model.extend({\n            initialize: async function (attrs, options) {\n                this.preKeys = [];\n                this.model = options.model;\n                this.store = options.store;\n                if (this.model.get('identityKey'))\n                    this.getIdentity();\n                else\n                    await this.generateIdentity();\n               await this.getPreKeys();\n               if (this.model.get('resend_bundle')) {\n                   this.model.publishBundle();\n                   this.set('resend_bundle', false);\n               }\n            },\n\n            generateIdentity: function () {\n                return Promise.all([\n                    KeyHelper.generateIdentityKeyPair(),\n                    KeyHelper.generateRegistrationId(),\n                ]).then((result) => {\n                    let identityKey = result[0],\n                        registrationId = result[1];\n                    this.store.put('identityKey', identityKey);\n                    this.store.put('registrationId', registrationId);\n                    this.cacheIdentity(identityKey, registrationId);\n                });\n            },\n\n            getIdentity: function () {\n                let identityKey = JSON.parse(this.model.get('identityKey')),\n                    registrationId = this.model.get('registrationId'),\n                    pubKey = utils.fromBase64toArrayBuffer(identityKey.pubKey),\n                    privKey = utils.fromBase64toArrayBuffer(identityKey.privKey);\n                this.store.put('identityKey', {pubKey: pubKey, privKey: privKey});\n                this.store.put('registrationId', registrationId);\n            },\n\n            cacheIdentity: function (identityKey, registrationId) {\n                let pubKey = utils.ArrayBuffertoBase64(identityKey.pubKey),\n                    privKey = utils.ArrayBuffertoBase64(identityKey.privKey);\n                this.model.save('identityKey', JSON.stringify({pubKey: pubKey, privKey: privKey}));\n                this.model.save('registrationId', registrationId);\n            },\n\n            generatePreKeys: async function () {\n                let preKeysPromises = [];\n                for (let i = 1; i <= constants.PREKEYS_COUNT; i++) {\n                    preKeysPromises.push(this.generatePreKey(i));\n                }\n\n                preKeysPromises.push(this.generateSignedPreKey(1));\n\n                return await Promise.all(preKeysPromises);\n            },\n\n            getSignedPreKey: async function () {\n                let spk = this.model.get('signedPreKey');\n                if (spk) {\n                    let pubKey = utils.fromBase64toArrayBuffer(spk.keyPair.pubKey),\n                        privKey = utils.fromBase64toArrayBuffer(spk.keyPair.privKey),\n                        signature = utils.fromBase64toArrayBuffer(spk.signature),\n                        keyPair = {pubKey, privKey},\n                        keyId = spk.keyId;\n                    return {keyPair, keyId, signature};\n                }\n                else {\n                    return await this.generateSignedPreKey(this.preKeys[0].keyId || 1);\n                }\n            },\n\n            getPreKeys: async function () {\n                let prekeys = this.model.prekeys.getAll();\n                if (Object.keys(prekeys).length >= constants.MIN_PREKEYS_COUNT) {\n                    for (let p in prekeys) {\n                        let pk = prekeys[p],\n                            id = pk.id,\n                            prekey = JSON.parse(pk.key),\n                            priv_pk = utils.fromBase64toArrayBuffer(prekey.privKey),\n                            pub_pk = utils.fromBase64toArrayBuffer(prekey.pubKey),\n                            key_pair = {pubKey: pub_pk, privKey: priv_pk};\n                        this.preKeys.push({keyId: id, keyPair: key_pair});\n                        this.store.storePreKey(id, key_pair);\n                    }\n                    this.getUsedPreKeys();\n                    let spk = await this.getSignedPreKey();\n                    this.preKeys.push(spk);\n                    this.store.storeSignedPreKey(spk.keyId, spk.keyPair);\n                }\n                else {\n                    this.generatePreKeys().then((prekeys) => {\n                        this.preKeys = prekeys;\n                        this.getUsedPreKeys();\n                    });\n                }\n            },\n\n            getUsedPreKeys: function () {\n                let prekeys = this.model.own_used_prekeys.getAll();\n                if (Object.keys(prekeys).length) {\n                    for (let p in prekeys) {\n                        let pk = prekeys[p],\n                            id = pk.id,\n                            prekey = JSON.parse(pk.key),\n                            privKey = utils.fromBase64toArrayBuffer(prekey.privKey),\n                            pubKey = utils.fromBase64toArrayBuffer(prekey.pubKey);\n                        this.store.storePreKey(id, {pubKey, privKey});\n                    }\n                }\n            },\n\n            generatePreKey: async function (id) {\n                let preKey = await KeyHelper.generatePreKey(id);\n                this.store.storePreKey(id, preKey.keyPair);\n\n                return preKey;\n            },\n\n            generateSignedPreKey: async function (id) {\n                let identity = await this.store.getIdentityKeyPair();\n                let signedPreKey = await KeyHelper.generateSignedPreKey(identity, id);\n\n                this.store.storeSignedPreKey(id, signedPreKey.keyPair);\n                this.cacheSignedPreKey(signedPreKey);\n\n                return signedPreKey;\n            },\n\n            cacheSignedPreKey: function (spk) {\n                let pubKey = utils.ArrayBuffertoBase64(spk.keyPair.pubKey),\n                    privKey = utils.ArrayBuffertoBase64(spk.keyPair.privKey),\n                    signature = utils.ArrayBuffertoBase64(spk.signature),\n                    keyPair = {pubKey, privKey},\n                    keyId = spk.keyId,\n                    converted_spk = {keyPair, keyId, signature};\n                this.model.save('signedPreKey', converted_spk);\n            }\n\n        });\n        \n        xabber.Prekeys = Backbone.Model.extend({\n            initialize: function (options) {\n                this.name = options.name;\n                this.model = options.model;\n            },\n\n            get: function (id) {\n                let prekeys = _.clone(this.model.get(this.name));\n                return prekeys[id];\n            },\n\n            put: function (prekey) {\n                if (!prekey.id)\n                    return;\n                let prekeys = _.clone(this.model.get(this.name));\n                prekeys[prekey.id] = prekey;\n                this.model.save(this.name, prekeys);\n            },\n\n            getAll: function () {\n                let prekeys = _.clone(this.model.get(this.name));\n                return prekeys;\n            },\n\n            remove: function (id) {\n                if (!id)\n                    return;\n                let prekeys = _.clone(this.model.get(this.name));\n                delete prekeys[id];\n                this.model.save(this.name, prekeys);\n            }\n        });\n\n        xabber.Device = Backbone.Model.extend({\n            initialize: function (attrs, options) {\n                this.account = options.account;\n                this.id = attrs.id;\n                this.jid = attrs.jid;\n                this.store = options.store;\n                this.preKeys = null;\n                this.address = new SignalProtocolAddress(attrs.jid, attrs.id);\n            },\n\n            generateFingerprint: function () {\n                let identityKey = this.get('ik');\n                if (!identityKey)\n                    return;\n                if (identityKey.byteLength == 33)\n                    identityKey = identityKey.slice(1);\n                return Array.from(new Uint8Array(identityKey)).map(b => b.toString(16).padStart(2, \"0\")).join(\"\");\n            },\n\n            closeSession: function (reason) {\n                this.account.getConnectionForIQ().omemo.sendOptOut({\n                    to: this.jid,\n                    reason: reason\n                }, () => {});\n            },\n\n            getBundle: async function () {\n                if (!this._pending_bundle) {\n                    this._pending_bundle = true;\n                    this._dfd_bundle = new $.Deferred();\n                    return new Promise((resolve, reject) => {\n                        this.account.getConnectionForIQ().omemo.getBundleInfo({jid: this.jid, id: this.id}, (iq) => {\n                            let $iq = $(iq),\n                                $bundle = $iq.find(`item[id=\"${this.id}\"] bundle[xmlns=\"${Strophe.NS.OMEMO}\"]`),\n                                $spk = $bundle.find('spk'),\n                                spk = {id: $spk.attr('id'), key: $spk.text(), signature: $bundle.find('spks').text()},\n                                ik = $bundle.find(`ik`).text();\n                            this.preKeys = [];\n                            if (!ik)\n                                this.set('ik', null);\n                            $bundle.find('prekeys pk').each((i, pk) => {\n                                let $pk = $(pk);\n                                this.preKeys.push({id: $pk.attr('id'), key: $pk.text()});\n                            });\n                            this._pending_bundle = false;\n                            let pk = this.getRandomPreKey();\n                            if (!pk) {\n                                this._dfd_bundle.reject();\n                                reject();\n                            }\n                            else {\n                                this._dfd_bundle.resolve({pk, spk, ik});\n                                resolve({pk, spk, ik});\n                            }\n                        }, () => {\n                            this.set('ik', null);\n                            this.preKeys = [];\n                            this._dfd_bundle.reject();\n                            this._pending_bundle = false;\n                            reject();\n                        });\n                    });\n                } else {\n                    return new Promise((resolve, reject) => {\n                        this._dfd_bundle.done(({pk, spk, ik}) => {\n                            resolve({pk, spk, ik});\n                        });\n                        this._dfd_bundle.fail(() => {\n                            reject();\n                        });\n                    });\n                }\n            },\n\n            getRandomPreKey: function () {\n                let min = 0,\n                    max = this.preKeys.length - 1,\n                    i = Math.floor(min + Math.random() * (max + 1 - min));\n                return this.preKeys[i];\n            },\n\n            decrypt: async function (cipherText, preKey) {\n                try {\n                    let sessionCipher = new SessionCipher(this.store, this.address), plainText;\n\n                    if (preKey)\n                        plainText = await sessionCipher.decryptPreKeyWhisperMessage(cipherText, 'binary');\n                    else {\n                        if (!this.store.hasSession(this.address.toString())) {\n                            let session = this.getCachedSession();\n                            if (session)\n                                await this.store.storeSession(this.address.toString(), session);\n                        }\n                        plainText = await sessionCipher.decryptWhisperMessage(cipherText, 'binary');\n                    }\n\n                    return plainText;\n                }\n                catch (e) {\n                    return null;\n                }\n            },\n\n            getPreKey: function () {\n                let pk = this.account.omemo.used_prekeys.get(String(this.id));\n                return pk;\n            },\n\n            getCachedSession: function () {\n                return this.account.omemo.getSession('session' + this.address.toString());\n            },\n\n            encrypt: async function (plainText) {\n                try {\n                    if (this.get('trusted') === false && (this.id != this.account.omemo.get('device_id')))\n                        return null;\n                    if (!this.store.hasSession(this.address.toString()) || !this.is_session_initiated) { // this.preKeys ??\n                        if (this.preKeys && !this.preKeys.length)\n                            return null;\n                        this.is_session_initiated = true;\n                        let s = await this.initSession();\n                        if (!s)\n                            return null;\n                    }\n\n                    let session = this.getSession(),\n                        ciphertext = await session.encrypt(plainText);\n\n                    return {\n                        preKey: ciphertext.type === 3,\n                        ciphertext: ciphertext,\n                        deviceId: this.address.getDeviceId()\n                    };\n                } catch (e) {\n                    console.log('Error:', e);\n                    console.warn('Could not encrypt data for device with id ' + this.address.getDeviceId());\n\n                    return null;\n                }\n            },\n\n            initSession: async function () {\n                let {pk, spk, ik} = await this.getBundle(),\n                    cached_pk = this.getPreKey(),\n                    id = this.id;\n                if (cached_pk) {\n                    if (!spk || spk && JSON.stringify(spk) == JSON.stringify(cached_pk.spk) && JSON.stringify(ik) == JSON.stringify(cached_pk.ik))\n                        pk = cached_pk.pk;\n                    else\n                        this.account.omemo.used_prekeys.put({id, pk, spk, ik});\n                }\n                else\n                    this.account.omemo.used_prekeys.put({id, pk, spk, ik});\n                this.set({'pk': utils.fromBase64toArrayBuffer(pk.key), 'ik': utils.fromBase64toArrayBuffer(ik)});\n                this.fingerprint = this.generateFingerprint();\n                let trusted = this.account.omemo.isTrusted(this.jid, id, this.fingerprint);\n                this.set('trusted', trusted);\n                if ((this.id != this.account.omemo.get('device_id')) && trusted === false)\n                    return false;\n                this.processPreKey({\n                    registrationId: Number(id),\n                    identityKey: utils.fromBase64toArrayBuffer(ik),\n                    signedPreKey: {\n                        keyId: Number(spk.id),\n                        publicKey: utils.fromBase64toArrayBuffer(spk.key),\n                        signature: utils.fromBase64toArrayBuffer(spk.signature)\n                    },\n                    preKey: {\n                        keyId: Number(pk.id),\n                        publicKey: utils.fromBase64toArrayBuffer(pk.key)\n                    }\n                });\n                return true;\n            },\n\n            processPreKey: function (preKeyBundle) {\n                this.session = new SessionBuilder(this.store, this.address);\n                return this.session.processPreKey(preKeyBundle);\n            },\n\n            removeSession: function () {\n                this.store.removeSession(this.address.toString());\n                this.sessionCipher = null;\n            },\n\n            getSession: function () {\n                if (!this.sessionCipher) {\n                    this.sessionCipher = new SessionCipher(this.store, this.address);\n                }\n                return this.sessionCipher;\n            }\n        });\n\n        xabber.Omemo = Backbone.ModelWithStorage.extend({\n            defaults: {\n                sessions: {},\n                fingerprints: {},\n                prekeys: {},\n                retract_version: 0,\n                used_prekeys: {},\n                own_used_prekeys: {},\n                device_id: \"\"\n            },\n\n            _initialize: function (attrs, options) {\n                this.on(\"change:device_id\", this.onDeviceIdUpdated, this);\n                this.on(\"destroy\", this.onOmemoDestroyed, this);\n                this.own_devices = {};\n                this.account = options.account;\n                this.peers = new xabber.Peers();\n                if (!this.get('device_id'))\n                    this.set('device_id', this.generateDeviceId());\n                this.store = new xabber.SignalProtocolStore();\n                this.account.on('device_published', this.publishBundle, this);\n                this.account.on(\"devices_updated\", this.onOwnDevicesUpdated, this);\n                this.store.on('prekey_removed', this.removePreKey, this);\n                this.store.on('session_stored', this.cacheSession, this);\n            },\n\n            storeSessions: function () {\n                let sessions = this.get('sessions');\n                for (let session_id in sessions) {\n                    let session = sessions[session_id];\n                    session && this.store.put(session_id, session);\n                }\n            },\n\n            onOmemoDestroyed: function () {\n                if (this.own_devices && Object.keys(this.own_devices).length != 0)\n                    this.deleteOwnDevice();\n                this.account.connection.deleteHandler(this._msg_handler);\n            },\n\n            deleteOwnDevice: function () {\n                let device_id = this.get('device_id');\n                delete this.own_devices[device_id];\n                let conn = this.account.getConnectionForIQ();\n                if (conn && conn.omemo) {\n                    delete conn.omemo.devices[device_id];\n                    conn.omemo.publishDevice(null, null, () => {});\n                    conn.omemo.removeItemFromNode(`${Strophe.NS.OMEMO}:bundles`, device_id);\n                }\n            },\n\n            onConnected: function () {\n                this.prekeys = new xabber.Prekeys({name: 'prekeys', model: this});\n                this.used_prekeys = new xabber.Prekeys({name: 'used_prekeys', model: this});\n                this.own_used_prekeys = new xabber.Prekeys({name: 'own_used_prekeys', model: this});\n                this.cached_messages = new xabber.DecryptedMessages({id: 'decrypted-messages'}, {\n                    account: this.account,\n                    storage_name: xabber.getStorageName() + '-decrypted-messages-' + this.account.get('jid'),\n                    fetch: 'before'\n                });\n                this.bundle = new xabber.Bundle(null, {store: this.store, model: this});\n                this.connection = this.account.connection;\n                this.registerMessageHandler();\n                this.addDevice();\n            },\n\n            getMyDevices: async function () {\n                if (!this._pending_own_devices) {\n                    this._pending_own_devices = true;\n                    this._dfd_own_devices = new $.Deferred();\n                    return new Promise((resolve, reject) => {\n                        let conn = this.account.getConnectionForIQ();\n                        if (conn) {\n                            if (conn.omemo) {\n                                conn.omemo.getDevicesNode(null, (cb) => {\n                                    conn.omemo.devices = conn.omemo.parseUserDevices($(cb));\n                                    this._pending_own_devices = false;\n                                    this._dfd_own_devices.resolve();\n                                    resolve();\n                                }, function () {\n                                    this._pending_own_devices = false;\n                                    this._dfd_own_devices.resolve();\n                                    resolve();\n                                });\n                            } else\n                                this._pending_own_devices = false;\n                        } else\n                            this._pending_own_devices = false;\n                    });\n                } else {\n                    return new Promise((resolve, reject) => {\n                        this._dfd_own_devices.done(() => {\n                            resolve();\n                        });\n                    });\n                }\n            },\n\n            updateFingerprints: function (contact, device_id, fingerprint, trusted) {\n                let fingerprints = _.clone(this.get('fingerprints'));\n                if (!fingerprints[contact])\n                    fingerprints[contact] = {};\n                let contact_fingerprints = fingerprints[contact];\n                if (_.isArray(contact_fingerprints))\n                    contact_fingerprints = {};\n                contact_fingerprints[device_id] = {fingerprint, trusted};\n                fingerprints[contact] = contact_fingerprints;\n                this.save('fingerprints', fingerprints);\n            },\n\n            isTrusted: function (jid, device_id, fingerprint) {\n                let fingerprints = _.clone(this.get('fingerprints'));\n                if (!fingerprints[jid])\n                    return;\n                if (!fingerprints[jid][device_id])\n                    return;\n                let fing = fingerprints[jid][device_id];\n                if (fing) {\n                    if (fing.fingerprint == fingerprint) {\n                        if (fing.trusted === undefined)\n                            return;\n                        else\n                            return fing.trusted;\n                    }\n                    else\n                        return null;\n                }\n            },\n\n            cacheRetractVersion: function (version) {\n                console.log('version ' + version)\n                this.save('retract_version', version);\n            },\n\n            getRetractVersion: function () {\n                return this.get('retract_version');\n            },\n\n            addDevice: function () {\n                let device_id = this.get('device_id');\n                if (this.connection) {\n                    let omemo = this.account.getConnectionForIQ().omemo;\n                    if (Object.keys(omemo.devices).length) {\n                        let device = omemo.devices[device_id];\n                        if (!device || device && (device.label || this.account.settings.get('device_label_text')) && device.label != this.account.settings.get('device_label_text')) {\n                            let label = this.account.settings.get('device_label_text') || `PC, ${utils.getOS()}, ${env.utils.getBrowser()}`;\n                            omemo.publishDevice(device_id, label, () => {\n                                this.account.trigger('device_published');\n                            });\n                        }\n                        else\n                            this.account.trigger('device_published');\n                    }\n                    else\n                        omemo.getDevicesNode(null, (cb) => {\n                            this.account.getConnectionForIQ().omemo.devices = omemo.parseUserDevices($(cb));\n                            for (let dev_id in this.account.getConnectionForIQ().omemo.devices) {\n                                if (!this.own_devices[dev_id])\n                                    this.own_devices[dev_id] = new xabber.Device({jid: this.account.get('jid'), id: dev_id}, { account: this.account, store: this.store});\n                            }\n                            let device = omemo.devices[device_id];\n                            if (!device || device && (device.label || this.account.settings.get('device_label_text')) && device.label != this.account.settings.get('device_label_text')) {\n                                let label = this.account.settings.get('device_label_text') || `PC, ${utils.getOS()}, ${env.utils.getBrowser()}`;\n                                omemo.publishDevice(device_id, label, () => {\n                                    this.account.trigger('device_published');\n                                });\n                            }\n                            else\n                                this.account.trigger('device_published');\n                        });\n                }\n            },\n\n            onDeviceIdUpdated: function () {\n                this.save('device_id', this.get('device_id'));\n            },\n\n            generateDeviceId: function () {\n                if (this.account.get('x_token') && this.account.get('x_token').token_uid && this.account.get('x_token').token_uid.length >= 8 && Number(this.account.get('x_token').token_uid.slice(0,8)))\n                    return Number(this.account.get('x_token').token_uid.slice(0,8));\n                let min = 1,\n                    max = Math.pow(2, 31) - 1,\n                    rand = min + Math.random() * (max + 1 - min);\n                return Math.floor(rand);\n            },\n\n            updateMessage: function (attrs, contact) {\n                if (!this.cached_messages)\n                    return;\n                this.cached_messages.updateMessage(attrs, contact);\n            },\n\n            registerMessageHandler: function () {\n                this.account.connection.deleteHandler(this._msg_handler);\n                this._msg_handler = this.account.connection.addHandler((message) => {\n                    this.receiveMessage(message);\n                    return true;\n                }, null, 'message', null, null, null, {'encrypted': true});\n            },\n\n            encrypt: function (contact, message) {\n                let peer = this.getPeer(contact.get('jid')),\n                    $msg = $(message.tree()),\n                    origin_id = $msg.children('origin-id').attr('id'),\n                    plaintext = Strophe.serialize($msg.children('envelope')[0]) || \"\";\n\n                origin_id && this.cached_messages.putMessage(contact, origin_id, plaintext);\n\n                return peer.encrypt(plaintext).then((encryptedMessage) => {\n\n                    let encryptedElement = $build('encrypted', {xmlns: Strophe.NS.OMEMO})\n                        .c('header', {\n                            sid: this.get('device_id'),\n                            label: this.account.settings.get('device_label_text')\n                        }),\n                        myKeys = $build('keys', {jid: this.account.get('jid')});\n\n                    encryptedElement.c('keys', { jid: contact.get('jid')});\n\n                    for (let key of encryptedMessage.keys) {\n                        let attrs = {\n                            rid: key.deviceId,\n                            kex: undefined\n                        };\n                        if (key.preKey) {\n                            attrs.kex = true;\n                        }\n\n                        if (peer.devices[key.deviceId])\n                            encryptedElement.c('key', attrs).t(btoa(key.ciphertext.body)).up();\n                        else\n                            myKeys.c('key', attrs).t(btoa(key.ciphertext.body)).up();\n\n                    }\n                    encryptedElement.up().cnode(myKeys.tree());\n\n                    encryptedElement.up().up()\n                        .c('payload').t(utils.ArrayBuffertoBase64(encryptedMessage.payload));\n\n                    $(message.tree()).find('envelope').remove();\n\n                    message.cnode(encryptedElement.tree());\n                    message.up().c('store', {\n                        xmlns: 'urn:xmpp:hints'\n                    }).up()\n                        .c('body').t('This message is encrypted using OMEMO end-to-end encryption.').up();\n\n                    return {message: message, is_trusted: encryptedMessage.is_trusted};\n                }).catch((msg) => {\n                });\n            },\n\n            hasChanges: function (o1, o2) {\n                let obj1 = _.clone(o1), obj2 = _.clone(o2);\n                for (let d in obj1) {\n                    delete obj2[d];\n                }\n                for (let d in obj2) {\n                    delete obj1[d];\n                }\n                return Object.keys(obj1).length || Object.keys(obj2).length;\n            },\n\n            receiveHeadlineMessage: function (message) {\n                if (!this.account.omemo || (this.account.omemo && this.cid != this.account.omemo.cid))\n                    return;\n                let $message = $(message),\n                    from_jid = Strophe.getBareJidFromJid($message.attr('from')),\n                    node = $message.find('items').attr('node');\n                if ($message.find('event[xmlns=\"' + Strophe.NS.PUBSUB + '#event\"]').length) {\n                    if (node == `${Strophe.NS.OMEMO}:devices`) {\n                        let devices = this.account.getConnectionForIQ().omemo.parseUserDevices($message);\n                        if (from_jid === this.account.get('jid')) {\n                            let has_devices = this.own_devices && Object.keys(this.own_devices).length,\n                                has_changes = this.hasChanges(this.own_devices, devices);\n                            this.account.getConnectionForIQ().omemo.devices = devices;\n                            let device_id = this.get('device_id'),\n                                device = this.account.getConnectionForIQ().omemo.devices[device_id];\n                            if (has_changes) {\n                                this.account.trigger(\"devices_updated\");\n                            }\n                            if (has_devices && has_changes) {\n                                this.account.trigger('trusting_updated');\n                            }\n                        }\n                        else {\n                            let peer = this.getPeer(from_jid),\n                                has_devices = peer.devices && Object.keys(peer.devices).length,\n                                has_changes = this.hasChanges(peer.devices, devices);\n                            peer.updateDevices(devices);\n                            if (has_devices && has_changes) {\n                                this.account.trigger('trusting_updated');\n                            }\n                        }\n                        return;\n                    }\n                    if (node == `${Strophe.NS.OMEMO}:bundles`) {\n                        let $item = $message.find('items item').first(),\n                            device_id = $item.attr('id'),\n                            $bundle = $item.children(`bundle[xmlns=\"${Strophe.NS.OMEMO}\"]`), device;\n                        if (from_jid === this.account.get('jid')) {\n                            let devices = this.account.getConnectionForIQ().omemo.devices\n                            if (devices && devices[device_id]) {\n                                if (!this.own_devices[device_id])\n                                    this.own_devices[device_id] = new xabber.Device({jid: this.account.get('jid'), id: device_id}, { account: this.account, store: this.store});\n                                device = this.own_devices[device_id];\n                            }\n                        } else {\n                            let peer = this.peers.get(from_jid);\n                            if (peer) {\n                                device = peer.devices[device_id];\n                            }\n                        }\n                        if (device) {\n                            let ik = $bundle.find(`ik`).text(),\n                                device_ik = device.get(`ik`), preKeys = [];\n                            if (!ik) {\n                                device.set('ik', null);\n                                return;\n                            }\n                            $bundle.find('prekeys pk').each((i, pk) => {\n                                let $pk = $(pk);\n                                preKeys.push({id: $pk.attr('id'), key: $pk.text()});\n                            });\n                            device.preKeys = preKeys;\n                            device.set('ik', utils.fromBase64toArrayBuffer(ik));\n                            device.set('fingerprint', device.generateFingerprint());\n                            device_ik && (device_ik = utils.ArrayBuffertoBase64(device_ik));\n                            if (!_.isUndefined(device_ik) && device_ik != ik)\n                                this.account.trigger('trusting_updated');\n                        }\n                    }\n                }\n            },\n\n            receiveChatMessage: function (message, options, deferred) {\n                options = options || {};\n                let $message = $(message);\n                if ($message.find(`encrypted[xmlns=\"${Strophe.NS.OMEMO}\"]`).length) {\n                    if ($message.find('result[xmlns=\"' + Strophe.NS.MAM + '\"]').length)\n                        _.extend(options, {\n                            is_mam: true,\n                            is_archived: true\n                        });\n                    if ($message.find('[xmlns=\"' + Strophe.NS.CARBONS + '\"]').length)\n                        options.carbon_copied = true;\n\n                    let $msg = $message.find(`encrypted[xmlns=\"${Strophe.NS.OMEMO}\"]`).parent(),\n                        jid = (Strophe.getBareJidFromJid($msg.attr('from')) === this.account.get('jid') ? Strophe.getBareJidFromJid($msg.attr('to')) : Strophe.getBareJidFromJid($msg.attr('from'))) || options.from_jid,\n                        contact = this.account.contacts.get(options.conversation ? options.conversation : jid),\n                        stanza_id = $msg.children(`stanza-id[by=\"${this.account.get('jid')}\"]`).attr('id'),\n                        cached_msg = stanza_id && this.cached_messages.getMessage(contact, stanza_id);\n\n                    if (Strophe.getBareJidFromJid($msg.attr('from')) != this.account.get('jid') && options.carbon_copied)\n                        return;\n\n                    if (cached_msg) {\n                        if (!options.replaced) {\n                            options.encrypted = true;\n                            this.getTrusted($message).then((is_trusted) => {\n                                options.is_trusted = is_trusted;\n                                $message.find('body').remove();\n                                $message.find(`encrypted[xmlns=\"${Strophe.NS.OMEMO}\"]`).replaceWith(cached_msg);\n                                if (options.gallery && deferred)\n                                    deferred.resolve($message);\n                                this.account.chats.receiveChatMessage($message[0], options);\n                            });\n                            return;\n                        }\n                        else if (options.replaced && $message.find(`encrypted[xmlns=\"${Strophe.NS.OMEMO}\"] header`).attr('sid') == this.get('device_id')) {\n                            options.encrypted = true;\n                            $message.find('body').remove();\n                            $message.find(`encrypted[xmlns=\"${Strophe.NS.OMEMO}\"]`).replaceWith(cached_msg);\n                            let chat = this.account.chats.getChat(contact, 'encrypted');\n                            chat && chat.messages.createFromStanza($message, options);\n                            let msg_item = chat.messages.find(msg => msg.get('stanza_id') == stanza_id || msg.get('contact_stanza_id') == stanza_id);\n                            if (msg_item) {\n                                msg_item.set('last_replace_time', $message.find('replaced').attr('stamp'));\n                                chat && chat.item_view.updateLastMessage(chat.last_message);\n                            }\n                            return;\n                        }\n                    }\n\n                    if (options.replaced) {\n                        this.decrypt(message.children('replace').children('message'), options).then((decrypted_msg) => {\n                            if (decrypted_msg) {\n                                options.encrypted = true;\n                                stanza_id && this.cached_messages.putMessage(contact, stanza_id, decrypted_msg);\n                                $message.find('body').remove();\n                                $message.find(`encrypted[xmlns=\"${Strophe.NS.OMEMO}\"]`).replaceWith(decrypted_msg);\n                                let chat = this.account.chats.getChat(contact, 'encrypted');\n                                chat && chat.messages.createFromStanza($message, options);\n                                let msg_item = chat.messages.find(msg => msg.get('stanza_id') == stanza_id || msg.get('contact_stanza_id') == stanza_id);\n                                if (msg_item) {\n                                    msg_item.set('last_replace_time', $message.find('replaced').attr('stamp'));\n                                    chat && chat.item_view.updateLastMessage(chat.last_message);\n                                }\n                            }\n                        });\n                    } else {\n                        this.getTrusted($message).then((is_trusted) => {\n                            options.is_trusted = is_trusted;\n                            return this.decrypt(message);\n                        }).then((decrypted_msg) => {\n                            if (decrypted_msg) {\n                                options.encrypted = true;\n                                stanza_id && this.cached_messages.putMessage(contact, stanza_id, decrypted_msg);\n                                $message.find('body').remove();\n                            }\n                            else {\n                                if (decrypted_msg === null) {\n                                    this.account.chats.getChat(contact, 'encrypted').item_view.updateLastMessage();\n                                    return;\n                                }\n                                options.not_encrypted = true;\n                                delete options.is_trusted;\n                            }\n                            $message.find(`encrypted[xmlns=\"${Strophe.NS.OMEMO}\"]`).replaceWith(decrypted_msg);\n                            if (options.gallery && decrypted_msg && deferred)\n                                deferred.resolve($message);\n                            else if (options.gallery && deferred)\n                                deferred.reject();\n                            this.account.chats.receiveChatMessage($message[0], options);\n                        }).catch(() => {\n                            if (options.synced_msg && !options.decryption_retry) {\n                                this.receiveChatMessage($message[0], _.extend(options, {decryption_retry: true}));\n                                return;\n                            }\n                            options.not_encrypted = true;\n                            delete options.is_trusted;\n                            $message.find(`encrypted[xmlns=\"${Strophe.NS.OMEMO}\"]`).remove();\n                            if (options.gallery && deferred)\n                                deferred.reject();\n                            this.account.chats.receiveChatMessage($message[0], options);\n                        });\n                    }\n                    if (options.gallery && deferred)\n                        deferred.reject();\n                }\n                if (options.gallery && deferred)\n                    deferred.reject();\n            },\n\n            checkOwnFingerprints: async function () {\n                return new Promise((resolve, reject) => {\n                    let is_trusted = true,\n                        dfd = new $.Deferred(), counter = 0;\n                    dfd.done((t) => {\n                        let trust = t === null ? 'error' : (t === undefined ? 'none' : t);\n                        resolve(trust);\n                    });\n                    if (Object.keys(this.own_devices).length) {\n                        counter = Object.keys(this.own_devices).length;\n                        for (let device_id in this.own_devices) {\n                            let device = this.own_devices[device_id];\n                            if (device_id == this.get('device_id')) {\n                                counter--;\n                                !counter && dfd.resolve(is_trusted);\n                                continue;\n                            }\n                            if (device.get('fingerprint')) {\n                                let trusted = this.isTrusted(this.account.get('jid'), device.id, device.get('fingerprint'));\n                                if (trusted === undefined && is_trusted !== null)\n                                    is_trusted = undefined;\n                                if (trusted === null)\n                                    is_trusted = null;\n                                counter--;\n                                !counter && dfd.resolve(is_trusted);\n                            } else if (device.get('ik')) {\n                                device.set('fingerprint', device.generateFingerprint());\n                                let trusted = this.isTrusted(this.account.get('jid'), device.id, device.get('fingerprint'));\n                                if (trusted === undefined && is_trusted !== null)\n                                    is_trusted = undefined;\n                                if (trusted === null)\n                                    is_trusted = null;\n                                counter--;\n                                !counter && dfd.resolve(is_trusted);\n                            } else {\n                                if (device.get('ik') === null) {\n                                    counter--;\n                                    !counter && dfd.resolve(is_trusted);\n                                    continue;\n                                }\n                                device.getBundle().then(({pk, spk, ik}) => {\n                                    device.set('ik', utils.fromBase64toArrayBuffer(ik));\n                                    device.set('fingerprint', device.generateFingerprint());\n                                    let trusted = this.isTrusted(this.account.get('jid'), device.id, device.get('fingerprint'));\n                                    if (trusted === undefined && is_trusted !== null)\n                                        is_trusted = undefined;\n                                    if (trusted === null)\n                                        is_trusted = null;\n                                    counter--;\n                                    !counter && dfd.resolve(is_trusted);\n                                }).catch(() => {\n                                    counter--;\n                                    !counter && dfd.resolve(is_trusted);\n                                });\n                            }\n                        }\n                    }\n                    else {\n                        this.getMyDevices().then(() => {\n                            this.onOwnDevicesUpdated().then(() => {\n                                counter = Object.keys(this.own_devices).length;\n                                for (let device_id in this.own_devices) {\n                                    if (device_id == this.get('device_id')) {\n                                        counter--;\n                                        !counter && dfd.resolve(is_trusted);\n                                        continue;\n                                    }\n                                    let device = this.own_devices[device_id];\n                                    if (device.get('fingerprint')) {\n                                        let trusted = this.isTrusted(this.account.get('jid'), device.id, device.get('fingerprint'));\n                                        if (trusted === undefined && is_trusted !== null)\n                                            is_trusted = undefined;\n                                        if (trusted === null)\n                                            is_trusted = null;\n                                        counter--;\n                                        !counter && dfd.resolve(is_trusted);\n                                    } else {\n                                        counter--;\n                                        !counter && dfd.resolve(is_trusted);\n                                    }\n                                }\n                            });\n                        });\n                    }\n                });\n            },\n\n            checkContactFingerprints: function (contact) {\n                return new Promise((resolve, reject) => {\n                    let is_trusted = true,\n                        peer = this.getPeer(contact.get('jid')),\n                        dfd = new $.Deferred(), counter = 0;\n                    dfd.done((t) => {\n                        let trust = t === null ? 'error' : (t === undefined ? 'none' : t);\n                        contact.trigger('update_trusted', trust);\n                        resolve(trust);\n                    });\n                    if (Object.keys(peer.devices).length) {\n                        counter = Object.keys(peer.devices).length;\n                        for (let device_id in peer.devices) {\n                            let device = peer.devices[device_id];\n                            if (device.get('fingerprint')) {\n                                let trusted = this.isTrusted(contact.get('jid'), device.id, device.get('fingerprint'));\n                                if (trusted === undefined && is_trusted !== null)\n                                    is_trusted = undefined;\n                                if (trusted === null)\n                                    is_trusted = null;\n                                counter--;\n                                !counter && dfd.resolve(is_trusted);\n                            } else if (device.get('ik')) {\n                                device.set('fingerprint', device.generateFingerprint());\n                                let trusted = this.isTrusted(contact.get('jid'), device.id, device.get('fingerprint'));\n                                if (trusted === undefined && is_trusted !== null)\n                                    is_trusted = undefined;\n                                if (trusted === null)\n                                    is_trusted = null;\n                                counter--;\n                                !counter && dfd.resolve(is_trusted);\n                            } else {\n                                if (device.get('ik') === null) {\n                                    counter--;\n                                    if (!counter) {\n                                        if (Object.keys(peer.devices).length === 1)\n                                            is_trusted = 'nil';\n                                        dfd.resolve(is_trusted);\n                                    }\n                                    continue;\n                                }\n                                device.getBundle().then(({pk, spk, ik}) => {\n                                    device.set('ik', utils.fromBase64toArrayBuffer(ik));\n                                    device.set('fingerprint', device.generateFingerprint());\n                                    let trusted = this.isTrusted(contact.get('jid'), device.id, device.get('fingerprint'));\n                                    if (trusted === undefined && is_trusted !== null)\n                                        is_trusted = undefined;\n                                    if (trusted === null)\n                                        is_trusted = null;\n                                    counter--;\n                                    !counter && dfd.resolve(is_trusted);\n                                }).catch(() => {\n                                    counter--;\n                                    if (!counter) {\n                                        if (Object.keys(peer.devices).length === 1)\n                                            is_trusted = 'nil';\n                                        dfd.resolve(is_trusted);\n                                    }\n                                });\n                            }\n                        }\n                    } else {\n                        peer.getDevicesNode().then(() => {\n                            counter = Object.keys(peer.devices).length;\n                            !counter && dfd.resolve('nil');\n                            for (let device_id in peer.devices) {\n                                let device = peer.devices[device_id];\n                                device.getBundle().then(({pk, spk, ik}) => {\n                                    device.set('ik', utils.fromBase64toArrayBuffer(ik));\n                                    device.set('fingerprint', device.generateFingerprint());\n                                    let trusted = this.isTrusted(contact.get('jid'), device.id, device.get('fingerprint'));\n                                    if (trusted === undefined && is_trusted !== null)\n                                        is_trusted = undefined;\n                                    if (trusted === null) {\n                                        if (Object.keys(peer.devices).length === 1)\n                                            is_trusted = 'nil';\n                                        else\n                                            is_trusted = null;\n                                    }\n                                    counter--;\n                                    !counter && dfd.resolve(is_trusted);\n                                }).catch(() => {\n                                    counter--;\n                                    if (!counter) {\n                                        if (Object.keys(peer.devices).length === 1)\n                                            is_trusted = 'nil';\n                                        dfd.resolve(is_trusted);\n                                    }\n                                });\n                            }\n                        });\n\n                    }\n                });\n            },\n\n            getTrusted: async function ($message) {\n                let $msg = $message.find(`encrypted[xmlns=\"${Strophe.NS.OMEMO}\"]`).parent(),\n                    from_jid = Strophe.getBareJidFromJid($msg.attr('from')),\n                    to_jid = Strophe.getBareJidFromJid($msg.attr('to')),\n                    contact = this.account.contacts.mergeContact(from_jid === this.account.get('jid') ? to_jid : from_jid);\n\n                let own_trusted = await this.checkOwnFingerprints(),\n                    contact_trusted = await this.checkContactFingerprints(contact);\n                if (own_trusted === 'error' || (own_trusted === 'none' && contact_trusted !== 'error')) {\n                    return own_trusted;\n                } else if (contact_trusted === 'error' || contact_trusted === 'none') {\n                    return contact_trusted;\n                } else {\n                    let device_id = $message.find('encrypted header').attr('sid'),\n                        peer = this.getPeer(contact.get('jid')),\n                        device = peer.devices[device_id];\n                    if (device) {\n                        if (device.get('fingerprint')) {\n                            let trusted = this.isTrusted(contact.get('jid'), device.id, device.get('fingerprint'));\n                            if (trusted === false) {\n                                return 'untrusted';\n                            }\n                        }\n                    }\n                    return true;\n                }\n            },\n\n            receiveMessage: function (message) {\n                let $message = $(message),\n                    type = $message.attr('type');\n                if (type === 'headline') {\n                    return this.receiveHeadlineMessage(message);\n                }\n            },\n\n            parseEncrypted: function ($encrypted) {\n                let $payload = $encrypted.children(`payload`),\n                    $header = $encrypted.children('header'),\n                    payload = utils.fromBase64toArrayBuffer($payload.text()),\n                    sid = Number($header.attr('sid'));\n\n                let keys = $header.find(`key`).get().map(function(keyElement) {\n                    return {\n                        preKey: $(keyElement).attr('kex') === 'true',\n                        ciphertext: utils.fromBase64toArrayBuffer($(keyElement).text()),\n                        deviceId: parseInt($(keyElement).attr('rid'))\n                    };\n                });\n\n                return {sid, keys, payload};\n            },\n\n            getPeer: function (jid) {\n                if (!this.peers.get(jid))\n                    this.peers.create({jid}, {account:this.account});\n                return this.peers.get(jid);\n            },\n\n            decrypt: async function (message, options) {\n                let $message = $(message),\n                    from_jid = Strophe.getBareJidFromJid($message.attr('from')) || options.from_jid,\n                    $encrypted;\n\n                if ($message.find('result[xmlns=\"'+Strophe.NS.MAM+'\"]').length) {\n                    let $m = $message.find('message').first();\n                    from_jid = Strophe.getBareJidFromJid($m.attr('from'));\n                    $encrypted = $message.children(`result`).children(`forwarded`).children(`message`).children(`encrypted[xmlns=\"${Strophe.NS.OMEMO}\"]`);\n                }\n                else if ($message.find('[xmlns=\"'+Strophe.NS.CARBONS+'\"]').length){\n                    $encrypted = $message.children(`[xmlns=\"${Strophe.NS.CARBONS}\"]`).children(`forwarded`).children(`message`).children(`encrypted[xmlns=\"${Strophe.NS.OMEMO}\"]`);\n                }\n                else\n                    $encrypted = $message.children(`encrypted[xmlns=\"${Strophe.NS.OMEMO}\"]`);\n\n                let encryptedData = this.parseEncrypted($encrypted),\n                    deviceId = this.get('device_id'),\n                    ownPreKeysArr =  encryptedData.keys.filter(preKey => preKey.deviceId == deviceId),\n                    ownPreKey = ownPreKeysArr[0];\n                if (!ownPreKey)\n                    return null;\n                let peer = this.getPeer(from_jid),\n                    exportedKey = await peer.decrypt(encryptedData.sid, ownPreKey.ciphertext, ownPreKey.preKey);\n                if (!exportedKey)\n                    return;\n                let exportedMasterKey = exportedKey.slice(0, 32),\n                    HMACData = exportedKey.slice(32);\n\n                return utils.AES.decrypt(exportedMasterKey, HMACData, encryptedData.payload);\n            },\n\n            toBase64: function (arrayBuffer) {\n                return btoa(String.fromCharCode(...new Uint8Array(arrayBuffer)));\n            },\n\n            publish: function (spk, ik, pks) {\n                if (!this.account.connection)\n                    return;\n                let conn_omemo = this.account.getConnectionForIQ().omemo,\n                    prekeys = [];\n                pks.forEach((pk) => {\n                    let id = pk.keyId,\n                        pubKey = utils.ArrayBuffertoBase64(pk.keyPair.pubKey),\n                        privKey = utils.ArrayBuffertoBase64(pk.keyPair.privKey),\n                        key = JSON.stringify({pubKey, privKey});\n                    if (!pk.signature) {\n                        prekeys.push({id: id, key: pubKey});\n                        this.prekeys.put({id, key});\n                    }\n                });\n                conn_omemo.configNode(() => {\n                    conn_omemo.publishBundle({\n                        spk: {id: spk.keyId, key: utils.ArrayBuffertoBase64(spk.keyPair.pubKey)},\n                        spks: utils.ArrayBuffertoBase64(spk.signature),\n                        ik:  utils.ArrayBuffertoBase64(ik),\n                        pks: prekeys,\n                        device_id: this.get('device_id')\n                    });\n                });\n            },\n\n            removePreKey: async function (id) {\n                if (!this.account)\n                    return;\n                let bundle = this.bundle,\n                    removed_pk = this.bundle.preKeys.find(p => p.keyId === id && !p.signature);\n                if (!removed_pk)\n                    return;\n                let pubKey = utils.ArrayBuffertoBase64(removed_pk.keyPair.pubKey),\n                    privKey = utils.ArrayBuffertoBase64(removed_pk.keyPair.privKey),\n                    key = JSON.stringify({pubKey, privKey}),\n                    idx = this.bundle.preKeys.indexOf(removed_pk);\n                bundle.preKeys.splice(idx, 1);\n                this.own_used_prekeys.put({id, key});\n                this.prekeys.remove(id);\n                if (bundle.preKeys.length && bundle.preKeys.length < constants.MIN_PREKEYS_COUNT) {\n                    let missing_keys = constants.PREKEYS_COUNT - bundle.preKeys.length,\n                        last_id = _.sortBy(xabber.accounts.connected[0].omemo.bundle.preKeys, 'keyId').last().keyId;\n                    for (let i = ++last_id; last_id + missing_keys; i++)\n                        await this.bundle.generatePreKey(i);\n                    this.account.omemo.publishBundle();\n                }\n                else\n                    this.account.omemo.publishBundle();\n            },\n\n            cacheSession: function (attrs) {\n                let id = attrs.id,\n                    session = attrs.rec,\n                    sessions = _.clone(this.get('sessions'));\n                _.isArray(sessions) && (sessions = {});\n                sessions[id] = session;\n                this.save('sessions', sessions);\n            },\n\n            removeSession: function (id) {\n                let sessions = _.clone(this.get('sessions'));\n                _.isArray(sessions) && (sessions = {});\n                delete sessions[id];\n                this.save('sessions', sessions);\n            },\n\n            getSession: function (id) {\n                let sessions = _.clone(this.get('sessions'));\n                return sessions[id];\n            },\n\n            publishBundle: async function () {\n                if (!this.bundle)\n                    return;\n                let spk = this.bundle.preKeys.find(pk => pk.signature),\n                    ik = await this.store.getIdentityKeyPair(),\n                    pks = this.bundle.preKeys;\n                if (!spk || !ik) {\n                    this.set('resend_bundle', true);\n                    return;\n                }\n                this.account.getConnectionForIQ().omemo.getBundleInfo({jid: this.account.get('jid'), id: this.get('device_id')}, () => {\n                        this.publish(spk, ik.pubKey, pks);\n                    }, (err) => {\n                        if (($(err).find('error').attr('code') == 404))\n                            this.account.getConnectionForIQ().omemo.createBundleNode(() => {\n                                this.publish(spk, ik.pubKey, pks);\n                            });\n                    });\n            },\n\n            onOwnDevicesUpdated: async function () {\n                return new Promise((resolve, reject) => {\n                    let conn = this.account.getConnectionForIQ();\n                    if (conn && conn.omemo && conn.omemo.devices) {\n                        for (let d in this.own_devices) {\n                            if (!conn.omemo.devices[d]) {\n                                this.account.omemo.removeSession('session' + this.own_devices[d].address.toString());\n                                delete this.own_devices[d];\n                            }\n                        }\n                        let counter = Object.keys(conn.omemo.devices).length;\n                        for (let device_id in conn.omemo.devices) {\n                            if (!this.own_devices[device_id])\n                                this.own_devices[device_id] = new xabber.Device({\n                                    jid: this.account.get('jid'),\n                                    id: device_id\n                                }, {account: this.account, store: this.store});\n                            let device = this.own_devices[device_id],\n                                label = conn.omemo.devices[device_id].label;\n                            if (!device.get('ik')) {\n                                if (device.get('ik') === null) {\n                                    counter--;\n                                    !counter && resolve();\n                                    continue;\n                                }\n                                device.getBundle().then(({pk, spk, ik}) => {\n                                    device.set('ik', utils.fromBase64toArrayBuffer(ik));\n                                    let fingerprint = device.generateFingerprint();\n                                    if (!device.get('fingerprint') || device.get('fingerprint') !== fingerprint)\n                                        device.set('fingerprint', fingerprint);\n                                    counter--;\n                                    !counter && resolve();\n                                }).catch(() => {\n                                    counter--;\n                                    !counter && resolve();\n                                });\n                            } else if (!device.get('fingerprint')) {\n                                device.set('fingerprint', device.generateFingerprint());\n                                counter--;\n                                !counter && resolve();\n                            } else {\n                                counter--;\n                                !counter && resolve();\n                            }\n                            label && device.set('label', label);\n                        }\n                    }\n                });\n            }\n        });\n\n        xabber.DecryptedMessages = Backbone.ModelWithStorage.extend({\n            defaults: {\n                messages: {}\n            },\n\n            getMessage: function (contact, stanza_id) {\n                let messages = _.clone(this.get('messages')),\n                    contact_messages = messages[contact.get('jid')] || {};\n                return contact_messages[stanza_id];\n            },\n\n            putMessage: function (contact, stanza_id, message) {\n                let messages = _.clone(this.get('messages')),\n                    contact_messages = messages[contact.get('jid')] || {};\n                contact_messages[stanza_id] = message;\n                messages[contact.get('jid')] = contact_messages;\n                this.save('messages', messages);\n            },\n\n            removeMessage: function (attrs, contact) {\n                let origin_id = attrs.origin_id;\n                let messages = _.clone(this.get('messages')),\n                    contact_messages = messages[contact.get('jid')] || {};\n                delete contact_messages[origin_id];\n                messages[contact.get('jid')] = contact_messages;\n                this.save('messages', messages);\n            },\n\n            updateMessage: function (attrs, contact) {\n                let stanza_id = attrs.stanza_id,\n                    origin_id = attrs.origin_id,\n                    messages = _.clone(this.get('messages')),\n                    contact_messages = messages[contact.get('jid')] || {},\n                    message = contact_messages[origin_id];\n                if (origin_id)\n                    this.removeMessage({origin_id}, contact);\n                if (stanza_id)\n                    this.putMessage(contact, stanza_id, message);\n            }\n        });\n\n        xabber.SignalProtocolStore = Backbone.Model.extend({\n            initialize: function () {\n                this.Direction = {\n                    SENDING: 1,\n                    RECEIVING: 2\n                };\n                this.store = {};\n            },\n\n            getIdentityKeyPair: function () {\n                return Promise.resolve(this.get('identityKey'));\n            },\n\n            getLocalRegistrationId: function () {\n                return Promise.resolve(this.get('registrationId'));\n            },\n\n            put: function (key, value) {\n                if (key === undefined || value === undefined || key === null || value === null)\n                    throw new Error(\"Tried to store undefined/null\");\n                this.store[key] = value;\n            },\n\n            get: function (key, defaultValue) {\n                if (key === null || key === undefined)\n                    throw new Error(\"Tried to get value for undefined/null key\");\n                if (key in this.store) {\n                    return this.store[key];\n                } else {\n                    return defaultValue;\n                }\n            },\n\n            remove: function (key) {\n                if (key === null || key === undefined)\n                    throw new Error(\"Tried to remove value for undefined/null key\");\n                delete this.store[key];\n            },\n\n            isTrustedIdentity: function (identifier, identityKey, direction) {\n                if (identifier === null || identifier === undefined) {\n                    throw new Error(\"tried to check identity key for undefined/null key\");\n                }\n                if (!(identityKey instanceof ArrayBuffer)) {\n                    throw new Error(\"Expected identityKey to be an ArrayBuffer\");\n                }\n                let trusted = this.get('identityKey' + identifier);\n                if (trusted === undefined) {\n                    return Promise.resolve(true);\n                }\n                return Promise.resolve(util.toString(identityKey) === util.toString(trusted));\n            },\n\n            loadIdentityKey: function (identifier) {\n                if (identifier === null || identifier === undefined)\n                    throw new Error(\"Tried to get identity key for undefined/null key\");\n                return Promise.resolve(this.get('identityKey' + identifier));\n            },\n\n            saveIdentity: function (identifier, identityKey) {\n                if (identifier === null || identifier === undefined)\n                    throw new Error(\"Tried to put identity key for undefined/null key\");\n\n                let address = new SignalProtocolAddress.fromString(identifier);\n\n                let existing = this.get('identityKey' + address.getName());\n                this.put('identityKey' + address.getName(), identityKey);\n\n                if (existing && libsignal.toString(identityKey) !== libsignal.toString(existing)) {\n                    return Promise.resolve(true);\n                } else {\n                    return Promise.resolve(false);\n                }\n\n            },\n\n            /* Returns a prekeypair object or undefined */\n            loadPreKey: function (keyId) {\n                let res = this.get('25519KeypreKey' + keyId);\n                if (res !== undefined) {\n                    res = {pubKey: res.pubKey, privKey: res.privKey};\n                }\n                return Promise.resolve(res);\n            },\n\n            storePreKey: function (keyId, keyPair) {\n                return Promise.resolve(this.put('25519KeypreKey' + keyId, keyPair));\n            },\n\n            removePreKey: function (keyId) {\n                this.trigger('prekey_removed', keyId);\n                // return Promise.resolve(this.remove('25519KeypreKey' + keyId));\n            },\n\n            /* Returns a signed keypair object or undefined */\n            loadSignedPreKey: function (keyId) {\n                let res = this.get('25519KeysignedKey' + keyId);\n                if (res !== undefined) {\n                    res = {pubKey: res.pubKey, privKey: res.privKey};\n                }\n                return Promise.resolve(res);\n            },\n\n            storeSignedPreKey: function (keyId, keyPair) {\n                return Promise.resolve(this.put('25519KeysignedKey' + keyId, keyPair));\n            },\n\n            removeSignedPreKey: function (keyId) {\n                return Promise.resolve(this.remove('25519KeysignedKey' + keyId));\n            },\n\n            loadSession: function (identifier) {\n                return Promise.resolve(this.get('session' + identifier));\n            },\n\n            hasSession: function (identifier) {\n                return !!this.get('session' + identifier)\n            },\n\n            storeSession: function (identifier, record) {\n                this.trigger('session_stored', {id: 'session' + identifier, rec: record});\n                return Promise.resolve(this.put('session' + identifier, record));\n            },\n\n            removeSession: function (identifier) {\n                return Promise.resolve(this.remove('session' + identifier));\n            },\n\n            getAllSessions: function (identifier) {\n                let sessions = [];\n                for (let id in this.store) {\n                    if (id.startsWith('session' + identifier)) {\n                        sessions.push({id: id, session: this.store[id]});\n                    }\n                }\n                return Promise.resolve(sessions);\n            },\n\n            removeAllSessions: function (identifier) {\n                for (let id in this.store) {\n                    if (id.startsWith('session' + identifier)) {\n                        delete this.store[id];\n                    }\n                }\n                return Promise.resolve();\n            }\n        });\n\n        xabber.OMEMOEnablePlaceholder = xabber.BasicView.extend({\n            className: 'omemo-enable-placeholder',\n\n            events: {\n                'click .btn-enable': 'enableOmemo',\n                'click .btn-escape': 'closeOmemoPlaceholder'\n            },\n\n            _initialize: function (options) {\n                this.account = options.account;\n                this.updateColorScheme();\n                this.$el.html(templates.omemo_enable({jid: this.account.get('jid')}));\n                xabber.placeholders_wrap.$el.append(this.$el);\n                xabber.main_panel.$el.css('padding-bottom', xabber.placeholders_wrap.$el.height());\n                xabber.on(\"update_screen\", this.onUpdatedScreen, this);\n                this.account.session.on(\"change:connected\", this.updateConnected, this);\n                this.account.settings.on(\"change:color\", this.updateColorScheme, this);\n                this.account.settings.on(\"change:omemo\", this.onOmemoChange, this);\n            },\n\n            updateColorScheme: function () {\n                let color = this.account.settings.get('color');\n                this.$el.attr('data-color', color);\n            },\n\n            onUpdatedScreen: function () {\n                if (!this.account.omemo_enable_placeholder || this.account.omemo_enable_placeholder.cid !== this.cid)\n                    return;\n                this.$el.detach();\n                xabber.placeholders_wrap.$el.append(this.$el);\n                xabber.main_panel.$el.css('padding-bottom', xabber.placeholders_wrap.$el.height());\n            },\n\n            updateConnected: function () {\n                if (!this.account.isConnected())\n                    this.close();\n            },\n\n            enableOmemo: function () {\n                this.account.settings.save('omemo', true);\n                this.close();\n                this.account.omemo = new xabber.Omemo({id: 'omemo'}, {\n                    account: this.account,\n                    storage_name: xabber.getStorageName() + '-omemo-settings-' + this.account.get('jid'),\n                    fetch: 'before'\n                });\n                setTimeout(() => {\n                    this.account.omemo.onConnected();\n                }, 2000);\n            },\n\n            closeOmemoPlaceholder: function () {\n                this.account.settings.save('omemo', false);\n                this.close();\n            },\n\n            onOmemoChange: function () {\n                if (this.account.settings.get('omemo'))\n                    this.close();\n            },\n\n            close: function () {\n                this.trigger('remove') && this.remove();\n                this.account.omemo_enable_placeholder = undefined;\n                xabber.main_panel.$el.css('padding-bottom', xabber.placeholders_wrap.$el.height());\n            }\n        });\n\n        xabber.Account.addInitPlugin(function () {\n            if (!this.settings.get('omemo'))\n                return;\n            this.omemo = new xabber.Omemo({id: 'omemo'}, {\n                account: this,\n                storage_name: xabber.getStorageName() + '-omemo-settings-' + this.get('jid'),\n                fetch: 'before'\n            });\n        });\n\n        xabber.Account.addConnPlugin(function () {\n            if (!this.settings.get('omemo'))\n                return;\n            this.omemo.onConnected();\n        }, true, true);\n\n        return xabber;\n    };\n}).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceURL=webpack://xabber.web/./src/omemo.js?")},"./src/searching.js":(module,exports,__webpack_require__)=>{eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    return function (xabber) {\n        let env = xabber.env,\n            constants = env.constants,\n            templates = env.templates.searching,\n            utils = env.utils,\n            $ = env.$,\n            $iq = env.$iq,\n            Strophe = env.Strophe,\n            _ = env._,\n            Images = utils.images;\n\n        xabber.DiscoveringView = xabber.BasicView.extend({\n            className: 'searching-main noselect',\n            template: templates.searching_wide,\n            ps_selector: '.chats-list-wrap',\n            ps_settings: {\n                wheelPropagation: true,\n                theme: 'existing-chats-list'\n            },\n\n            avatar_size: constants.AVATAR_SIZES.SYNCHRONIZE_ACCOUNT_ITEM,\n\n            events: {\n                \"click .account-field .dropdown-content\": \"selectAccount\",\n                \"click .btn-cancel\": \"close\",\n                \"click .btn-search\": \"search\",\n                \"click .existing-chat-wrap\": \"getChatProperties\",\n                \"keyup .search-input\": \"keyUp\"\n            },\n\n            _initialize: function () {\n                this.data.on(\"change:color\", this.colorUpdated, this);\n                this.$('.searching-properties-field .dropdown-button').on('click', () => {\n                    this.toggleProperties();\n                });\n            },\n\n            render: function (options) {\n                this.endDiscovering();\n                this.data.set('color','#9E9E9E');\n                options || (options = {});\n                let accounts = xabber.accounts.connected,\n                    jid = options.jid || '';\n                this.$('.single-acc').showIf(accounts.length === 1);\n                this.$('.multiple-acc').hideIf(accounts.length === 1);\n                this.$('.account-field .dropdown-content').empty();\n                _.each(accounts, (account) => {\n                    this.$('.account-field .dropdown-content').append(\n                        this.renderAccountItem(account));\n                });\n                if (accounts.length)\n                    this.bindAccount(accounts[0]);\n                this.$('#select-searching-properties .account-field .dropdown-button').dropdown({\n                    inDuration: 100,\n                    outDuration: 100,\n                    constrainWidth: false,\n                    hover: false,\n                    alignment: 'left'\n                });\n                return this;\n            },\n\n            toggleProperties: function () {\n                let is_visible = this.isPropertiesVisible();\n                this.$('#select-searching-properties').slideToggle(\"fast\");\n                this.$('.arrow').switchClass('mdi-chevron-up', !is_visible);\n                this.$('.arrow').switchClass('mdi-chevron-down', is_visible);\n            },\n\n            isPropertiesVisible: function () {\n                if (this.$('#select-searching-properties').css('display') === 'none')\n                    return false;\n                else\n                    return true;\n            },\n\n            discover: function () {\n                let domain = _.escape(this.$('.search-input.simple-input-field').val());\n                if (domain) {\n                    if (this.isPropertiesVisible())\n                        this.toggleProperties();\n                    this.$('.searching-more').html(\"\");\n                    let searching_title = this.$('#searching_property_title').val(),\n                        searching_sort_by = this.$('#searching_property_sort_by').val();\n                    this.$('.searching-result-wrap .preloader-wrapper').show();\n                    this.searchExistingGroupChats(domain);\n                }\n            },\n\n            setColor: function () {\n                if (this.account) {\n                    let color = this.account.settings.get('color');\n                    this.data.set('color', color);\n                }\n            },\n\n            colorUpdated: function () {\n                let color = this.data.get('color');\n                this.$el.attr('data-color', color);\n            },\n\n            keyUp: function (ev) {\n                if (this.$('.search-input').val() === \"\")\n                    this.$('.btn-search').addClass('none-active');\n                else\n                    this.$('.btn-search').removeClass('none-active');\n                if (ev.keyCode === constants.KEY_ENTER)\n                    this.discover();\n            },\n\n            searchExistingGroupChats: function (domain) {\n                this.account.connection.disco.items((domain), null, this.getGroupchatService.bind(this), this.onDiscoveringError.bind(this));\n            },\n\n            onDiscoveringError: function (error) {\n                this.endDiscovering();\n                this.$('.chats-list').html(\"\");\n                this.$('.result-string').text(xabber.getString(\"discover__no_matches\", [$(error).attr('from')]));\n            },\n\n            endDiscovering: function () {\n                this.$('.searching-result-wrap .preloader-wrapper').hide();\n            },\n\n            getGroupchatService: function (stanza) {\n                $(stanza).find('query item').each((idx, item) => {\n                    if ($(item).attr('node') === Strophe.NS.GROUP_CHAT) {\n                        let jid = $(item).attr('jid');\n                        this.getGroupchatFeatures(jid);\n                    }\n                });\n                this.endDiscovering();\n            },\n\n            getGroupchatFeatures: function (jid) {\n                let iq = $iq({type: 'get', to: jid})\n                    .c('query', {xmlns: Strophe.NS.DISCO_INFO, node: Strophe.NS.GROUP_CHAT});\n                this.account.sendIQFast(iq, this.getServerInfo.bind(this), this.onDiscoveringError.bind(this));\n            },\n\n            getServerInfo: function (stanza) {\n                $(stanza).find('query identity').each((idx, item) => {\n                    let $item = $(item);\n                    if (($item.attr('category') === 'conference') && ($item.attr('type') === 'server')) {\n                        let jid = $(stanza).attr('from');\n                        this.getChatsFromSever(jid);\n                    }\n                });\n            },\n\n            getChatsFromSever: function (jid) {\n                let iq = $iq({type: 'get', to: jid}).c('query', {xmlns: Strophe.NS.DISCO_ITEMS, node: Strophe.NS.GROUP_CHAT});\n                this.account.sendIQFast(iq, (stanza) => {\n                    this.$('.chats-list').html(\"\");\n                    $(stanza).find('query item').each((idx, item) => {\n                        let $item = $(item),\n                            name = $item.attr('name'),\n                            jid = $item.attr('jid'),\n                            $chat_item_html = $(templates.existing_groupchat_item({name: name, jid: jid, color: this.account.settings.get('color')})),\n                            avatar = Images.getDefaultAvatar(name);\n                        $chat_item_html.find('.circle-avatar').setAvatar(avatar, 32);\n                        $chat_item_html.appendTo(this.$('.searching-result-wrap .chats-list'));\n                    });\n                    this.$('.result-string').text(xabber.getString(\"discover__text_discovered_groups\", [$(stanza).find('query item').length, this.account.get('jid')]));\n                });\n            },\n\n            bindAccount: function (account) {\n                this.account = account;\n                this.$('.account-field .dropdown-button .account-item-wrap')\n                    .replaceWith(this.renderAccountItem(account));\n                this.setColor();\n            },\n\n            renderAccountItem: function (account) {\n                let $item = $(templates.searching_account_item({jid: account.get('jid')}));\n                return $item;\n            },\n\n            selectAccount: function (ev) {\n                let $item = $(ev.target).closest('.account-item-wrap'),\n                    account = xabber.accounts.get($item.data('jid'));\n                this.bindAccount(account);\n            },\n\n            getChatProperties: function (ev) {\n                let $target = $(ev.target).closest('.existing-chat-wrap'),\n                    jid = $target.data('jid'),\n                    name = $target.data('name'),\n                    request_iq = $iq({type: 'get', to: jid})\n                        .c('query', {xmlns: Strophe.NS.DISCO_INFO});\n                this.account.sendIQFast(request_iq, (iq_response) => {\n                    let $iq_response = $(iq_response),\n                        description = $iq_response.find('field[var=\"description\"] value').text(),\n                        privacy = $iq_response.find('field[var=\"anonymous\"] value').text(),\n                        membership = $iq_response.find('field[var=\"model\"] value').text(),\n                        chat_properties = {jid: jid, name: name, privacy: privacy, description: description, membership: membership};\n                    this.more_info_view = this.addChild('groupchat_properties', xabber.MoreInfoView,\n                        {model: this, chat_properties: chat_properties, el: this.$('.searching-more')[0]})\n                });\n            }\n        });\n\n        xabber.MoreInfoView = xabber.BasicView.extend({\n            className: 'searching-main noselect',\n            template: templates.existing_groupchat_details_view,\n\n            events: {\n                \"click .btn-join-chat\": \"joinChat\"\n            },\n\n            _initialize: function (options) {\n                this.account = this.model.account;\n                this.chat_properties = options.chat_properties;\n                this.$el.html(this.template(this.chat_properties));\n            },\n\n            render: function (options) {\n\n            },\n\n            joinChat: function () {\n                let contact = this.account.contacts.mergeContact(this.chat_properties.jid);\n                contact.set('group_chat', true);\n                contact.acceptRequest();\n                contact.pushInRoster(null, () => {\n                    contact.askRequest();\n                    contact.getMyInfo();\n                    contact.sendPresent();\n                });\n                contact.trigger(\"open_chat\", contact);\n            }\n        });\n\n        xabber.Searching = Backbone.Model.extend({\n\n            initialize: function (options) {\n                this.account = options.account;\n            },\n\n            getSearchingFields: function () {\n                let this_domain = 'xabber.com',//this.account.connection && this.account.connection.domain,\n                    iq_get = $iq({type: 'get', to: 'index.' + this_domain}).c('query', {xmlns: Strophe.NS.INDEX + '#groupchat'});\n                this.account.sendIQFast(iq_get, this.parseSearchingFields);\n            },\n\n            parseSearchingFields: function (iq_result) {\n                let $result = $(iq_result),\n                    $fields = $result.find(`x[xmlns = \"${Strophe.NS.XDATA}\"] field`),\n                    supported_fields = [];\n                $fields.each((idx, field) => {\n                    let $field = $(field);\n                    if ($field.attr('type') !== 'hidden')\n                        supported_fields.push({var: $field.attr('var'), label: $field.attr('label')});\n                });\n            },\n        });\n\n        xabber.LocalSearchingView = xabber.BasicView.extend({\n            className: '',\n            // template:,\n\n            events: {\n\n            },\n\n            _initialize: function (options) {\n                this.account = options.account;\n            },\n\n            render: function () {\n\n            },\n\n            search: function (query) {\n            }\n        });\n\n        xabber.GlobalSearchingView = xabber.BasicView.extend({\n            className: '',\n            // template:,\n\n            events: {\n\n            },\n\n            _initialize: function (options) {\n                this.account = options.account;\n                this.indexed_chats = [];\n            },\n\n            render: function () {\n\n            },\n\n            search: function (query) {\n                this.indexed_chats = [];\n                let iq_search = $iq({to:'index.xabber.com', type: 'set'})\n                    .c('query', {xmlns: Strophe.NS.INDEX + '#groupchat'})\n                    .c('x', {xmlns: Strophe.NS.XDATA, type: 'form'})\n                    .c('field', {var: 'FORM_TYPE', type:'hidden'})\n                    .c('value').t(Strophe.NS.INDEX + '#groupchat').up().up();\n                if (query.description)\n                    iq_search.c('field', {var: 'description'})\n                        .c('value').t(query.description).up().up();\n                if (query.name)\n                    iq_search.c('field', {var: 'name'})\n                        .c('value').t(query.name).up().up();\n                if (query.model)\n                    iq_search.c('field', {var: 'model'})\n                        .c('value').t(query.model).up().up();\n                if (query.anywhere)\n                    iq_search.c('field', {var: 'anywhere'})\n                        .c('value').t(query.anywhere).up().up();\n                this.account.sendIQFast(iq_search, this.onSearched.bind(this));\n            },\n\n            onSearched: function (result) {\n                let $result = $(result),\n                    $chats = $($result.find('query item groupchat'));\n                $chats.each((idx, chat) => {\n                    let $chat = $(chat),\n                        chat_jid = $chat.attr('jid'),\n                        attrs = {jid: chat_jid},\n                        $properties = $chat.children();\n                    $properties.each((idx, property) => {\n                        let $property = $(property),\n                            property_name = $property[0].tagName.replace(/-/g, '_'),\n                            property_value = $property.text();\n                        _.extend(attrs, {[property_name]: property_value});\n                    });\n                    this.indexed_chats.push(attrs);\n                });\n            }\n        });\n\n        xabber.once(\"start\", function () {\n            this.discovering = this.wide_panel.addChild('discovering_main',\n                this.DiscoveringView);\n            /*this.local_searching = new xabber.LocalSearching;\n            this.global_searching = new xabber.GlobalSearching;*/\n        }, xabber);\n\n        return xabber;\n    };\n}).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceURL=webpack://xabber.web/./src/searching.js?")},"./src/strophe.js":(module,exports,__webpack_require__)=>{eval("/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ \"./node_modules/console-browserify/index.js\");\n/* provided dependency */ var _ = __webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore.js\");\n/* provided dependency */ var $ = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\");\nvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    return function (xabber) {\n        let env = xabber.env,\n            uuid = env.uuid,\n            $iq = env.$iq,\n            utils = env.utils,\n            Strophe = env.Strophe,\n            constants = env.constants;\n\n        Strophe.log = function (log_level, msg) {\n            let do_log = (constants.LOG_LEVEL === constants.LOG_LEVEL_DEBUG) ||\n                (constants.LOG_LEVEL >= constants.LOG_LEVEL_WARN &&\n                    log_level >= Strophe.LogLevel.WARN) ||\n                (constants.LOG_LEVEL >= constants.LOG_LEVEL_ERROR &&\n                    log_level >= Strophe.LogLevel.ERROR);\n            if (do_log) {\n                console.info('Strophe log: ');\n                console.info(msg);\n            }\n            if (msg && msg.includes('policy-violation') && log_level === Strophe.LogLevel.ERROR)\n                utils.dialogs.error(msg);\n        };\n\n        Strophe.addConnectionPlugin('register', {\n            _connection: null,\n\n            //The plugin must have the init function.\n            init: function(conn) {\n                this._connection = conn;\n\n                // compute free emun index number\n                let i = 0;\n                Object.keys(Strophe.Status).forEach(function (key) {\n                    i = Math.max(i, Strophe.Status[key]);\n                });\n\n                /* extend name space\n                 *  NS.REGISTER - In-Band Registration\n                 *              from XEP 77.\n                 */\n                Strophe.addNamespace('REGISTER', 'jabber:iq:register');\n                Strophe.Status.REGIFAIL        = i + 1;\n                Strophe.Status.REGISTER        = i + 2;\n                Strophe.Status.REGISTERED      = i + 3;\n                Strophe.Status.CONFLICT        = i + 4;\n                Strophe.Status.NOTACCEPTABLE   = i + 5;\n\n                if (conn.disco) {\n                    if(conn.disco.addFeature)\n                        conn.disco.addFeature(Strophe.NS.REGISTER);\n                    if(conn.disco.addNode)\n                        conn.disco.addNode(Strophe.NS.REGISTER, {items:[]});\n                }\n\n                // hooking strophe's connection.reset\n                var self = this, reset = conn.reset.bind(conn);\n                conn.reset = function () {\n                    reset();\n                    self.instructions = \"\";\n                    self.fields = {};\n                    self.registered = false;\n                };\n\n                // hooking strophe's _connect_cb\n                var connect_cb = conn._connect_cb.bind(conn);\n                conn._connect_cb = function (req, callback, raw) {\n                    if (!self._registering) {\n                        if (self.processed_features) {\n                            // exchange Input hooks to not print the stream:features twice\n                            var xmlInput = conn.xmlInput;\n                            conn.xmlInput = Strophe.Connection.prototype.xmlInput;\n                            var rawInput = conn.rawInput;\n                            conn.rawInput = Strophe.Connection.prototype.rawInput;\n                            connect_cb(req, callback, raw);\n                            conn.xmlInput = xmlInput;\n                            conn.rawInput = rawInput;\n                            delete self.processed_features;\n                        } else {\n                            connect_cb(req, callback, raw);\n                        }\n                    } else {\n                        if(!self._check_user) {\n                            // Save this request in case we want to authenticate later\n                            self._connect_cb_data = {\n                                req: req,\n                                raw: raw\n                            };\n                            if (self._register_cb(req, callback, raw)) {\n                                // remember that we already processed stream:features\n                                self.processed_features = true;\n                                delete self._registering;\n                            }\n                        }\n                        else {\n                            if (self._register_cb_check_user(req, callback, raw)) {\n                                // remember that we already processed stream:features\n                                self.processed_features = true;\n                                delete self._registering;\n                            }\n\n                        }\n                    }\n                };\n\n                // hooking strophe`s authenticate\n                var auth_old = conn.authenticate.bind(conn);\n                conn.authenticate = function(matched) {\n                    if (typeof matched === \"undefined\") {\n                        var conn = this._connection;\n\n                        if (!this.fields.username || !this.domain || !this.fields.password) {\n                            Strophe.info(\"Register a JID first!\");\n                            return;\n                        }\n\n                        var jid = this.fields.username + \"@\" + this.domain;\n\n                        conn.jid = jid;\n                        conn.authzid = Strophe.getBareJidFromJid(conn.jid);\n                        conn.authcid = Strophe.getNodeFromJid(conn.jid);\n                        conn.pass = this.fields.password;\n\n                        var req = this._connect_cb_data.req;\n                        var callback = conn.connect_callback;\n                        var raw = this._connect_cb_data.raw;\n                        conn._connect_cb(req, callback, raw);\n                    } else {\n                        auth_old(matched);\n                    }\n                }.bind(this);\n\n            },\n\n            /** Function: connect\n             *  Starts the registration process.\n             *\n             *  As the registration process proceeds, the user supplied callback will\n             *  be triggered multiple times with status updates.  The callback\n             *  should take two arguments - the status code and the error condition.\n             *\n             *  The status code will be one of the values in the Strophe.Status\n             *  constants.  The error condition will be one of the conditions\n             *  defined in RFC 3920 or the condition 'strophe-parsererror'.\n             *\n             *  Please see XEP 77 for a more detailed explanation of the optional\n             *  parameters below.\n             *\n             *  Parameters:\n             *    (String) domain - The xmpp server's Domain.  This will be the server,\n             *      which will be contacted to register a new JID.\n             *      The server has to provide and allow In-Band Registration (XEP-0077).\n             *    (Function) callback The connect callback function.\n             *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n             *      time the server will wait before returning an empty result for\n             *      a request.  The default setting of 60 seconds is recommended.\n             *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n             *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n             *      number of connections the server will hold at one time.  This\n             *      should almost always be set to 1 (the default).\n             */\n            connect: function(domain, callback, wait, hold, route) {\n                var conn = this._connection;\n                this.domain = Strophe.getDomainFromJid(domain);\n                this.instructions = \"\";\n                this.fields = {};\n                this.registered = false;\n\n                this._registering = true;\n\n                conn.connect(this.domain, \"\", callback, wait, hold, route);\n            },\n\n\n            connect_check_user: function(domain, callback, wait, hold, route) {\n                var conn = this._connection;\n                this.domain = Strophe.getDomainFromJid(domain);\n                this.instructions = \"\";\n                this.fields = {};\n                this.registered = false;\n\n                this._registering = true;\n                this._check_user = true;\n\n                conn.connect(this.domain, \"\", callback, wait, hold, route);\n            },\n\n            connect_change_password: function(jid, password, callback, wait, hold, route) {\n                var conn = this._connection;\n                this.domain = Strophe.getDomainFromJid(jid);\n                this.instructions = \"\";\n                this.fields = {};\n                conn.registerSASLMechanisms([Strophe.SASLAnonymous,\n                    Strophe.SASLExternal,\n                    Strophe.SASLMD5,\n                    Strophe.SASLPlain,\n                    Strophe.SASLSHA1]);\n\n                conn.connect(jid, password, callback, wait, hold, route);\n            },\n\n            /** PrivateFunction: _register_cb\n             *  _Private_ handler for initial registration request.\n             *\n             *  This handler is used to process the initial registration request\n             *  response from the BOSH server. It is used to set up a bosh session\n             *  and requesting registration fields from host.\n             *\n             *  Parameters:\n             *    (Strophe.Request) req - The current request.\n             */\n            _register_cb: function (req, _callback, raw) {\n                var conn = this._connection;\n\n                Strophe.info(\"_register_cb was called\");\n                conn.connected = true;\n\n                var bodyWrap = conn._proto._reqToData(req);\n                if (!bodyWrap) { return; }\n\n                if (conn.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                    if (bodyWrap.nodeName === conn._proto.strip && bodyWrap.childNodes.length) {\n                        conn.xmlInput(bodyWrap.childNodes[0]);\n                    } else {\n                        conn.xmlInput(bodyWrap);\n                    }\n                }\n                if (conn.rawInput !== Strophe.Connection.prototype.rawInput) {\n                    if (raw) {\n                        conn.rawInput(raw);\n                    } else {\n                        conn.rawInput(Strophe.serialize(bodyWrap));\n                    }\n                }\n\n                var conncheck = conn._proto._connect_cb(bodyWrap);\n                if (conncheck === Strophe.Status.CONNFAIL) {\n                    return false;\n                }\n\n                // Check for the stream:features tag\n                var register = bodyWrap.getElementsByTagName(\"register\");\n                var mechanisms = bodyWrap.getElementsByTagName(\"mechanism\");\n                if (register.length === 0 && mechanisms.length === 0) {\n                    conn._proto._no_auth_received(_callback);\n                    return false;\n                }\n\n                if (register.length === 0) {\n                    conn._changeConnectStatus(Strophe.Status.REGIFAIL, null);\n                    return true;\n                }\n\n                // send a get request for registration, to get all required data fields\n                conn._addSysHandler(this._get_register_cb.bind(this),\n                    null, \"iq\", null, null);\n                conn.send($iq({type: \"get\", id: uuid(), to: this.domain }).c(\"query\",\n                    {xmlns: Strophe.NS.REGISTER}).tree());\n\n                return true;\n            },\n            _register_cb_check_user: function (req, _callback, raw) {\n                var conn = this._connection;\n\n                Strophe.info(\"_register_cb was called\");\n                conn.connected = true;\n\n                var bodyWrap = conn._proto._reqToData(req);\n                if (!bodyWrap) { return; }\n\n                if (conn.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                    if (bodyWrap.nodeName === conn._proto.strip && bodyWrap.childNodes.length) {\n                        conn.xmlInput(bodyWrap.childNodes[0]);\n                    } else {\n                        conn.xmlInput(bodyWrap);\n                    }\n                }\n                if (conn.rawInput !== Strophe.Connection.prototype.rawInput) {\n                    if (raw) {\n                        conn.rawInput(raw);\n                    } else {\n                        conn.rawInput(Strophe.serialize(bodyWrap));\n                    }\n                }\n\n                var conncheck = conn._proto._connect_cb(bodyWrap);\n                if (conncheck === Strophe.Status.CONNFAIL) {\n                    return false;\n                }\n\n                // Check for the stream:features tag\n                var register = bodyWrap.getElementsByTagName(\"register\");\n                var mechanisms = bodyWrap.getElementsByTagName(\"mechanism\");\n                if (register.length === 0 && mechanisms.length === 0) {\n                    conn._proto._no_auth_received(_callback);\n                    return false;\n                }\n\n                if (register.length === 0) {\n                    conn._changeConnectStatus(Strophe.Status.REGIFAIL, null);\n                    return true;\n                }\n                conn._changeConnectStatus(Strophe.Status.REGISTER, null);\n\n                return true;\n            },\n\n            /** PrivateFunction: _get_register_cb\n             *  _Private_ handler for Registration Fields Request.\n             *\n             *  Parameters:\n             *    (XMLElement) elem - The query stanza.\n             *\n             *  Returns:\n             *    false to remove SHOULD contain the registration information currentlSHOULD contain the registration information currentlSHOULD contain the registration information currentlthe handler.\n             */\n            _get_register_cb: function (stanza) {\n                var i, query, field, conn = this._connection;\n                query = stanza.getElementsByTagName(\"query\");\n\n                if (query.length !== 1) {\n                    conn._changeConnectStatus(Strophe.Status.REGIFAIL, \"unknown\");\n                    return false;\n                }\n                query = query[0];\n                // get required fields\n                for (i = 0; i < query.childNodes.length; i++) {\n                    field = query.childNodes[i];\n                    if (field.tagName.toLowerCase() === 'instructions') {\n                        // this is a special element\n                        // it provides info about given data fields in a textual way.\n                        conn.register.instructions = Strophe.getText(field);\n                        continue;\n                    } else if (field.tagName.toLowerCase() === 'x') {\n                        // ignore x for now\n                        continue;\n                    }\n                    conn.register.fields[field.tagName.toLowerCase()] = Strophe.getText(field);\n                }\n                conn._changeConnectStatus(Strophe.Status.REGISTER, null);\n                return false;\n            },\n\n            /** Function: submit\n             *  Submits Registration data.\n             *\n             *  As the registration process proceeds, the user supplied callback will\n             *  be triggered with status code Strophe.Status.REGISTER. At this point\n             *  the user should fill all required fields in connection.register.fields\n             *  and invoke this function to procceed in the registration process.\n             */\n            submit: function () {\n                var lang = xabber.settings.language;\n                (lang === 'default') && (lang = xabber.get('default_language'));\n                var i, name, query, fields, conn = this._connection;\n                query = $iq({type: \"set\", 'xml:lang': lang, id: uuid()}).c(\"query\", {xmlns:Strophe.NS.REGISTER});\n\n                // set required fields\n                fields = Object.keys(this.fields);\n                for (i = 0; i < fields.length; i++) {\n                    name = fields[i];\n                    query.c(name).t(this.fields[name]).up();\n                }\n\n                // providing required information\n                conn._addSysHandler(this._submit_cb.bind(this),\n                    null, \"iq\", null, null);\n                conn.send(query);\n            },\n\n            /** PrivateFunction: _submit_cb\n             *  _Private_ handler for submitted registration information.\n             *\n             *  Parameters:\n             *    (XMLElement) elem - The query stanza.\n             *\n             *  Returns:\n             *    false to remove the handler.\n             */\n            _submit_cb: function (stanza) {\n                var i, query, field, error = null, conn = this._connection;\n\n                query = stanza.getElementsByTagName(\"query\");\n                if (query.length > 0) {\n                    query = query[0];\n                    // update fields\n                    for (i = 0; i < query.childNodes.length; i++) {\n                        field = query.childNodes[i];\n                        if (field.tagName.toLowerCase() === 'instructions') {\n                            // this is a special element\n                            // it provides info about given data fields in a textual way\n                            this.instructions = Strophe.getText(field);\n                            continue;\n                        }\n                        this.fields[field.tagName.toLowerCase()] = Strophe.getText(field);\n                    }\n                }\n\n                if (stanza.getAttribute(\"type\") === \"error\") {\n                    error = stanza.getElementsByTagName(\"error\");\n                    let error_text = stanza.getElementsByTagName(\"text\");\n                    if (error_text.length > 0)\n                        error_text = error_text[0].innerHTML;\n                    if (error.length !== 1) {\n                        conn._changeConnectStatus(Strophe.Status.REGIFAIL, \"unknown\");\n                        return false;\n                    }\n\n                    Strophe.info(\"Registration failed.\");\n\n                    // this is either 'conflict' or 'not-acceptable'\n                    error = error[0].firstChild.tagName.toLowerCase();\n                    if (error === 'conflict') {\n                        conn._changeConnectStatus(Strophe.Status.CONFLICT, error, error_text);\n                    } else if (error === 'not-acceptable') {\n                        conn._changeConnectStatus(Strophe.Status.NOTACCEPTABLE, error, error_text);\n                    } else {\n                        conn._changeConnectStatus(Strophe.Status.REGIFAIL, error, error_text);\n                    }\n                } else {\n                    Strophe.info(\"Registration successful.\");\n\n                    conn._changeConnectStatus(Strophe.Status.REGISTERED, null);\n                }\n\n                return false;\n            }\n        });\n\n\n        let utf16to8 = function (str) {\n            let i, c;\n            let out = \"\";\n            let len = str.length;\n            for (i = 0; i < len; i++) {\n                c = str.charCodeAt(i);\n                if ((c >= 0x0000) && (c <= 0x007F)) {\n                    out += str.charAt(i);\n                } else if (c > 0x07FF) {\n                    out += String.fromCharCode(0xE0 | ((c >> 12) & 0x0F));\n                    out += String.fromCharCode(0x80 | ((c >>  6) & 0x3F));\n                    out += String.fromCharCode(0x80 | ((c >>  0) & 0x3F));\n                } else {\n                    out += String.fromCharCode(0xC0 | ((c >>  6) & 0x1F));\n                    out += String.fromCharCode(0x80 | ((c >>  0) & 0x3F));\n                }\n            }\n            return out;\n        };\n\n        Strophe.SASLHOTP = function() {};\n        Strophe.SASLHOTP.prototype = new Strophe.SASLMechanism(\"HOTP\", true, 100);\n\n        Strophe.SASLHOTP.prototype.test = function (connection) {\n            return true;\n        };\n\n        Strophe.SASLHOTP.prototype.onChallenge = function (connection) {\n            let auth_str = String.fromCharCode(0) + connection.authcid +\n                String.fromCharCode(0) + connection.hotp_pass;\n            return utf16to8(auth_str);\n        };\n\n        Strophe.ConnectionManager = function (CONNECTION_URL, options) {\n            options = options || {};\n            this.connection = new Strophe.Connection(CONNECTION_URL, options);\n        };\n\n        Strophe.ConnectionManager.prototype = {\n            connect: function (auth_type, jid, password, callback) {\n                this.connection.mechanisms = {};\n                this.auth_type = auth_type || 'password';\n                if (this.auth_type === 'password') {\n                    this.connection.registerSASLMechanisms([Strophe.SASLAnonymous,\n                        Strophe.SASLExternal,\n                        Strophe.SASLMD5,\n                        Strophe.SASLPlain,\n                        Strophe.SASLSHA1]);\n                } else if (this.auth_type === 'x-token') {\n                    this.connection.registerSASLMechanism(Strophe.SASLHOTP);\n                    delete this.connection._sasl_data[\"server-signature\"];\n                    utils.generateHOTP(utils.fromBase64toArrayBuffer(password), this.connection.counter).then((pass) => {\n                        this.connection.hotp_pass = pass;\n                    }).then(() => {\n                        this.connection.connect(jid, password, callback)\n                    });\n                    return;\n                } else {\n                    this.connection.registerSASLMechanisms([Strophe.SASLXOAuth2]);\n                    delete this.connection._sasl_data[\"server-signature\"];\n                }\n                this.connection.connect(jid, password, callback);\n            },\n\n            reconnect: function (callback) {\n                if (this.auth_type === 'x-token') {\n                    if (!this.connection.mechanisms[\"HOTP\"]) {\n                        this.connection.registerSASLMechanism(Strophe.SASLHOTP);\n                        delete this.connection._sasl_data[\"server-signature\"];\n                    }\n                    if (this.connection.account && this.connection.account.get('hotp_counter'))\n                        this.connection.counter = this.connection.account.get('hotp_counter');\n                    utils.generateHOTP(utils.fromBase64toArrayBuffer(this.connection.pass), this.connection.counter).then((pass) => {\n                        this.connection.hotp_pass = pass;\n                    }).then(() => {\n                        this.connection.connect(this.connection.jid, this.connection.pass, callback)\n                    });\n                    return;\n                }\n                this.connection.connect(this.connection.jid, this.connection.pass, callback);\n            }\n        };\n\n        _.extend(Strophe.Connection.prototype, {\n\n            _attemptSASLAuth: function (mechanisms) {\n                mechanisms = this.sortMechanismsByPriority(mechanisms || []);\n                var i = 0, mechanism_found = false;\n                for (i = 0; i < mechanisms.length; ++i) {\n                    if (!mechanisms[i].prototype.test(this)) {\n                        continue;\n                    }\n                    this._sasl_success_handler = this._addSysHandler(\n                        this._sasl_success_cb.bind(this), null,\n                        \"success\", null, null);\n                    this._sasl_failure_handler = this._addSysHandler(\n                        this._sasl_failure_cb.bind(this), null,\n                        \"failure\", null, null);\n                    this._sasl_challenge_handler = this._addSysHandler(\n                        this._sasl_challenge_cb.bind(this), null,\n                        \"challenge\", null, null);\n\n                    this._sasl_mechanism = new mechanisms[i]();\n                    this._sasl_mechanism.onStart(this);\n\n                    var request_auth_exchange = $build(\"auth\", {\n                        xmlns: Strophe.NS.SASL,\n                        mechanism: this._sasl_mechanism.name\n                    });\n                    if (this._sasl_mechanism.isClientFirst) {\n                        var response = this._sasl_mechanism.onChallenge(this, null);\n                        request_auth_exchange.t(btoa(response));\n                    }\n                    this.send(request_auth_exchange.tree());\n                    mechanism_found = true;\n                    if (this.account && this.counter && this.account.get('x_token') && this._sasl_mechanism.name === \"HOTP\") {\n                        this.counter++;\n                        this.account.save({\n                            hotp_counter: this.counter,\n                        });\n                    }\n                    break;\n                }\n                return mechanism_found;\n            },\n\n            _sasl_auth1_cb: function (elem) {\n                this.features = elem;\n                let i, child;\n                for (i = 0; i < elem.childNodes.length; i++) {\n                    child = elem.childNodes[i];\n                    if (child.nodeName === 'bind') {\n                        this.do_bind = true;\n                    }\n\n                    if (child.nodeName === 'session') {\n                        this.do_session = true;\n                    }\n\n                    if ((child.nodeName === 'devices') && child.namespaceURI === Strophe.NS.AUTH_DEVICES && this.options['x-token']) {\n                        this.x_token_auth = true;\n                    }\n\n                    if ((child.nodeName === 'synchronization') && (child.namespaceURI === Strophe.NS.SYNCHRONIZATION)) {\n                        this.account.server_features.create({\n                            'var': child.namespaceURI,\n                            from: this.domain\n                        });\n                        this.do_synchronization = true;\n                    }\n\n                    if ((child.nodeName === 'sub') && (child.namespaceURI === Strophe.NS.SUBSCRIPTION_PREAPPROVAL)) {\n                        this.account.server_features.create({\n                            'var': child.namespaceURI,\n                            from: this.domain\n                        });\n                    }\n                }\n\n                if (!this.do_bind) {\n                    this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n                    return false;\n                } else {\n                    if (this.x_token_auth && (!this.x_token || (parseInt(this.x_token.expire)*1000 < env.moment.now()))) {\n                        this.getXToken((success) => {\n                            let token = $(success).find('secret').text(),\n                                expires_at = $(success).find('expire').text(),\n                                token_uid = $(success).find('device').attr('id');\n                            this.x_token = {token: token, expire: expires_at, token_uid: token_uid,};\n                            this.counter = 1;\n                            this.pass = token;\n                            this._send_auth_bind();\n                            if (this.account) {\n                                this.account.save({\n                                    hotp_counter: this.counter,\n                                    password: null,\n                                });\n                            }\n                        }, () => {\n                            this._send_auth_bind();\n                        });\n                    }\n                    else {\n                        this._send_auth_bind();\n                    }\n                }\n                return false;\n            },\n\n            _send_auth_bind() {\n                this._addSysHandler(this._sasl_bind_cb.bind(this), null, null,\n                    null, \"_bind_auth_2\");\n\n                let resource = Strophe.getResourceFromJid(this.jid);\n                if (resource) {\n                    this.send($iq({type: \"set\", id: \"_bind_auth_2\"})\n                        .c('bind', {xmlns: Strophe.NS.BIND})\n                        .c('resource', {}).t(resource).tree());\n                } else {\n                    this.send($iq({type: \"set\", id: \"_bind_auth_2\"})\n                        .c('bind', {xmlns: Strophe.NS.BIND})\n                        .tree());\n                }\n            },\n\n            getXToken: function (callback, errback) {\n                let uniq_id = uuid(), old_token,\n                    iq = $iq({\n                    type: 'set',\n                    to: this.domain,\n                    id: uniq_id\n                }).c('register', { xmlns: Strophe.NS.AUTH_DEVICES});\n                this.account && (old_token = this.account.get('old_device_token'));\n                if (old_token && old_token.token && old_token.token_uid){\n                    iq.c('device', { xmlns: Strophe.NS.AUTH_DEVICES, id: old_token.token_uid})\n                        .c('client').t(xabber.get('client_name')).up()\n                        .c('secret').t(old_token.token).up()\n                        .c('info').t(`PC, ${utils.getOS()}, ${env.utils.getBrowser()}`);\n                    this.account.save('old_device_token', null);\n                } else {\n                    iq.c('device', { xmlns: Strophe.NS.AUTH_DEVICES})\n                        .c('client').t(xabber.get('client_name')).up()\n                        .c('info').t(`PC, ${utils.getOS()}, ${env.utils.getBrowser()}`);\n                }\n                handler = function (stanza) {\n                    let iqtype = stanza.getAttribute('type');\n                    if (iqtype == 'result') {\n                        if (callback) {\n                            callback(stanza);\n                        }\n                    } else if (iqtype == 'error') {\n                        if (errback) {\n                            errback(stanza);\n                        }\n                    } else {\n                        throw {\n                            name: \"StropheError\",\n                            message: \"Got bad IQ type of \" + iqtype\n                        };\n                    }\n                };\n\n                this._addSysHandler(handler.bind(this), Strophe.NS.AUTH_DEVICES, 'iq', 'result' , uniq_id);\n\n                this.send(iq.tree());\n            }\n        });\n\n        _.extend(Strophe.Websocket.prototype, {\n\n            _onIdle: function () {\n                var data = this._conn._data;\n                if (data.length > 0 && !this._conn.paused) {\n                    for (var i = 0; i < data.length; i++) {\n                        if (data[i] !== null) {\n                            var stanza, rawStanza;\n                            if (data[i] === \"restart\") {\n                                stanza = this._buildStream().tree();\n                            } else {\n                                stanza = data[i];\n                            }\n                            rawStanza = Strophe.serialize(stanza);\n                            this._conn.xmlOutput(stanza);\n                            this._conn.rawOutput(rawStanza);\n                            if (this.socket && this.socket.readyState === 1){\n                                this.socket.send(rawStanza);\n                            } else {\n                                console.log('data went to pending');\n                                console.log(this._conn._data.slice(i));\n                                this._conn.account._pending_stanzas.push(this._conn._data.slice(i))\n                                this._conn._data = [];\n                                return;\n                            }\n                        }\n                    }\n                    this._conn._data = [];\n                }\n            },\n        });\n\n        Strophe.xmlunescape = function (text) {\n            let reg_exp = {\n                '&amp;': '&',\n                '&lt;': '<',\n                '&gt;': '>',\n                '&quot;': '\"',\n                '&apos;': \"'\"\n            };\n            let escaper = function(match) {\n                return reg_exp[match];\n            };\n            // Regexes for identifying a key that needs to be escaped\n            let source = '(?:' + _.keys(reg_exp).join('|') + ')',\n                testRegexp = RegExp(source),\n                replaceRegexp = RegExp(source, 'g');\n            text = text == null ? '' : '' + text;\n            return testRegexp.test(text) ? text.replace(replaceRegexp, escaper) : text;\n        };\n\n        Strophe.addNamespace('ATTENTION', 'urn:xmpp:attention:0');\n        Strophe.addNamespace('CARBONS', 'urn:xmpp:carbons:2');\n        Strophe.addNamespace('FORWARD', 'urn:xmpp:forward:0');\n        Strophe.addNamespace('HASH', 'urn:xmpp:hashes:2');\n        Strophe.addNamespace('HINTS', 'urn:xmpp:hints');\n        Strophe.addNamespace('SCE', 'urn:xmpp:sce:1');\n        Strophe.addNamespace('RECEIPTS', 'urn:xmpp:receipts');\n        Strophe.addNamespace('JINGLE', 'urn:xmpp:jingle:1');\n        Strophe.addNamespace('JINGLE_SECURITY_STUB', 'urn:xmpp:jingle:security:stub:0');\n        Strophe.addNamespace('JINGLE_MSG', 'urn:xmpp:jingle-message:0');\n        Strophe.addNamespace('JINGLE_RTP', 'urn:xmpp:jingle:apps:rtp:1');\n        Strophe.addNamespace('JINGLE_TRANSPORTS_ICE', 'urn:xmpp:jingle:transports:ice-udp:1');\n        Strophe.addNamespace('ADDRESS', 'http://jabber.org/protocol/address');\n        Strophe.addNamespace('CHATSTATES', 'http://jabber.org/protocol/chatstates');\n        Strophe.addNamespace('EXTENDED_CHATSTATES', 'https://xabber.com/protocol/extended-chatstates');\n        Strophe.addNamespace('HTTP_AUTH', 'http://jabber.org/protocol/http-auth');\n        Strophe.addNamespace('AUTH_TOKENS', 'https://xabber.com/protocol/auth-tokens');\n        Strophe.addNamespace('AUTH_DEVICES', 'https://xabber.com/protocol/devices');\n        Strophe.addNamespace('SYNCHRONIZATION', 'https://xabber.com/protocol/synchronization');\n        Strophe.addNamespace('SYNCHRONIZATION_REGULAR_CHAT', 'https://xabber.com/protocol/synchronization#chat');\n        Strophe.addNamespace('SYNCHRONIZATION_CHANNEL', 'https://xabber.com/protocol/channels');\n        Strophe.addNamespace('SYNCHRONIZATION_OLD_OMEMO', 'urn:xmpp:omemo:1');\n        Strophe.addNamespace('SYNCHRONIZATION_OMEMO', 'urn:xmpp:omemo:2');\n        Strophe.addNamespace('DELIVERY', 'https://xabber.com/protocol/delivery');\n        Strophe.addNamespace('ARCHIVE', 'https://xabber.com/protocol/archive');\n        Strophe.addNamespace('MAM', 'urn:xmpp:mam:2');\n        Strophe.addNamespace('RSM', 'http://jabber.org/protocol/rsm');\n        Strophe.addNamespace('DATAFORM', 'jabber:x:data');\n        Strophe.addNamespace('CHAT_MARKERS', 'urn:xmpp:chat-markers:0');\n        Strophe.addNamespace('VCARD_UPDATE', 'vcard-temp:x:update');\n        Strophe.addNamespace('HTTP_UPLOAD', 'urn:xmpp:http:upload');\n        Strophe.addNamespace('BLOCKING', 'urn:xmpp:blocking');\n        Strophe.addNamespace('SEARCH', 'jabber:iq:search');\n        Strophe.addNamespace('PRIVATE_STORAGE', 'jabber:iq:private');\n        Strophe.addNamespace('MEDIA', 'urn:xmpp:media-element');\n        Strophe.addNamespace('LAST', 'jabber:iq:last');\n        Strophe.addNamespace('GROUP_CHAT', 'https://xabber.com/protocol/groups');\n        Strophe.addNamespace('GROUP_CHAT_INVITE', 'https://xabber.com/protocol/groups#invite');\n        Strophe.addNamespace('GROUP_CHAT_INVITE_HTTP', 'http://xabber.com/protocol/groups#invite');\n        Strophe.addNamespace('WEBCHAT', 'https://xabber.com/protocol/webchat');\n        Strophe.addNamespace('INDEX', 'https://xabber.com/protocol/index');\n        Strophe.addNamespace('PUBSUB', 'http://jabber.org/protocol/pubsub');\n        Strophe.addNamespace('PUBSUB_AVATAR_DATA', 'urn:xmpp:avatar:data');\n        Strophe.addNamespace('PUBSUB_AVATAR_METADATA', 'urn:xmpp:avatar:metadata');\n        Strophe.addNamespace('PUBSUB_AVATAR_METADATA_THUMBNAIL', 'urn:xmpp:thumbs:1');\n        Strophe.addNamespace('REWRITE', 'https://xabber.com/protocol/rewrite');\n        Strophe.addNamespace('REFERENCE', 'https://xabber.com/protocol/references');\n        Strophe.addNamespace('GEOLOC', 'http://jabber.org/protocol/geoloc');\n        Strophe.addNamespace('MARKUP', 'https://xabber.com/protocol/markup');\n        Strophe.addNamespace('VOICE_MESSAGE', 'https://xabber.com/protocol/voice-messages');\n        Strophe.addNamespace('FILES', 'https://xabber.com/protocol/files');\n        Strophe.addNamespace('SUBSCRIPTION_PREAPPROVAL', 'urn:xmpp:features:pre-approval');\n        Strophe.addNamespace('OGP', 'https://xabber.com/protocol/ogp');\n        Strophe.addNamespace('URLDISCO', 'urn:xabber:http:url');\n        Strophe.addNamespace('MEDIAGALLERY', 'urn:xabber:http:url:mediagallery');\n        return xabber;\n    };\n}).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack://xabber.web/./src/strophe.js?")},"./src/templates.js":(module,exports,__webpack_require__)=>{eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    __webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore.js\"),\n    __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\"),\n\n    __webpack_require__(/*! raw-loader!~/templates/base/dialog.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/base/dialog.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/base/fingerprints.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/base/fingerprints.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/base/fingerprint_item.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/base/fingerprint_item.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/base/jingle_message_calling.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/base/jingle_message_calling.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/base/plyr_player_popup.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/base/plyr_player_popup.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/base/input_widget.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/base/input_widget.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/base/toolbar.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/base/toolbar.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/base/settings.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/base/settings.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/base/about.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/base/about.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/base/omemo_enable.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/base/omemo_enable.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/base/backgrounds_gallery.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/base/backgrounds_gallery.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/base/color_picker.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/base/color_picker.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/base/color_scheme.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/base/color_scheme.html\"),\n\n    __webpack_require__(/*! raw-loader!~/templates/api_service/xabber_login.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/api_service/xabber_login.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/api_service/xabber_login_by_email.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/api_service/xabber_login_by_email.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/api_service/xabber_account.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/api_service/xabber_account.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/api_service/linked_email_item.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/api_service/linked_email_item.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/api_service/add_xabber_account.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/api_service/add_xabber_account.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/api_service/sync_settings.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/api_service/sync_settings.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/api_service/sync_settings_account_item.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/api_service/sync_settings_account_item.html\"),\n\n    __webpack_require__(/*! raw-loader!~/templates/accounts/xmpp_login.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/accounts/xmpp_login.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/accounts/add_account.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/accounts/add_account.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/accounts/change_password.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/accounts/change_password.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/accounts/toolbar_item.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/accounts/toolbar_item.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/accounts/media_gallery_account_file.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/accounts/media_gallery_account_file.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/accounts/media_gallery_account.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/accounts/media_gallery_account.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/accounts/settings_left.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/accounts/settings_left.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/accounts/settings_right.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/accounts/settings_right.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/accounts/existing_groupchat_item.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/accounts/existing_groupchat_item.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/accounts/resource.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/accounts/resource.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/accounts/resource_right.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/accounts/resource_right.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/accounts/webcam_panel.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/accounts/webcam_panel.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/accounts/emoji_panel.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/accounts/emoji_panel.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/accounts/emoji_picker.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/accounts/emoji_picker.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/accounts/emoji_picker_tabs.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/accounts/emoji_picker_tabs.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/accounts/global_settings_item.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/accounts/global_settings_item.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/accounts/change_status.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/accounts/change_status.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/accounts/token_item.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/accounts/token_item.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/accounts/current_token_item.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/accounts/current_token_item.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/accounts/audio_file_waveform.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/accounts/audio_file_waveform.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/accounts/avatars_gallery.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/accounts/avatars_gallery.html\"),\n\n    __webpack_require__(/*! raw-loader!~/templates/vcard/vcard.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/vcard/vcard.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/vcard/vcard_edit.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/vcard/vcard_edit.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/vcard/vcard_right.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/vcard/vcard_right.html\"),\n\n    __webpack_require__(/*! raw-loader!~/templates/searching/searching_wide.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/searching/searching_wide.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/searching/searching_account_item.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/searching/searching_account_item.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/searching/existing_groupchat_item.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/searching/existing_groupchat_item.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/searching/existing_groupchat_details_view.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/searching/existing_groupchat_details_view.html\"),\n\n    __webpack_require__(/*! raw-loader!~/templates/contacts/roster_right.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/roster_right.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/roster_left.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/roster_left.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/account_roster_right.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/account_roster_right.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/account_roster_left.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/account_roster_left.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/roster_left.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/roster_left.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/group_right.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_right.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/group_left.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_left.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/add_contact.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/add_contact.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/contact_right_item.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/contact_right_item.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/contact_left_item.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/contact_left_item.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/contact_blocked_item.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/contact_blocked_item.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/contact_details.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/contact_details.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/contact_details_right.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/contact_details_right.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/roster_settings.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/roster_settings.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/group_settings.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_settings.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/groups_checkbox_list.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/groups_checkbox_list.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/groups_checkbox_list_contact.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/groups_checkbox_list_contact.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/groups_new_group.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/groups_new_group.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/groups_list.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/groups_list.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/add_contact_account_item.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/add_contact_account_item.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/contact_placeholder.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/contact_placeholder.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/groups.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/groups.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/edit_contact.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/edit_contact.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/edit_group.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/edit_group.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/preloader.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/preloader.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/media_item.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/media_item.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/media_items_empty.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/media_items_empty.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/audio_file_waveform.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/audio_file_waveform.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/group_chats/group_chat_properties.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/group_chat_properties.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/group_chats/group_chat_properties_right.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/group_chat_properties_right.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/group_chats/group_chat_details.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/group_chat_details.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/group_chats/group_chat_details_right.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/group_chat_details_right.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/group_chats/invitation.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/invitation.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/group_chats/group_chat_properties_edit.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/group_chat_properties_edit.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/group_chats/default_restrictions.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/default_restrictions.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/group_chats/default_restrictions_right.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/default_restrictions_right.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/group_chats/group_member_item.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/group_member_item.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/group_chats/group_member_item_right.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/group_member_item_right.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/group_chats/description_input_widget.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/description_input_widget.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/group_chats/group_name_input_widget.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/group_name_input_widget.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/group_chats/participant_badge_input_widget.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/participant_badge_input_widget.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/group_chats/invited_member_item.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/invited_member_item.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/group_chats/add_blocked_participant_form.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/add_blocked_participant_form.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/group_chats/participant_details_right.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/participant_details_right.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/group_chats/participant_rights.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/participant_rights.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/group_chats/restriction_item.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/restriction_item.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/group_chats/right_expire_variants.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/right_expire_variants.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/group_chats/pinned_message.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/pinned_message.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/group_chats/participant_details_item.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/participant_details_item.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/group_chats/participant_details_item_right.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/participant_details_item_right.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/group_chats/participants.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/participants.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/group_chats/participants_right_panel.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/participants_right_panel.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/group_chats/badge_edit_view.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/badge_edit_view.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/group_chats/private_participant_details.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/private_participant_details.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/group_chats/private_participant_details_item_right.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/private_participant_details_item_right.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/group_chats/set_status.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/set_status.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/group_chats/status_item.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/status_item.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/group_chats/group_status.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/group_status.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/group_chats/group_status_right.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/group_status_right.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/contacts/group_chats/file_item.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/file_item.html\"),\n\n    __webpack_require__(/*! raw-loader!~/templates/chats/chats_panel.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/chats_panel.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/add_chat_account_item.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/add_chat_account_item.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/chat_item.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/chat_item.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/chat_head.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/chat_head.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/send_media.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/send_media.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/saved_chat_head.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/saved_chat_head.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/chat_content.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/chat_content.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/chat_content_contact.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/chat_content_contact.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/chat_bottom.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/chat_bottom.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/location_popup.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/location_popup.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/subscription_buttons.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/subscription_buttons.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/forward_panel.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/forward_panel.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/chat_placeholder.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/chat_placeholder.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/message_item.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/message_item.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/messages/main.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/main.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/messages/searched.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/searched.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/messages/forwarded.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/forwarded.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/messages/system.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/system.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/messages/file_upload.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/file_upload.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/messages/loading_circle.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/loading_circle.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/messages/file.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/file.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/messages/file_loading.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/file_loading.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/messages/link_reference.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/link_reference.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/messages/link_reference_chat.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/link_reference_chat.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/messages/attached_file.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/attached_file.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/messages/video.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/video.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/messages/location.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/location.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/messages/audio_file.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/audio_file.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/messages/audio_file_waveform.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/audio_file_waveform.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/messages/auth_request.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/auth_request.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/messages/group_request.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/group_request.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/messages/template-for-2.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/template-for-2.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/messages/template-for-3.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/template-for-3.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/messages/template-for-4.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/template-for-4.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/messages/template-for-5.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/template-for-5.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/messages/template-for-6.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/template-for-6.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/messages/hidden-template-for-2.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/hidden-template-for-2.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/messages/hidden-template-for-3.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/hidden-template-for-3.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/messages/hidden-template-for-4.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/hidden-template-for-4.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/messages/hidden-template-for-5.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/hidden-template-for-5.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/messages/hidden-template-for-6.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/hidden-template-for-6.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/messages/images_details.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/images_details.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/messages/saved_main.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/saved_main.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/group_chats/pinned_message_panel.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/group_chats/pinned_message_panel.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/group_chats/add_group_chat.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/group_chats/add_group_chat.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/group_chats/invitation_panel_view.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/group_chats/invitation_panel_view.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/group_chats/mention_item.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/group_chats/mention_item.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/encryption_warning.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/encryption_warning.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/chats/content_encryption_warning.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/chats/content_encryption_warning.html\"),\n\n    __webpack_require__(/*! raw-loader!~/templates/mentions/mentions_panel.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/mentions/mentions_panel.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/mentions/mentions_placeholder.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/mentions/mentions_placeholder.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/mentions/mention_item.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/mentions/mention_item.html\"),\n\n    __webpack_require__(/*! raw-loader!~/templates/svg/ic-jabber.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/ic-jabber.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/xmpp.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/xmpp.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/account-outline.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/account-outline.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/qrcode.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/qrcode.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/id-outline.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/id-outline.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/clock-outline.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/clock-outline.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/index.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/index.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/restrictions-outline.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/restrictions-outline.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/history.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/history.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/chevron-down.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/chevron-down.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/camera-retake.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/camera-retake.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/membership-outline.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/membership-outline.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/invite-outline.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/invite-outline.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/chevron-right-variant.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/chevron-right-variant.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/chevron-left-variant.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/chevron-left-variant.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/subscription-to.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/subscription-to.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/subscription-from.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/subscription-from.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/image.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/image.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/file-audio.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/file-audio.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/file-video.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/file-video.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/file-document.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/file-document.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/file-presentation.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/file-presentation.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/file-zip.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/file-zip.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/file.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/file.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/file-pdf.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/file-pdf.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/close.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/close.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/link.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/link.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/picture-in-picture-minimize.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/picture-in-picture-minimize.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/picture-in-picture-bottom-right.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/picture-in-picture-bottom-right.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/picture-in-picture-top-right.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/picture-in-picture-top-right.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/pause.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/pause.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/volume-off.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/volume-off.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/volume-high.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/volume-high.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/plyr.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/plyr.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/plus.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/plus.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/player-float.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/player-float.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/player-full.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/player-full.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/player-mini-variant.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/player-mini-variant.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/player-mini.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/player-mini.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/message-bookmark-outline.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/message-bookmark-outline.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/play.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/play.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/video.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/video.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/status-outline.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/status-outline.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/birthday-outline.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/birthday-outline.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/job-outline.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/job-outline.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/address-outline.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/address-outline.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/email-outline.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/email-outline.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/description-outline.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/description-outline.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/call-outline.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/call-outline.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/call.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/call.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/search.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/search.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/devices.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/devices.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/bell.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/bell.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/bell-sleep.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/bell-sleep.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/bell-off.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/bell-off.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/cancel.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/cancel.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/edit.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/edit.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/edit-outline.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/edit-outline.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/blocked-add.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/blocked-add.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/information-outline.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/information-outline.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/fullname.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/fullname.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/fullname-outline.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/fullname-outline.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/ic-at.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/ic-at.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/ic-searching.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/ic-searching.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/blocked.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/blocked.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/bot.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/bot.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/bot-variant.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/bot-variant.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/group-incognito.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/group-incognito.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/group-invite.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/group-invite.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/group-public.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/group-public.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/task.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/task.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/group-private.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/group-private.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/channel.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/channel.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/rss.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/rss.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/rss-variant.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/rss-variant.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/server.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/server.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/volume-off-variant.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/volume-off-variant.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/message-group.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/message-group.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/xabber-offline.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/xabber-offline.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/xabber-online.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/xabber-online.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/saved-messages.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/saved-messages.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/palette.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/palette.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/circles.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/circles.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/translate.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/translate.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/crosshairs-gps.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/crosshairs-gps.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/crosshairs-question.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/crosshairs-question.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/crosshairs.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/crosshairs.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/map-marker-outline.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/map-marker-outline.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/map-marker.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/map-marker.html\"),\n    __webpack_require__(/*! raw-loader!~/templates/svg/minus.html */ \"./node_modules/raw-loader/dist/cjs.js!./templates/svg/minus.html\"),\n\n    __webpack_require__(/*! raw-loader!~/templates/accounts/emojis.txt */ \"./node_modules/raw-loader/dist/cjs.js!./templates/accounts/emojis.txt\"),\n\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function (_, $) {\n\n    _.templateSettings = {\n        evaluate : /\\{\\[([\\s\\S]+?)\\]\\}/g,\n        interpolate : /\\{\\{([\\s\\S]+?)\\}\\}/g\n    };\n\n    let templates = {};\n\n    let insertSvg = function (html) {\n        let $html = $('<div/>').html(html);\n        $html.find('.mdi-svg-template').each(function () {\n            let $el = $(this),\n                svg_name = $el.data('svgname');\n            $el.removeClass('mdi-svg-template').addClass('mdi-'+svg_name)\n                .attr('data-svgname', null);\n            $el.html(templates.svg[svg_name]());\n        });\n        return $html.html();\n    };\n\n    let _addTemplate = function (name, options) {\n        options || (options = {});\n        let path = name.split('.'),\n            tpl = _.template(__webpack_require__(\"./templates sync recursive ./node_modules/raw-loader/dist/cjs.js! ^\\\\.\\\\/.*\\\\.html$\")(\"./\"+path.join('/')+\".html\").default),\n            tpl_name = path.pop(),\n            res = templates;\n        _.each(path, function (attr) {\n            res[attr] || (res[attr] = {});\n            res = res[attr];\n        });\n        if (options.is_svg) {\n            res[tpl_name] = tpl;\n        } else {\n            res[tpl_name] = function (data) {\n                return insertSvg(tpl(data));\n            };\n        }\n    };\n\n    let addJSONTemplate = function (name, ) {\n        let path = name.split('.'),\n            tpl = _.template(__webpack_require__(\"./templates sync recursive ./node_modules/raw-loader/dist/cjs.js! ^\\\\.\\\\/.*\\\\.txt$\")(\"./\"+path.join('/')+\".txt\").default),//todo fix json import\n            tpl_name = path.pop(),\n            res = templates;\n        _.each(path, function (attr) {\n            res[attr] || (res[attr] = {});\n            res = res[attr];\n        });\n        res[tpl_name] = function (data) {\n            return insertSvg(tpl(data));\n        };\n    };\n\n    let addTemplate = function (name) {\n        _addTemplate(name, {is_svg: false});\n    };\n\n    let addSvgTemplate = function (name) {\n        _addTemplate(name, {is_svg: true});\n    };\n\n\n    addTemplate('base.dialog');\n    addTemplate('base.fingerprints');\n    addTemplate('base.fingerprint_item');\n    addTemplate('base.jingle_message_calling');\n    addTemplate('base.plyr_player_popup');\n    addTemplate('base.input_widget');\n    addTemplate('base.toolbar');\n    addTemplate('base.settings');\n    addTemplate('base.about');\n    addTemplate('base.omemo_enable');\n    addTemplate('base.backgrounds_gallery');\n    addTemplate('base.color_picker');\n    addTemplate('base.color_scheme');\n\n    addTemplate('api_service.xabber_login');\n    addTemplate('api_service.xabber_login_by_email');\n    addTemplate('api_service.add_xabber_account');\n    addTemplate('api_service.xabber_account');\n    addTemplate('api_service.linked_email_item');\n    addTemplate('api_service.sync_settings');\n    addTemplate('api_service.sync_settings_account_item');\n\n    addTemplate('accounts.xmpp_login');\n    addTemplate('accounts.add_account');\n    addTemplate('accounts.change_password');\n    addTemplate('accounts.toolbar_item');\n    addTemplate('accounts.media_gallery_account_file');\n    addTemplate('accounts.media_gallery_account');\n    addTemplate('accounts.settings_left');\n    addTemplate('accounts.settings_right');\n    addTemplate('accounts.existing_groupchat_item');\n    addTemplate('accounts.resource');\n    addTemplate('accounts.resource_right');\n    addTemplate('accounts.webcam_panel');\n    addTemplate('accounts.emoji_panel');\n    addTemplate('accounts.emoji_picker');\n    addTemplate('accounts.emoji_picker_tabs');\n    addTemplate('accounts.global_settings_item');\n    addTemplate('accounts.change_status');\n    addTemplate('accounts.token_item');\n    addTemplate('accounts.current_token_item');\n    addTemplate('accounts.audio_file_waveform');\n    addTemplate('accounts.avatars_gallery');\n\n    addTemplate('vcard.vcard');\n    addTemplate('vcard.vcard_edit');\n    addTemplate('vcard.vcard_right');\n\n    addTemplate('searching.searching_wide');\n    addTemplate('searching.searching_account_item');\n    addTemplate('searching.existing_groupchat_item');\n    addTemplate('searching.existing_groupchat_details_view');\n\n    addTemplate('contacts.roster_right');\n    addTemplate('contacts.roster_left');\n    addTemplate('contacts.account_roster_right');\n    addTemplate('contacts.account_roster_left');\n    addTemplate('contacts.group_right');\n    addTemplate('contacts.group_left');\n    addTemplate('contacts.add_contact');\n    addTemplate('contacts.contact_right_item');\n    addTemplate('contacts.contact_left_item');\n    addTemplate('contacts.contact_blocked_item');\n    addTemplate('contacts.contact_details');\n    addTemplate('contacts.contact_details_right');\n    addTemplate('contacts.roster_settings');\n    addTemplate('contacts.group_settings');\n    addTemplate('contacts.groups_checkbox_list');\n    addTemplate('contacts.groups_checkbox_list_contact');\n    addTemplate('contacts.groups_new_group');\n    addTemplate('contacts.groups_list');\n    addTemplate('contacts.add_contact_account_item');\n    addTemplate('contacts.contact_placeholder');\n    addTemplate('contacts.groups');\n    addTemplate('contacts.edit_contact');\n    addTemplate('contacts.edit_group');\n    addTemplate('contacts.preloader');\n    addTemplate('contacts.media_item');\n    addTemplate('contacts.media_items_empty');\n    addTemplate('contacts.audio_file_waveform');\n    addTemplate('contacts.group_chats.group_chat_properties');\n    addTemplate('contacts.group_chats.group_chat_properties_right');\n    addTemplate('contacts.group_chats.group_chat_details');\n    addTemplate('contacts.group_chats.group_chat_details_right');\n    addTemplate('contacts.group_chats.invitation');\n    addTemplate('contacts.group_chats.group_chat_properties_edit');\n    addTemplate('contacts.group_chats.default_restrictions');\n    addTemplate('contacts.group_chats.default_restrictions_right');\n    addTemplate('contacts.group_chats.group_member_item');\n    addTemplate('contacts.group_chats.group_member_item_right');\n    addTemplate('contacts.group_chats.description_input_widget');\n    addTemplate('contacts.group_chats.group_name_input_widget');\n    addTemplate('contacts.group_chats.participant_badge_input_widget');\n    addTemplate('contacts.group_chats.invited_member_item');\n    addTemplate('contacts.group_chats.add_blocked_participant_form');\n    addTemplate('contacts.group_chats.participant_details_right');\n    addTemplate('contacts.group_chats.participant_rights');\n    addTemplate('contacts.group_chats.restriction_item');\n    addTemplate('contacts.group_chats.right_expire_variants');\n    addTemplate('contacts.group_chats.pinned_message');\n    addTemplate('contacts.group_chats.participant_details_item_right');\n    addTemplate('contacts.group_chats.participant_details_item');\n    addTemplate('contacts.group_chats.participants');\n    addTemplate('contacts.group_chats.participants_right_panel');\n    addTemplate('contacts.group_chats.badge_edit_view');\n    addTemplate('contacts.group_chats.private_participant_details');\n    addTemplate('contacts.group_chats.private_participant_details_item_right');\n    addTemplate('contacts.group_chats.set_status');\n    addTemplate('contacts.group_chats.status_item');\n    addTemplate('contacts.group_chats.group_status');\n    addTemplate('contacts.group_chats.group_status_right');\n    addTemplate('contacts.group_chats.file_item');\n\n    addTemplate('chats.chats_panel');\n    addTemplate('chats.add_chat_account_item');\n    addTemplate('chats.chat_item');\n    addTemplate('chats.chat_head');\n    addTemplate('chats.send_media');\n    addTemplate('chats.saved_chat_head');\n    addTemplate('chats.chat_content');\n    addTemplate('chats.chat_content_contact');\n    addTemplate('chats.chat_bottom');\n    addTemplate('chats.location_popup');\n    addTemplate('chats.subscription_buttons');\n    addTemplate('chats.forward_panel');\n    addTemplate('chats.chat_placeholder');\n    addTemplate('chats.message_item');\n    addTemplate('chats.messages.main');\n    addTemplate('chats.messages.searched');\n    addTemplate('chats.messages.forwarded');\n    addTemplate('chats.messages.system');\n    addTemplate('chats.messages.file_upload');\n    addTemplate('chats.messages.loading_circle');\n    addTemplate('chats.messages.file');\n    addTemplate('chats.messages.file_loading');\n    addTemplate('chats.messages.link_reference');\n    addTemplate('chats.messages.link_reference_chat');\n    addTemplate('chats.messages.attached_file');\n    addTemplate('chats.messages.video');\n    addTemplate('chats.messages.location');\n    addTemplate('chats.messages.audio_file');\n    addTemplate('chats.messages.audio_file_waveform');\n    addTemplate('chats.messages.auth_request');\n    addTemplate('chats.messages.group_request');\n    addTemplate('chats.messages.template-for-2');\n    addTemplate('chats.messages.template-for-3');\n    addTemplate('chats.messages.template-for-4');\n    addTemplate('chats.messages.template-for-5');\n    addTemplate('chats.messages.template-for-6');\n    addTemplate('chats.messages.hidden-template-for-2');\n    addTemplate('chats.messages.hidden-template-for-3');\n    addTemplate('chats.messages.hidden-template-for-4');\n    addTemplate('chats.messages.hidden-template-for-5');\n    addTemplate('chats.messages.hidden-template-for-6');\n    addTemplate('chats.messages.images_details');\n    addTemplate('chats.messages.saved_main');\n    addTemplate('chats.group_chats.pinned_message_panel');\n    addTemplate('chats.group_chats.add_group_chat');\n    addTemplate('chats.group_chats.invitation_panel_view');\n    addTemplate('chats.group_chats.mention_item');\n    addTemplate('chats.encryption_warning');\n    addTemplate('chats.content_encryption_warning');\n\n\n    addTemplate('mentions.mentions_panel');\n    addTemplate('mentions.mentions_placeholder');\n    addTemplate('mentions.mention_item');\n\n    addSvgTemplate('svg.ic-jabber');\n    addSvgTemplate('svg.xmpp');\n    addSvgTemplate('svg.account-outline');\n    addSvgTemplate('svg.qrcode');\n    addSvgTemplate('svg.id-outline');\n    addSvgTemplate('svg.clock-outline');\n    addSvgTemplate('svg.index');\n    addSvgTemplate('svg.restrictions-outline');\n    addSvgTemplate('svg.history');\n    addSvgTemplate('svg.chevron-down');\n    addSvgTemplate('svg.camera-retake');\n    addSvgTemplate('svg.membership-outline');\n    addSvgTemplate('svg.invite-outline');\n    addSvgTemplate('svg.chevron-right-variant');\n    addSvgTemplate('svg.chevron-left-variant');\n    addSvgTemplate('svg.subscription-to');\n    addSvgTemplate('svg.subscription-from');\n    addSvgTemplate('svg.image');\n    addSvgTemplate('svg.file-audio');\n    addSvgTemplate('svg.file-video');\n    addSvgTemplate('svg.file-document');\n    addSvgTemplate('svg.file-presentation');\n    addSvgTemplate('svg.file-zip');\n    addSvgTemplate('svg.file');\n    addSvgTemplate('svg.file-pdf');\n    addSvgTemplate('svg.close');\n    addSvgTemplate('svg.link');\n    addSvgTemplate('svg.picture-in-picture-minimize');\n    addSvgTemplate('svg.picture-in-picture-bottom-right');\n    addSvgTemplate('svg.picture-in-picture-top-right');\n    addSvgTemplate('svg.pause');\n    addSvgTemplate('svg.volume-off');\n    addSvgTemplate('svg.volume-high');\n    addSvgTemplate('svg.plyr');\n    addSvgTemplate('svg.plus');\n    addSvgTemplate('svg.player-float');\n    addSvgTemplate('svg.player-full');\n    addSvgTemplate('svg.player-mini-variant');\n    addSvgTemplate('svg.player-mini');\n    addSvgTemplate('svg.message-bookmark-outline');\n    addSvgTemplate('svg.play');\n    addSvgTemplate('svg.video');\n    addSvgTemplate('svg.cancel');\n    addSvgTemplate('svg.status-outline');\n    addSvgTemplate('svg.birthday-outline');\n    addSvgTemplate('svg.job-outline');\n    addSvgTemplate('svg.address-outline');\n    addSvgTemplate('svg.email-outline');\n    addSvgTemplate('svg.description-outline');\n    addSvgTemplate('svg.call-outline');\n    addSvgTemplate('svg.call');\n    addSvgTemplate('svg.search');\n    addSvgTemplate('svg.devices');\n    addSvgTemplate('svg.bell');\n    addSvgTemplate('svg.bell-sleep');\n    addSvgTemplate('svg.bell-off');\n    addSvgTemplate('svg.cancel');\n    addSvgTemplate('svg.edit');\n    addSvgTemplate('svg.edit-outline');\n    addSvgTemplate('svg.blocked-add');\n    addSvgTemplate('svg.information-outline');\n    addSvgTemplate('svg.fullname');\n    addSvgTemplate('svg.fullname-outline');\n    addSvgTemplate('svg.ic-at');\n    addSvgTemplate('svg.ic-searching');\n    addSvgTemplate('svg.blocked');\n    addSvgTemplate('svg.bot');\n    addSvgTemplate('svg.bot-variant');\n    addSvgTemplate('svg.group-incognito');\n    addSvgTemplate('svg.group-invite');\n    addSvgTemplate('svg.group-public');\n    addSvgTemplate('svg.task');\n    addSvgTemplate('svg.group-private');\n    addSvgTemplate('svg.channel');\n    addSvgTemplate('svg.rss');\n    addSvgTemplate('svg.rss-variant');\n    addSvgTemplate('svg.server');\n    addSvgTemplate('svg.volume-off-variant');\n    addSvgTemplate('svg.message-group');\n    addSvgTemplate('svg.xabber-offline');\n    addSvgTemplate('svg.xabber-online');\n    addSvgTemplate('svg.saved-messages');\n    addSvgTemplate('svg.palette');\n    addSvgTemplate('svg.circles');\n    addSvgTemplate('svg.translate');\n    addSvgTemplate('svg.crosshairs-gps');\n    addSvgTemplate('svg.crosshairs-question');\n    addSvgTemplate('svg.crosshairs');\n    addSvgTemplate('svg.map-marker-outline');\n    addSvgTemplate('svg.map-marker');\n    addSvgTemplate('svg.minus');\n\n    addJSONTemplate('accounts.emojis');\n\n    return templates;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceURL=webpack://xabber.web/./src/templates.js?")},"./src/ui.js":(module,exports,__webpack_require__)=>{eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n  return function (xabber) {\n    let env = xabber.env,\n        constants = env.constants,\n        $ = env.$;\n\n    xabber.once(\"start\", function () {\n        $(window).on(\"keydown\", (ev) => {\n            if ((ev.ctrlKey || ev.metaKey) && ev.keyCode == constants.KEY_SHIFT || ev.shiftKey && ev.keyCode == constants.KEY_CTRL) {\n                this.shift_pressed = null;\n                this.shiftctrl_pressed = true;\n                ev.preventDefault();\n            } else if (ev.keyCode == constants.KEY_SHIFT) {\n                this.shift_pressed = true;\n                ev.preventDefault();\n            }\n            let attrs = xabber.body.screen.attributes;\n            if (ev.keyCode === constants.KEY_ESCAPE && !xabber.body.screen.get('right_contact')) {\n                if (xabber.body.$el.siblings('#modals').children('.open').length)\n                    return;\n                if (attrs.name === 'all-chats' && attrs.right === 'contact_details')\n                    attrs.contact.trigger('open_chat', attrs.contact);\n            }\n            if (attrs.chat_item && (attrs.name === 'mentions' || attrs.name === 'contacts' || attrs.name === 'all-chats') && (attrs.right === 'chat' || attrs.right === 'participant_messages' || attrs.right === 'message_context' || attrs.right === 'searched_messages')) {\n                if (!window.$('.message-actions-panel').hasClass('hidden')) {\n                    if (!ev.ctrlKey && !ev.metaKey) {\n                        switch (ev.keyCode) {\n                            case 67:\n                                attrs.chat_item.model.trigger('copy_selected_messages');\n                                break;\n                            case 68:\n                                attrs.chat_item.model.trigger('delete_selected_messages');\n                                break;\n                            case 69:\n                                attrs.chat_item.model.trigger('edit_selected_message');\n                                break;\n                            case 70:\n                                attrs.chat_item.model.trigger('forward_selected_messages');\n                                break;\n                            case 80:\n                                attrs.chat_item.model.trigger('pin_selected_message');\n                                break;\n                            case 82:\n                                attrs.chat_item.model.trigger('reply_selected_messages');\n                                break;\n                            case constants.KEY_ESCAPE:\n                                if (!xabber.body.screen.get('right_contact'))\n                                    attrs.chat_item.model.trigger('reset_selected_messages');\n                                break;\n                        }\n                        ev.preventDefault();\n                    }\n                }\n            }\n            });\n        $(window).on(\"keyup\", (ev) => {\n            if (!(ev.shiftKey && ev.ctrlKey))\n                this.shiftctrl_pressed = null;\n            if (ev.shiftKey && !ev.ctrlKey)\n                this.shift_pressed = true;\n            if (!ev.shiftKey)\n                this.shift_pressed = null;\n        });\n\n        this.updateLayout = function (options) {\n            options || (options = {});\n            if (this.roster_view.isVisible()) {\n                this.updateRosterLayout(options);\n            }\n            xabber.trigger('update_css', options);\n            this.body.$('.ps-container').perfectScrollbar('update');\n        };\n\n        this.updateRosterLayout = function (options) {\n            let width = this.body.$el.width(),\n                is_wide = width >= constants.WIDTH_MEDIUM,\n                is_narrow = width < constants.WIDTH_MEDIUM,\n                is_tiny = width < constants.WIDTH_TINY,\n                expanded = this.roster_view.data.get('expanded'),\n                pinned = this.roster_view.data.get('pinned');\n            this.roster_view.$('.collapsed-wrap').hideIf(expanded);\n            this.roster_view.$('.expanded-wrap').showIf(expanded);\n            this.roster_view.$('.btn-pin').hide();\n            if (is_narrow && pinned) {\n                this.roster_view.data.set({expanded: false, pinned: false});\n                return;\n            }\n            let roster_width,\n                panel_width,\n                left_panel_width,\n                right_panel_width,\n                right_contact_panel_width,\n                chat_bottom_panel_width,\n                toolbar_width = 50,\n                right_contact_panel_styles = {};\n            if (is_wide || !(is_narrow || pinned)) {\n                panel_width = 1536;\n                roster_width = 300;\n            } else if (is_narrow) {\n                panel_width = width - toolbar_width - 20 - 44;\n                roster_width = 250;\n            } else {\n                panel_width = (width - toolbar_width - 20) * 7 / 9;\n                roster_width = (width - toolbar_width - 20) * 2 / 9;\n            }\n            if (!expanded) {\n                roster_width = is_wide ? 48 : 44;\n            }\n            left_panel_width = right_contact_panel_width = 384;\n            right_panel_width = panel_width - (left_panel_width + right_contact_panel_width);\n            chat_bottom_panel_width = '100%';\n            if (is_narrow){\n                right_contact_panel_width = left_panel_width = (panel_width * 0.264) < 288 ? 288 : panel_width * 0.264;\n\n            }\n            if (right_panel_width < 512 ){\n                right_panel_width = panel_width - left_panel_width;\n                this.right_contact_panel_saveable = false;\n                right_contact_panel_styles = {\n                    position : 'absolute',\n                    right : 0,\n                    'z-index' : 499,\n                };\n                if ((right_panel_width - 384) < 128) {\n                    right_contact_panel_width = right_panel_width;\n                    this.right_contact_panel.$el.removeClass('background-click')\n                }\n                else {\n                    right_contact_panel_width = 384\n                    this.right_contact_panel.$el.addClass('background-click')\n                }\n            }\n            else {\n                this.right_contact_panel_saveable = true;\n                right_contact_panel_styles = {\n                    position : 'static',\n                    'z-index' : 0,\n                };\n                this.right_contact_panel.$el.removeClass('background-click')\n\n            }\n            this.right_contact_panel_width = right_contact_panel_width;\n\n            if (!this.body.screen.get('right_contact')) {\n                right_contact_panel_width = 0;\n                right_panel_width = panel_width - left_panel_width;\n            }\n            if (right_panel_width < 768) {\n                chat_bottom_panel_width = right_panel_width;\n            }\n\n            let panel_gap = (width - panel_width) / 2,\n                left_gap = panel_gap - toolbar_width,\n                right_gap = panel_gap - roster_width;\n            this.roster_view.$('.expanded-wrap').switchClass('solid',\n                    (!pinned && (!is_wide || right_gap < 0)));\n            right_contact_panel_styles.width = right_contact_panel_width;\n            this.chat_head.$el.switchClass('chat-head-ultra-narrow', right_panel_width <= 650);\n            this.chat_head.$el.switchClass('chat-head-narrow', right_panel_width < 750);\n            this.chat_head.$el.switchClass('chat-head-normal', (right_panel_width < 850 && right_panel_width >= 750));\n            this.chat_head.$el.switchClass('chat-head-normal-wide', (right_panel_width < 1000 && right_panel_width >= 850));\n            this.chat_head.$el.switchClass('chat-head-wide', right_panel_width > 1000);\n            this.main_panel.setCustomCss({\n                width: panel_width,\n            });\n            this.left_panel.setCustomCss({\n                width: left_panel_width,\n            });\n            this.right_panel.setCustomCss({\n                width: right_panel_width,\n            });\n            this.right_contact_panel.setCustomCss(right_contact_panel_styles);\n            this.chat_bottom.setCustomCss({\n                width: chat_bottom_panel_width,\n            });\n            this.roster_view.setCustomCss({width: roster_width});\n        };\n\n        this.on(\"update_layout\", this.updateLayout, this);\n\n        this.body.addScreen('blank', {});\n\n        this.body.addScreen('login', {\n            login: { xmpp_login: null }\n        });\n\n        this.body.addScreen('settings', {\n            blur_overlay: null,\n            toolbar: null,\n            main: {\n                wide: { settings: null },\n                placeholders: null\n            },\n            roster: null\n        });\n\n        this.body.addScreen('add_account', {\n            blur_overlay: null,\n            toolbar: null,\n            login: null\n        });\n\n        this.body.addScreen('about', {\n            blur_overlay: null,\n            toolbar: null,\n            main: {\n                wide: { about: null },\n                placeholders: null\n            },\n            roster: null\n        });\n\n        let path_acc_settings_left = new this.ViewPath('account.settings_left'),\n            path_acc_settings_right = new this.ViewPath('account.settings_right'),\n            path_acc_vcard_edit = new this.ViewPath('account.vcard_edit');\n\n        this.body.addScreen('account_settings', {\n            blur_overlay: null,\n            toolbar: null,\n            main: {\n                wide: {\n                    account_settings: {\n                        left: path_acc_settings_left,\n                        right: path_acc_settings_right\n                    }\n                },\n                placeholders: null\n            },\n            roster: null\n        });\n\n        this.account_settings.patchTree = function (tree, options) {\n            if (options.right === 'vcard_edit') {\n                return {\n                    left: path_acc_settings_left,\n                    right: path_acc_vcard_edit\n                };\n            }\n        };\n\n\n        let path_chat_head = new this.ViewPath('chat_item.content.head'),\n            path_chat_body = new this.ViewPath('chat_item.content'),\n            path_chat_bottom = new this.ViewPath('chat_item.content.bottom'),\n            path_group_invitation = new this.ViewPath('contact.invitation'),\n            path_enable_view = new this.ViewPath('omemo_item.account.omemo_enable_view'),\n            path_contact_details = new this.ViewPath('contact.details_view'),\n            path_contact_details_right = new this.ViewPath('contact.details_view_right'),\n            path_contact_details_right_encrypted = new this.ViewPath('contact.details_view_right_encrypted'),\n            path_participant_messages = new this.ViewPath('model.messages_view'),\n            path_details_participants = new this.ViewPath('contact.details_view.participants');\n\n        this.body.addScreen('contacts', {\n            blur_overlay: null,\n            toolbar: null,\n            main: {\n                left: { contacts: null },\n                right: { contact_placeholder: null },\n                right_contact: {},\n                placeholders: null\n            },\n            roster: null\n        });\n\n        this.body.addScreen('search', {\n            blur_overlay: null,\n            toolbar: null,\n            main: {\n                wide: { discovering_main: null},\n                placeholders: null\n            },\n            roster: null\n        });\n\n        this.body.addScreen('mentions', {\n            blur_overlay: null,\n            toolbar: null,\n            main: {\n                left: { mentions: null },\n                right: { mentions_placeholder: null },\n                right_contact: {},\n                placeholders: null\n            },\n            roster: null\n        });\n\n        this.body.addScreen('all-chats', {\n            blur_overlay: null,\n            toolbar: null,\n            main: {\n                left: { chats: null },\n                right: { chat_placeholder: null },\n                right_contact: {},\n                placeholders: null\n            },\n            roster: null\n        });\n\n\n        this.right_panel.patchTree = function (tree, options) {\n            if (options.right === undefined)\n                return;\n            if ((options.right === 'message_context') || (options.right === 'participant_messages') || (options.right === 'searched_messages')) {\n                return {\n                    chat_head: path_chat_head,\n                    chat_body: path_participant_messages,\n                    chat_bottom: path_chat_bottom\n                };\n            }\n            if (options.right === 'group_invitation') {\n                return { details: path_group_invitation };\n            }\n            if (options.right === 'contact_details') {\n                return { details: path_contact_details };\n            }\n            if (options.details_content === 'participants')\n                return { details_content: path_details_participants };\n            if (options.chat_item) {\n                return {\n                    chat_head: path_chat_head,\n                    chat_body: path_chat_body,\n                    chat_bottom: path_chat_bottom\n                };\n            }\n            if (options.right === 'enable_encryption' || options.omemo_item) {\n                return { details: path_enable_view };\n            }\n        };\n\n\n        this.right_contact_panel.patchTree = function (tree, options) {\n            if (options.right_contact === undefined)\n                return;\n            if (options.right_contact === 'contact_details') {\n                return { details: path_contact_details_right };\n            }\n            if (options.right_contact === 'contact_details_encrypted') {\n                return { details: path_contact_details_right_encrypted };\n            }\n            if (options.details_content === 'participants')\n                return { details_content: path_details_participants };\n        };\n\n        this.body.setScreen('blank');\n\n        // initial synchronization\n        if (this.api_account) {\n            this.api_account.once(\"settings_result\", function (result) {\n                if (result === null && !this.accounts.length) {\n                    this.body.setScreen('login');\n                } else if (this.body.isScreen('blank')) {\n                    this.body.setScreen('all-chats');\n                }\n            }, this);\n\n            this.api_account.ready.then(this.api_account.start.bind(this.api_account));\n        } else {\n            if (!this.accounts.length)\n                this.body.setScreen('login');\n            else if (this.body.isScreen('blank'))\n                this.body.setScreen('all-chats');\n            xabber.trigger(\"bind_xmpp_accounts\");\n        }\n\n    }, xabber);\n\n    return xabber;\n  };\n}).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack://xabber.web/./src/ui.js?")},"./src/utils/emoji.js":(module,exports,__webpack_require__)=>{eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"), __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, _) {\n\n    var raw_data = {\n        "smiles_and_people": [{code:0x1f600,x:9,y:3},{code:0x1f603,x:12,y:3},{code:0x1f604,x:13,y:3},{code:0x1f601,x:10,y:3},{code:0x1f606,x:1,y:4},{code:0x1f605,x:0,y:4},{code:0x1f923,x:6,y:10},{code:0x1f602,x:11,y:3},{code:0x1f642,x:5,y:8},{code:0x1f643,x:6,y:8},{code:0x1f609,x:4,y:4},{code:0x1f60a,x:5,y:4},{code:0x1f607,x:2,y:4},{code:0x1f60d,x:8,y:4},{code:0x1f929,x:12,y:10},{code:0x1f617,x:4,y:5},{code:0x263a,x:14,y:5},{code:0x1f61a,x:7,y:5},{code:0x1f619,x:6,y:5},{code:0x1f60b,x:6,y:4},{code:0x1f61b,x:8,y:5},{code:0x1f61c,x:9,y:5},{code:0x1f92a,x:13,y:10},{code:0x1f61d,x:10,y:5},{code:0x1f911,x:10,y:9},{code:0x1f917,x:2,y:10},{code:0x1f92d,x:2,y:11},{code:0x1f92b,x:0,y:11},{code:0x1f914,x:13,y:9},{code:0x1f910,x:9,y:9},{code:0x1f928,x:11,y:10},{code:0x1f610,x:11,y:4},{code:0x1f611,x:12,y:4},{code:0x1f636,x:7,y:7},{code:0x1f60f,x:10,y:4},{code:0x1f612,x:13,y:4},{code:0x1f644,x:7,y:8},{code:0x1f62c,x:11,y:6},{code:0x1f925,x:8,y:10},{code:0x1f60c,x:7,y:4},{code:0x1f614,x:1,y:5},{code:0x1f62a,x:9,y:6},{code:0x1f924,x:7,y:10},{code:0x1f634,x:5,y:7},{code:0x1f637,x:8,y:7},{code:0x1f912,x:11,y:9},{code:0x1f915,x:0,y:10},{code:0x1f922,x:5,y:10},{code:0x1f92e,x:3,y:11},{code:0x1f927,x:10,y:10},{code:0x1f975,x:7,y:12},{code:0x1f976,x:8,y:12},{code:0x1f974,x:6,y:12},{code:0x1f635,x:6,y:7},{code:0x1f92f,x:4,y:11},{code:0x1f920,x:3,y:10},{code:0x1f973,x:5,y:12},{code:0x1f60e,x:9,y:4},{code:0x1f913,x:12,y:9},{code:0x1f9d0,x:1,y:13},{code:0x1f615,x:2,y:5},{code:0x1f61f,x:12,y:5},{code:0x1f641,x:4,y:8},{code:0x2639,x:14,y:4},{code:0x1f62e,x:13,y:6},{code:0x1f62f,x:0,y:7},{code:0x1f632,x:3,y:7},{code:0x1f633,x:4,y:7},{code:0x1f97a,x:9,y:12},{code:0x1f626,x:5,y:6},{code:0x1f627,x:6,y:6},{code:0x1f628,x:7,y:6},{code:0x1f630,x:1,y:7},{code:0x1f625,x:4,y:6},{code:0x1f622,x:1,y:6},{code:0x1f62d,x:12,y:6},{code:0x1f631,x:2,y:7},{code:0x1f616,x:3,y:5},{code:0x1f623,x:2,y:6},{code:0x1f61e,x:11,y:5},{code:0x1f613,x:0,y:5},{code:0x1f629,x:8,y:6},{code:0x1f62b,x:10,y:6},{code:0x1f624,x:3,y:6},{code:0x1f621,x:0,y:6},{code:0x1f620,x:13,y:5},{code:0x1f92c,x:1,y:11},{code:0x1f608,x:3,y:4},{code:0x1f47f,x:9,y:2},{code:0x1f480,x:10,y:2},{code:0x2620,x:14,y:3},{code:0x1f4a9,x:4,y:3},{code:0x1f921,x:4,y:10},{code:0x1f479,x:3,y:2},{code:0x1f47a,x:4,y:2},{code:0x1f47b,x:5,y:2},{code:0x1f47d,x:7,y:2},{code:0x1f47e,x:8,y:2},{code:0x1f916,x:1,y:10},{code:0x1f63a,x:11,y:7},{code:0x1f638,x:9,y:7},{code:0x1f639,x:10,y:7},{code:0x1f63b,x:12,y:7},{code:0x1f63c,x:13,y:7},{code:0x1f63d,x:0,y:8},{code:0x1f640,x:3,y:8},{code:0x1f63f,x:2,y:8},{code:0x1f63e,x:1,y:8},{code:0x1f648,x:11,y:8},{code:0x1f649,x:12,y:8},{code:0x1f64a,x:13,y:8},{code:0x1f476,x:0,y:2},{code:0x1f9d2,x:3,y:13},{code:0x1f466,x:12,y:0},{code:0x1f467,x:13,y:0},{code:0x1f471,x:9,y:1},{code:0x1f9d4,x:5,y:13},{code:0x1f9d3,x:4,y:13},{code:0x1f474,x:12,y:1},{code:0x1f475,x:13,y:1},{code:0x1f64d,x:1,y:9},{code:0x1f64e,x:2,y:9},{code:0x1f645,x:8,y:8},{code:0x1f646,x:9,y:8},{code:0x1f481,x:11,y:2},{code:0x1f64b,x:0,y:9},{code:0x1f647,x:10,y:8},{code:0x1f926,x:9,y:10},{code:0x1f937,x:10,y:11},{code:0x1f46e,x:6,y:1},{code:0x1f575,x:6,y:3},{code:0x1f482,x:12,y:2},{code:0x1f477,x:1,y:2},{code:0x1f934,x:7,y:11},{code:0x1f478,x:2,y:2},{code:0x1f473,x:11,y:1},{code:0x1f472,x:10,y:1},{code:0x1f9d5,x:6,y:13},{code:0x1f935,x:8,y:11},{code:0x1f470,x:8,y:1},{code:0x1f930,x:5,y:11},{code:0x1f931,x:6,y:11},{code:0x1f47c,x:6,y:2},{code:0x1f385,x:0,y:0},{code:0x1f936,x:9,y:11},{code:0x1f9b8,x:10,y:12},{code:0x1f9b9,x:11,y:12},{code:0x1f9d9,x:10,y:13},{code:0x1f9da,x:11,y:13},{code:0x1f9db,x:12,y:13},{code:0x1f9dc,x:13,y:13},{code:0x1f9dd,x:14,y:0},{code:0x1f9de,x:14,y:1},{code:0x1f9df,x:14,y:2},{code:0x1f486,x:0,y:3},{code:0x1f487,x:1,y:3},{code:0x1f6b6,x:6,y:9},{code:0x1f3c3,x:2,y:0},{code:0x1f483,x:13,y:2},{code:0x1f57a,x:7,y:3},{code:0x1f574,x:5,y:3},{code:0x1f46f,x:7,y:1},{code:0x1f9d6,x:7,y:13},{code:0x1f9d7,x:8,y:13},{code:0x1f93a,x:13,y:11},{code:0x1f3c7,x:4,y:0},{code:0x26f7,x:14,y:6},{code:0x1f3c2,x:1,y:0},{code:0x1f3cc,x:7,y:0},{code:0x1f3c4,x:3,y:0},{code:0x1f6a3,x:3,y:9},{code:0x1f3ca,x:5,y:0},{code:0x26f9,x:14,y:7},{code:0x1f3cb,x:6,y:0},{code:0x1f6b4,x:4,y:9},{code:0x1f6b5,x:5,y:9},{code:0x1f938,x:11,y:11},{code:0x1f93c,x:0,y:12},{code:0x1f93d,x:1,y:12},{code:0x1f93e,x:2,y:12},{code:0x1f939,x:12,y:11},{code:0x1f9d8,x:9,y:13},{code:0x1f6c0,x:7,y:9},{code:0x1f6cc,x:8,y:9},{code:0x1f46d,x:5,y:1},{code:0x1f46b,x:3,y:1},{code:0x1f46c,x:4,y:1},{code:0x1f48f,x:2,y:3},{code:0x1f491,x:3,y:3},{code:0x1f46a,x:2,y:1},{code:0x1f5e3,x:8,y:3},{code:0x1f464,x:10,y:0},{code:0x1f465,x:11,y:0},{code:0x1f463,x:9,y:0}],\n        "body_and_clothes": [{code:0x1f44b,x:3,y:1},{code:0x1f91a,x:10,y:7},{code:0x1f590,x:7,y:6},{code:0x270b,x:9,y:10},{code:0x1f596,x:9,y:6},{code:0x1f44c,x:4,y:1},{code:0x270c,x:10,y:10},{code:0x1f91e,x:3,y:8},{code:0x1f91f,x:4,y:8},{code:0x1f918,x:8,y:7},{code:0x1f919,x:9,y:7},{code:0x1f448,x:0,y:1},{code:0x1f449,x:1,y:1},{code:0x1f446,x:9,y:0},{code:0x1f595,x:8,y:6},{code:0x1f447,x:10,y:0},{code:0x261d,x:6,y:10},{code:0x1f44d,x:5,y:1},{code:0x1f44e,x:6,y:1},{code:0x270a,x:8,y:10},{code:0x1f44a,x:2,y:1},{code:0x1f91b,x:0,y:8},{code:0x1f91c,x:1,y:8},{code:0x1f44f,x:7,y:1},{code:0x1f64c,x:2,y:7},{code:0x1f450,x:8,y:1},{code:0x1f932,x:5,y:8},{code:0x1f91d,x:2,y:8},{code:0x1f64f,x:3,y:7},{code:0x270d,x:11,y:0},{code:0x1f485,x:6,y:3},{code:0x1f933,x:6,y:8},{code:0x1f4aa,x:9,y:5},{code:0x1f9b5,x:2,y:9},{code:0x1f9b6,x:3,y:9},{code:0x1f442,x:5,y:0},{code:0x1f443,x:6,y:0},{code:0x1f9e0,x:6,y:9},{code:0x1f9b7,x:4,y:9},{code:0x1f9b4,x:1,y:9},{code:0x1f440,x:3,y:0},{code:0x1f445,x:8,y:0},{code:0x1f444,x:7,y:0},{code:0x1f48b,x:7,y:3},{code:0x1f48c,x:8,y:3},{code:0x1f498,x:5,y:4},{code:0x1f49d,x:10,y:4},{code:0x1f496,x:3,y:4},{code:0x1f497,x:4,y:4},{code:0x1f493,x:0,y:4},{code:0x1f49e,x:0,y:5},{code:0x1f495,x:2,y:4},{code:0x1f49f,x:1,y:5},{code:0x2763,x:11,y:1},{code:0x1f494,x:1,y:4},{code:0x2764,x:11,y:2},{code:0x1f9e1,x:7,y:9},{code:0x1f49b,x:8,y:4},{code:0x1f49a,x:7,y:4},{code:0x1f499,x:6,y:4},{code:0x1f49c,x:9,y:4},{code:0x1f5a4,x:10,y:6},{code:0x1f4af,x:3,y:6},{code:0x1f4a2,x:2,y:5},{code:0x1f4a5,x:5,y:5},{code:0x1f4ab,x:10,y:5},{code:0x1f4a6,x:6,y:5},{code:0x1f4a8,x:8,y:5},{code:0x1f573,x:5,y:6},{code:0x1f4a3,x:3,y:5},{code:0x1f4ac,x:0,y:6},{code:0x1f441,x:4,y:0},{code:0x1f5e8,x:0,y:7},{code:0x1f5ef,x:1,y:7},{code:0x1f4ad,x:1,y:6},{code:0x1f4a4,x:4,y:5},{code:0x1f453,x:0,y:2},{code:0x1f576,x:6,y:6},{code:0x1f97d,x:9,y:8},{code:0x1f97c,x:8,y:8},{code:0x1f454,x:1,y:2},{code:0x1f455,x:2,y:2},{code:0x1f456,x:3,y:2},{code:0x1f9e3,x:9,y:9},{code:0x1f9e4,x:10,y:9},{code:0x1f9e5,x:0,y:10},{code:0x1f9e6,x:1,y:10},{code:0x1f457,x:4,y:2},{code:0x1f458,x:5,y:2},{code:0x1f459,x:6,y:2},{code:0x1f45a,x:7,y:2},{code:0x1f45b,x:8,y:2},{code:0x1f45c,x:9,y:2},{code:0x1f45d,x:10,y:2},{code:0x1f6cd,x:4,y:7},{code:0x1f392,x:0,y:0},{code:0x1f45e,x:0,y:3},{code:0x1f45f,x:1,y:3},{code:0x1f97e,x:10,y:8},{code:0x1f97f,x:0,y:9},{code:0x1f460,x:2,y:3},{code:0x1f461,x:3,y:3},{code:0x1f462,x:4,y:3},{code:0x1f451,x:9,y:1},{code:0x1f452,x:10,y:1},{code:0x1f3a9,x:2,y:0},{code:0x1f393,x:1,y:0},{code:0x1f9e2,x:8,y:9},{code:0x26d1,x:7,y:10},{code:0x1f4ff,x:4,y:6},{code:0x1f484,x:5,y:3},{code:0x1f48d,x:9,y:3},{code:0x1f48e,x:10,y:3}],\n        "animals_and_nature": [{code:0x1f435,x:6,y:6},{code:0x1f412,x:4,y:3},{code:0x1f98d,x:2,y:9},{code:0x1f436,x:7,y:6},{code:0x1f415,x:7,y:3},{code:0x1f429,x:6,y:5},{code:0x1f43a,x:0,y:7},{code:0x1f98a,x:10,y:8},{code:0x1f99d,x:7,y:10},{code:0x1f408,x:5,y:2},{code:0x1f981,x:1,y:8},{code:0x1f42f,x:1,y:6},{code:0x1f405,x:2,y:2},{code:0x1f406,x:3,y:2},{code:0x1f434,x:5,y:6},{code:0x1f40e,x:0,y:3},{code:0x1f984,x:4,y:8},{code:0x1f993,x:8,y:9},{code:0x1f98c,x:1,y:9},{code:0x1f42e,x:0,y:6},{code:0x1f402,x:10,y:1},{code:0x1f403,x:0,y:2},{code:0x1f404,x:1,y:2},{code:0x1f437,x:8,y:6},{code:0x1f416,x:9,y:3},{code:0x1f417,x:10,y:3},{code:0x1f43d,x:3,y:7},{code:0x1f40f,x:1,y:3},{code:0x1f411,x:3,y:3},{code:0x1f410,x:2,y:3},{code:0x1f42a,x:7,y:5},{code:0x1f42b,x:8,y:5},{code:0x1f999,x:3,y:10},{code:0x1f992,x:7,y:9},{code:0x1f418,x:0,y:4},{code:0x1f98f,x:4,y:9},{code:0x1f99b,x:5,y:10},{code:0x1f42d,x:10,y:5},{code:0x1f401,x:9,y:1},{code:0x1f400,x:8,y:1},{code:0x1f439,x:10,y:6},{code:0x1f430,x:2,y:6},{code:0x1f407,x:4,y:2},{code:0x1f43f,x:5,y:7},{code:0x1f994,x:9,y:9},{code:0x1f987,x:7,y:8},{code:0x1f43b,x:1,y:7},{code:0x1f428,x:5,y:5},{code:0x1f43c,x:2,y:7},{code:0x1f998,x:2,y:10},{code:0x1f9a1,x:11,y:0},{code:0x1f43e,x:4,y:7},{code:0x1f983,x:3,y:8},{code:0x1f414,x:6,y:3},{code:0x1f413,x:5,y:3},{code:0x1f423,x:0,y:5},{code:0x1f424,x:1,y:5},{code:0x1f425,x:2,y:5},{code:0x1f426,x:3,y:5},{code:0x1f427,x:4,y:5},{code:0x1f54a,x:7,y:7},{code:0x1f985,x:5,y:8},{code:0x1f986,x:6,y:8},{code:0x1f9a2,x:11,y:1},{code:0x1f989,x:9,y:8},{code:0x1f99a,x:4,y:10},{code:0x1f99c,x:6,y:10},{code:0x1f438,x:9,y:6},{code:0x1f40a,x:7,y:2},{code:0x1f422,x:10,y:4},{code:0x1f98e,x:3,y:9},{code:0x1f40d,x:10,y:2},{code:0x1f432,x:3,y:6},{code:0x1f409,x:6,y:2},{code:0x1f995,x:10,y:9},{code:0x1f996,x:0,y:10},{code:0x1f433,x:4,y:6},{code:0x1f40b,x:8,y:2},{code:0x1f42c,x:9,y:5},{code:0x1f41f,x:7,y:4},{code:0x1f420,x:8,y:4},{code:0x1f421,x:9,y:4},{code:0x1f988,x:8,y:8},{code:0x1f419,x:1,y:4},{code:0x1f41a,x:2,y:4},{code:0x1f40c,x:9,y:2},{code:0x1f98b,x:0,y:9},{code:0x1f41b,x:3,y:4},{code:0x1f41c,x:4,y:4},{code:0x1f41d,x:5,y:4},{code:0x1f41e,x:6,y:4},{code:0x1f997,x:1,y:10},{code:0x1f577,x:8,y:7},{code:0x1f578,x:9,y:7},{code:0x1f982,x:2,y:8},{code:0x1f99f,x:9,y:10},{code:0x1f9a0,x:10,y:10},{code:0x1f490,x:6,y:7},{code:0x1f338,x:6,y:0},{code:0x1f3f5,x:7,y:1},{code:0x1f339,x:7,y:0},{code:0x1f940,x:10,y:7},{code:0x1f33a,x:8,y:0},{code:0x1f33b,x:9,y:0},{code:0x1f33c,x:10,y:0},{code:0x1f337,x:5,y:0},{code:0x1f331,x:0,y:0},{code:0x1f344,x:6,y:1},{code:0x1f332,x:1,y:0},{code:0x1f333,x:2,y:0},{code:0x1f334,x:3,y:0},{code:0x1f335,x:4,y:0},{code:0x1f33e,x:0,y:1},{code:0x1f33f,x:1,y:1},{code:0x2618,x:11,y:8},{code:0x1f340,x:2,y:1},{code:0x1f341,x:3,y:1},{code:0x1f342,x:4,y:1},{code:0x1f343,x:5,y:1},{code:0x1f980,x:0,y:8},{code:0x1f99e,x:8,y:10},{code:0x1f990,x:5,y:9},{code:0x1f991,x:6,y:9}],\n        "food_and_drinks": [{code:0x1f347,x:8,y:0},{code:0x1f348,x:9,y:0},{code:0x1f349,x:0,y:1},{code:0x1f34a,x:1,y:1},{code:0x1f34b,x:2,y:1},{code:0x1f34c,x:3,y:1},{code:0x1f34d,x:4,y:1},{code:0x1f96d,x:10,y:0},{code:0x1f34e,x:5,y:1},{code:0x1f34f,x:6,y:1},{code:0x1f350,x:7,y:1},{code:0x1f351,x:8,y:1},{code:0x1f352,x:9,y:1},{code:0x1f353,x:0,y:2},{code:0x1f95d,x:4,y:8},{code:0x1f345,x:6,y:0},{code:0x1f965,x:2,y:9},{code:0x1f951,x:2,y:7},{code:0x1f346,x:7,y:0},{code:0x1f954,x:5,y:7},{code:0x1f955,x:6,y:7},{code:0x1f33d,x:5,y:0},{code:0x1f336,x:4,y:0},{code:0x1f952,x:3,y:7},{code:0x1f96c,x:9,y:9},{code:0x1f966,x:3,y:9},{code:0x1f95c,x:3,y:8},{code:0x1f330,x:3,y:0},{code:0x1f35e,x:1,y:3},{code:0x1f950,x:1,y:7},{code:0x1f956,x:7,y:7},{code:0x1f968,x:5,y:9},{code:0x1f96f,x:10,y:2},{code:0x1f95e,x:5,y:8},{code:0x1f9c0,x:10,y:3},{code:0x1f356,x:3,y:2},{code:0x1f357,x:4,y:2},{code:0x1f969,x:6,y:9},{code:0x1f953,x:4,y:7},{code:0x1f354,x:1,y:2},{code:0x1f35f,x:2,y:3},{code:0x1f355,x:2,y:2},{code:0x1f32d,x:0,y:0},{code:0x1f96a,x:7,y:9},{code:0x1f32e,x:1,y:0},{code:0x1f32f,x:2,y:0},{code:0x1f959,x:0,y:8},{code:0x1f95a,x:1,y:8},{code:0x1f373,x:2,y:5},{code:0x1f958,x:9,y:7},{code:0x1f372,x:1,y:5},{code:0x1f963,x:0,y:9},{code:0x1f957,x:8,y:7},{code:0x1f37f,x:4,y:6},{code:0x1f9c2,x:10,y:5},{code:0x1f96b,x:8,y:9},{code:0x1f371,x:0,y:5},{code:0x1f358,x:5,y:2},{code:0x1f359,x:6,y:2},{code:0x1f35a,x:7,y:2},{code:0x1f35b,x:8,y:2},{code:0x1f35c,x:9,y:2},{code:0x1f35d,x:0,y:3},{code:0x1f360,x:3,y:3},{code:0x1f362,x:5,y:3},{code:0x1f363,x:6,y:3},{code:0x1f364,x:7,y:3},{code:0x1f365,x:8,y:3},{code:0x1f96e,x:10,y:1},{code:0x1f361,x:4,y:3},{code:0x1f95f,x:6,y:8},{code:0x1f960,x:7,y:8},{code:0x1f961,x:8,y:8},{code:0x1f366,x:9,y:3},{code:0x1f367,x:0,y:4},{code:0x1f368,x:1,y:4},{code:0x1f369,x:2,y:4},{code:0x1f36a,x:3,y:4},{code:0x1f382,x:5,y:6},{code:0x1f370,x:9,y:4},{code:0x1f9c1,x:10,y:4},{code:0x1f967,x:4,y:9},{code:0x1f36b,x:4,y:4},{code:0x1f36c,x:5,y:4},{code:0x1f36d,x:6,y:4},{code:0x1f36e,x:7,y:4},{code:0x1f36f,x:8,y:4},{code:0x1f37c,x:1,y:6},{code:0x1f95b,x:2,y:8},{code:0x2615,x:4,y:10},{code:0x1f375,x:4,y:5},{code:0x1f376,x:5,y:5},{code:0x1f37e,x:3,y:6},{code:0x1f377,x:6,y:5},{code:0x1f378,x:7,y:5},{code:0x1f379,x:8,y:5},{code:0x1f37a,x:9,y:5},{code:0x1f37b,x:0,y:6},{code:0x1f942,x:8,y:6},{code:0x1f943,x:9,y:6},{code:0x1f964,x:1,y:9},{code:0x1f962,x:9,y:8},{code:0x1f37d,x:2,y:6},{code:0x1f374,x:3,y:5},{code:0x1f944,x:0,y:7},{code:0x1f52a,x:7,y:6},{code:0x1f3fa,x:6,y:6}],\n        "travel_and_places": [{code:0x1f30d,x:13,y:0},{code:0x1f30e,x:0,y:1},{code:0x1f30f,x:1,y:1},{code:0x1f310,x:2,y:1},{code:0x1f5fa,x:0,y:8},{code:0x1f5fe,x:4,y:8},{code:0x1f9ed,x:12,y:12},{code:0x1f3d4,x:9,y:3},{code:0x26f0,x:14,y:8},{code:0x1f30b,x:11,y:0},{code:0x1f5fb,x:1,y:8},{code:0x1f3d5,x:10,y:3},{code:0x1f3d6,x:11,y:3},{code:0x1f3dc,x:3,y:4},{code:0x1f3dd,x:4,y:4},{code:0x1f3de,x:5,y:4},{code:0x1f3df,x:6,y:4},{code:0x1f3db,x:2,y:4},{code:0x1f3d7,x:12,y:3},{code:0x1f9f1,x:13,y:12},{code:0x1f3d8,x:13,y:3},{code:0x1f3da,x:1,y:4},{code:0x1f3e0,x:7,y:4},{code:0x1f3e1,x:8,y:4},{code:0x1f3e2,x:9,y:4},{code:0x1f3e3,x:10,y:4},{code:0x1f3e4,x:11,y:4},{code:0x1f3e5,x:12,y:4},{code:0x1f3e6,x:13,y:4},{code:0x1f3e8,x:0,y:5},{code:0x1f3e9,x:1,y:5},{code:0x1f3ea,x:2,y:5},{code:0x1f3eb,x:3,y:5},{code:0x1f3ec,x:4,y:5},{code:0x1f3ed,x:5,y:5},{code:0x1f3ef,x:6,y:5},{code:0x1f3f0,x:7,y:5},{code:0x1f492,x:9,y:5},{code:0x1f5fc,x:2,y:8},{code:0x1f5fd,x:3,y:8},{code:0x26ea,x:14,y:7},{code:0x1f54c,x:0,y:6},{code:0x1f54d,x:1,y:6},{code:0x26e9,x:14,y:6},{code:0x1f54b,x:13,y:5},{code:0x26f2,x:14,y:10},{code:0x26fa,x:0,y:14},{code:0x1f301,x:1,y:0},{code:0x1f303,x:3,y:0},{code:0x1f3d9,x:0,y:4},{code:0x1f304,x:4,y:0},{code:0x1f305,x:5,y:0},{code:0x1f306,x:6,y:0},{code:0x1f307,x:7,y:0},{code:0x1f309,x:9,y:0},{code:0x2668,x:14,y:0},{code:0x1f3a0,x:1,y:3},{code:0x1f3a1,x:2,y:3},{code:0x1f3a2,x:3,y:3},{code:0x1f488,x:8,y:5},{code:0x1f3aa,x:5,y:3},{code:0x1f682,x:8,y:8},{code:0x1f683,x:9,y:8},{code:0x1f684,x:10,y:8},{code:0x1f685,x:11,y:8},{code:0x1f686,x:12,y:8},{code:0x1f687,x:13,y:8},{code:0x1f688,x:0,y:9},{code:0x1f689,x:1,y:9},{code:0x1f68a,x:2,y:9},{code:0x1f69d,x:7,y:10},{code:0x1f69e,x:8,y:10},{code:0x1f68b,x:3,y:9},{code:0x1f68c,x:4,y:9},{code:0x1f68d,x:5,y:9},{code:0x1f68e,x:6,y:9},{code:0x1f690,x:8,y:9},{code:0x1f691,x:9,y:9},{code:0x1f692,x:10,y:9},{code:0x1f693,x:11,y:9},{code:0x1f694,x:12,y:9},{code:0x1f695,x:13,y:9},{code:0x1f696,x:0,y:10},{code:0x1f697,x:1,y:10},{code:0x1f698,x:2,y:10},{code:0x1f699,x:3,y:10},{code:0x1f69a,x:4,y:10},{code:0x1f69b,x:5,y:10},{code:0x1f69c,x:6,y:10},{code:0x1f3ce,x:8,y:3},{code:0x1f3cd,x:7,y:3},{code:0x1f6f5,x:4,y:12},{code:0x1f6b2,x:4,y:11},{code:0x1f6f4,x:3,y:12},{code:0x1f6f9,x:7,y:12},{code:0x1f68f,x:7,y:9},{code:0x1f6e3,x:9,y:11},{code:0x1f6e4,x:10,y:11},{code:0x1f6e2,x:8,y:11},{code:0x26fd,x:1,y:14},{code:0x1f6a8,x:3,y:11},{code:0x1f6a5,x:0,y:11},{code:0x1f6a6,x:1,y:11},{code:0x1f6d1,x:6,y:11},{code:0x1f6a7,x:2,y:11},{code:0x2693,x:14,y:1},{code:0x26f5,x:14,y:13},{code:0x1f6f6,x:5,y:12},{code:0x1f3a3,x:4,y:3},{code:0x1f6a4,x:13,y:10},{code:0x1f6f3,x:2,y:12},{code:0x26f4,x:14,y:12},{code:0x1f6e5,x:11,y:11},{code:0x1f6a2,x:12,y:10},{code:0x2708,x:2,y:14},{code:0x1f6e9,x:12,y:11},{code:0x1f6eb,x:13,y:11},{code:0x1f6ec,x:0,y:12},{code:0x1f4ba,x:11,y:5},{code:0x1f681,x:7,y:8},{code:0x1f69f,x:9,y:10},{code:0x1f6a0,x:10,y:10},{code:0x1f6a1,x:11,y:10},{code:0x1f6f0,x:1,y:12},{code:0x1f680,x:6,y:8},{code:0x1f6f8,x:6,y:12},{code:0x1f6ce,x:5,y:11},{code:0x1f9f3,x:0,y:13},{code:0x231b,x:3,y:13},{code:0x23f3,x:7,y:13},{code:0x231a,x:2,y:13},{code:0x23f0,x:4,y:13},{code:0x23f1,x:5,y:13},{code:0x23f2,x:6,y:13},{code:0x1f570,x:12,y:7},{code:0x1f55b,x:13,y:6},{code:0x1f567,x:11,y:7},{code:0x1f550,x:2,y:6},{code:0x1f55c,x:0,y:7},{code:0x1f551,x:3,y:6},{code:0x1f55d,x:1,y:7},{code:0x1f552,x:4,y:6},{code:0x1f55e,x:2,y:7},{code:0x1f553,x:5,y:6},{code:0x1f55f,x:3,y:7},{code:0x1f554,x:6,y:6},{code:0x1f560,x:4,y:7},{code:0x1f555,x:7,y:6},{code:0x1f561,x:5,y:7},{code:0x1f556,x:8,y:6},{code:0x1f562,x:6,y:7},{code:0x1f557,x:9,y:6},{code:0x1f563,x:7,y:7},{code:0x1f558,x:10,y:6},{code:0x1f564,x:8,y:7},{code:0x1f559,x:11,y:6},{code:0x1f565,x:9,y:7},{code:0x1f55a,x:12,y:6},{code:0x1f566,x:10,y:7},{code:0x1f311,x:3,y:1},{code:0x1f312,x:4,y:1},{code:0x1f313,x:5,y:1},{code:0x1f314,x:6,y:1},{code:0x1f315,x:7,y:1},{code:0x1f316,x:8,y:1},{code:0x1f317,x:9,y:1},{code:0x1f318,x:10,y:1},{code:0x1f319,x:11,y:1},{code:0x1f31a,x:12,y:1},{code:0x1f31b,x:13,y:1},{code:0x1f31c,x:0,y:2},{code:0x1f321,x:5,y:2},{code:0x2600,x:8,y:13},{code:0x1f31d,x:1,y:2},{code:0x1f31e,x:2,y:2},{code:0x2b50,x:4,y:14},{code:0x1f31f,x:3,y:2},{code:0x1f320,x:4,y:2},{code:0x1f30c,x:12,y:0},{code:0x2601,x:9,y:13},{code:0x26c5,x:14,y:4},{code:0x26c8,x:14,y:5},{code:0x1f324,x:6,y:2},{code:0x1f325,x:7,y:2},{code:0x1f326,x:8,y:2},{code:0x1f327,x:9,y:2},{code:0x1f328,x:10,y:2},{code:0x1f329,x:11,y:2},{code:0x1f32a,x:12,y:2},{code:0x1f32b,x:13,y:2},{code:0x1f32c,x:0,y:3},{code:0x1f300,x:0,y:0},{code:0x1f308,x:8,y:0},{code:0x1f302,x:2,y:0},{code:0x2602,x:10,y:13},{code:0x2614,x:13,y:13},{code:0x26f1,x:14,y:9},{code:0x26a1,x:14,y:2},{code:0x2744,x:3,y:14},{code:0x2603,x:11,y:13},{code:0x26c4,x:14,y:3},{code:0x2604,x:12,y:13},{code:0x1f525,x:12,y:5},{code:0x1f4a7,x:10,y:5},{code:0x1f30a,x:10,y:0}],\n        "events": [{code:0x1f383,x:4,y:0},{code:0x1f384,x:5,y:0},{code:0x1f386,x:6,y:0},{code:0x1f387,x:7,y:0},{code:0x1f9e8,x:5,y:6},{code:0x2728,x:9,y:3},{code:0x1f388,x:8,y:0},{code:0x1f389,x:0,y:1},{code:0x1f38a,x:1,y:1},{code:0x1f38b,x:2,y:1},{code:0x1f38d,x:3,y:1},{code:0x1f38e,x:4,y:1},{code:0x1f38f,x:5,y:1},{code:0x1f390,x:6,y:1},{code:0x1f391,x:7,y:1},{code:0x1f9e7,x:4,y:6},{code:0x1f380,x:2,y:0},{code:0x1f381,x:3,y:0},{code:0x1f397,x:0,y:2},{code:0x1f39f,x:1,y:2},{code:0x1f3ab,x:3,y:2},{code:0x1f396,x:8,y:1},{code:0x1f3c6,x:7,y:3},{code:0x1f3c5,x:6,y:3},{code:0x1f947,x:4,y:5},{code:0x1f948,x:5,y:5},{code:0x1f949,x:6,y:5},{code:0x26bd,x:8,y:8},{code:0x26be,x:9,y:0},{code:0x1f94e,x:2,y:6},{code:0x1f3c0,x:5,y:3},{code:0x1f3d0,x:2,y:4},{code:0x1f3c8,x:8,y:3},{code:0x1f3c9,x:0,y:4},{code:0x1f3be,x:3,y:3},{code:0x1f94f,x:3,y:6},{code:0x1f3b3,x:1,y:3},{code:0x1f3cf,x:1,y:4},{code:0x1f3d1,x:3,y:4},{code:0x1f3d2,x:4,y:4},{code:0x1f94d,x:1,y:6},{code:0x1f3d3,x:5,y:4},{code:0x1f3f8,x:6,y:4},{code:0x1f94a,x:7,y:5},{code:0x1f94b,x:8,y:5},{code:0x1f945,x:3,y:5},{code:0x26f3,x:9,y:1},{code:0x26f8,x:9,y:2},{code:0x1f3bd,x:2,y:3},{code:0x1f3bf,x:4,y:3},{code:0x1f6f7,x:2,y:5},{code:0x1f94c,x:0,y:6},{code:0x1f3af,x:6,y:2},{code:0x1f3b1,x:8,y:2},{code:0x1f52e,x:8,y:4},{code:0x1f9ff,x:1,y:7},{code:0x1f3ae,x:5,y:2},{code:0x1f579,x:0,y:5},{code:0x1f3b0,x:7,y:2},{code:0x1f3b2,x:0,y:3},{code:0x1f9e9,x:6,y:6},{code:0x1f9f8,x:0,y:7},{code:0x2660,x:4,y:8},{code:0x2665,x:6,y:8},{code:0x2666,x:7,y:8},{code:0x2663,x:5,y:8},{code:0x265f,x:3,y:8},{code:0x1f0cf,x:1,y:0},{code:0x1f004,x:0,y:0},{code:0x1f3ad,x:4,y:2},{code:0x1f5bc,x:1,y:5},{code:0x1f3a8,x:2,y:2},{code:0x1f9f5,x:7,y:6},{code:0x1f9f6,x:8,y:6}],\n        "objects": [{code:0x1f507,x:1,y:7},{code:0x1f508,x:2,y:7},{code:0x1f509,x:3,y:7},{code:0x1f50a,x:4,y:7},{code:0x1f4e2,x:3,y:5},{code:0x1f4e3,x:4,y:5},{code:0x1f4ef,x:3,y:6},{code:0x1f514,x:1,y:8},{code:0x1f515,x:2,y:8},{code:0x1f3bc,x:2,y:1},{code:0x1f3b5,x:8,y:0},{code:0x1f3b6,x:9,y:0},{code:0x1f399,x:0,y:0},{code:0x1f39a,x:1,y:0},{code:0x1f39b,x:2,y:0},{code:0x1f3a4,x:4,y:0},{code:0x1f3a7,x:6,y:0},{code:0x1f4fb,x:11,y:6},{code:0x1f3b7,x:10,y:0},{code:0x1f3b8,x:11,y:0},{code:0x1f3b9,x:12,y:0},{code:0x1f3ba,x:0,y:1},{code:0x1f3bb,x:1,y:1},{code:0x1f941,x:6,y:11},{code:0x1f4f1,x:5,y:6},{code:0x1f4f2,x:6,y:6},{code:0x260e,x:13,y:3},{code:0x1f4de,x:12,y:4},{code:0x1f4df,x:0,y:5},{code:0x1f4e0,x:1,y:5},{code:0x1f50b,x:5,y:7},{code:0x1f50c,x:6,y:7},{code:0x1f4bb,x:4,y:2},{code:0x1f5a5,x:5,y:9},{code:0x1f5a8,x:6,y:9},{code:0x2328,x:13,y:2},{code:0x1f5b1,x:7,y:9},{code:0x1f5b2,x:8,y:9},{code:0x1f4bd,x:6,y:2},{code:0x1f4be,x:7,y:2},{code:0x1f4bf,x:8,y:2},{code:0x1f4c0,x:9,y:2},{code:0x1f9ee,x:2,y:12},{code:0x1f3a5,x:5,y:0},{code:0x1f39e,x:3,y:0},{code:0x1f4fd,x:0,y:7},{code:0x1f3ac,x:7,y:0},{code:0x1f4fa,x:10,y:6},{code:0x1f4f7,x:7,y:6},{code:0x1f4f8,x:8,y:6},{code:0x1f4f9,x:9,y:6},{code:0x1f4fc,x:12,y:6},{code:0x1f50d,x:7,y:7},{code:0x1f50e,x:8,y:7},{code:0x1f56f,x:12,y:8},{code:0x1f4a1,x:8,y:1},{code:0x1f526,x:5,y:8},{code:0x1f3ee,x:3,y:1},{code:0x1f4d4,x:3,y:4},{code:0x1f4d5,x:4,y:4},{code:0x1f4d6,x:5,y:4},{code:0x1f4d7,x:6,y:4},{code:0x1f4d8,x:7,y:4},{code:0x1f4d9,x:8,y:4},{code:0x1f4da,x:9,y:4},{code:0x1f4d3,x:2,y:4},{code:0x1f4d2,x:1,y:4},{code:0x1f4c3,x:12,y:2},{code:0x1f4dc,x:10,y:4},{code:0x1f4c4,x:0,y:3},{code:0x1f4f0,x:4,y:6},{code:0x1f5de,x:4,y:10},{code:0x1f4d1,x:0,y:4},{code:0x1f516,x:3,y:8},{code:0x1f3f7,x:4,y:1},{code:0x1f4b0,x:9,y:1},{code:0x1f4b4,x:11,y:1},{code:0x1f4b5,x:12,y:1},{code:0x1f4b6,x:0,y:2},{code:0x1f4b7,x:1,y:2},{code:0x1f4b8,x:2,y:2},{code:0x1f4b3,x:10,y:1},{code:0x1f9fe,x:13,y:0},{code:0x1f4b9,x:3,y:2},{code:0x2709,x:1,y:13},{code:0x1f4e7,x:8,y:5},{code:0x1f4e8,x:9,y:5},{code:0x1f4e9,x:10,y:5},{code:0x1f4e4,x:5,y:5},{code:0x1f4e5,x:6,y:5},{code:0x1f4e6,x:7,y:5},{code:0x1f4eb,x:12,y:5},{code:0x1f4ea,x:11,y:5},{code:0x1f4ec,x:0,y:6},{code:0x1f4ed,x:1,y:6},{code:0x1f4ee,x:2,y:6},{code:0x1f5f3,x:6,y:10},{code:0x270f,x:2,y:13},{code:0x2712,x:3,y:13},{code:0x1f58b,x:2,y:9},{code:0x1f58a,x:1,y:9},{code:0x1f58c,x:3,y:9},{code:0x1f58d,x:4,y:9},{code:0x1f4dd,x:11,y:4},{code:0x1f4bc,x:5,y:2},{code:0x1f4c1,x:10,y:2},{code:0x1f4c2,x:11,y:2},{code:0x1f5c2,x:9,y:9},{code:0x1f4c5,x:1,y:3},{code:0x1f4c6,x:2,y:3},{code:0x1f5d2,x:0,y:10},{code:0x1f5d3,x:1,y:10},{code:0x1f4c7,x:3,y:3},{code:0x1f4c8,x:4,y:3},{code:0x1f4c9,x:5,y:3},{code:0x1f4ca,x:6,y:3},{code:0x1f4cb,x:7,y:3},{code:0x1f4cc,x:8,y:3},{code:0x1f4cd,x:9,y:3},{code:0x1f4ce,x:10,y:3},{code:0x1f587,x:0,y:9},{code:0x1f4cf,x:11,y:3},{code:0x1f4d0,x:12,y:3},{code:0x2702,x:0,y:13},{code:0x1f5c3,x:10,y:9},{code:0x1f5c4,x:11,y:9},{code:0x1f5d1,x:12,y:9},{code:0x1f512,x:12,y:7},{code:0x1f513,x:0,y:8},{code:0x1f50f,x:9,y:7},{code:0x1f510,x:10,y:7},{code:0x1f511,x:11,y:7},{code:0x1f5dd,x:3,y:10},{code:0x1f528,x:7,y:8},{code:0x26cf,x:13,y:11},{code:0x2692,x:13,y:4},{code:0x1f6e0,x:3,y:11},{code:0x1f5e1,x:5,y:10},{code:0x2694,x:13,y:5},{code:0x1f52b,x:9,y:8},{code:0x1f3f9,x:5,y:1},{code:0x1f6e1,x:4,y:11},{code:0x1f527,x:6,y:8},{code:0x1f529,x:8,y:8},{code:0x2699,x:13,y:8},{code:0x1f5dc,x:2,y:10},{code:0x2696,x:13,y:6},{code:0x1f517,x:4,y:8},{code:0x26d3,x:13,y:12},{code:0x1f9f0,x:4,y:12},{code:0x1f9f2,x:5,y:12},{code:0x2697,x:13,y:7},{code:0x1f9ea,x:12,y:11},{code:0x1f9eb,x:0,y:12},{code:0x1f9ec,x:1,y:12},{code:0x1f52c,x:10,y:8},{code:0x1f52d,x:11,y:8},{code:0x1f4e1,x:2,y:5},{code:0x1f489,x:6,y:1},{code:0x1f48a,x:7,y:1},{code:0x1f6aa,x:8,y:10},{code:0x1f6cf,x:1,y:11},{code:0x1f6cb,x:0,y:11},{code:0x1f6bd,x:10,y:10},{code:0x1f6bf,x:11,y:10},{code:0x1f6c1,x:12,y:10},{code:0x1f9f4,x:6,y:12},{code:0x1f9f7,x:7,y:12},{code:0x1f9f9,x:8,y:12},{code:0x1f9fa,x:9,y:12},{code:0x1f9fb,x:10,y:12},{code:0x1f9fc,x:11,y:12},{code:0x1f9fd,x:12,y:12},{code:0x1f9ef,x:3,y:12},{code:0x1f6d2,x:2,y:11},{code:0x1f6ac,x:9,y:10},{code:0x26b0,x:13,y:9},{code:0x26b1,x:13,y:10},{code:0x1f5ff,x:7,y:10}],\n        "signs": [{code:0x1f6ae,x:4,y:8},{code:0x1f6b0,x:6,y:8},{code:0x267f,x:3,y:13},{code:0x1f6b9,x:11,y:8},{code:0x1f6ba,x:12,y:8},{code:0x1f6bb,x:13,y:8},{code:0x1f6bc,x:14,y:8},{code:0x1f6be,x:0,y:9},{code:0x1f6c2,x:1,y:9},{code:0x1f6c3,x:2,y:9},{code:0x1f6c4,x:3,y:9},{code:0x1f6c5,x:4,y:9},{code:0x1f3e7,x:13,y:4},{code:0x26a0,x:7,y:13},{code:0x1f6b8,x:10,y:8},{code:0x26d4,x:11,y:13},{code:0x1f6ab,x:2,y:8},{code:0x1f6b3,x:8,y:8},{code:0x1f6ad,x:3,y:8},{code:0x1f6af,x:5,y:8},{code:0x1f6b1,x:7,y:8},{code:0x1f6b7,x:9,y:8},{code:0x1f4f5,x:7,y:5},{code:0x1f51e,x:7,y:6},{code:0x2622,x:10,y:11},{code:0x2623,x:11,y:11},{code:0x2b06,x:15,y:5},{code:0x2197,x:14,y:9},{code:0x27a1,x:14,y:14},{code:0x2198,x:0,y:10},{code:0x2b07,x:15,y:6},{code:0x2199,x:1,y:10},{code:0x2b05,x:15,y:4},{code:0x2196,x:13,y:9},{code:0x2195,x:12,y:9},{code:0x2194,x:11,y:9},{code:0x21a9,x:2,y:10},{code:0x21aa,x:3,y:10},{code:0x2934,x:15,y:2},{code:0x2935,x:15,y:3},{code:0x1f503,x:12,y:5},{code:0x1f504,x:13,y:5},{code:0x1f519,x:2,y:6},{code:0x1f51a,x:3,y:6},{code:0x1f51b,x:4,y:6},{code:0x1f51c,x:5,y:6},{code:0x1f51d,x:6,y:6},{code:0x1f6d0,x:5,y:9},{code:0x269b,x:5,y:13},{code:0x1f549,x:14,y:7},{code:0x2721,x:1,y:14},{code:0x2638,x:1,y:12},{code:0x262f,x:0,y:12},{code:0x271d,x:0,y:14},{code:0x2626,x:12,y:11},{code:0x262a,x:13,y:11},{code:0x262e,x:14,y:11},{code:0x1f54e,x:0,y:8},{code:0x1f52f,x:14,y:6},{code:0x2648,x:4,y:12},{code:0x2649,x:5,y:12},{code:0x264a,x:6,y:12},{code:0x264b,x:7,y:12},{code:0x264c,x:8,y:12},{code:0x264d,x:9,y:12},{code:0x264e,x:10,y:12},{code:0x264f,x:11,y:12},{code:0x2650,x:12,y:12},{code:0x2651,x:13,y:12},{code:0x2652,x:14,y:12},{code:0x2653,x:0,y:13},{code:0x26ce,x:10,y:13},{code:0x1f500,x:9,y:5},{code:0x1f501,x:10,y:5},{code:0x1f502,x:11,y:5},{code:0x25b6,x:3,y:11},{code:0x23e9,x:5,y:10},{code:0x23ed,x:9,y:10},{code:0x23ef,x:11,y:10},{code:0x25c0,x:4,y:11},{code:0x23ea,x:6,y:10},{code:0x23ee,x:10,y:10},{code:0x1f53c,x:12,y:7},{code:0x23eb,x:7,y:10},{code:0x1f53d,x:13,y:7},{code:0x23ec,x:8,y:10},{code:0x23f8,x:12,y:10},{code:0x23f9,x:13,y:10},{code:0x23fa,x:14,y:10},{code:0x23cf,x:4,y:10},{code:0x1f3a6,x:11,y:4},{code:0x1f505,x:14,y:5},{code:0x1f506,x:0,y:6},{code:0x1f4f6,x:8,y:5},{code:0x1f4f3,x:5,y:5},{code:0x1f4f4,x:6,y:5},{code:0x2640,x:2,y:12},{code:0x2642,x:3,y:12},{code:0x2716,x:14,y:13},{code:0x2795,x:11,y:14},{code:0x2796,x:12,y:14},{code:0x2797,x:13,y:14},{code:0x267e,x:2,y:13},{code:0x203c,x:6,y:9},{code:0x2049,x:7,y:9},{code:0x2753,x:7,y:14},{code:0x2754,x:8,y:14},{code:0x2755,x:9,y:14},{code:0x2757,x:10,y:14},{code:0x3030,x:15,y:10},{code:0x1f4b1,x:2,y:5},{code:0x1f4b2,x:3,y:5},{code:0x2695,x:4,y:13},{code:0x267b,x:1,y:13},{code:0x269c,x:6,y:13},{code:0x1f531,x:1,y:7},{code:0x1f4db,x:4,y:5},{code:0x1f530,x:0,y:7},{code:0x2b55,x:15,y:9},{code:0x2705,x:12,y:13},{code:0x2611,x:9,y:11},{code:0x2714,x:13,y:13},{code:0x274c,x:5,y:14},{code:0x274e,x:6,y:14},{code:0x27b0,x:15,y:0},{code:0x27bf,x:15,y:1},{code:0x303d,x:15,y:11},{code:0x2733,x:2,y:14},{code:0x2734,x:3,y:14},{code:0x2747,x:4,y:14},{code:0x00a9,x:12,y:0},{code:0x00ae,x:13,y:0},{code:0x2122,x:9,y:9},{code:0x1f520,x:9,y:6},{code:0x1f521,x:10,y:6},{code:0x1f522,x:11,y:6},{code:0x1f523,x:12,y:6},{code:0x1f524,x:13,y:6},{code:0x1f170,x:14,y:0},{code:0x1f18e,x:3,y:1},{code:0x1f171,x:0,y:1},{code:0x1f191,x:4,y:1},{code:0x1f192,x:5,y:1},{code:0x1f193,x:6,y:1},{code:0x2139,x:10,y:9},{code:0x1f194,x:7,y:1},{code:0x24c2,x:0,y:11},{code:0x1f195,x:8,y:1},{code:0x1f196,x:9,y:1},{code:0x1f17e,x:1,y:1},{code:0x1f197,x:10,y:1},{code:0x1f17f,x:2,y:1},{code:0x1f198,x:11,y:1},{code:0x1f199,x:12,y:1},{code:0x1f19a,x:13,y:1},{code:0x1f201,x:10,y:3},{code:0x1f202,x:11,y:3},{code:0x1f237,x:4,y:4},{code:0x1f236,x:3,y:4},{code:0x1f22f,x:13,y:3},{code:0x1f250,x:8,y:4},{code:0x1f239,x:6,y:4},{code:0x1f21a,x:12,y:3},{code:0x1f232,x:14,y:3},{code:0x1f251,x:9,y:4},{code:0x1f238,x:5,y:4},{code:0x1f234,x:1,y:4},{code:0x1f233,x:0,y:4},{code:0x3297,x:15,y:12},{code:0x3299,x:15,y:13},{code:0x1f23a,x:7,y:4},{code:0x1f235,x:2,y:4},{code:0x1f534,x:4,y:7},{code:0x1f535,x:5,y:7},{code:0x26ab,x:9,y:13},{code:0x26aa,x:8,y:13},{code:0x2b1c,x:15,y:8},{code:0x25fc,x:6,y:11},{code:0x25fb,x:5,y:11},{code:0x25fe,x:8,y:11},{code:0x25fd,x:7,y:11},{code:0x25aa,x:1,y:11},{code:0x25ab,x:2,y:11},{code:0x1f536,x:6,y:7},{code:0x1f537,x:7,y:7},{code:0x1f538,x:8,y:7},{code:0x1f539,x:9,y:7},{code:0x1f53a,x:10,y:7},{code:0x1f53b,x:11,y:7},{code:0x1f4a0,x:1,y:5},{code:0x1f518,x:1,y:6},{code:0x1f533,x:3,y:7},{code:0x1f532,x:2,y:7},{code:0x1f3c1,x:12,y:4},{code:0x1f6a9,x:1,y:8},{code:0x1f38c,x:10,y:4},{code:0x1f3f4,x:0,y:5},{code:0x1f3f3,x:14,y:4},{code:0x1f1e6,x:14,y:1},{code:0x1f1e7,x:0,y:2},{code:0x1f1e8,x:1,y:2},{code:0x1f1e9,x:2,y:2},{code:0x1f1ea,x:3,y:2},{code:0x1f1eb,x:4,y:2},{code:0x1f1ec,x:5,y:2},{code:0x1f1ed,x:6,y:2},{code:0x1f1ee,x:7,y:2},{code:0x1f1ef,x:8,y:2},{code:0x1f1f0,x:9,y:2},{code:0x1f1f1,x:10,y:2},{code:0x1f1f2,x:11,y:2},{code:0x1f1f3,x:12,y:2},{code:0x1f1f4,x:13,y:2},{code:0x1f1f5,x:14,y:2},{code:0x1f1f6,x:0,y:3},{code:0x1f1f7,x:1,y:3},{code:0x1f1f8,x:2,y:3},{code:0x1f1f9,x:3,y:3},{code:0x1f1fa,x:4,y:3},{code:0x1f1fb,x:5,y:3},{code:0x1f1fc,x:6,y:3},{code:0x1f1fd,x:7,y:3},{code:0x1f1fe,x:8,y:3},{code:0x1f1ff,x:9,y:3}]\n    };\n\n    var getEmoji = function (code) {\n        if (code < 0x10000) {\n            return String.fromCharCode(code);\n        }\n        var offset = code - 0x10000,\n            lead = 0xd800 + (offset >> 10),\n            trail = 0xdc00 + (offset & 0x3ff);\n        return String.fromCharCode(lead)+String.fromCharCode(trail);\n    };\n\n    var emoji_data = {}, all = {};\n\n    var getEmojiByIndex = function (idx) {\n        var emoji;\n        for (var emoji_list in raw_data) {\n           if (raw_data[emoji_list][idx]) {\n               emoji = raw_data[emoji_list][idx];\n               break;\n           }\n        }\n        return getEmoji(emoji.code);\n    };\n\n    for (var emoji_list in raw_data) {\n        _.each(raw_data[emoji_list], function (item) {\n            var emoji = getEmoji(item.code);\n            emoji_data[emoji] = item;\n            !all[emoji_list] && (all[emoji_list] = []);\n            all[emoji_list].push(emoji);\n        });\n    }\n\n    var emoji_regexp = /(\\u00a9|\\u00ae|[\\u2000-\\u3300]|\\ud83c[\\ud000-\\udfff]|\\ud83d[\\ud000-\\udfff]|\\ud83e[\\ud000-\\udfff])/g;\n\n    String.prototype.emojify = function (options) {\n        options || (options = {});\n        var sprite = options.sprite,\n            tag_name = sprite ? (options.tag_name || \'span\') : \'img\',\n            emoji_size = options.emoji_size || 20,\n            href = options.href ? ` href="#${options.href}" ` :"",\n            title = options.title ? ` title="${options.title}" ` :"";\n        return this.replace(emoji_regexp, function (emoji) {\n            let data = emoji_data[emoji],\n                emoji_code = data && Number(data.code).toString(16);\n            if (data) {\n                (emoji_code.length < 4) && (emoji_code = "0".repeat(4 - emoji_code.length) + emoji_code);\n                let img_src = tag_name === \'img\' ? (sprite ? \' src="images/emoji/blank.gif"\' : \'  src="images/emoji/svg32/emoji_u\' + emoji_code + \'.svg"\') : \'\';\n                return \'<\' + tag_name + img_src + href + title + \' class="emoji emoji-w\' + emoji_size +\n                    (sprite ? (\' sprite-\' + sprite + \'" style="background-position: \' + \'-\' + (emoji_size * data.x) + \'px \' + \'-\' + (emoji_size * data.y) + \'px;" \') : \'" \') +\n                    \'alt="\' + emoji + \'" \' +\n                    \'data-emoji="\' + emoji + \'"/>\';\n            }\n            else\n                return emoji;\n        });\n    };\n\n    String.prototype.removeEmoji = function () {\n        return this.replace(emoji_regexp, function (emoji) {\n            var data = emoji_data[emoji];\n            if (data) {\n                return "";\n            } else {\n                return emoji;\n            }\n        });\n    };\n\n    String.prototype.replaceEmoji = function () {\n        return this.replace(emoji_regexp, function (emoji) {\n            var data = emoji_data[emoji];\n            if (data) {\n                return " ";\n            } else {\n                return emoji;\n            }\n        });\n    };\n\n    $.fn.emojify = function (selector, options) {\n        this.find(selector).each(function () {\n            var text = $(this).html();\n            $(this).html(text.emojify(options));\n        });\n        return this;\n    };\n\n    return {\n        all: all,\n        get: getEmoji,\n        getByIndex: getEmojiByIndex\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack://xabber.web/./src/utils/emoji.js?')},"./src/utils/images.js":(module,exports,__webpack_require__)=>{eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! xabber-dependencies */ "./src/dependencies.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (deps) {\n    var _ = deps._,\n        $ = deps.$,\n        hasher = deps.SHA1.b64_sha1;\n\n    var _image_cache = {};\n\n    var COLORS = [\n        "#1abc9c", "#16a085", "#f1c40f", "#f39c12",\n        "#2ecc71", "#27ae60", "#e67e22", "#d35400",\n        "#3498db", "#2980b9", "#e74c3c", "#c0392b",\n        "#9b59b6", "#8e44ad", "#bdc3c7", "#34495e",\n        "#2c3e50", "#95a5a6", "#7f8c8d", "#ec87bf",\n        "#d870ad", "#f69785", "#9ba37e", "#b49255",\n        "#a94136"\n    ];\n\n    var MAX_SIZE = 200;\n    var MAX_IMG_SIZE = 1280;\n\n    var b64toBlob = function (b64Data, contentType, sliceSize) {\n        contentType = contentType || \'\';\n        sliceSize = sliceSize || 512;\n        var byteCharacters = atob(b64Data);\n        var byteArrays = [];\n        for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n            var slice = byteCharacters.slice(offset, offset + sliceSize);\n            var byteNumbers = new Array(slice.length);\n            for (var i = 0; i < slice.length; i++) {\n                byteNumbers[i] = slice.charCodeAt(i);\n            }\n            var byteArray = new Uint8Array(byteNumbers);\n            byteArrays.push(byteArray);\n        }\n        var blob = new Blob(byteArrays, {type: contentType});\n        return blob;\n    };\n\n    var CachedImage = function (image) {\n        this.url = window.URL.createObjectURL(b64toBlob(image));\n        _image_cache[image] = this;\n        return this;\n    };\n\n    var getCachedImage = function (image) {\n        // save often used image and get blob url for it\n        if (image instanceof CachedImage) {\n            return image;\n        } else if (image && (_.isString(image) && image.indexOf(\'http\') == 0 || _.isObject(image) && image.url && image.url.indexOf(\'http\') == 0)) {\n            if (_.isString(image))\n                return {url: image};\n            else if (_.isObject(image))\n                return image;\n        }\n        return _image_cache[image] || new CachedImage(image);\n    };\n\n    var getDefaultAvatar = function (name, color, font, width, height) {\n        // generate colored avatar with first letters of username\n        var canvas = document.createElement(\'canvas\'),\n            ctx = canvas.getContext(\'2d\'),\n            _name = name ? name.trim() : \'\',\n            first_name, last_name, splitted_name = _name.split(\' \', 2),\n            first_letter, second_letter;\n            // color_index;\n        first_name = splitted_name[0];\n        last_name = (splitted_name.length > 1 ? splitted_name[1] : \'\');\n        first_letter = first_name[0] || \'\';\n        if (last_name) {\n            second_letter = last_name[0];\n        } else {\n            second_letter = (first_name.length > 1 ? first_name[1] : \'\');\n        }\n        // color_index = Math.floor(hasher(_name).charCodeAt(0) % COLORS.length);\n        canvas.width = width || 256;\n        canvas.height = height || 256;\n        ctx.rect(0, 0, width || 256, height || 256);\n        ctx.fillStyle = color || getAccountColor(name);//COLORS[color_index];\n        ctx.fill();\n        ctx.font = font || "bold 100px sans-serif";\n        ctx.fillStyle = "#FFF";\n        ctx.textAlign = "center";\n        if (font){\n            ctx.textBaseline = \'ideographic\';\n            ctx.fillText(_name, width/2 || 128, (height/2 + height *0.28) || 160);\n        }\n        else\n            ctx.fillText(first_letter.toUpperCase()+second_letter.toUpperCase(), 128, 160);\n        var image = canvas.toDataURL().replace(/^data:image\\/(png|gif|jpg|webp|jpeg);base64,/, \'\');\n        return image;\n    };\n\n    var getAccountColor = function (name) {\n        var _name = name ? name.trim() : \'\',\n            color_index = Math.floor(hasher(_name).charCodeAt(0) % COLORS.length);\n        return COLORS[color_index];\n    };\n\n    var getImageSize = function (size, max_size) {\n        if (size.width > size.height) {\n            if (size.width > max_size) {\n                size.height *= max_size / size.width;\n                size.width = max_size;\n            }\n        } else {\n            if (size.height > max_size) {\n                size.width *= max_size / size.height;\n                size.height = max_size;\n            }\n        }\n        return size;\n    };\n\n    var compressImage = function (file) {\n        var image_obj = new Image(),\n            src = window.URL.createObjectURL(file),\n            deferred = new $.Deferred();\n        image_obj.onload = function () {\n            image_obj.onload = null;\n            var canvas = document.createElement(\'canvas\'),\n                ctx = canvas.getContext(\'2d\'),\n                width = image_obj.naturalWidth,\n                height = image_obj.naturalHeight,\n                file_type = file.type,\n                file_name = file.name,\n                new_size = getImageSize({width: width, height: height}, MAX_IMG_SIZE);\n            if (file.type === \'image/svg+xml\') {\n                file.width = width;\n                file.height = height;\n                deferred.resolve(file);\n            }\n            canvas.width = new_size.width;\n            canvas.height = new_size.height;\n            ctx.drawImage(image_obj, 0, 0, new_size.width, new_size.height);\n            canvas.toBlob((blob) => {\n                const file = new File([blob], file_name, {\n                    type: file_type,\n                    lastModified: Date.now()\n                });\n                deferred.resolve(file);\n            }, file_type, 0.8);\n            window.URL.revokeObjectURL(src);\n        };\n        image_obj.onerror = function() {\n            image_obj.onerror = null;\n            window.URL.revokeObjectURL(src);\n            deferred.resolve(false);\n        };\n        image_obj.src = src;\n        return deferred.promise();\n    };\n\n    var setCss = function (image_el, cached_image, img_size) {\n        var $image_el = $(image_el),\n            css = {\n                backgroundImage: \'url("\' + cached_image.url + \'")\',\n                backgroundSize: \'cover\',\n                backgroundColor: \'#FFF\'\n            };\n        $image_el.css(css);\n    };\n\n    var getCachedBackground = function (base64) {\n        if (base64.indexOf(\'http\') == 0)\n            return base64;\n        return getCachedImage(base64.replace(/^data:image\\/(png|gif|jpg|webp|jpeg);base64,/, \'\')).url;\n    };\n\n    var getAvatarFromFile = function (file) {\n        var image_obj = new Image(),\n             src = window.URL.createObjectURL(file),\n             deferred = new $.Deferred();\n         image_obj.onload = function () {\n             image_obj.onload = null;\n             var canvas = document.createElement(\'canvas\'),\n                 ctx = canvas.getContext(\'2d\'),\n                 width = image_obj.naturalWidth,\n                 height = image_obj.naturalHeight,\n                 b64_image, hash,\n                 new_size = getImageSize({width: width, height: height}, MAX_SIZE);\n             canvas.width = new_size.width;\n             canvas.height = new_size.height;\n             ctx.drawImage(image_obj, 0, 0, canvas.width, canvas.height);\n             b64_image = canvas.toDataURL().replace(/^data:image\\/(png|gif|jpg|webp|jpeg);base64,/, \'\');\n             window.URL.revokeObjectURL(src);\n             canvas.toBlob((blob) => {\n                 var reader = new FileReader();\n                 reader.onload = function () {\n                     b64_image = reader.result.replace(/^data:image\\/(png|gif|jpg|webp|jpeg);base64,/, \'\');\n                     let binary_file = atob(b64_image),\n                        bytes = new Uint8Array(binary_file.length);\n\n                     for (let i = 0; i < binary_file.length; i++)\n                         bytes[i] = binary_file.charCodeAt(i);\n\n                     hash = sha1(bytes);\n                     deferred.resolve(b64_image, hash, binary_file.length);\n                 }.bind(this);\n                 reader.readAsDataURL(blob);\n             }, file.type, 0.8);\n         };\n         image_obj.onerror = function() {\n             image_obj.onerror = null;\n             window.URL.revokeObjectURL(src);\n             deferred.resolve(false, false, false);\n         };\n         image_obj.src = src;\n         return deferred.promise();\n    };\n\n    $.fn.setAvatar = function (image, size) {\n        var cached_image = getCachedImage(image);\n        setCss(this, cached_image, size);\n    };\n\n    return {\n        getCachedImage: getCachedImage,\n        getBlobImage: b64toBlob,\n        getDefaultAvatar: getDefaultAvatar,\n        getAvatarFromFile: getAvatarFromFile,\n        getDefaultColor: getAccountColor,\n        getCachedBackground: getCachedBackground,\n        compressImage: compressImage\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack://xabber.web/./src/utils/images.js?')},"./src/utils/modals.js":(module,exports,__webpack_require__)=>{eval("/* provided dependency */ var xabber = __webpack_require__(/*! xabber */ \"./src/xabber.js\");\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! xabber-dependencies */ \"./src/dependencies.js\"), __webpack_require__(/*! xabber-templates */ \"./src/templates.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (deps, templates) {\n    var _ = deps._,\n        $ = deps.$;\n\n    var $modal_container = $('<div>').attr('id', 'modals').appendTo('body');\n\n    var modal_queue = [];\n \n    var Modal = function (modal_constructor, options) {\n        if (modal_constructor instanceof Function) {\n            this.$modal = $(modal_constructor());\n        } else {\n            this.$modal = $(modal_constructor);\n        }\n        this.options = options || {};\n        this.closed = new $.Deferred();\n    };\n\n    let getString = function (id, params) {\n        if (deps.xabber_i18next.exists(id)) {\n            return deps.xabber_i18next.t(id, { postProcess: 'sprintf', sprintf: params}).replace(/\\\\'/g, \"'\").replace(/%+\\d+[$]/g, \"%\").replace(/\\\\n/g, '&#10;');\n        } else if (deps.xabber_i18next.default_lang) {\n            return deps.xabber_i18next.default_lang(id, { postProcess: 'sprintf', sprintf: params}).replace(/\\\\'/g, \"'\").replace(/%+\\d+[$]/g, \"%\").replace(/\\\\n/g, '&#10;');\n        } else\n            return \"\";\n    };\n \n    _.extend(Modal.prototype, {\n        open: function (options) {\n            if (this.options.use_queue) {\n                modal_queue.push(this);\n                (modal_queue.length === 1) && this.throw();\n            } else {\n                this.throw();\n            }\n            setTimeout(() => {\n                document.addEventListener(\"keyup\", this.clickHandler.bind(this));\n            }, 500);\n            return this.closed.promise();\n        },\n\n        throw: function () {\n            this.$modal.appendTo($('#modals')).prop('modal', this);\n            var modal_options = _.omit(this.options, ['use_queue']);\n            _.extend(modal_options, {\n                is_default_complete: true,\n                complete_data: null\n            });\n\n            if (this.options.use_queue) {\n                this.$modal.one('modal_close', function (ev, data) {\n                    this.$modal.detach();\n                    this.closed.resolve(data.value);\n                    modal_queue.shift();\n                    modal_queue.length && modal_queue[0].throw();\n                }.bind(this));\n            }\n\n            this.$modal._openModal(modal_options);\n        },\n\n        close: function (options) {\n            var modal_options = _.omit(options, ['use_queue', 'is_default_complete', 'complete_data']);\n            _.extend(modal_options, {\n                complete: function () {\n                    if (this.options.use_queue) {\n                        var data = _.isUndefined(options.complete_data) ? null : options.complete_data;\n                        this.complete(data);\n                    }\n                    if (options.is_default_complete) {\n                        if (typeof(this.options.complete) === \"function\") {\n                            this.options.complete();\n                        }\n                    } else {\n                        if (this.options.use_queue) {\n                            this.complete();\n                        }\n                        if (typeof(options.complete) === \"function\") {\n                            options.complete();\n                        }\n                    }\n                }.bind(this)\n            });\n\n            this.$modal.prop('modal', null);\n            this.$modal._closeModal(modal_options);\n        },\n\n        complete: function (value) {\n            document.removeEventListener(\"keyup\", this.clickHandler);\n            this.$modal.trigger('modal_close', {value: value});\n        },\n\n        clickHandler: function (ev) {\n            if (ev.keyCode === 13) {\n                this.$modal.find('.modal-footer button.ok-button').click();\n                ev.preventDefault();\n            }\n        }\n    });\n\n    $.fn._openModal = $.fn.openModal;\n\n    $.fn.openModal = function (options) {\n        var modal = new Modal(this, options);\n        return modal.open();\n    };\n\n    $.fn._closeModal = $.fn.closeModal;\n\n    $.fn.closeModal = function (options) {\n        var modal = this.prop('modal');\n        if (modal) {\n            modal.close(options);\n        } else {\n            this._closeModal(options);\n        }\n    };\n\n    return {\n        Modal: Modal,\n\n        clear_queue: function () {\n            modal_queue = [];\n        },\n\n        dialogs: {\n            common: function (header, text, buttons, dialog_options, flag, modal_class) {\n                var dialog = new Modal(function () {\n                    buttons || (buttons = {});\n                    dialog_options || (dialog_options = []);\n                    var ok_button = buttons.ok_button,\n                        cancel_button = buttons.cancel_button,\n                        optional_buttons = (buttons.optional_buttons || []).reverse();\n                    ok_button && (ok_button = {text: ok_button.text || getString(\"ok\")});\n                    cancel_button && (cancel_button = {text: cancel_button.text || getString(\"cancel\")});\n                    return templates.base.dialog({\n                        header: header,\n                        text: text,\n                        ok_button: ok_button,\n                        cancel_button: cancel_button,\n                        optional_buttons: optional_buttons,\n                        dialog_options: dialog_options,\n                        flag: flag || \"\",\n                        modal_class: modal_class || \"\"\n                    });\n                }, {use_queue: true});\n\n                if (dialog_options.modal_class) {\n                    dialog.$modal.addClass(dialog_options.modal_class)\n                }\n\n                if (dialog_options.inverted_buttons) {\n                    dialog.$modal.find('.dialog-options-wrap').html('');\n                    dialog.$modal.find('.cancel-button').removeClass('btn-dark');\n                    dialog.$modal.find('.ok-button').addClass('btn-dark');\n                    dialog.$modal.find('.modal-footer').addClass('inverted-buttons');\n                }\n\n                if (dialog_options.img_details) {\n                    dialog.$modal.find('.modal-content').append('<div class=\"modal-images-details\"/>').append('<div class=\"modal-images-details-btn btn-flat btn-dark btn-main\"/>');\n                    dialog.$modal.find('.modal-images-details-btn').text(xabber.getString(\"details\"));\n                    dialog.$modal.find('.modal-images-details').append('<div class=\"image-details-container hidden\"/>');\n                    dialog.$modal.find('.image-details-container').html(dialog_options.img_details);\n                    dialog.$modal.find('.modal-images-details-btn').click(function () {\n                        dialog.$modal.find('.image-details-container').switchClass('hidden', !dialog.$modal.find('.image-details-container').hasClass('hidden'));\n                    });\n                }\n\n                if (dialog_options.blob_image_from_clipboard) {\n                    dialog.$modal.find('.dialog-options-wrap').html('');\n                    dialog.$modal.find('.img-from-clipboard')[0].src = dialog_options.blob_image_from_clipboard;\n                    dialog.$modal.find('.container-for-img').removeClass('hidden');\n                }\n\n                if (dialog_options.canvas) {\n                    dialog.$modal.find('.dialog-options-wrap').html('');\n                    dialog.$modal.find('.container-for-img').html(\"\").removeClass('hidden')[0].appendChild(dialog_options.canvas);\n                    if (dialog_options.bottom_text)\n                        $('<div class=\"dialog-bottom-text\"/>').html(dialog_options.bottom_text).appendTo(dialog.$modal.find('.container-for-img'));\n                }\n\n                if (dialog_options.escape_button) {\n                    dialog.$modal.find('.modal-header').append('<i class=\"close-modal mdi mdi-close mdi-24px\"></i>');\n                }\n\n                if (dialog_options.input_placeholder_value || dialog_options.input_value) {\n                    dialog.$modal.find('.dialog-options-wrap').html($('<input type=\"text\" placeholder=\"' + dialog_options.input_placeholder_value + '\" id=\"user_value\"/>').val(dialog_options.input_value));\n                }\n\n                dialog.$modal.find('.modal-footer button').click(function (ev) {\n                    var option = $(ev.target).data('option'),\n                        $options = dialog.$modal.find('.dialog-option'),\n                        user_value_input = dialog.$modal.find('#user_value');\n                    if (option && $options.length) {\n                        var result = {};\n                        _.each($options, function (item) {\n                            var $item = $(item);\n                            result[$item.data('name')] = $item.find('input').prop('checked');\n                        });\n                        dialog.close({complete_data: result});\n                    } else {\n                        if (user_value_input.length) {\n                            if ($(ev.target).hasClass('btn-cancel')) {\n                                dialog.close({complete_data: false});\n                            } else if ($(ev.target).hasClass('optional-button')) {\n                                dialog.close({complete_data: option});\n                            }\n                            else {\n                                var user_value = user_value_input.val();\n                                dialog.close({complete_data: user_value});\n                            }\n                        }\n                        else\n                            dialog.close({complete_data: option});\n                    }\n                });\n\n                dialog.$modal.find('.modal-header .close-modal').click(function () {\n                        dialog.close({complete_data: false});\n                });\n\n                return dialog.open();\n            },\n\n            warning: function (text, dialog_options) {\n                return this.common(getString(\"warning\"), text, {ok_button: true}, dialog_options);\n            },\n\n            error: function (text, dialog_options) {\n                return this.common(getString(\"xabber_account__login__dialog_error__header\"), text, {ok_button: true}, dialog_options);\n            },\n\n            ask: function (header, text, dialog_options, buttons, flag) {\n                var ok_text, cancel_text;\n                if (buttons) {\n                    ok_text = buttons.ok_button_text;\n                    cancel_text = buttons.cancel_button_text;\n                }\n                return this.common(header, text, {ok_button: {text: ok_text}, cancel_button: {text: cancel_text}}, dialog_options, flag);\n            },\n\n            ask_extended: function (header, text, dialog_options, buttons) {\n                var ok_text, optional_button;\n                if (buttons) {\n                    ok_text = buttons.ok_button_text;\n                    optional_button = (buttons.optional_button) ? [{value: buttons.optional_button, name: buttons.optional_button_text}] : false;\n                }\n                return this.common(header, text, {ok_button: {text: ok_text}, cancel_button: true, optional_buttons: optional_button}, dialog_options, 'extended');\n            },\n\n            ask_enter_value: function (header, text, dialog_options, buttons) {\n                var ok_text, resend_button;\n                if (buttons) {\n                    ok_text = buttons.ok_button_text;\n                    resend_button = (buttons.resend_button_text) ? [{value: buttons.resend_to, name: buttons.resend_button_text}] : false;\n                }\n                return this.common(header, text, {ok_button: {text: ok_text}, optional_buttons: resend_button, cancel_button: true}, dialog_options);\n            },\n\n            notify: function (header, text) {\n                return this.common(header, text, {ok_button: true});\n            }\n        }\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack://xabber.web/./src/utils/modals.js?")},"./src/utils/textarea.js":(module,exports,__webpack_require__)=>{eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! xabber-dependencies */ \"./src/dependencies.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (deps) {\n    var _ = deps._,\n        $ = deps.$;\n\n    $.fn.placeCaretAtEnd = function () {\n        if (!this.length) {\n            return this;\n        }\n        var el = this[0];\n        el.focus();\n        if (!_.isUndefined(window.getSelection) && !_.isUndefined(document.createRange)) {\n            var range = document.createRange();\n            range.selectNodeContents(el);\n            range.collapse(false);\n            var sel = window.getSelection();\n            sel.removeAllRanges();\n            sel.addRange(range);\n        } else if (!_.isUndefined(document.body.createTextRange)) {\n            var textRange = document.body.createTextRange();\n            textRange.moveToElementText(el);\n            textRange.collapse(false);\n            textRange.select();\n        }\n        return this;\n    };\n\n    $.fn.updateRichTextarea = function () {\n        var text = this.getTextFromRichTextarea();\n        if (!text) {\n            this.html('');\n        }\n        return this;\n    };\n\n    $.fn.flushRichTextarea = function () {\n        this.html('');\n        return this;\n    };\n\n    $.fn.pasteHtmlAtCaret = function (html) {\n        var sel, range;\n        this[0].focus();\n        if (window.getSelection) {\n            // IE9 and non-IE\n            sel = window.getSelection();\n            if (sel.getRangeAt && sel.rangeCount) {\n                range = sel.getRangeAt(0);\n                range.deleteContents();\n\n                // Range.createContextualFragment() would be useful here but is\n                // non-standard and not supported in all browsers (IE9, for one)\n                var el = document.createElement(\"div\");\n                el.innerHTML = html;\n                var frag = document.createDocumentFragment(), node, lastNode;\n                while ( (node = el.firstChild) ) {\n                    lastNode = frag.appendChild(node);\n                }\n                range.insertNode(frag);\n\n                // Preserve the selection\n                if (lastNode) {\n                    range = range.cloneRange();\n                    range.setStartAfter(lastNode);\n                    range.collapse(true);\n                    sel.removeAllRanges();\n                    sel.addRange(range);\n                }\n            }\n        } else if (document.selection && document.selection.type != \"Control\") {\n            // IE < 9\n            document.selection.createRange().pasteHTML(html);\n        }\n        return this;\n    };\n\n    $.fn.getTextFromRichTextarea = function () {\n        var $div = $('<div>').html(this.html());\n        $div.find('.emoji').each(function () {\n            $(this).replaceWith($(this).data('emoji'));\n        });\n        $div.find('p').each(function () {\n            $(this).replaceWith($(this).html() + '\\n');\n        });\n        /*$div.find('blockquote').each(function () {\n            $(this).replaceWith($(this).html() + '\\n');\n        });*/\n        $div.find('span').each(function () {\n            $(this).replaceWith($(this).html());\n        });\n        $div.find('div').each(function () {\n            var $this = $(this);\n            $this.find('br').remove();\n            var html = $this.html();\n            if ($this.hasClass('emoji'))\n                $this.replaceWith(html);\n            else\n                $this.replaceWith('\\n'+html);\n        });\n        /*$div.find('br').each(function () {\n            $(this).replaceWith('\\n');\n        });*/\n        return $div.text();\n    };\n\n    return null;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack://xabber.web/./src/utils/textarea.js?")},"./src/utils/utils.js":(module,exports,__webpack_require__)=>{eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    __webpack_require__(/*! xabber-dependencies */ \"./src/dependencies.js\"),\n    __webpack_require__(/*! xabber-emoji-utils */ \"./src/utils/emoji.js\"),\n    __webpack_require__(/*! xabber-image-utils */ \"./src/utils/images.js\"),\n    __webpack_require__(/*! xabber-modal-utils */ \"./src/utils/modals.js\"),\n    __webpack_require__(/*! xabber-constants */ \"./src/constants.js\"),\n    __webpack_require__(/*! xabber-textarea-utils */ \"./src/utils/textarea.js\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function (deps, emoji, images, modals, constants, textarea) {\n    var $ = deps.$,\n        _ = deps._,\n        moment = deps.moment;\n\n    // jQuery extensions\n    $.fn.switchClass = function (klass, condition) {\n        if (arguments.length === 1) {\n            condition = !this.hasClass(klass);\n        }\n        if (condition) {\n            this.addClass(klass);\n        } else {\n            this.removeClass(klass);\n        }\n        return this;\n    };\n\n    $.fn.showIf = function (condition) {\n        return this.switchClass('hidden', !condition);\n    };\n\n    $.fn.hideIf = function (condition) {\n        return this.switchClass('hidden', condition);\n    };\n\n    var getHyperLink = function (url) {\n        var prot = (url.indexOf('http://') === 0 ||  url.indexOf('https://') === 0) ? '' : 'http://',\n            escaped_url = \"\";\n        try {\n            escaped_url = encodeURI(decodeURI(url)).replace(/[!'()]/g, escape).replace(/\\*/g, \"%2A\");\n        }\n        catch (e) {\n            escaped_url = url;\n        }\n        try {\n            url = decodeURI(url);\n        }\n        catch (e) {}\n        return \"<a target='_blank' class='msg-hyperlink' href='\"+prot+escaped_url + \"'>\"+url+\"</a>\";\n    };\n\n    $.fn.hyperlinkify = function (options) {\n        options || (options = {});\n        var $query = options.selector ? this.find(options.selector) : this;\n        $query.each(function (i, obj) {\n            var $obj = $(obj),\n                html_concat = \"\",\n                url_regexp = /(((ftp|http|https):\\/\\/)|(www\\.))(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/g;\n                // url_regexp = /((((ftp|http|https):\\/\\/)|(www\\.))(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?)|((\\b)((\\w+)([\\w#!:.?+=&%@!\\-\\/])(\\w+))?(\\.net|\\.edu|\\.cloud|\\.top|\\.vip|\\.cash|\\.im|\\.online|\\.chat|\\.com|\\.org|\\.ru|\\.travel|\\.info|\\.tv|\\.biz|\\.mobi|\\.tel|\\.ar|\\.al|\\.asia|\\.np|\\.ng|\\.io|\\.bb|\\.br|\\.ca|\\.tr|\\.co|\\.ec|\\.fr|\\.ht|\\.in|\\.eg|\\.ie|\\.et|\\.jo|\\.mr|\\.id|\\.iq|\\.nl|\\.ps|\\.ph|\\.sl|\\.si|\\.se|\\.af|\\.ag|\\.be|\\.bd|\\.bg|\\.cl|\\.cd|\\.my|\\.mz|\\.mx|\\.cz|\\.eu|\\.dz|\\.de|\\.hk|\\.it|\\.la|\\.no|\\.pl|\\.ro|\\.sg|\\.ke|\\.kr|\\.ch|\\.ug|\\.us|\\.ve|\\.vn|\\.at|\\.bo|\\.cm|\\.cn|\\.cg|\\.dk|\\.fi|\\.gr|\\.gh|\\.is|\\.ir|\\.jp|\\.lv|\\.ma|\\.me|\\.pk|\\.pe|\\.pt|\\.sa|\\.sk|\\.es|\\.tz|\\.tw|\\.ua|\\.uz|\\.ye)((\\/\\w+)|(\\S+)|\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?)/g;\n            $obj[0].childNodes.forEach(function (node) {\n                let $node = $(node),\n                    x = node.outerHTML;\n                if (node.tagName === 'A') {\n                    html_concat += x;\n                    return;\n                }\n                else {\n                    if (node.nodeName === '#text')\n                        x = _.escape($node.text());\n                    let list = x && x.match(url_regexp);\n                    list = Array.from(new Set(list));\n                    if (!list) {\n                        html_concat += x;\n                        return;\n                    }\n                    if (list.length === 1 && list[0] === x) {\n                        html_concat += options.decode_uri ? decodeURI(x) : getHyperLink(x);\n                    } else {\n                        for (i = 0; i < list.length; i++) {\n                            if (options.decode_uri)\n                                x = x.replace(list[i], decodeURI(list[i]));\n                            else\n                                x = x.replaceAll(new RegExp(`(\\\\s|^)(${list[i].replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')})`,\"g\"), '$1' + getHyperLink(list[i]));\n                        }\n                        html_concat += x;\n                    }\n                }\n            }.bind(this));\n            $obj.html(html_concat);\n        });\n        return this;\n    };\n\n    var utils = {\n        uuid: function () {\n            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n                var r = Math.random() * 16 | 0,\n                    v = c == 'x' ? r : r & 0x3 | 0x8;\n                return v.toString(16);\n            });\n        },\n\n        utoa: function (str) {\n            return window.btoa(_.unescape(encodeURIComponent(str)));\n        },\n\n        atou: function (str) {\n            return decodeURIComponent(_.escape(window.atob(str)));\n        },\n\n        now: function () {\n            return Math.floor(moment.now() / 1000);\n        },\n\n        pretty_time: function (timestamp) {\n            var datetime = timestamp ? moment(timestamp) : moment();\n            return datetime.format('HH:mm:ss');\n        },\n\n        pretty_date: function (timestamp, format) {\n            var datetime = timestamp ? moment(timestamp) : moment();\n            return datetime.format(format || 'dddd, MMMM D, YYYY');\n        },\n\n        pretty_datetime: function (timestamp, format) {\n            var datetime = timestamp ? moment(timestamp) : moment();\n            return datetime.format(format || 'MMMM D, YYYY HH:mm:ss');\n        },\n\n        pretty_short_datetime_recent_chat: function (timestamp) {\n            timestamp = Number(timestamp ? moment(timestamp) : moment());\n            if (moment(timestamp).startOf('day').isSame(moment().startOf('day')) || Number(moment().subtract(12, 'hours') < timestamp)) {\n                return moment(timestamp).format(\"HH:mm:ss\");\n            }\n            if (Number(moment().subtract(12, 'hours')) > timestamp && Number(moment().subtract(7, 'days')) <= timestamp) {\n                return moment(timestamp).format(\"ddd\");\n            }\n            if (Number(moment().subtract(7, 'days')) > timestamp && Number(moment().subtract(1, 'year')) <= timestamp) {\n                return moment(timestamp).format(\"MMM D\");\n            }\n            if (timestamp && Number(moment().subtract(1, 'year')) > timestamp) {\n                return moment(timestamp).format(\"D MMM YYYY\");\n            }\n        },\n\n        pretty_short_datetime: function (timestamp) {\n            var datetime = timestamp ? moment(timestamp) : moment(),\n                day = moment(datetime).startOf('day'),\n                year = moment(datetime).startOf('year');\n            if (day.isSame(moment().startOf('day'))) {\n                return datetime.format('HH:mm:ss');\n            } else if (year.isSame(moment().startOf('year'))) {\n                return datetime.format('MMM D');\n            } else {\n                return datetime.format('DD/MM/gg');\n            }\n        },\n\n        pretty_short_month_date: function (timestamp) {\n            var datetime = timestamp ? moment(timestamp) : moment(),\n                day = moment(datetime).startOf('day');\n            if (day.isSame(moment().startOf('day'))) {\n                return datetime.format('HH:mm:ss');\n            } else {\n                return datetime.format('MMM D, YYYY HH:mm:ss');\n            }\n        },\n\n        isImageType: function(type) {\n            if (type.indexOf('image') > -1)\n                return true;\n            else\n                return false;\n        },\n\n        getDomainFromUrl: function(url) {\n            let a = document.createElement('a');\n            if (url && !/^https?:\\/\\//i.test(url))\n                url = 'http://' + url;\n            a.href = url;\n            return a.hostname;\n        },\n\n        isVideoType: function(type) {\n            if (type.indexOf('video') > -1)\n                return true;\n            else\n                return false;\n        },\n\n        file_type_icon: function (mime_type) {\n            let filetype = utils.pretty_file_type(mime_type);\n            if (filetype === 'image')\n                return 'mdi-image';\n            if (filetype === 'audio')\n                return 'mdi-music-note';\n            if (filetype === 'video')\n                return 'mdi-filmstrip';\n            if (filetype === 'document')\n                return 'mdi-file-document-box';\n            if (filetype === 'presentation')\n                return 'mdi-presentation';\n            if (filetype === 'archive')\n                return 'mdi-zip-box';\n            if (filetype === 'file')\n                return 'mdi-file';\n            if (filetype === 'pdf')\n                return 'mdi-file-pdf';\n            return 'mdi-file'\n        },\n\n        file_type_icon_svg: function (mime_type) {\n            let filetype = utils.pretty_file_type(mime_type);\n            if (filetype === 'image')\n                return 'image';\n            if (filetype === 'audio')\n                return 'file-audio';\n            if (filetype === 'video')\n                return 'file-video';\n            if (filetype === 'document')\n                return 'file-document';\n            if (filetype === 'presentation')\n                return 'file-presentation';\n            if (filetype === 'archive')\n                return 'file-zip';\n            if (filetype === 'file')\n                return 'file';\n            if (filetype === 'pdf')\n                return 'file-pdf';\n            return 'file'\n        },\n\n        pretty_file_type: function (mime_type) {\n            if (constants.MIME_TYPES.image.includes(mime_type))\n                return 'image';\n            if (constants.MIME_TYPES.audio.includes(mime_type))\n                return 'audio';\n            if (constants.MIME_TYPES.video.includes(mime_type))\n                return 'video';\n            if (constants.MIME_TYPES.document.includes(mime_type))\n                return 'document';\n            if (constants.MIME_TYPES.pdf.includes(mime_type))\n                return 'pdf';\n            if (constants.MIME_TYPES.presentation.includes(mime_type))\n                return 'presentation';\n            if (constants.MIME_TYPES.archive.includes(mime_type))\n                return 'archive';\n            if (constants.MIME_TYPES.table.includes(mime_type))\n                return 'electronic table';\n            return 'file';\n        },\n\n        pretty_file_type_with_article: function (mime_type) {\n            let type = utils.pretty_file_type(mime_type),\n                vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n            (type === 'pdf') && (type = 'document');\n            if (vowels.includes(type[0]))\n                return 'an ' + type;\n            else\n                return 'a ' + type;\n        },\n\n        pretty_size: function (size) {\n            if (!size)\n                return \"\";\n            if (_.isNaN(Number(size)))\n                return size;\n            if (size < 1024) {\n                return size+' B';\n            } else if (size < 1048576) {\n                return (size/1024).toFixed(2)+' KiB';\n            } else if (size < 1073741824) {\n                return (size/1048576).toFixed(2)+' MiB';\n            } else {\n                return (size/1073741824).toFixed(2)+' GiB';\n            }\n        },\n\n        pretty_duration: function (duration) {\n            if (_.isNaN(Number(duration)))\n                return duration;\n            if (_.isUndefined(duration) || duration === \"\")\n                return \"\";\n            if (duration < 10)\n                return (\"0:0\" + duration);\n            if (duration < 60)\n                return (\"0:\" + duration);\n            if (duration >= 60)\n                return (Math.trunc(duration/60) + \":\" + ((duration%60 < 10) ? (\"0\" + (duration%60)) : duration%60));\n        },\n\n        pretty_name: function (name) {\n            return name ? (name[0].toUpperCase() + name.replace(/-/,' ').substr(1).toLowerCase()) : \"\";\n        },\n\n        getKeyByValue: function (object, value) {\n            return Object.keys(object).find(key => object[key] === value);\n        },\n\n        slice_string: function (str, from, to) {\n            to = _.isNumber(to) ? to : [...str].length;\n            if (str.length === [...str].length)\n                return str.slice(from, to);\n            else\n                return Array.from(str).slice(from, to).join(\"\");\n        },\n\n        slice_pretty_body: function (body, mutable_refs) {\n            if (!mutable_refs || !mutable_refs.length)\n                return body;\n            body = body || \"\";\n            mutable_refs = mutable_refs.filter(m => m.type === 'groupchat' || m.type === 'forward');\n            let pretty_body = Array.from(deps.Strophe.xmlescape(body));\n            mutable_refs && mutable_refs.forEach(function (ref) {\n                for (let idx = ref.start; idx < ref.end; idx++)\n                    pretty_body[idx] = \"\";\n            }.bind(this));\n            return deps.Strophe.xmlunescape(pretty_body.join(\"\").trim());\n        },\n\n        markupBodyMessage: function (message, mention_tag) {\n            let attrs = _.clone(message.attributes),\n                mentions = attrs.mentions || [],\n                markups = attrs.markups || [],\n                mutable_refs = attrs.mutable_content || [],\n                blockquotes = attrs.blockquotes || [],\n                markup_body = Array.from(deps.Strophe.xmlescape(attrs.original_message || attrs.message || \"\"));\n            !mention_tag && (mention_tag = 'span');\n\n            mutable_refs.forEach(function (muted) {\n                for (let idx = muted.start; idx < muted.end; idx++)\n                    markup_body[idx] = \"\";\n            }.bind(this));\n\n            mentions.forEach(function (mention) {\n                let start_idx = mention.start,\n                    end_idx = mention.end > (markup_body.length - 1) ? (markup_body.length - 1) : (mention.end - 1), target = mention.target;\n                if (start_idx > markup_body.length - 1)\n                    return;\n                if (mention.is_gc) {\n                    let id = target.match(/\\?id=\\w*/),\n                        jid = target.match(/\\?jid=.*/);\n                    if (id)\n                        target = id[0].slice(4);\n                    else if (jid)\n                        target = jid[0].slice(5);\n                    else {\n                        target = \"\";\n                        mention.me = true;\n                    }\n                }\n                else\n                    target = target.slice(5);\n                if (mention_tag === 'mention'){\n                    markup_body[start_idx] = '<' + mention_tag + ' data-target=\"?jid=' + target + '\">' + markup_body[start_idx];\n                    markup_body[end_idx] += '</' + mention_tag + '>';\n                    return;\n                }\n                markup_body[start_idx] = '<' + mention_tag + ' data-target=\"' + target + '\" class=\"mention' + (mention.me ? ' ground-color-100' : '') + '\">' + markup_body[start_idx];\n                markup_body[end_idx] += '</' + mention_tag + '>';\n            }.bind(this));\n\n            markups.forEach(function (markup) {\n                let start_idx = markup.start,\n                    end_idx = markup.end > (markup_body.length - 1) ? (markup_body.length - 1) : (markup.end - 1);\n                if (start_idx > markup_body.length - 1)\n                    return;\n                if (markup.markup.length) {\n                    let start_tags = \"\",\n                        end_tags = \"\";\n                    markup.markup.forEach(function (mark_up_style) {\n                        if (typeof(mark_up_style) === 'object') {\n                            start_tags = '<a target=\"_blank\" class=\"msg-hyperlink\" href=\"' + mark_up_style.uri + '\">' + start_tags;\n                            end_tags += '</a>';\n                        } else {\n                            start_tags = '<' + mark_up_style[0].toLowerCase() + '>' + start_tags;\n                            end_tags += '</' + mark_up_style[0].toLowerCase() + '>';\n                        }\n                    }.bind(this));\n                    markup_body[start_idx] = start_tags + markup_body[start_idx];\n                    markup_body[end_idx] += end_tags;\n                }\n            }.bind(this));\n\n            blockquotes.forEach(function (quote) {\n                let end_idx = quote.end > (markup_body.length - 1) ? (markup_body.length - 1) : (quote.end - 1);\n                for (let idx = quote.start; idx < (quote.start + constants.QUOTE_MARKER.length); idx++) {\n                    if (idx === end_idx)\n                        markup_body[idx] = '<br>';\n                    else\n                        markup_body[idx] = \"\";\n\n                }\n                for (let idx = quote.start; idx < end_idx; idx++) {\n                    if (markup_body[idx] === '\\n') {\n                        for (let child_idx = idx + 1; child_idx <= (idx + constants.QUOTE_MARKER.length); child_idx++)\n                            markup_body[child_idx] = \"\";\n                        idx+= constants.QUOTE_MARKER.length - 1;\n                    }\n                }\n                if (mention_tag === 'mention'){\n                    markup_body[quote.start] = '<blockquote>';\n                    markup_body[end_idx] += '</blockquote>';\n                    return;\n                }\n                markup_body[quote.start] = '<div class=\"quote\">';\n                markup_body[end_idx] += '</div>';\n            }.bind(this));\n\n            return markup_body.join(\"\").trim();\n        },\n\n        getOS: function() {\n            let platform = window.navigator.platform,\n                macosPlatforms = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'],\n                windowsPlatforms = ['Win32', 'Win64', 'Windows', 'WinCE'],\n                os = null;\n\n            if (macosPlatforms.indexOf(platform) !== -1) {\n                os = 'Mac OS';\n            } else if (windowsPlatforms.indexOf(platform) !== -1) {\n                os = 'Windows';\n            } else if (!os && /Linux/.test(platform)) {\n                os = 'Linux';\n            }\n\n            return os;\n        },\n\n        isOverflownWidth: function(element) {\n            return element.scrollWidth > element.clientWidth;\n        },\n\n        isOverflownHeight: function(element) {\n            return element.scrollHeight > element.clientHeight;\n        },\n\n        render_data_form: function (data_form) {\n            let $data_form = $('<div class=\"data-form\"/>');\n            data_form.fields.forEach(function (field) {\n                if (field.type === 'hidden')\n                    return;\n                if (field.type === 'fixed') {\n                    let $fixed_field = $('<div class=\"data-form-field fixed-field\"/>');\n                    field.label && $fixed_field.append($('<div class=\"label\"/>').text(field.label));\n                    field.values.forEach(function (value) {\n                        let $input = $('<div class=\"value\"/>').text(value);\n                        $fixed_field.append($input);\n                    }.bind(this));\n                    $data_form.append($fixed_field);\n                }\n                if (field.type === 'boolean') {\n                    let $input = $(`<button id=${field.var} class=\"data-form-field ground-color-100 btn-dark btn-flat btn-main boolean-field\"/>`).text(field.label);\n                    $data_form.append($input);\n                }\n            }.bind(this));\n            return $data_form;\n        },\n\n        copyTextToClipboard: function(text, callback_msg, errback_msg) {\n            if (!window.navigator.clipboard) {\n                return;\n            }\n            window.navigator.clipboard.writeText(text).then(function() {\n                if (callback_msg) {\n                    let info_msg = callback_msg;\n                    this.callback_popup_message(info_msg, 1500);\n                }\n            }.bind(this), function() {\n                if (errback_msg) {\n                    let info_msg = errback_msg;\n                    this.callback_popup_message(info_msg, 1500);\n                }\n            }.bind(this));\n        },\n\n        callback_popup_message: function (info_msg, time) {\n            let $body = $(document.body),\n                $popup_msg = $('<div class=\"callback-popup-message\"/>').text(info_msg);\n            time = time || 3000;\n            $body.find('.callback-popup-message').remove();\n            $body.append($popup_msg);\n            setTimeout( function() {\n                $popup_msg.remove();\n            }, time);\n        },\n\n        emoji_size: function (count) {\n            let size;\n            switch (count) {\n                case 1:\n                    size = 56;\n                    break;\n                case 2:\n                    size = 44;\n                    break;\n                case 3:\n                    size = 32;\n                    break;\n                case 4:\n                    size = 24;\n                    break;\n                case 5:\n                    size = 22;\n                    break;\n                default:\n                    size = 20;\n                    break;\n            }\n            return size;\n        },\n\n        openWindow: function (url, errback) {\n            let win = window.open(url, '_blank');\n            if (win) {\n                win.focus();\n            } else {\n                errback && errback();\n            }\n        },\n\n        clearSelection: function () {\n            var selection = window.getSelection();\n            if (selection.empty) {\n                selection.empty();\n            } else if (selection.removeAllRanges) {\n                selection.removeAllRanges();\n            }\n        },\n\n        getCookie: function (name) {\n            let matches = window.document.cookie.match(new RegExp(\n                \"(?:^|; )\" + name.replace(/([\\.$?*|{}\\(\\)\\[\\]\\\\\\/\\+^])/g, '\\\\$1') + \"=([^;]*)\"\n            ));\n            return matches ? decodeURIComponent(matches[1]) : undefined;\n        },\n\n        isMobile: {\n            Android: function () {\n                return navigator.userAgent.match(/Android/i);\n            },\n            BlackBerry: function () {\n                return navigator.userAgent.match(/BlackBerry/i);\n            },\n            iOS: function () {\n                return navigator.userAgent.match(/iPhone|iPad|iPod/i);\n            },\n            Opera: function () {\n                return navigator.userAgent.match(/Opera Mini/i);\n            },\n            Windows: function () {\n                return navigator.userAgent.match(/IEMobile/i) || navigator.userAgent.match(/WPDesktop/i);\n            },\n            any: function () {\n                return (this.Android() || this.BlackBerry() || this.iOS() || this.Opera() || this.Windows());\n            }\n        },\n\n        fromBase64toArrayBuffer: function (b64_string) {\n            return Uint8Array.from(atob(b64_string), c => c.charCodeAt(0)).buffer;\n        },\n\n        ArrayBuffertoBase64: function (arrayBuffer) {\n            return btoa(String.fromCharCode(...new Uint8Array(arrayBuffer)));\n        },\n\n        generateHOTPKey: async function(secret, counter) {\n            let Crypto = window.crypto.subtle;\n            let counterArray = this.padCounter(counter);\n\n            let key = await Crypto.importKey(\n                'raw',\n                secret,\n                { name: 'HMAC', hash: { name: 'SHA-1' } },\n                false,\n                ['sign']\n            );\n\n            let HS = await Crypto.sign('HMAC', key, counterArray);\n\n            return HS;\n        },\n\n        padCounter: function(counter) {\n            let buffer = new ArrayBuffer(8);\n            let bView = new DataView(buffer);\n\n            let byteString = '0'.repeat(64); // 8 bytes\n            let bCounter = (byteString + counter.toString(2)).slice(-64);\n\n            for (let byte = 0; byte < 64; byte += 8) {\n                let byteValue = parseInt(bCounter.slice(byte, byte + 8), 2);\n                bView.setUint8(byte / 8, byteValue);\n            }\n\n            return buffer;\n        },\n\n        DT: function(HS) {\n            let offset = HS[19] & 0b1111;\n            let P = ((HS[offset] & 0x7f) << 24) | (HS[offset + 1] << 16) | (HS[offset + 2] << 8) | HS[offset + 3]\n            let pString = P.toString(2);\n\n            return pString;\n        },\n\n        truncate: function(uKey) {\n            let Sbits = this.DT(uKey);\n            let Snum = parseInt(Sbits, 2);\n\n            return Snum;\n        },\n\n        generateHOTP: async function(secret, counter) {\n            let key = await this.generateHOTPKey(secret, counter);\n            let uKey = new Uint8Array(key);\n\n            let Snum = this.truncate(uKey);\n            let padded = ('000000' + (Snum % (10 ** 8))).slice(-8);\n\n            return padded;\n        },\n\n        hmacSha256: async function(key, message) {\n\n            let algorithm = { name: \"HMAC\", hash: \"SHA-256\" };\n\n            let hashBuffer = await crypto.subtle.sign(\n                algorithm.name,\n                key,\n                message\n            );\n\n            return hashBuffer;\n        },\n\n        stringToArrayBuffer: function (string) {\n            let { length } = string;\n            let buffer = new Uint8Array(length);\n\n            for (let i = 0; i < length; i++) {\n                buffer[i] = string.charCodeAt(i);\n            }\n\n            return buffer;\n        },\n\n        AES: {\n            ALGO_NAME: 'AES-GCM',\n\n            decoder: new window.TextDecoder('utf-8'),\n            encoder: new window.TextEncoder('utf-8'),\n\n            decrypt: async function (masterKey, HMACData, payload) {\n                let masterObj = await window.crypto.subtle.importKey('raw', masterKey, {name: 'HKDF'}, false, ['deriveKey', 'deriveBits']),\n                    hkdfCtrParams = { name: 'HKDF', salt: new Uint8Array(32), info: utils.stringToArrayBuffer('OMEMO Payload'), hash: 'SHA-256'};\n\n                let key = await window.crypto.subtle.deriveBits(hkdfCtrParams, masterObj, 640);\n\n                key = new Uint8Array(key);\n\n                let encryptionKey = key.slice(0,32),\n                    authenticationKey = key.slice(32,64),\n                    iv = key.slice(64);\n\n                let algorithm = { name: \"HMAC\", hash: \"SHA-256\" };\n\n                authenticationKey = await crypto.subtle.importKey(\n                    \"raw\",\n                    authenticationKey,\n                    algorithm,\n                    false, [\"sign\", \"verify\"]\n                );\n\n                let generatedHMAC = await utils.hmacSha256(authenticationKey, payload);\n\n                generatedHMAC = generatedHMAC.slice(0, generatedHMAC.byteLength - 16);\n\n                if (!(utils.ArrayBuffertoBase64(HMACData) === utils.ArrayBuffertoBase64(generatedHMAC)))\n                    return;\n\n                encryptionKey = await window.crypto.subtle.importKey('raw', encryptionKey, { \"name\": 'AES-CBC' }, true, ['decrypt'])\n\n\n                let decryptedBuffer = await window.crypto.subtle.decrypt({\n                    name: 'AES-CBC',\n                    iv,\n                }, encryptionKey, payload);\n\n                return utils.AES.decoder.decode(decryptedBuffer);\n            },\n\n            encrypt: async function (plaintext) {\n                let masterKey = window.crypto.getRandomValues(new Uint8Array(32)),\n                    masterObj = await window.crypto.subtle.importKey('raw', masterKey, {name: 'HKDF'}, false, ['deriveKey', 'deriveBits']),\n                    hkdfCtrParams = { name: 'HKDF', salt: new Uint8Array(32), info: utils.stringToArrayBuffer('OMEMO Payload'), hash: 'SHA-256'};\n\n                let key = await window.crypto.subtle.deriveBits(hkdfCtrParams, masterObj, 640);\n\n                key = new Uint8Array(key);\n\n                let encryptionKey = key.slice(0,32),\n                    authenticationKey = key.slice(32,64),\n                    iv = key.slice(64);\n\n                encryptionKey = await window.crypto.subtle.importKey('raw', encryptionKey, { \"name\": 'AES-CBC' }, true, ['encrypt']);\n\n                let encrypted = await utils.AES.generateAESencryptedMessage(iv, encryptionKey, plaintext);\n\n                let algorithm = { name: \"HMAC\", hash: \"SHA-256\" };\n                authenticationKey = await crypto.subtle.importKey(\n                    \"raw\",\n                    authenticationKey,\n                    algorithm,\n                    false, [\"sign\", \"verify\"]\n                );\n\n                let payload = await utils.hmacSha256(authenticationKey, encrypted);\n\n                payload = payload.slice(0, payload.byteLength - 16);\n\n                let keydata = new Uint8Array([...masterKey, ...new Uint8Array(payload)]);\n\n                return {\n                    keydata: keydata.buffer,\n                    payload: encrypted,\n                }\n            },\n\n            generateAESencryptedMessage: async function (iv, key, plaintext) {\n                let encryptOptions = {\n                    name: 'AES-CBC',\n                    iv,\n                };\n                let encodedPlaintext = utils.AES.encoder.encode(plaintext),\n                    encrypted = await window.crypto.subtle.encrypt(encryptOptions, key, encodedPlaintext);\n\n                return encrypted;\n            },\n\n            arrayBufferConcat: function () {\n                let length = 0,\n                    buffer = null;\n\n                for (let i in arguments) {\n                    buffer = arguments[i];\n                    length += buffer.byteLength;\n                }\n\n                let joined = new Uint8Array(length),\n                    offset = 0;\n\n                for (let i in arguments) {\n                    buffer = arguments[i];\n                    joined.set(new Uint8Array(buffer), offset);\n                    offset += buffer.byteLength;\n                }\n\n                return joined.buffer\n            },\n\n            generateAESKey: async function () {\n                let algo = {\n                    name: utils.AES.ALGO_NAME,\n                    length: constants.AES_KEY_LENGTH,\n                };\n                let keyUsage = ['encrypt', 'decrypt'],\n                    key = await window.crypto.subtle.generateKey(algo, constants.AES_EXTRACTABLE, keyUsage);\n\n                return key;\n            }\n        },\n\n        getBrowser: function () {\n            // Get the user-agent string\n            let userAgentString =\n                navigator.userAgent;\n\n            // Detect Chrome\n            let chromeAgent =\n                userAgentString.indexOf(\"Chrome\") > -1;\n\n            // Detect Internet Explorer\n            let IExplorerAgent =\n                userAgentString.indexOf(\"MSIE\") > -1 ||\n                userAgentString.indexOf(\"Windows NT:\") > -1;\n\n            // Detect Firefox\n            let firefoxAgent =\n                userAgentString.indexOf(\"Firefox\") > -1;\n\n            // Detect Safari\n            let safariAgent =\n                userAgentString.indexOf(\"Safari\") > -1;\n\n            // Discard Safari since it also matches Chrome\n            if ((chromeAgent) && (safariAgent))\n                safariAgent = false;\n\n            // Detect Opera\n            let operaAgent =\n                userAgentString.indexOf(\"OP\") > -1;\n\n            // Discard Chrome since it also matches Opera\n            if ((chromeAgent) && (operaAgent))\n                chromeAgent = false;\n\n            if (safariAgent)\n                return 'Safari';\n            if (chromeAgent)\n                return 'Chrome';\n            if (IExplorerAgent)\n                return 'IE';\n            if (operaAgent)\n                return 'Opera';\n            if (firefoxAgent)\n                return 'Firefox';\n            return 'Unknown browser';\n        },\n\n        emoji: emoji,\n        images: images,\n        modals: modals,\n        dialogs: modals.dialogs\n    };\n\n    return utils;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack://xabber.web/./src/utils/utils.js?")},"./src/vcard.js":(module,exports,__webpack_require__)=>{eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n  return function (xabber) {\n    let env = xabber.env,\n        constants = env.constants,\n        templates = env.templates.vcard,\n        $ = env.$,\n        _ = env._,\n        moment = env.moment,\n        Strophe = env.Strophe,\n        $iq = env.$iq,\n        $build = env.$build,\n        utils = env.utils;\n\n    let xmlToObject = function ($vcard) {\n        let vcard = {\n            nickname: $vcard.find('NICKNAME').text().trim(),\n            fullname: $vcard.find('FN').text().trim(),\n            first_name: $vcard.find('N GIVEN').text().trim(),\n            middle_name: $vcard.find('N MIDDLE').text().trim(),\n            last_name: $vcard.find('N FAMILY').text().trim(),\n            birthday: $vcard.find('BDAY').text().trim(),\n            job_title: $vcard.find('TITLE').text().trim(),\n            role: $vcard.find('ROLE').text().trim(),\n            url: $vcard.find('URL').text().trim(),\n            description: $vcard.find('DESC').text().trim(),\n            jabber_id: $vcard.find('JABBERID').text().trim(),\n            org: {},\n            photo: {},\n            phone: {},\n            address: {},\n            email: {}\n        };\n\n        if ($vcard.find('X-PRIVACY').length || $vcard.find('X-MEMBERSHIP').length || $vcard.find('X-INDEX').length) {\n            vcard.group_info = {\n                jid: vcard.jabber_id,\n                description: vcard.description,\n                name: vcard.nickname,\n                anonymous: $vcard.find('X-PRIVACY').text().trim(),\n                searchable: $vcard.find('X-INDEX').text().trim(),\n                model: $vcard.find('X-MEMBERSHIP').text().trim(),\n                status_msg: $vcard.find('X-STATUS').text().trim(),\n                members_num: $vcard.find('X-MEMBERS').text().trim()\n            };\n        }\n\n        let $org = $vcard.find('ORG');\n        if ($org.length) {\n            vcard.org.name = $org.find('ORGNAME').text().trim();\n            vcard.org.unit = $org.find('ORGUNIT').text().trim();\n        }\n\n        let $photo = $vcard.find('PHOTO');\n        if ($photo.length) {\n            vcard.photo.image = $photo.find('BINVAL').text().trim();\n            vcard.photo.type = $photo.find('TYPE').text().trim();\n        }\n\n        $vcard.find('TEL').each(function () {\n            let $this = $(this),\n                number = $this.find('NUMBER').text().trim();\n            if (!number) {\n                return;\n            }\n            if ($this.find('WORK').length) {\n                vcard.phone.work = number;\n            } else if ($this.find('HOME').length) {\n                vcard.phone.home = number;\n            } else if ($this.find('MOBILE').length) {\n                vcard.phone.mobile = number;\n            } else {\n                vcard.phone.default = number;\n            }\n        });\n\n        $vcard.find('EMAIL').each(function () {\n            let $this = $(this);\n            let email = $this.find('USERID').text().trim();\n            if (!email) {\n                return;\n            }\n            if ($this.find('WORK').length) {\n                vcard.email.work = email;\n            } else if ($this.find('HOME').length) {\n                vcard.email.home = email;\n            } else {\n                vcard.email.default = email;\n            }\n        });\n\n        $vcard.find('ADR').each(function () {\n            let $this = $(this);\n            let address = {\n                pobox: $this.find('POBOX').text().trim(),\n                extadd: $this.find('EXTADR').text().trim(),\n                street: $this.find('STREET').text().trim(),\n                locality: $this.find('LOCALITY').text().trim(),\n                region: $this.find('REGION').text().trim(),\n                pcode: $this.find('PCODE').text().trim(),\n                country: $this.find('CTRY').text().trim()\n            };\n            if ($this.find('WORK').length) {\n                vcard.address.work = address;\n            } else if ($this.find('HOME').length) {\n                vcard.address.home = address;\n            } else {\n                vcard.address.default = address;\n            }\n        });\n\n        return vcard;\n    };\n\n    let objectToXml = function (vcard) {\n        let $vcard = $build(\"vCard\", {xmlns: Strophe.NS.VCARD});\n        vcard.nickname && $vcard.c(\"NICKNAME\").t(vcard.nickname).up();\n        vcard.fullname && $vcard.c(\"FN\").t(vcard.fullname).up();\n        if (vcard.first_name || vcard.last_name || vcard.middle_name) {\n            $vcard.c(\"N\");\n            vcard.first_name && $vcard.c(\"GIVEN\").t(vcard.first_name).up();\n            vcard.last_name && $vcard.c(\"FAMILY\").t(vcard.last_name).up();\n            vcard.middle_name && $vcard.c(\"MIDDLE\").t(vcard.middle_name).up();\n            $vcard.up();\n        }\n        vcard.birthday && $vcard.c(\"BDAY\").t(vcard.birthday).up();\n        vcard.job_title && $vcard.c(\"TITLE\").t(vcard.job_title).up();\n        vcard.role && $vcard.c(\"ROLE\").t(vcard.role).up();\n        if (vcard.org.name || vcard.org.unit) {\n            $vcard.c(\"ORG\");\n            vcard.org.name && $vcard.c(\"ORGNAME\").t(vcard.org.name).up();\n            vcard.org.unit && $vcard.c(\"ORGUNIT\").t(vcard.org.unit).up();\n            $vcard.up();\n        }\n        vcard.url && $vcard.c(\"URL\").t(vcard.url).up();\n        if (vcard.photo.image) {\n            $vcard.c(\"PHOTO\").c(\"BINVAL\").t(vcard.photo.image).up();\n            $vcard.c(\"TYPE\").t(vcard.photo.type || 'image/jpeg').up();\n            $vcard.up();\n        }\n        vcard.description && $vcard.c(\"DESC\").t(vcard.description).up();\n        vcard.jabber_id && $vcard.c(\"JABBERID\").t(vcard.jabber_id).up();\n\n        _.each(vcard.phone, function (phone, type) {\n            $vcard.c(\"TEL\").c(\"NUMBER\").t(phone).up();\n            type !== 'default' && $vcard.c(type.toUpperCase()).up();\n            $vcard.up();\n        });\n\n        _.each(vcard.email, function (email, type) {\n            $vcard.c(\"EMAIL\").c(\"USERID\").t(email).up();\n            type !== 'default' && $vcard.c(type.toUpperCase()).up();\n            $vcard.up();\n        });\n\n        _.each(vcard.address, function (address, type) {\n            $vcard.c(\"ADR\");\n            type !== 'default' && $vcard.c(type.toUpperCase()).up();\n            address.pobox && $vcard.c(\"POBOX\").t(address.pobox).up();\n            address.extadd && $vcard.c(\"EXTADR\").t(address.extadd).up();\n            address.street && $vcard.c(\"STREET\").t(address.street).up();\n            address.locality && $vcard.c(\"LOCALITY\").t(address.locality).up();\n            address.region && $vcard.c(\"REGION\").t(address.region).up();\n            address.pcode && $vcard.c(\"PCODE\").t(address.pcode).up();\n            address.country && $vcard.c(\"CTRY\").t(address.country).up();\n            $vcard.up();\n        });\n\n        return $vcard.tree();\n    };\n\n    Strophe.addConnectionPlugin('vcard', {\n        _connection: null,\n\n        init: function(conn) {\n            this._connection = conn;\n            return Strophe.addNamespace('VCARD', 'vcard-temp');\n        },\n\n        get: function(jid, callback, errback) {\n            let iq = $iq({type: 'get', to: jid}).c('vCard', {xmlns: Strophe.NS.VCARD});\n            this._connection.sendIQ(iq, function (res) {\n                if (!callback) { return; }\n                let vcard = xmlToObject($(res).find('vCard[xmlns='+Strophe.NS.VCARD+']'));\n                vcard.jabber_id || (vcard.jabber_id = jid);\n                return callback(vcard);\n            }, errback);\n        },\n\n        set: function(jid, vcard, callback, errback) {\n            vcard.jabber_id || (vcard.jabber_id = jid);\n            let iq = $iq({type: 'set', to: jid}).cnode(objectToXml(vcard));\n            this._connection.sendIQ(iq, callback, errback);\n        }\n    });\n\n    utils.vcard = {\n        getBlank: function (jid) {\n            let vcard = xmlToObject($('<div/>'));\n            vcard.jabber_id = jid;\n            return vcard;\n        }\n    };\n\n    xabber.VCardView = xabber.BasicView.extend({\n        template: templates.vcard,\n\n        _initialize: function () {\n            this.$el.html(this.template());\n            this.model.on(\"change:vcard_updated\", this.update, this);\n            this.data.on(\"change:refresh\", this.updateRefreshButton, this);\n        },\n\n        render: function () {\n            this.$('.block-header .block-name').text(this.model.get('group_chat') ? 'Group chat details' : xabber.getString(\"vcard_screen__header\"));\n            this.data.set('refresh', false);\n            this.model.getVCard(() => {\n                this.update();\n            });\n        },\n\n        update: function () {\n            let $info, vcard = this.model.get('vcard');\n\n            $info = this.$('.jid-info-wrap');\n            $info.find('.jabber-id').showIf(vcard.jabber_id).find('.value').text(vcard.jabber_id);\n            $info.showIf(vcard.jabber_id);\n\n            $info = this.$('.personal-info-wrap');\n            $info.find('.fullname').showIf(vcard.fullname).find('.value').text(vcard.fullname);\n            $info.find('.first-name').showIf(vcard.first_name).find('.value').text(vcard.first_name);\n            $info.find('.middle-name').showIf(vcard.middle_name).find('.value').text(vcard.middle_name);\n            $info.find('.last-name').showIf(vcard.last_name).find('.value').text(vcard.last_name);\n            $info.showIf(vcard.fullname || vcard.first_name || vcard.middle_name || vcard.last_name);\n\n            $info = this.$('.nickname-info-wrap');\n            $info.find('.nickname').showIf(vcard.nickname).find('.value').text(vcard.nickname);\n            $info.showIf(vcard.nickname);\n\n            $info = this.$('.birthday-info-wrap');\n            $info.find('.birthday').showIf(vcard.birthday).find('.value').text(vcard.birthday);\n            $info.showIf(vcard.birthday);\n\n            $info = this.$('.job-info-wrap');\n            $info.find('.role').showIf(vcard.role).find('.value').text(vcard.role);\n            $info.find('.job-title').showIf(vcard.job_title).find('.value').text(vcard.job_title);\n            $info.find('.org-name').showIf(vcard.org.name).find('.value').text(vcard.org.name);\n            $info.find('.org-unit').showIf(vcard.org.unit).find('.value').text(vcard.org.unit);\n            $info.showIf(vcard.role || vcard.job_title || vcard.org.name || vcard.org.unit);\n\n            $info = this.$('.site-info-wrap');\n            $info.find('.url').showIf(vcard.url).find('.value').text(vcard.url).hyperlinkify();\n            $info.showIf(vcard.url);\n\n            $info = this.$('.description-info-wrap');\n            $info.find('.description').showIf(vcard.description).find('.value').text(vcard.description);\n            $info.showIf(vcard.description);\n\n            let $addr_info = this.$('.address-info-wrap'),\n                address = _.clone(vcard.address),\n                show_addr_block = false;\n            $addr_info.find('.info').addClass('hidden');\n            _.each(address, function (addr, type) {\n                $info = $addr_info.find('.address-'+type);\n                $info.find('.pobox').showIf(addr.pobox).text(addr.pobox);\n                $info.find('.extadd').showIf(addr.extadd).text(addr.extadd);\n                $info.find('.street').showIf(addr.street).text(addr.street);\n                $info.find('.locality').showIf(addr.locality).text(addr.locality);\n                $info.find('.region').showIf(addr.region).text(addr.region);\n                $info.find('.pcode').showIf(addr.pcode).text(addr.pcode);\n                $info.find('.country').showIf(addr.country).text(addr.country);\n                let show = (addr.pobox || addr.extadd || addr.street || addr.locality ||\n                             addr.region || addr.pcode || addr.country);\n                show && (show_addr_block = true);\n                $info.showIf(show);\n            });\n            $addr_info.showIf(show_addr_block);\n\n            $info = this.$('.phone-info-wrap');\n            let phone = vcard.phone;\n            if (phone) {\n                $info.find('.phone-work').showIf(phone.work).find('.value').text(phone.work);\n                $info.find('.phone-home').showIf(phone.home).find('.value').text(phone.home);\n                $info.find('.phone-mobile').showIf(phone.mobile).find('.value').text(phone.mobile);\n                $info.find('.phone-default').showIf(phone.default).find('.value').text(phone.default);\n            }\n            $info.showIf(phone && (phone.work || phone.home || phone.mobile || phone.default));\n\n            $info = this.$('.email-info-wrap');\n            let email = vcard.email;\n            if (email) {\n                $info.find('.email-work').showIf(email.work).find('.value').text(email.work);\n                $info.find('.email-home').showIf(email.home).find('.value').text(email.home);\n                $info.find('.email-default').showIf(email.default).find('.value').text(email.default);\n            }\n            $info.showIf(email && (email.work || email.home || email.default));\n\n            this.parent.updateScrollBar();\n        },\n\n        onClickIcon: function (ev) {\n            let $target_info = $(ev.target).closest('.info-wrap'),\n                $target_value = $target_info.find('.value'), copied_text = \"\";\n            $target_value.each((idx, item) => {\n                let $item = $(item),\n                    value_text = $item.text();\n                value_text && (copied_text != \"\") && (copied_text += '\\n');\n                value_text && (copied_text += value_text);\n                copied_text && utils.copyTextToClipboard(copied_text, xabber.getString(\"toast__copied_in_clipboard\"), xabber.getString(\"toast__not_copied_in_clipboard\"));\n            });\n        },\n\n        updateRefreshButton: function () {\n            this.$('.btn-vcard-refresh .button').hideIf(this.data.get('refresh'));\n            this.$('.btn-vcard-refresh .preloader-wrapper').showIf(this.data.get('refresh'));\n        },\n\n        refresh: function () {\n            if (!this.data.get('refresh')) {\n                this.data.set('refresh', true);\n                this.model.getVCard(() => {\n                    this.data.set('refresh', false);\n                });\n            }\n        }\n    });\n\n    xabber.VCardRightView = xabber.VCardView.extend({\n        template: templates.vcard_right,\n\n        __initialize: function (ev) {\n            this.ps_container = this.$('.full-vcard-content');\n            if (this.ps_container.length) {\n                this.ps_container.perfectScrollbar(\n                    _.extend(this.ps_settings || {}, xabber.ps_settings)\n                );\n            }\n            this.ps_container.on(\"ps-scroll-up ps-scroll-down\", this.onScroll.bind(this));\n            this.model.set('vcard_hidden', true)\n        },\n\n        render: function () {\n            this.data.set('refresh', false);\n            this.update();\n            this.$('.full-vcard-wrap').hideIf(this.model.get('vcard_hidden'))\n            if (this.parent.ps_container.length) {\n                if(!this.model.get('vcard_hidden'))\n                    this.parent.ps_container.perfectScrollbar('destroy')\n                else\n                    this.parent.ps_container.perfectScrollbar(\n                        _.extend(this.parent.ps_settings || {}, xabber.ps_settings)\n                    );\n            }\n            this.model.updateName();\n            this.model.updateAvatar();\n            this.model.getVCard(() => {\n                this.update();\n            });\n        },\n\n        update: function () {\n            let $info, vcard = this.model.get('vcard');\n\n            $info = this.$('.jid-info-wrap');\n            $info.find('.jabber-id').showIf(vcard.jabber_id).find('.value').text(vcard.jabber_id);\n            $info.showIf(vcard.jabber_id);\n\n            $info = this.$('.vcard-wrap .personal-info-wrap');\n            $info.find('.first-name').showIf(vcard.first_name).find('.value').text(vcard.first_name);\n            $info.find('.last-name').showIf(vcard.last_name).find('.value').text(vcard.last_name);\n            $info.showIf(vcard.first_name || vcard.last_name);\n\n            $info = this.$('.full-vcard-wrap .personal-info-wrap');\n            $info.find('.fullname').showIf(vcard.fullname).find('.value').text(vcard.fullname);\n            $info.find('.first-name').showIf(vcard.first_name).find('.value').text(vcard.first_name);\n            $info.find('.middle-name').showIf(vcard.middle_name).find('.value').text(vcard.middle_name);\n            $info.find('.last-name').showIf(vcard.last_name).find('.value').text(vcard.last_name);\n            $info.showIf(vcard.fullname || vcard.first_name || vcard.middle_name || vcard.last_name);\n\n            $info = this.$('.nickname-info-wrap');\n            $info.find('.nickname').showIf(vcard.nickname).find('.value').text(vcard.nickname);\n            $info.showIf(vcard.nickname);\n\n            $info = this.$('.birthday-info-wrap');\n            $info.find('.birthday').showIf(vcard.birthday).find('.value').text(vcard.birthday);\n            $info.showIf(vcard.birthday);\n\n            $info = this.$('.job-info-wrap');\n            $info.find('.role').showIf(vcard.role).find('.value').text(vcard.role);\n            $info.find('.job-title').showIf(vcard.job_title).find('.value').text(vcard.job_title);\n            $info.find('.org-name').showIf(vcard.org.name).find('.value').text(vcard.org.name);\n            $info.find('.org-unit').showIf(vcard.org.unit).find('.value').text(vcard.org.unit);\n            $info.showIf(vcard.role || vcard.job_title || vcard.org.name || vcard.org.unit);\n\n            $info = this.$('.site-info-wrap');\n            $info.find('.url').showIf(vcard.url).find('.value').text(vcard.url).hyperlinkify();\n            $info.showIf(vcard.url);\n\n            $info = this.$('.description-info-wrap');\n            $info.find('.description').showIf(vcard.description).find('.value').text(vcard.description);\n            $info.showIf(vcard.description);\n\n            let $addr_info = this.$('.address-info-wrap'),\n                address = _.clone(vcard.address),\n                show_addr_block = false;\n            $addr_info.find('.info').addClass('hidden');\n            _.each(address, function (addr, type) {\n                $info = $addr_info.find('.address-'+type);\n                $info.find('.pobox').showIf(addr.pobox).text(addr.pobox);\n                $info.find('.extadd').showIf(addr.extadd).text(addr.extadd);\n                $info.find('.street').showIf(addr.street).text(addr.street);\n                $info.find('.locality').showIf(addr.locality).text(addr.locality);\n                $info.find('.region').showIf(addr.region).text(addr.region);\n                $info.find('.pcode').showIf(addr.pcode).text(addr.pcode);\n                $info.find('.country').showIf(addr.country).text(addr.country);\n                let show = (addr.pobox || addr.extadd || addr.street || addr.locality ||\n                    addr.region || addr.pcode || addr.country);\n                show && (show_addr_block = true);\n                $info.showIf(show);\n            });\n            $addr_info.showIf(show_addr_block);\n\n            $info = this.$('.phone-info-wrap');\n            let phone = vcard.phone;\n            if (phone) {\n                $info.find('.phone-work').showIf(phone.work).find('.value').text(phone.work);\n                $info.find('.phone-home').showIf(phone.home).find('.value').text(phone.home);\n                $info.find('.phone-mobile').showIf(phone.mobile).find('.value').text(phone.mobile);\n                $info.find('.phone-default').showIf(phone.default).find('.value').text(phone.default);\n            }\n            $info.showIf(phone && (phone.work || phone.home || phone.mobile || phone.default));\n\n            $info = this.$('.email-info-wrap');\n            let email = vcard.email;\n            if (email) {\n                $info.find('.email-work').showIf(email.work).find('.value').text(email.work);\n                $info.find('.email-home').showIf(email.home).find('.value').text(email.home);\n                $info.find('.email-default').showIf(email.default).find('.value').text(email.default);\n            }\n            $info.showIf(email && (email.work || email.home || email.default));\n\n            this.parent.updateScrollBar();\n        },\n\n        onScroll: function () {\n            if(this.ps_container[0].scrollTop >= 170) {\n                this.$('.vcard-header-title').addClass('fixed-scroll');\n                this.$('.vcard-header-title').css({'background-color': 'rgba(255,255,255,1)'});\n            }\n            else if(this.ps_container[0].scrollTop >= 40) {\n                this.$('.vcard-header-title').removeClass('fixed-scroll');\n                this.$('.vcard-header-title').css({'background-color': 'rgba(255,255,255,0.5)'});\n            }\n            else {\n                this.$('.vcard-header-title').removeClass('fixed-scroll');\n                this.$('.vcard-header-title').css({'background-color': 'rgba(255,255,255,0)'});\n            }\n\n        },\n\n        onClickIcon: function (ev) {\n            let $target_info = $(ev.target),\n                $target_value = $target_info.find('.value'), copied_text = \"\";\n            $target_value.each((idx, item) => {\n                let $item = $(item),\n                    value_text = $item.text();\n                value_text && (copied_text != \"\") && (copied_text += '\\n');\n                value_text && (copied_text += value_text);\n                copied_text && utils.copyTextToClipboard(copied_text, xabber.getString(\"toast__copied_in_clipboard\"), xabber.getString(\"toast__not_copied_in_clipboard\"));\n            });\n        },\n\n    });\n\n    xabber.VCardEditView = xabber.BasicView.extend({\n        className: 'account-vcard-edit-wrap',\n        template: templates.vcard_edit,\n        ps_selector: '.panel-content',\n\n        events: {\n            \"keyup input\": \"keyUp\",\n            \"keyup textarea\": \"keyUp\",\n            \"input .first-name input\": \"changePlaceholder\",\n            \"input .middle-name input\": \"changePlaceholder\",\n            \"input .last-name input\": \"changePlaceholder\",\n            \"click .btn-vcard-save\": \"save\",\n            \"click .btn-vcard-back\": \"render\",\n        },\n\n        _initialize: function () {\n            let self = this,\n                $input = this.$('.datepicker').pickadate({\n                selectMonths: true,\n                selectYears: 100,\n                autoOk: false,\n                // min = 100 years ago\n                min: new Date(moment.now() - 3153600000000),\n                max: new Date(moment.now() - 86400000),\n                format: 'dd.mm.yyyy',\n                allowKeyboardControl: false,\n                today: '',\n                onClose: function(){\n                    $(document.activeElement).blur();\n                    self.$('.btn-vcard-back').removeClass('hidden');\n                    self.$('.btn-vcard-save').removeClass('hidden');\n                },\n                klass: {\n                    weekday_display: 'picker__weekday-display ground-color-700',\n                    date_display: 'picker__date-display ground-color-500',\n                    navPrev: 'picker__nav--prev hover-ground-color-100',\n                    navNext: 'picker__nav--next hover-ground-color-100',\n                    selected: 'picker__day--selected ground-color-500',\n                    now: 'picker__day--today text-color-700',\n                    buttonClear: 'btn-flat btn-main btn-dark',\n                    buttonClose: 'btn-flat btn-main text-color-700'\n                }\n            });\n            $input.on('mousedown', function cancelEvent(evt) {\n                evt.preventDefault();\n            });\n            this.data.on(\"change:saving\", this.updateSaveButton, this);\n        },\n\n        render: function () {\n            this.data.set('saving', false);\n            this.setData();\n            Materialize.updateTextFields();\n            this.changePlaceholder();\n            this.updateScrollBar();\n            this.$('.btn-vcard-back').addClass('hidden');\n            this.$('.btn-vcard-save').addClass('hidden');\n        },\n\n        changePlaceholder: function () {\n            let nickname_placeholder = ((this.$('.first-name input').val() + \" \" + this.$('.middle-name input').val()).trim() + \" \" + this.$('.last-name input').val()).trim() || this.model.get('jid');\n            this.$('.nickname input').attr('placeholder', nickname_placeholder);\n        },\n\n        setData: function () {\n            let vcard = this.model.get('vcard');\n\n            this.$('.nickname input').val(vcard.nickname);\n            this.$('.fullname input').val(vcard.fullname);\n            this.$('.first-name input').val(vcard.first_name);\n            this.$('.last-name input').val(vcard.last_name);\n            this.$('.middle-name input').val(vcard.middle_name);\n\n            this.$('.birthday input').val(vcard.birthday);\n\n            this.$('.role input').val(vcard.role);\n            this.$('.job-title input').val(vcard.job_title);\n            this.$('.org-name input').val(vcard.org.name);\n            this.$('.org-unit input').val(vcard.org.unit);\n\n            this.$('.url input').val(vcard.url);\n\n            this.$('.description textarea').val(vcard.description);\n\n            this.$('.phone-work input').val(vcard.phone.work);\n            this.$('.phone-home input').val(vcard.phone.home);\n            this.$('.phone-mobile input').val(vcard.phone.mobile);\n\n            this.$('.email-work input').val(vcard.email.work);\n            this.$('.email-home input').val(vcard.email.home);\n\n            let addr = vcard.address.work || {},\n                $info = this.$('.address-work-wrap');\n            $info.find('.pobox input').val(addr.pobox);\n            $info.find('.extadd input').val(addr.extadd);\n            $info.find('.street input').val(addr.street);\n            $info.find('.locality input').val(addr.locality);\n            $info.find('.region input').val(addr.region);\n            $info.find('.pcode input').val(addr.pcode);\n            $info.find('.country input').val(addr.country);\n\n            addr = vcard.address.home || {};\n            $info = this.$('.address-home-wrap');\n            $info.find('.pobox input').val(addr.pobox);\n            $info.find('.extadd input').val(addr.extadd);\n            $info.find('.street input').val(addr.street);\n            $info.find('.locality input').val(addr.locality);\n            $info.find('.region input').val(addr.region);\n            $info.find('.pcode input').val(addr.pcode);\n            $info.find('.country input').val(addr.country);\n        },\n\n        getData: function () {\n            let vcard = utils.vcard.getBlank(this.model.get('jid'));\n\n            vcard.nickname = this.$('.nickname input').val();\n            vcard.fullname = this.$('.fullname input').val();\n            vcard.first_name = this.$('.first-name input').val();\n            vcard.last_name = this.$('.last-name input').val();\n            vcard.middle_name = this.$('.middle-name input').val();\n\n            vcard.birthday = this.$('.birthday input').val();\n\n            vcard.role = this.$('.role input').val();\n            vcard.job_title = this.$('.job-title input').val();\n            vcard.org.name = this.$('.org-name input').val();\n            vcard.org.unit = this.$('.org-unit input').val();\n\n            vcard.url = this.$('.url input').val();\n\n            vcard.description = this.$('.description textarea').val();\n\n            vcard.phone.work = this.$('.phone-work input').val();\n            vcard.phone.home = this.$('.phone-home input').val();\n            vcard.phone.mobile = this.$('.phone-mobile input').val();\n\n            vcard.email.work = this.$('.email-work input').val();\n            vcard.email.home = this.$('.email-home input').val();\n\n            vcard.address.work = {};\n            let addr = vcard.address.work,\n                $info = this.$('.address-work-wrap');\n            addr.pobox = $info.find('.pobox input').val();\n            addr.extadd = $info.find('.extadd input').val();\n            addr.street = $info.find('.street input').val();\n            addr.locality = $info.find('.locality input').val();\n            addr.region = $info.find('.region input').val();\n            addr.pcode = $info.find('.pcode input').val();\n            addr.country = $info.find('.country input').val();\n\n            vcard.address.home = {};\n            addr = vcard.address.home;\n            $info = this.$('.address-home-wrap');\n            addr.pobox = $info.find('.pobox input').val();\n            addr.extadd = $info.find('.extadd input').val();\n            addr.street = $info.find('.street input').val();\n            addr.locality = $info.find('.locality input').val();\n            addr.region = $info.find('.region input').val();\n            addr.pcode = $info.find('.pcode input').val();\n            addr.country = $info.find('.country input').val();\n            return vcard;\n        },\n\n        updateSaveButton: function () {\n            this.$('.btn-vcard-save').text(this.data.get('saving') ? xabber.getString(\"saving\") : xabber.getString(\"vcard_edit__button_save\"));\n        },\n\n        save: function () {\n            if (this.data.get('saving')) {\n                return;\n            }\n            this.data.set('saving', true);\n            this.model.setVCard(this.getData(),\n                () => {\n                    this.model.getVCard();\n                    this.data.set('saving', false);\n                    this.$('.btn-vcard-back').addClass('hidden');\n                    this.$('.btn-vcard-save').addClass('hidden');\n                },\n                function () {\n                    utils.dialogs.error(xabber.getString(\"account_user_info_save_fail\"));\n                    this.data.set('saving', false);\n                }\n            );\n        },\n\n        keyUp: function () {\n            this.$('.btn-vcard-back').removeClass('hidden');\n            this.$('.btn-vcard-save').removeClass('hidden');\n        },\n    });\n\n    return xabber;\n  };\n}).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack://xabber.web/./src/vcard.js?")},"./src/views.js":(module,exports,__webpack_require__)=>{eval("/* provided dependency */ var Strophe = __webpack_require__(/*! strophe */ \"./node_modules/strophe.js/strophe.js\");\n/* provided dependency */ var Plyr = __webpack_require__(/*! Plyr */ \"./src/lib/plyr.js\");\n/* provided dependency */ var client_translation_progress = __webpack_require__(/*! xabber-translations-info */ \"./translations/translation_progress.js\");\nvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n  return function (xabber) {\n    let env = xabber.env,\n        constants = env.constants,\n        templates = env.templates.base,\n        utils = env.utils,\n        uuid = env.uuid,\n        $ = env.$,\n        _ = env._;\n\n    xabber.ViewPath = function (str) {\n        this.path = str.split('.');\n        this.applyTo = function (obj) {\n            let result = obj;\n            for (let idx = 0; idx < this.path.length; idx++) {\n                if (!(result = _.result(result, this.path[idx]))) {\n                    return null;\n                }\n            }\n            return result;\n        };\n    };\n\n    xabber.BasicView = Backbone.View.extend({\n        template: function () {\n            return '';\n        },\n\n        initialize: function (options) {\n            options || (options = {});\n            this.parent = options.parent;\n            this.vname = options.vname;\n            this.children = {};\n            this.$el.addClass(options.classlist);\n            if (!options.el) {\n                this.$el.html(this.template(_.extend({view: this}, constants)));\n            }\n            if (!_.isUndefined(this.ps_selector)) {\n                this.ps_container = this.$(this.ps_selector);\n                if (this.ps_container.length) {\n                    this.ps_container.perfectScrollbar(\n                        _.extend(this.ps_settings || {}, xabber.ps_settings)\n                    );\n                }\n            }\n            this.data = new Backbone.Model({visible: false});\n            this.data.on(\"change:visible\", this.onChangedVisibility, this);\n            xabber.on(\"update_css\", function (options) {\n                this.updateCSS && this.updateCSS();\n                (options && options.size_changed && this.windowResized) && this.windowResized();\n            }, this);\n            this._initialize && this._initialize(options);\n            this.__initialize && this.__initialize(options);\n        },\n\n        isVisible: function () {\n            return this.data.get('visible');\n        },\n\n        onChangedVisibility: function () {},\n\n        show: function () {\n            this.onShow.apply(this, arguments);\n            this.data.set('visible', true);\n            this.trigger('after_show', this);\n            this.updateScrollBar();\n        },\n\n        hide: function () {\n            this.trigger('before_hide', this);\n            this.data.set('visible', false);\n            this.onHide.apply(this, arguments);\n        },\n\n        onShow: function () {\n            this.render.apply(this, arguments);\n            _.each(this.children, function (view) {\n                view.render.apply(view, arguments);\n            });\n        },\n\n        onHide: function () {\n            _.each(this.children, function (view) {\n                view.onHide.apply(view, arguments);\n            });\n        },\n\n        detach: function () {\n            this.$el.detach();\n        },\n\n        child: function (name) {\n            return this.children[name];\n        },\n\n        addChild: function (name, constructor, options) {\n            let view;\n            if (constructor instanceof Backbone.View) {\n                view = constructor;\n                view.parent = this;\n            } else {\n                view = new constructor(_.extend({\n                    parent: this,\n                    vname: name\n                }, options));\n            }\n            this.children[name] = view;\n            return view;\n        },\n\n        removeChild: function (name, options) {\n            options || (options = {});\n            let view = this.children[name];\n            if (view) {\n                delete this.children[name];\n                options.soft ? view.detach() : (view.trigger(\"remove\") && view.remove());\n            }\n        },\n\n        removeChildren: function () {\n            _.each(_.keys(this.children), (view_id) => {\n                this.removeChild(view_id);\n            });\n        },\n\n        setCustomCss: function (styles) {\n            this.$el.css(styles);\n        },\n\n        removeCustomCss: function () {\n            this.$el.removeAttr('style');\n        },\n\n        saveScrollBarOffset: function () {\n            if (this.ps_container && this.isVisible()) {\n                let scroll_top = this.data.get('scroll_top');\n                if (typeof scroll_top === \"undefined\") {\n                    this.data.set('scroll_top', this.getScrollTop());\n                }\n            }\n        },\n\n        updateScrollBar: function () {\n            // let start_scrolled_bottom = this.getScrollBottom();\n            if (this.ps_container && this.isVisible()) {\n                let scroll_top = this.data.get('scroll_top');\n                if (typeof scroll_top === \"undefined\") {\n                    this.ps_container.perfectScrollbar('update');\n                } else {\n                    this.data.set('scroll_top', undefined);\n                    this.scrollTo(scroll_top);\n                }\n            }\n            // this.scrollTo(this.ps_container[0].scrollHeight - this.ps_container[0].offsetHeight - start_scrolled_bottom);\n            return this;\n        },\n\n        scrollTo: function (offset) {\n            this.ps_container[0].scrollTop = offset;\n            this.ps_container.perfectScrollbar('update');\n        },\n\n        scrollToTop: function () {\n            this.scrollTo(0);\n        },\n\n        scrollToBottom: function () {\n            let scrollHeight = this.ps_container[0].scrollHeight,\n                offsetHeight = this.ps_container[0].offsetHeight;\n            this.scrollTo(scrollHeight - offsetHeight);\n        },\n\n        scrollToChild: function ($child) {\n            let scrollTop = _.reduce($child.prevAll(), function (sum, el) {\n                return sum + el.offsetHeight + 2;\n            }, 0);\n            this.scrollTo(scrollTop);\n        },\n\n        getScrollTop: function () {\n            return this.ps_container[0].scrollTop;\n        },\n\n        getScrollBottom: function () {\n            let scrollTop = this.ps_container[0].scrollTop,\n                scrollHeight = this.ps_container[0].scrollHeight,\n                offsetHeight = this.ps_container[0].offsetHeight;\n            return scrollHeight - (scrollTop + offsetHeight);\n        },\n\n        getPercentScrolled: function () {\n            if (this.isScrolledToTop()) {\n                return 0;\n            }\n            let scrollTop = this.ps_container[0].scrollTop,\n                scrollHeight = this.ps_container[0].scrollHeight,\n                offsetHeight = this.ps_container[0].offsetHeight;\n            return scrollTop / (scrollHeight - offsetHeight);\n        },\n\n        isScrolledToTop: function () {\n            return this.getScrollTop() === 0;\n        },\n\n        isScrolledToBottom: function () {\n            let scrollTop = this.ps_container[0].scrollTop,\n                scrollHeight = this.ps_container[0].scrollHeight,\n                offsetHeight = this.ps_container[0].offsetHeight;\n            return scrollHeight === scrollTop + offsetHeight;\n        }\n    });\n\n    xabber.NodeView = xabber.BasicView.extend({\n        onShow: function (options, tree) {\n            if ((xabber.body.data.get('contact_details_view') && (this.vname === 'right_contact'))){\n                xabber.body.data.get('contact_details_view').scrollTo(xabber.body.data.get('contact_details_view').data.get('scroll_top'));\n                xabber.body.data.set('contact_details_view', null)\n                return;\n            }\n            _.each(this.children, function (view) {\n                view.hide();\n            });\n            this.$el.children().detach();\n            tree = this.patchTree(tree, options) || tree;\n            _.each(this.children, (view, name) => {\n                if (_.has(tree, name)) {\n                    if (name !== 'login')\n                        this.$el.append(view.$el);\n                    this.$el.switchClass('hidden', name === 'login');\n                    view.show(options, tree[name]);\n                }\n            });\n            return this.render(options);\n        },\n\n        onHide: function (options) {\n            _.each(this.children, function (view) {\n                view.hide(options);\n            });\n        },\n\n        patchTree: function () {}\n    });\n\n    xabber.Container = xabber.BasicView.extend({\n        className: 'container',\n\n        render: function (options, path) {\n            let new_view = path.applyTo(options);\n            this.$el.children().detach();\n            if (this.view !== new_view) {\n                this.onHide(options);\n            }\n            this.view = new_view;\n            if (this.view) {\n                this.$el.append(this.view.$el);\n                this.view.show(options);\n            }\n            return this;\n        },\n\n        onHide: function (options) {\n            if (this.view) {\n                this.view.hide(options);\n            }\n            this.view = null;\n        }\n    });\n\n    xabber.SearchView = xabber.BasicView.extend({\n        events: {\n            \"keydown .search-input\": \"keyUpOnSearch\",\n            \"focusout .search-input\": \"clearSearchSelection\",\n            \"click .close-search-icon\": \"clearSearch\",\n            \"click .list-item\": \"onClickItem\"\n        },\n\n        keyUpOnSearch: function (ev) {\n            ev.stopPropagation();\n            this.ids = this.$('.list-item:not(.hidden)').map(function () {\n                return $(this).data('id');\n            }).toArray();\n            let $selection = this.getSelectedItem();\n            if (ev.keyCode === constants.KEY_ARROW_DOWN) {\n                return this.selectNextItem();\n            }\n            if (ev.keyCode === constants.KEY_ARROW_UP) {\n                return this.selectPreviousItem();\n            }\n            if (ev.keyCode === constants.KEY_ENTER && $selection.length) {\n                ev.preventDefault();\n                return this.onEnterPressed($selection);\n            }\n            if (ev.keyCode === constants.KEY_ESCAPE && !xabber.body.screen.get('right_contact')) {\n                ev.preventDefault();\n                if ($(ev.target).val())\n                    return this.clearSearch();\n                else\n                    this.close();\n            }\n            this.updateSearch();\n        },\n\n        getSelectedItem: function () {\n            return this.$('.list-item[data-id=\"'+this.selection_id+'\"]');\n        },\n\n        selectItem: function (id, arrow) {\n            if (!id)\n                return;\n            this.clearSearchSelection();\n            let $selection = this.$('.list-item[data-id=\"'+id+'\"]');\n            if ($selection.length) {\n                this.selection_id = id;\n            } else {\n                this.ps_container[0].scrollTop = 0;\n                $selection = this.$('.list-item:visible').first();\n                this.selection_id = $selection.data('id');\n            }\n            if (arrow === 'down' && ($selection[0].clientHeight + $selection[0].offsetTop >= this.ps_container[0].clientHeight + this.ps_container[0].scrollTop || $selection[0].clientHeight + $selection[0].offsetTop < this.ps_container[0].scrollTop))\n                this.ps_container[0].scrollTop = $selection[0].offsetTop;\n            if (arrow === 'up' && ($selection[0].offsetTop <= this.ps_container[0].scrollTop || $selection[0].offsetTop > this.ps_container[0].scrollTop + this.ps_container[0].clientHeight))\n                this.ps_container[0].scrollTop = $selection[0].offsetTop;\n            $selection.addClass('selected');\n        },\n\n        selectNextItem: function () {\n            this.selectItem(this.ids[this.ids.indexOf(this.selection_id)+1], 'down');\n        },\n\n        selectPreviousItem: function () {\n            this.selectItem(this.ids[this.ids.indexOf(this.selection_id)-1], 'up');\n        },\n\n        updateSearch: function () {\n            if (!this._update_search_timeout) {\n                let query = this.$('.search-input').val();\n                this.$('.search-form').switchClass('active', query);\n                this.clearSearchSelection();\n                if (query)\n                    this.search(query.toLowerCase());\n                else {\n                    this.$('.list-item').removeClass('hidden');\n                    this.onEmptyQuery();\n                }\n                this.updateScrollBar();\n                this.query = false;\n                this._update_search_timeout = setTimeout(() => {\n                    this._update_search_timeout = null;\n                    this.query && this.updateSearch();\n                }, 150);\n            } else {\n                this.query = true;\n            }\n        },\n\n        clearSearch: function (ev) {\n            ev && ev.preventDefault();\n            this.$('.search-input').val('');\n            this.updateSearch();\n        },\n\n        clearSearchSelection: function (ev) {\n            this.selection_id = null;\n            this.$('.list-item.selected').removeClass('selected');\n        },\n\n        searchAll: function () {\n            this.$('.list-item').removeClass('hidden');\n        },\n\n        keyUpOnSearchWithQuery: function () {},\n\n        close: function () {},\n\n        search: function () {},\n\n        onEnterPressed: function () {},\n\n        onEmptyQuery: function () {},\n\n        onClickItem: function () {}\n    });\n\n      xabber.SearchPanelView = xabber.SearchView.extend({\n          events: {\n              \"keydown .search-input\": \"keyUpOnSearch\",\n              \"focusout .search-input\": \"clearSearchSelection\",\n              \"click .close-search-icon\": \"clearSearch\",\n              \"click .list-item\": \"onClickItem\",\n              \"click .btn-search-messages\": \"updateSearchWithMessages\"\n          },\n\n          updateSearchWithMessages: function (ev) {\n              this.search_messages = true;\n              this.updateSearch();\n          },\n\n          keyUpOnSearch: function (ev) {\n              ev.stopPropagation();\n              if ($(ev.target).val()) {\n                  this.keyUpOnSearchWithQuery(ev);\n                  return;\n              }\n              this.ids = this.$('.list-item:not(.hidden)').map(function () {\n                  return $(this).data('id');\n              }).toArray();\n              let $selection = this.getSelectedItem();\n              if (ev.keyCode === constants.KEY_ARROW_DOWN) {\n                  return this.selectNextItem();\n              }\n              if (ev.keyCode === constants.KEY_ARROW_UP) {\n                  return this.selectPreviousItem();\n              }\n              if (ev.keyCode === constants.KEY_ENTER && $selection.length) {\n                  ev.preventDefault();\n                  return this.onEnterPressed($selection);\n              }\n              if (ev.keyCode === constants.KEY_ESCAPE && !xabber.body.screen.get('right_contact')) {\n                  ev.preventDefault();\n                  if ($(ev.target).val())\n                      return this.clearSearch();\n                  else\n                      this.close();\n              }\n              this.updateSearch();\n          },\n\n          onScrollY: function (options) {\n              if (xabber.all_searched_messages && xabber.all_searched_messages.length && this.queryid && !this._loading_messages && !this._messages_loaded && this.isScrolledToBottom()) {\n                  this._loading_messages = true;\n                  options = options || {};\n                  this.queryid = uuid();\n                  options.query_id = this.queryid;\n                  let accounts = xabber.accounts.connected;\n                  accounts.forEach((account) => {\n                      let first_message = xabber.all_searched_messages.find(message => (message.account.get('jid') === account.get('jid')));\n                      if (!first_message || account.searched_msgs_loaded) {\n                          // this._loading_messages = false;\n                          return;\n                      }\n                      options.account = account;\n                      options.before = first_message.get('archive_id');\n                      this.MAMRequest(this.query_text, options, (messages) => {\n                          _.each(messages, (message) => {\n                              let message_from_stanza = account.chats.receiveChatMessage(message,\n                                  _.extend({is_searched: true}, options)\n                                  ),\n                                  msg_idx = xabber.all_searched_messages.indexOf(message_from_stanza),\n                                  $message_item_view;\n                              if (!message_from_stanza)\n                                  return;\n                              else\n                                  $message_item_view = new xabber.MessageItemView({model: message_from_stanza});\n                              if (msg_idx === 0) {\n                                  $message_item_view.$el.appendTo(this.$('.messages-list-wrap .messages-list'));\n                              } else {\n                                  $message_item_view.$el.insertBefore(this.$('.messages-list-wrap .message-item').eq(-msg_idx));\n                              }\n                          });\n                          this.$('.messages-list-wrap').switchClass('hidden', !this.$('.messages-list').children().length);\n                          this.updateScrollBar();\n                          this._loading_messages = false;\n                      });\n                  });\n                  (accounts.filter(account => account.searched_msgs_loaded).length === accounts.length) && (this._messages_loaded = true);\n              }\n          },\n\n          onScroll: function () {},\n\n          keyUpOnSearchWithQuery: function (ev) {\n              ev.stopPropagation();\n              this.ids = this.$('.searched-lists-wrap .list-item:not(.hidden)').map(function () {\n                  return $(this).data('id');\n              }).toArray();\n              let $selection = this.getSelectedItemWithQuery();\n              if (ev.keyCode === constants.KEY_ARROW_DOWN) {\n                  return this.selectNextItemWithQuery();\n              }\n              if (ev.keyCode === constants.KEY_ARROW_UP) {\n                  return this.selectPreviousItemWithQuery();\n              }\n              if (ev.keyCode === constants.KEY_ENTER && $selection.length) {\n                  ev.preventDefault();\n                  return this.onEnterPressed($selection);\n              }\n              else if (ev.keyCode === constants.KEY_ENTER){\n                  this.search_messages = true;\n              }\n              if (ev.keyCode === constants.KEY_ESCAPE && !xabber.body.screen.get('right_contact')) {\n                  ev.preventDefault();\n                  if ($(ev.target).val())\n                      return this.clearSearch();\n                  else\n                      this.close();\n              }\n              this.updateSearch();\n          },\n\n          getSelectedItemWithQuery: function () {\n              return this.$('.searched-lists-wrap .list-item[data-id=\"'+this.selection_id+'\"]');\n          },\n\n          selectItemWithQuery: function (id, arrow) {\n              if (!id) {\n                  if (this.isScrolledToBottom())\n                      this.onScrollY();\n                  return;\n              }\n              this.clearSearchSelection();\n              let $selection = this.$('.searched-lists-wrap .list-item[data-id=\"'+id+'\"]');\n              if ($selection.length) {\n                  this.selection_id = id;\n              } else {\n                  this.ps_container[0].scrollTop = 0;\n                  $selection = this.$('.searched-lists-wrap .list-item:visible').first();\n                  this.selection_id = $selection.data('id');\n              }\n              if (arrow === 'down' && ($selection[0].clientHeight + $selection[0].offsetTop + $selection.parent().parent()[0].offsetTop >= this.ps_container[0].clientHeight + this.ps_container[0].scrollTop\n              || $selection[0].clientHeight + $selection[0].offsetTop + $selection.parent().parent()[0].offsetTop < this.ps_container[0].scrollTop))\n                  this.ps_container[0].scrollTop = $selection[0].offsetTop + $selection.parent().parent()[0].offsetTop;\n              if (arrow === 'up' && ($selection[0].offsetTop + $selection.parent().parent()[0].offsetTop <= this.ps_container[0].scrollTop\n              || $selection[0].offsetTop + $selection.parent().parent()[0].offsetTop > this.ps_container[0].scrollTop + this.ps_container[0].clientHeight))\n                  this.ps_container[0].scrollTop = $selection[0].offsetTop + $selection.parent().parent()[0].offsetTop;\n              $selection.addClass('selected');\n          },\n\n          selectNextItemWithQuery: function () {\n              this.selectItemWithQuery(this.ids[this.ids.indexOf(this.selection_id)+1], 'down');\n          },\n\n          selectPreviousItemWithQuery: function () {\n              this.selectItemWithQuery(this.ids[this.ids.indexOf(this.selection_id)-1], 'up');\n          },\n\n          search: function (query) {\n              this.$(this.main_container).addClass('hidden');\n              clearTimeout(this.keyup_timeout);\n              this.keyup_timeout = null;\n              this.query_text = query;\n              this.$('.contacts-list').html(\"\");\n              this.$('.chats-list').html(\"\");\n              xabber.accounts.connected.forEach((acc) => {\n                  let saved_chat = acc.chats.getSavedChat();\n                  saved_chat.set('opened', true);\n                  saved_chat.item_view.updateLastMessage();\n              });\n              let query_chats = _.clone(xabber.chats);\n              query_chats.comparator = 'timestamp';\n              query_chats.sort('timestamp').forEach((chat) => {\n                  let jid = chat.get('jid').toLowerCase(),\n                      name = chat.contact ? (chat.contact.get('roster_name') || chat.contact.get('name')) : chat.get('name');\n                  name && (name = name.toLowerCase());\n                  if (chat.get('timestamp') || chat.get('saved')) {\n                      if (name.indexOf(query) > -1 || jid.indexOf(query) > -1 || (chat.get('saved') && query.includes('saved'))) {\n                          let searched_by = name.indexOf(query) > -1 ? 'by-name' : 'by-jid',\n                              chat_item = xabber.chats_view.child(chat.get('id'));\n                          chat_item && (chat_item = chat_item.$el.clone().addClass(searched_by));\n                          if (chat_item) {\n                              this.$('.chats-list-wrap').removeClass('hidden');\n                              if (searched_by === 'by-name')\n                                  this.$('.chats-list').prepend(chat_item);\n                              else if (this.$('.chats-list .by-jid').length)\n                                  chat_item.insertBefore(this.$('.chats-list .by-jid').first());\n                              else\n                                  this.$('.chats-list').append(chat_item);\n                              chat_item.click(() => {\n                                  this.$('.list-item.active').removeClass('active');\n                                  xabber.chats_view.openChat(chat.item_view, {screen: xabber.body.screen.get('name')});\n                                  chat_item.addClass('active');\n                              });\n                          }\n                      }\n                  }\n              });\n              xabber.accounts.each((account) => {\n                  account.contacts.each((contact) => {\n                      let jid = contact.get('jid').toLowerCase(),\n                          name = contact.get('roster_name') || contact.get('name'),\n                          chat = account.chats.get(contact.hash_id),\n                          chat_id = chat && chat.id;\n                      name && (name = name.toLowerCase());\n                      if (!chat_id || chat_id && !this.$('.chat-item[data-id=\"' + chat_id + '\"]').length)\n                          if (name.indexOf(query) > -1 || jid.indexOf(query) > -1) {\n                              let searched_by = name.indexOf(query) > -1 ? 'by-name' : 'by-jid',\n                                  item_list = xabber.contacts_view.$(`.account-roster-wrap[data-jid=\"${account.get('jid')}\"] .list-item[data-jid=\"${jid}\"]`).first().clone().data('account-jid', account.get('jid'));\n                              item_list.attr({'data-color': account.settings.get('color'), 'data-account': account.get('jid')}).addClass(searched_by).prepend($('<div class=\"account-indicator ground-color-700\"/>'));\n                              if (searched_by === 'by-name')\n                                  this.$('.contacts-list').prepend(item_list);\n                              else if (this.$('.contacts-list .by-jid').length)\n                                  item_list.insertBefore(this.$('.contacts-list .by-jid').first());\n                              else\n                                  this.$('.contacts-list').append(item_list);\n                              item_list.click(() => {\n                                  this.$('.list-item.active').removeClass('active');\n                                  let chat = account.chats.getChat(contact);\n                                  chat && xabber.chats_view.openChat(chat.item_view, {clear_search: false, screen: xabber.body.screen.get('name')});\n                                  item_list.addClass('active');\n                              });\n                          }\n                  });\n              });\n              this.$('.chats-list-wrap').switchClass('hidden', !this.$('.chats-list').children().length);\n              this.$('.pinned-chat-list').switchClass('hidden', query);\n              this.$('.contacts-list-wrap').switchClass('hidden', !this.$('.contacts-list').children().length);\n              this.$('.messages-list-wrap').addClass('hidden').find('.messages-list').html(\"\");\n              if (query.length >= 2 && this.search_messages) {\n                  this.search_messages = false;\n                  this.queryid = uuid();\n                  this.searchMessages(query, {query_id: this.queryid});\n              }\n              else if (query.length >= 2 && !this.search_messages){\n                  this.$('.btn-search-messages').showIf(query);\n              }\n          },\n\n          searchMessages: function (query, options) {\n              this._loading_messages = true;\n              this._messages_loaded = false;\n              this.$('.messages-list-wrap').showIf(query);\n              this.$('.btn-search-messages').hideIf(query);\n              this.$('.messages-list-wrap .messages-list').html(env.templates.contacts.preloader());\n              options = options || {};\n              !options.max && (options.max = xabber.settings.mam_messages_limit);\n              !options.before && (options.before = \"\");\n              xabber.all_searched_messages = new xabber.SearchedMessages();\n              let accounts = xabber.accounts.connected;\n              accounts.forEach((account) => {\n                  account.searched_msgs_loaded = false;\n                  options.account = account;\n                  this.MAMRequest(query, options, (messages) => {\n                      this.$('.messages-list-wrap .messages-list').html('');\n                      if (!this.query_text)\n                          return;\n                      _.each(messages, (message) => {\n                          if (!this.query_text)\n                              return;\n                          let message_from_stanza = account.chats.receiveChatMessage(message,\n                              _.extend({is_searched: true}, options)\n                              ),\n                              msg_idx = xabber.all_searched_messages.indexOf(message_from_stanza), $message_item_view;\n                              if (!message_from_stanza)\n                                  return;\n                              else\n                                  $message_item_view = new xabber.MessageItemView({model: message_from_stanza});\n                          if (msg_idx === 0) {\n                              $message_item_view.$el.appendTo(this.$('.messages-list-wrap .messages-list'));\n                          } else {\n                              $message_item_view.$el.insertBefore(this.$('.messages-list-wrap .message-item').eq(-msg_idx));\n                          }\n                      });\n                      this.$('.messages-list-wrap').switchClass('hidden', !this.$('.messages-list').children().length);\n                      this.updateScrollBar();\n                      this._loading_messages = false;\n                  });\n              });\n              (accounts.filter(account => account.searched_msgs_loaded).length === accounts.length) && (this._messages_loaded = true);\n          },\n\n          MAMRequest: function (query, options, callback, errback) {\n              let messages = [],\n                  account = options.account,\n                  queryid = uuid(),\n                  iq = $iq({type: 'set'})\n                      .c('query', {xmlns: Strophe.NS.MAM, queryid: queryid})\n                      .c('x', {xmlns: Strophe.NS.DATAFORM, type: 'submit'})\n                      .c('field', {'var': 'FORM_TYPE', type: 'hidden'})\n                      .c('value').t(Strophe.NS.MAM).up().up()\n                      .c('field', {'var': 'withtext'})\n                      .c('value').t(query).up().up().up().cnode(new Strophe.RSM(options).toXML()),\n                  handler = account.connection.addHandler((message) => {\n                      let $msg = $(message);\n                      if ($msg.find('result').attr('queryid') === queryid && options.query_id === this.queryid) {\n                          messages.push(message);\n                      }\n                      return true;\n                  }, env.Strophe.NS.MAM);\n              account.sendIQFast(iq,\n                  function (res) {\n                      account.connection.deleteHandler(handler);\n                      let $fin = $(res).find(`fin[xmlns=\"${Strophe.NS.MAM}\"]`);\n                      if ($fin.length && $fin.attr('queryid') === queryid) {\n                          let rsm_complete = ($fin.attr('complete') === 'true') ? true : false;\n                          rsm_complete && (account.searched_msgs_loaded = true);\n                      }\n                      callback && callback(messages);\n                  },\n                  function () {\n                      account.connection.deleteHandler(handler);\n                      errback && errback();\n                  }\n              );\n          },\n\n          clearSearch: function (ev) {\n              ev && ev.preventDefault();\n              this.$('.search-input').val('');\n              this.updateSearch();\n              this.onEmptyQuery();\n          },\n\n          onEmptyQuery: function () {\n              xabber.accounts.forEach(function (account) {\n                  account.searched_msgs_loaded = false;\n              });\n              this.query_text = null;\n              this.queryid = null;\n              this._messages_loaded = false;\n              this._loading_messages = false;\n              this.$(this.main_container).removeClass('hidden');\n              this.$('.chats-list-wrap').addClass('hidden');\n              this.$('.pinned-chat-list').removeClass('hidden');\n              this.$('.contacts-list-wrap').addClass('hidden');\n              this.$('.messages-list-wrap').addClass('hidden');\n          }\n      });\n\n      xabber.InputWidget = Backbone.View.extend({\n        field_type: 'text',\n        template: templates.input_widget,\n\n        events: {\n            \"click .field-text\": \"showInput\",\n            \"click .btn-rename\": \"showInput\",\n            \"keydown .field-input\": \"keyDown\",\n            \"keyup .field-input\": \"keyUp\",\n            \"focusout .field-input\": \"changeValue\"\n        },\n\n        initialize: function () {\n            this.$el.html(this.template({\n                field_name: this.field_name,\n                field_type: this.field_type,\n                placeholder: this.placeholder\n            }));\n            this.$value = this.$('.field-text');\n            this.$btn = this.$('.btn-rename');\n            this.$input = this.$('.field-input');\n            this.updateValue();\n            this.data = new Backbone.Model({input_mode: false});\n            this.data.on(\"change:input_mode\", this.onChangedInputMode, this);\n            this.bindModelEvents();\n        },\n\n        bindModelEvents: function () {\n            this.model.on(\"change:\"+this.model_field, this.updateValue, this);\n        },\n\n        showInput: function () {\n            this.data.set('input_mode', true);\n            this.updateValue();\n        },\n\n        onChangedInputMode: function () {\n            let input_mode = this.data.get('input_mode');\n            this.$value.hideIf(input_mode);\n            this.$btn.hideIf(input_mode);\n            this.$input.showIf(input_mode).focus();\n        },\n\n        keyDown: function (ev) {\n            ev.stopPropagation();\n            let value = this.getValue();\n            if (ev.keyCode === constants.KEY_ENTER) {\n                this.changeValue();\n            } else if (ev.keyCode === constants.KEY_ESCAPE && !xabber.body.screen.get('right_contact')) {\n                this.$input.removeClass('changed').val(value);\n                this.data.set('input_mode', false);\n            }\n        },\n\n        keyUp: function (ev) {\n            let value = this.getValue();\n            this.$input.switchClass('changed', this.$input.val() !== value);\n        },\n\n        getValue: function () {\n            return this.model.get(this.model_field);\n        },\n\n        setValue: function (value) {\n            this.model.save(this.model_field, value);\n        },\n\n        changeValue: function () {\n            let value = this.getValue(),\n                new_value = this.$input.removeClass('changed').val();\n            new_value !== value && this.setValue(new_value);\n            this.data.set('input_mode', false);\n        },\n\n        updateValue: function () {\n            let value = this.getValue();\n            this.$value.text(value);\n            this.$input.val(value);\n        }\n    });\n\n    xabber.Body = xabber.NodeView.extend({\n        className: 'client-body-wrap',\n\n        _initialize: function () {\n            this.vname = 'body';\n            this.data.set('visible', true);\n            this.screen = new Backbone.Model();\n            this.screen_map = new Backbone.Model();\n            this.screen.on(\"change\", this.update, this);\n            this.screen_map.on(\"change\", this.onScreenMapChanged, this);\n            $('body').append(this.$el);\n            this.updateBackground();\n            this.updateMainColor();\n            this.updateAvatarShape();\n            $('<div id=\"modals\"></div>').insertAfter(this.$el);\n            xabber.on('update_main_color', this.updateMainColor, this);\n            xabber.on('update_avatar_shape', this.updateAvatarShape, this);\n        },\n\n        addScreen: function (name, attrs) {\n            this.screen_map.set(name, attrs);\n        },\n\n        updateMainColor: function () {\n            this.$el.attr('data-main-color', xabber.settings.main_color);\n            this.$el.siblings('#modals').attr('data-main-color', xabber.settings.main_color);\n            $(window.document).find('.login-container').attr('data-main-color', xabber.settings.main_color);\n        },\n\n        updateAvatarShape: function () {\n            let shape = xabber.settings.avatar_shape;\n            $('body').switchClass('non-circle-avatars', shape != 'circle');\n            $('body').switchClass('octagon-avatars', shape === 'octagon');\n            $('body').switchClass('hexagon-avatars', shape === 'hexagon');\n            $('body').switchClass('pentagon-avatars', shape === 'pentagon');\n            $('body').switchClass('rounded-avatars', shape === 'rounded');\n            $('body').switchClass('star-avatars', shape === 'star');\n            $('body').switchClass('squircle-avatars', shape === 'squircle');\n        },\n\n        updateBackground: function () {\n            let background_settings = xabber.settings.background || {};\n            if (background_settings.image) {\n                if (background_settings.type === 'repeating-pattern') {\n                    this.$el.css({\n                        'background-repeat': 'repeat',\n                        'background-size': 'unset',\n                        'background-image': `url(\"${utils.images.getCachedBackground(background_settings.image)}\")`\n                    });\n                } else if (background_settings.type === 'image') {\n                    this.$el.css({\n                        'background-repeat': 'no-repeat',\n                        'background-size': 'cover',\n                        'background-image': `url(\"${utils.images.getCachedBackground(background_settings.image)}\")`\n                    });\n                }\n            } else {\n                this.$el.css({\n                    'background-repeat': 'repeat',\n                    'background-size': 'unset',\n                    'background-image': `url(\"${constants.BACKGROUND_IMAGE}\")`,\n                    'box-shadow': 'none'\n                });\n            }\n            this.updateBoxShadow(xabber.settings.appearance.vignetting);\n        },\n\n        updateBoxShadow: function (value) {\n            value = Number(value);\n            if (!value)\n                this.$el.css({\n                    'box-shadow': `unset`\n                });\n            else\n                this.$el.css({\n                'box-shadow': `${value}px 0 100px 1px rgba(0, 0, 0, 0.7) inset, -${value}px 0 100px -1px rgba(0, 0, 0, 0.7) inset`\n            });\n        },\n\n        updateBlur: function (value) {\n            value = Number(value);\n            xabber.blur_overlay.$el.css({\n                \"backdrop-filter\": `blur(${value}px)`,\n                \"-webkit-backdrop-filter\": `blur(${value}px)`\n            });\n        },\n\n        setScreen: function (name, attrs, options) {\n            options = options || {};\n            $(window).unbind(\"keydown.contact_panel\");\n            xabber.notifications_placeholder && xabber.main_panel.$el.addClass('notifications-request');\n            $('body').switchClass('xabber-login', name === 'login');\n            $('body').switchClass('on-xabber-login', name !== 'login');\n            let new_attrs = {stamp: _.uniqueId()};\n            if (name && !this.isScreen(name)) {\n                new_attrs.name = name;\n            }\n            if ((attrs && attrs.right && attrs.right === 'group_invitation') || (name === 'settings' || name ==='account_settings'))\n                new_attrs.right_contact = null;\n            else {\n                new_attrs.right_contact = xabber.body.screen.get('right_contact');\n            }\n            if ((!attrs && xabber.body.screen.get('right'))\n                || (attrs && !attrs.right && attrs.right !== null && xabber.body.screen.get('right')))\n                new_attrs.right = xabber.body.screen.get('right');\n            this.screen.set(_.extend(new_attrs, attrs), options);\n        },\n\n        isScreen: function (name) {\n            return this.screen.get('name') === name;\n        },\n\n        onScreenMapChanged: function () {\n            let name = this.screen.get('name');\n            if (_.has(this.screen_map.changed, name)) {\n                this.update();\n            }\n        },\n\n        update: function () {\n            let options = this.screen.attributes,\n                tree = this.screen_map.get(options.name);\n            if (typeof tree !== \"undefined\") {\n                this.onShow(options, tree);\n                this.model.trigger('update_screen', this.screen.get('name'));\n                this.model.trigger('update_layout', {screen_changed: options.name});\n            }\n        }\n    });\n\n    xabber.ToolbarView = xabber.BasicView.extend({\n        className: \"toolbar noselect\",\n        ps_selector: '.accounts',\n        ps_settings: {theme: 'item-list'},\n        template: templates.toolbar,\n\n        events: {\n            \"click .all-chats\":             \"showAllChats\",\n            \"click .chats\":                 \"showChats\",\n            \"click .group-chats\":           \"showGroupChats\",\n            \"click .contacts\":              \"showContacts\",\n            \"click .search\":                \"showSearch\",\n            \"click .archive-chats\":         \"showArchive\",\n            \"click .mentions\":              \"showMentions\",\n            \"click .settings\":              \"showSettings\",\n            \"click .add-variant.contact\":   \"showAddContactView\",\n            \"click .add-variant.account\":   \"showAddAccountView\",\n            \"click .add-variant.public-groupchat\": \"showAddPublicGroupChatView\",\n            \"click .add-variant.incognito-groupchat\": \"showAddIncognitoGroupChatView\",\n            \"click .about\":                 \"showAbout\"\n        },\n\n        _initialize: function () {\n            this.$('.add-something').on(\"change_state\", function (ev, state) {\n                $(this).switchClass('active', state).find('.mdi')\n                        .switchClass('mdi-close', state)\n                        .switchClass('mdi-plus', !state);\n                if (state) {\n                    this.setAttribute('data-title',  this.getAttribute('title'));\n                    this.setAttribute('title', \"\");\n                } else {\n                    this.setAttribute('title', this.getAttribute('data-title'));\n                    this.removeAttribute('data-title');\n                }\n            });\n\n            xabber.on(\"update_screen\", this.onUpdatedScreen, this);\n            this.data.on(\"change:all_msg_counter\", this.onChangedAllMessageCounter, this);\n            this.data.on(\"change:group_msg_counter\", this.onChangedGroupMessageCounter, this);\n            this.data.on(\"change:mentions_counter\", this.onChangedMentionsCounter, this);\n            this.data.on(\"change:msg_counter\", this.onChangedMessageCounter, this);\n            this.data.set({msg_counter: 0});\n            this.data.set({group_msg_counter: 0});\n            this.data.set({all_msg_counter: 0});\n            this.data.set({mentions_counter: 0});\n        },\n\n        render: function () {\n            this.$('.add-something').dropdown({\n                inDuration: 50,\n                outDuration: 50,\n                constrainWidth: false,\n                hover: false,\n                alignment: 'left'\n            });\n            this.$('.add-variant.account').hideIf(!constants.LOGIN_CUSTOM_DOMAIN && !constants.LOGIN_DOMAINS.length);\n        },\n\n        updateColor: function (color) {\n            this.$('.toolbar-icon').css('color', color);\n            this.$('.toolbar-icon path').css('fill', color);\n        },\n\n        onUpdatedScreen: function (name) {\n            if ((name === 'account_settings') || ((name === 'all-chats') &&\n                (this.$('.toolbar-item.all-chats').hasClass('active') ||\n                    this.$('.toolbar-item.group-chats').hasClass('active') ||\n                    this.$('.toolbar-item.chats').hasClass('active')||\n                    this.$('.toolbar-item.account-item').hasClass('active')||\n                    this.$('.toolbar-item.archive-chats').hasClass('active')))) {\n                return;\n            }\n            this.$('.toolbar-item').removeClass('active unread');\n            if (_.contains(['all-chats', 'contacts', 'mentions',\n                            'settings', 'search', 'about'], name)) {\n                this.$('.toolbar-item.'+name).addClass('active');\n            }\n        },\n\n        showAllChats: function (ev) {\n            let $el = $(ev.target).closest('.toolbar-item'), is_active = $el.hasClass('active') && !$el.hasClass('unread');\n            this.$('.toolbar-item').removeClass('active unread')\n                .filter('.all-chats').addClass('active').switchClass('unread', is_active);\n            xabber.body.setScreen('all-chats',);\n            xabber.trigger('show_all_chats');\n        },\n\n        showChats: function (ev) {\n            let $el = $(ev.target).closest('.toolbar-item'), is_active = $el.hasClass('active') && !$el.hasClass('unread');\n            this.$('.toolbar-item').removeClass('active unread')\n                .filter('.chats').addClass('active').switchClass('unread', is_active);\n            xabber.body.setScreen('all-chats',);\n            xabber.trigger('show_chats');\n        },\n\n        showGroupChats: function (ev) {\n            let $el = $(ev.target).closest('.toolbar-item'), is_active = $el.hasClass('active') && !$el.hasClass('unread');\n            this.$('.toolbar-item').removeClass('active unread')\n                .filter('.group-chats').addClass('active').switchClass('unread', is_active);\n            xabber.body.setScreen('all-chats',);\n            xabber.trigger('show_group_chats');\n        },\n\n        showArchive: function () {\n            this.$('.toolbar-item').removeClass('active unread')\n                .filter('.archive-chats').addClass('active');\n            xabber.body.setScreen('all-chats',);\n            xabber.trigger('show_archive_chats');\n        },\n\n        showChatsByAccount: function (account) {\n            this.$('.toolbar-item').removeClass('active unread')\n                .filter('.account-item[data-jid=\"' + account.get('jid') + '\"]').addClass('active');\n            xabber.body.setScreen('all-chats', {\n                right_contact_save: true\n            });\n            xabber.trigger('show_account_chats', [account]);\n        },\n\n        showSearch: function () {\n            xabber.body.setScreen('search');\n        },\n\n        showContacts: function () {\n            xabber.body.setScreen('contacts', {right_contact: null});\n        },\n\n        showMentions: function () {\n            xabber.body.setScreen('mentions');\n        },\n\n        showSettings: function () {\n            xabber.body.setScreen('settings');\n        },\n\n        showAddContactView: function () {\n            xabber.trigger('add_contact', {right: null});\n        },\n\n        showAddAccountView: function () {\n            xabber.trigger('add_account', {right: null});\n        },\n\n        showAddIncognitoGroupChatView: function () {\n            xabber.trigger('add_group_chat', {incognito: true, right: null});\n        },\n\n        showAddPublicGroupChatView: function () {\n            xabber.trigger('add_group_chat', {public: true, right: null});\n        },\n\n        showAbout: function () {\n            if (!xabber.about_view)\n                xabber.about_view = xabber.wide_panel.addChild('about', xabber.AboutView, {model: xabber});\n            xabber.body.setScreen('about');\n        },\n\n        setAllMessageCounter: function () {\n            let count_msg = 0, count_all_msg = 0, count_group_msg = 0, mentions = 0;\n            xabber.accounts.each((account) => {\n                account.chats.each((chat) => {\n                    if (chat.contact && !chat.isMuted()) {\n                        count_all_msg += chat.get('unread') + chat.get('const_unread');\n                        if (chat.contact.get('group_chat'))\n                            count_group_msg += chat.get('unread') + chat.get('const_unread');\n                        else\n                            count_msg += chat.get('unread') + chat.get('const_unread');\n                    }\n                });\n                let incoming_subscriptions = account.contacts.filter(item => item.get('invitation') || (item.get('subscription_request_in') && item.get('subscription') != 'both')).length;\n                count_all_msg += incoming_subscriptions;\n                mentions += account.unread_mentions.length;\n            });\n            return { msgs: count_msg, all_msgs: count_all_msg, group_msgs: count_group_msg, mentions: mentions };\n        },\n\n        recountAllMessageCounter: function () {\n            let unread_messages = this.setAllMessageCounter();\n            this.data.set('all_msg_counter', unread_messages.all_msgs);\n            this.data.set('msg_counter', unread_messages.msgs);\n            this.data.set('group_msg_counter', unread_messages.group_msgs);\n            this.data.set('mentions_counter', unread_messages.mentions);\n        },\n\n        onChangedMessageCounter: function () {\n            let c = this.data.get('msg_counter');\n            this.$('.msg-indicator').switchClass('unread', c).text();\n        },\n\n        onChangedGroupMessageCounter: function () {\n            let c = this.data.get('group_msg_counter');\n            this.$('.group-msg-indicator').switchClass('unread', c).text();\n        },\n\n        onChangedMentionsCounter: function () {\n            let c = this.data.get('mentions_counter');\n            this.$('.mentions-indicator').switchClass('unread', c).text();\n        },\n\n        onChangedAllMessageCounter: function () {\n            let c = this.data.get('all_msg_counter');\n            this.$('.all-msg-indicator').switchClass('unread', c).text(c);\n        },\n    });\n\n    xabber.JingleMessageView = xabber.BasicView.extend({\n        className: 'modal main-modal jingle-message-view',\n        template: templates.jingle_message_calling,\n        avatar_size: constants.AVATAR_SIZES.XABBER_VOICE_CALL_VIEW,\n\n        events: {\n            \"click\": \"clickOnWindow\",\n            \"click .btn-accept\": \"accept\",\n            \"click .btn-share-screen\": \"shareScreen\",\n            \"click .btn-microphone\": \"toggleMicrophone\",\n            \"click .btn-video\": \"videoCall\",\n            \"click .btn-volume\": \"toggleVolume\",\n            \"click .btn-collapse\": \"collapse\",\n            \"click .btn-cancel\": \"cancel\",\n            \"click .btn-full-screen\": \"setFullScreen\"\n        },\n\n        _initialize: function (options) {\n            this.model = options.model;\n            this.model.on('destroy', this.onDestroy, this);\n            this.contact = this.model.contact;\n            this.account = this.contact.account;\n            this.model.on('change:state', this.updateCallingStatus, this);\n            this.model.on('change:status', this.updateBackground, this);\n            this.model.on('change:volume_on', this.updateButtons, this);\n            this.model.on('change:video_live', this.updateButtons, this);\n            this.model.on('change:video_screen', this.updateButtons, this);\n            this.model.on('change:video_in', this.updateCollapsedWindow, this);\n            this.model.on('change:video', this.updateCollapsedWindow, this);\n            this.model.on('change:audio', this.updateButtons, this);\n        },\n\n        render: function (options) {\n            options = options || {};\n            this.updateName();\n            this.updateCallingStatus(options.status);\n            if (options.status === 'in') {\n                this.updateStatusText(xabber.getString(\"dialog_jingle_message__status_calling\"));\n            }\n            else {\n                this.model.set('status', 'calling');\n            }\n            this.updateAccountJid();\n            this.updateButtons();\n            this.$el.openModal({\n                dismissible: false,\n                ready: () => {\n                    this.updateAvatar();\n                    this.pos1 = 0;\n                    this.pos2 = 0;\n                    this.pos3 = 0;\n                    this.pos4 = 0;\n                    this.$('.collapsed-movable').mousedown((e) => {\n                        e = e || window.event;\n                        e.preventDefault();\n                        // get the mouse cursor position at startup:\n                        this.pos3 = e.clientX;\n                        this.pos4 = e.clientY;\n                        let didDrag = false;\n                        document.onmouseup = (e) => {\n                            document.onmouseup = null;\n                            document.onmousemove = null;\n                            if (!didDrag)\n                                this.collapse();\n                        };\n                        // call a function whenever the cursor moves:\n                        document.onmousemove = (e) => {\n                            e = e || window.event;\n                            e.preventDefault();\n                            // calculate the new cursor position:\n                            this.pos1 = this.pos3 - e.clientX;\n                            this.pos2 = this.pos4 - e.clientY;\n                            this.pos3 = e.clientX;\n                            this.pos4 = e.clientY;\n                            // set the element's new position:\n                            this.$el.css('top', (this.$el.offset().top - this.pos2) + \"px\");\n                            this.$el.css('left', (this.$el.offset().left - this.pos1) + \"px\");\n                            this.$el.css('transform', \"none\");\n                            this.$el.css('right', \"unset\");\n                            didDrag = true;\n                        };\n                    });\n                },\n                complete: () => {\n                    this.$el.detach();\n                    this.data.set('visible', false);\n                }\n            });\n\n        },\n\n        setFullScreen: function () {\n            let video = this.$el.find('.webrtc-remote-video')[0],\n                local_video = this.$el.find('.webrtc-local-video')[0],\n                buttons = this.$el.find('.buttons-panel')[0];\n            if (!video)\n                return;\n            if (video.requestFullScreen) {\n                video.requestFullScreen();\n                local_video.requestFullScreen();\n                buttons.requestFullScreen();\n            }\n            else if (video.webkitRequestFullScreen) {\n                video.webkitRequestFullScreen();\n                local_video.webkitRequestFullScreen();\n                buttons.webkitRequestFullScreen();\n            }\n            else if (video.mozRequestFullScreen) {\n                video.mozRequestFullScreen();\n                local_video.mozRequestFullScreen();\n                buttons.mozRequestFullScreen();\n            }\n            else if (video.msRequestFullScreen) {\n                video.msRequestFullScreen();\n                local_video.msRequestFullScreen();\n                buttons.msRequestFullScreen();\n            }\n        },\n\n        cancelFullScreen: function () {\n            if (document.exitFullscreen) {\n                let full_screen_el = document.fullscreenElement;\n                full_screen_el && document.exitFullscreen().then(() => {\n                    document.fullscreenElement && this.cancelFullScreen();\n                });\n            } else if (document.mozCancelFullScreen) { /* Firefox */\n                let full_screen_el = document.mozFullScreenElement;\n                full_screen_el && document.mozCancelFullScreen();\n                document.mozFullScreenElement && this.cancelFullScreen();\n            } else if (document.webkitExitFullscreen) { /* Chrome, Safari and Opera */\n                let full_screen_el = document.webkitCurrentFullScreenElement;\n                full_screen_el && document.webkitExitFullscreen();\n                document.webkitCurrentFullScreenElement && this.cancelFullScreen();\n            } else if (document.msExitFullscreen) { /* IE/Edge */\n                let full_screen_el = document.msFullscreenElement;\n                full_screen_el && document.msExitFullscreen();\n                document.msFullscreenElement && this.cancelFullScreen();\n            }\n        },\n\n        windowResized: function () {\n            this.$el.hasClass('collapsed') && this.$el.css('right', parseInt(xabber.main_panel.$el.css('margin-right')) + 8 + 'px');\n        },\n\n        updateButtons: function () {\n            this.$('.btn-video .video').switchClass('hidden', !this.model.get('video'));\n            this.$('.btn-share-screen').switchClass('active', this.model.get('video_screen'));\n            this.$('.btn-full-screen').switchClass('hidden', !this.model.get('video_in'));\n            this.$('.btn-video').switchClass('mdi-video active', this.model.get('video_live'))\n                .switchClass('mdi-video-off', !this.model.get('video_live'));\n            this.$('.btn-volume').switchClass('mdi-volume-high active', this.model.get('volume_on'))\n                .switchClass('mdi-volume-off', !this.model.get('volume_on'));\n            this.$('.btn-microphone').switchClass('active mdi-microphone', this.model.get('audio'))\n                .switchClass('mdi-microphone-off', !this.model.get('audio'));\n        },\n\n        updateAvatar: function () {\n            let image = this.contact.cached_image;\n            this.$('.circle-avatar').setAvatar(image, this.avatar_size);\n        },\n\n        updateBackground: function () {\n            let status = this.model.get('status');\n            this.$el.attr('data-state', status);\n        },\n\n        updateCallingStatus: function (status) {\n            this.$('.buttons-wrap').switchClass('incoming', (status === 'in'));\n        },\n\n        updateStatusText: function (status) {\n            this.$('.calling-status').text(status || \"\");\n        },\n\n        updateName: function () {\n            this.$('.name').text(this.contact.get('name'));\n        },\n\n        updateAccountJid: function () {\n            this.$('.modal-footer .contact-info .jid').text(this.contact.get('jid'));\n        },\n\n        close: function () {\n            this.$el.closeModal({ complete: this.hide.bind(this) });\n        },\n\n        shareScreen: function () {\n            this.model.set('video_screen', !this.model.get('video_screen'));\n        },\n\n        isFullScreen: function () {\n            if (document.fullscreenElement)\n                return true;\n            else if (document.webkitFullscreenElement)\n                return true;\n            else if (document.mozFullScreenElement)\n                return true;\n            else return false;\n        },\n\n        accept: function () {\n            this.model.accept();\n            this.updateCallingStatus(constants.JINGLE_MSG_ACCEPT);\n            this.model.initSession();\n        },\n\n        clickOnWindow: function (ev) {\n            if ($(ev.target).closest('.collapsed-movable').length)\n                return;\n            if ($(ev.target).closest('.video-wrap').length && this.$el.hasClass('collapsed') && this.$el.hasClass('collapsed-video'))\n                this.collapse();\n        },\n\n        collapse: function (ev) {\n            ev && ev.stopPropagation();\n            if (this.isFullScreen()) {\n                this.cancelFullScreen();\n                return;\n            }\n            let $overlay = this.$el.closest('#modals').siblings('#' + this.$el.data('overlayId'));\n            $overlay.toggle();\n            this.$el.toggleClass('collapsed');\n            if (this.$el.hasClass('collapsed')) {\n                this.$el.switchClass('collapsed-video', (this.model.get('video') || this.model.get('video_in')));\n                this.$el.switchClass('multiple-videos', this.model.get('video') && this.model.get('video_in'));\n            }\n            else {\n                this.$el.css('right', \"\");\n                this.$el.css('left', \"\");\n                this.$el.css('width', \"\");\n                this.$el.css('height', \"\");\n                this.$el.removeClass('collapsed-video');\n            }\n            this.windowResized();\n        },\n\n        updateCollapsedWindow: function () {\n            this.updateButtons();\n            if (this.$el.hasClass('collapsed')) {\n                this.$el.switchClass('collapsed-video', (this.model.get('video') || this.model.get('video_in')));\n                this.$el.switchClass('multiple-videos', this.model.get('video') && this.model.get('video_in'));\n            }\n        },\n\n        toggleMicrophone: function () {\n            this.model.set('audio', !this.model.get('audio'));\n        },\n\n        onDestroy: function () {\n            this.updateStatusText(xabber.getString(this.model.get('status') == 'device_busy' ? \"dialog_jingle_message__status_device_busy\" : this.model.get('status') == 'busy' ? \"dialog_jingle_message__status_busy\" : \"dialog_jingle_message__status_disconnected\"));\n            setTimeout(() => {\n                this.close();\n                this.$el.detach();\n            }, 3000);\n        },\n\n        videoCall: function () {\n            this.model.set('video_live', !this.model.get('video_live'));\n        },\n\n        toggleVolume: function (ev) {\n            let $target = $(ev.target);\n            $target.switchClass(this.model.set('volume_on', !this.model.get('volume_on')));\n        },\n\n        cancel: function () {\n            this.model.reject();\n            this.close();\n        }\n    });\n\n    xabber.PlyrPlayerPopupView = xabber.BasicView.extend({\n        className: 'modal main-modal player-overlay plyr-player-popup-view',\n        template: templates.plyr_player_popup,\n\n        events: {\n            \"click .mdi-close\": \"closePopup\",\n            \"click .mdi-minimize-float\": \"floatPopup\",\n            \"click .mdi-minimize-full\": \"fullPopup\",\n            \"click .mdi-plyr-hide\": \"hidePopup\",\n            \"click .btn-next-plyr\": \"nextPlyr\",\n            \"click .btn-previous-plyr\": \"previousPlyr\",\n            \"click .mdi-open-message\": \"openMessage\",\n            \"click .mdi-toggle-play\": \"togglePlay\",\n            \"click .mdi-toggle-mute\": \"toggleMute\",\n        },\n\n        _initialize: function (options) {\n            this.data.set('visibility_state', 0);\n            this.data.on('change:visibility_state', this.onVisibilityChange, this);\n            xabber.on('plyr_player_updated', this.updatePlyrControls, this);\n        },\n\n        render: function (options) {\n            options = options || {};\n            this.$el.openModal({\n                dismissible: false,\n                ready: () => {\n                    if (!this.player){\n                        this.player = new Plyr('.plyr-player-popup', {\n                            controls: [\n                                'play-large', 'play', 'progress', 'duration', 'mute', 'volume', 'settings', 'download', 'fullscreen',\n                            ],\n                            youtube: {controls: 0, disablekb: 1, iv_load_policy: 3, modestbranding: 1, rel: 0, showinfo: 0}\n                        });\n                        this.player.on('play',(event) => {\n                            let other_players = xabber.plyr_players.filter(other => other != this.player);\n                            other_players.forEach(function(other) {\n                                if (other.$audio_elem){\n                                    if (other.$audio_elem.voice_message)\n                                        other.$audio_elem.voice_message.stopTime();\n                                }\n                            })\n                            xabber.trigger('plyr_player_updated');\n                        });\n                        this.player.on('pause',(event) => {\n                            xabber.trigger('plyr_player_updated');\n                        });\n                        this.player.on('timeupdate',(event) => {\n                            xabber.trigger('plyr_player_time_updated');\n                        });\n                        this.player.on('volumechange',(event) => {\n                            xabber.trigger('plyr_player_updated');\n                        });\n                        this.player.on('statechange',(event) => {\n                            if (event.detail.code === 3) {\n                                this.$('.plyr-player-popup-draggable').removeClass('hidden');\n                                this.$('.plyr-player-popup-draggable').css({\n                                    width: '',\n                                    height: '',\n                                });\n                            }\n                            xabber.trigger('plyr_player_updated');\n                        });\n                    }\n                    this.$el.closest('#modals').siblings('#' + this.$el.data('overlayId')).mousedown(() => {this.minimizePopup()});\n                    this.showNewVideo(options);\n                    this.onVisibilityChange();\n                    this.updatePlyrControls();\n                    this.pos1 = 0;\n                    this.pos2 = 0;\n                    this.pos3 = 0;\n                    this.pos4 = 0;\n                    this.$('.plyr-player-min-controls-tab').mousedown((e) => {\n                        e = e || window.event;\n                        if ($(e.target).closest('.plyr__control--overlaid').length || $(e.target).closest('.plyr__controls').length || $(e.target).closest('.mdi-close').length || $(e.target).closest('.plyr-player-min-controls-buttons').length)\n                            return;\n                        e.preventDefault();\n                        // get the mouse cursor position at startup:\n                        this.pos3 = e.clientX;\n                        this.pos4 = e.clientY;\n                        let didDrag = false;\n                        document.onmouseup = (e) => {\n                            document.onmouseup = null;\n                            document.onmousemove = null;\n                            if (!didDrag && !$(e.target).closest('.plyr__control--overlaid').length)\n                                this.$('.plyr__video-wrapper').click();\n                        };\n                        // call a function whenever the cursor moves:\n                        document.onmousemove = (e) => {\n                            e = e || window.event;\n                            didDrag = true;\n                            e.preventDefault();\n                            if (this.$el.hasClass('player-overlay'))\n                                return;\n                            // calculate the new cursor position:\n                            this.pos1 = this.pos3 - e.clientX;\n                            this.pos2 = this.pos4 - e.clientY;\n                            this.pos3 = e.clientX;\n                            this.pos4 = e.clientY;\n                            // set the element's new position:\n                            this.$el.css('top', (this.$el.offset().top - this.pos2) + \"px\");\n                            this.$el.css('left', (this.$el.offset().left - this.pos1) + \"px\");\n                            this.$el.css('transform', \"none\");\n                            this.$el.css('right', \"unset\");\n                        };\n                    });\n                },\n            });\n\n        },\n\n        showNewVideo: function (options) {\n            options = options || {};\n            if (options.player.provider === 'youtube'){\n                this.$('.plyr-player-popup-draggable').addClass('hidden');\n                this.$('.plyr-player-popup-draggable').css({\n                    width: 400,\n                    height: 200,\n                });\n            }\n            this.account = options.player.chat_item.account;\n            this.updateColorScheme();\n            this.player.chat_item = options.player.chat_item;\n            this.player.player_item = options.player;\n            this.player.message_unique_id = options.player.message_unique_id;\n            this.player.source = {\n                type: 'video',\n                sources: [\n                    {\n                        src: options.player.video_src,\n                        provider: options.player.provider,\n                    },\n                ],\n            }\n            xabber.current_plyr_player = this.player;\n            this.player.once('ready',(event) => {\n                let $minimize_element_float = $('<svg class=\"mdi mdi-24px mdi-plyr-custom-controls mdi-minimize mdi-minimize-float mdi-svg-template\" data-svgname=\"player-float\"></svg>')\n                $minimize_element_float.append(env.templates.svg['player-float']())\n                $minimize_element_float.insertBefore(this.$('.plyr__controls__item[data-plyr=\"fullscreen\"]'));\n                let $minimize_element_full = $('<svg class=\"mdi mdi-24px mdi-plyr-custom-controls mdi-minimize mdi-minimize-full mdi-svg-template\" data-svgname=\"player-full\"></svg>')\n                $minimize_element_full.append(env.templates.svg['player-full']())\n                $minimize_element_full.insertBefore(this.$('.plyr__controls__item[data-plyr=\"fullscreen\"]'));\n                let $show_message_element_full = $('<svg class=\"mdi mdi-24px mdi-plyr-custom-controls mdi-open-message mdi-svg-template\" data-svgname=\"message-bookmark-outline\"></svg>')\n                $show_message_element_full.append(env.templates.svg['message-bookmark-outline']())\n                $show_message_element_full.insertAfter(this.$('.plyr__controls__item[data-plyr=\"download\"]'));\n                let $previous_element = $('<div class=\"btn-previous-plyr\"><i class=\"mdi mdi-skip-previous mdi-24px\"></i></div>')\n                $previous_element.insertBefore(this.$('.plyr__controls__item[data-plyr=\"play\"]'));\n                let $next_element = $('<div class=\"btn-next-plyr\"><i class=\"mdi mdi-skip-next mdi-24px\"></i></div>')\n                $next_element.insertAfter(this.$('.plyr__controls__item[data-plyr=\"play\"]'));\n                this.player.play();\n                xabber.trigger('plyr_player_updated');\n            });\n        },\n\n        closePopup: function () {\n            this.$el.closest('#modals').siblings('#' + this.$el.data('overlayId')).detach();\n            this.$el.detach();\n            xabber.current_plyr_player = null;\n            xabber.plyr_player_popup = null;\n            xabber.trigger('plyr_player_updated');\n        },\n\n        minimizePopup: function () {\n            if (xabber.current_plyr_player && xabber.current_plyr_player.$audio_elem)\n                return;\n            let visibility_state = this.data.get('visibility_state');\n            visibility_state = visibility_state + 1;\n            (visibility_state > 2) && (visibility_state = 0);\n            this.data.set('visibility_state', visibility_state);\n        },\n\n        hidePopup: function () {\n            if (xabber.current_plyr_player && xabber.current_plyr_player.$audio_elem)\n                return;\n            this.data.set('visibility_state', 2);\n        },\n\n        floatPopup: function () {\n            if (xabber.current_plyr_player && xabber.current_plyr_player.$audio_elem)\n                return;\n            this.data.set('visibility_state', 1);\n        },\n\n        fullPopup: function () {\n            if (xabber.current_plyr_player && xabber.current_plyr_player.$audio_elem)\n                return;\n            this.data.set('visibility_state', 0);\n        },\n\n        onVisibilityChange: function () {\n            let visibility_state = this.data.get('visibility_state'),\n                $overlay = this.$el.closest('#modals').siblings('#' + this.$el.data('overlayId'));\n            $overlay.switchClass('hidden', visibility_state != 0);\n            this.$el.switchClass('player-overlay', visibility_state === 0);\n            this.$el.switchClass('hidden', visibility_state === 2);\n        },\n\n        nextPlyr: function () {\n            let player_index = xabber.current_plyr_player.chat_item.model.plyr_players.indexOf(xabber.current_plyr_player);\n            if (player_index === -1 && xabber.current_plyr_player.player_item)\n                player_index = xabber.current_plyr_player.chat_item.model.plyr_players.indexOf(xabber.current_plyr_player.player_item);\n            if (!xabber.current_plyr_player || !(player_index >= 0 && player_index < xabber.current_plyr_player.chat_item.model.plyr_players.length - 1))\n                return;\n            if (xabber.current_plyr_player.chat_item.model.plyr_players[player_index + 1].$audio_elem){\n                let next_item = xabber.current_plyr_player.chat_item.model.plyr_players[player_index + 1];\n                if (!next_item.$audio_elem.voice_message){\n                    let f_url = $(next_item.$audio_elem).find('.file-link-download').attr('href');\n                    $(next_item.$audio_elem).find('.mdi-play').removeClass('no-uploaded')\n                    next_item.$audio_elem.voice_message = xabber.current_plyr_player.chat_item.content.renderVoiceMessage($(next_item.$audio_elem).find('.file-container')[0], f_url, xabber.current_plyr_player.chat_item.model);\n                } else {\n                    next_item.$audio_elem.voice_message.play()\n                }\n            } else{\n                if (!xabber.plyr_player_popup){\n                    xabber.plyr_player_popup = new xabber.PlyrPlayerPopupView({});\n                    xabber.plyr_player_popup.show({player: xabber.current_plyr_player.chat_item.model.plyr_players[player_index + 1]});\n                } else\n                    xabber.plyr_player_popup.showNewVideo({player: xabber.current_plyr_player.chat_item.model.plyr_players[player_index + 1]});\n            }\n        },\n\n        previousPlyr: function () {\n            let player_index = xabber.current_plyr_player.chat_item.model.plyr_players.indexOf(xabber.current_plyr_player);\n            if (player_index === -1 && xabber.current_plyr_player.player_item)\n                player_index = xabber.current_plyr_player.chat_item.model.plyr_players.indexOf(xabber.current_plyr_player.player_item);\n            if (!xabber.current_plyr_player || !(player_index <= xabber.current_plyr_player.chat_item.model.plyr_players.length && player_index > 0))\n                return;\n            if (xabber.current_plyr_player.chat_item.model.plyr_players[player_index - 1].$audio_elem){\n                let prev_item = xabber.current_plyr_player.chat_item.model.plyr_players[player_index - 1];\n                if (!prev_item.$audio_elem.voice_message){\n                    let f_url = $(prev_item.$audio_elem).find('.file-link-download').attr('href');\n                    $(prev_item.$audio_elem).find('.mdi-play').removeClass('no-uploaded')\n                    prev_item.$audio_elem.voice_message = xabber.current_plyr_player.chat_item.content.renderVoiceMessage($(prev_item.$audio_elem).find('.file-container')[0], f_url, xabber.current_plyr_player.chat_item.model);\n                } else {\n                    prev_item.$audio_elem.voice_message.play()\n                }\n            } else{\n                if (!xabber.plyr_player_popup){\n                    xabber.plyr_player_popup = new xabber.PlyrPlayerPopupView({});\n                    xabber.plyr_player_popup.show({player: xabber.current_plyr_player.chat_item.model.plyr_players[player_index - 1]});\n                } else\n                    xabber.plyr_player_popup.showNewVideo({player: xabber.current_plyr_player.chat_item.model.plyr_players[player_index - 1]});\n            }\n        },\n\n        updatePlyrControls: function () {\n            if (xabber.current_plyr_player) {\n                let player_index = xabber.current_plyr_player.chat_item.model.plyr_players.indexOf(xabber.current_plyr_player.player_item);\n                this.$('.btn-next-plyr').switchClass('disabled', !(player_index >= 0 && player_index < xabber.current_plyr_player.chat_item.model.plyr_players.length - 1));\n                this.$('.btn-previous-plyr').switchClass('disabled', !(player_index <= xabber.current_plyr_player.chat_item.model.plyr_players.length && player_index > 0));\n                this.$('.mdi-plyr-play').switchClass('hidden', xabber.current_plyr_player.playing);\n                this.$('.mdi-plyr-pause').switchClass('hidden', !xabber.current_plyr_player.playing);\n                this.$('.mdi-mute-plyr').switchClass('hidden', !xabber.current_plyr_player.muted);\n                this.$('.mdi-unmute-plyr').switchClass('hidden', xabber.current_plyr_player.muted);\n            }\n        },\n\n        openMessage: function () {\n            if (!(this.player && this.player.chat_item && this.player.message_unique_id))\n                return;\n            this.floatPopup();\n            let chat = this.player.chat_item.model;\n            xabber.chats_view.openChat(chat.item_view, {right_contact_save: true, clear_search: false});\n            xabber.body.setScreen(xabber.body.screen.get('name'), {right: 'message_context', model: chat });\n            if (xabber.right_contact_panel_saveable && xabber.body.screen.get('right_contact') && xabber.body.screen.get('right') === 'message_context') {\n                if (xabber.right_contact_panel_saveable)\n                    chat.contact.showDetailsRight('all-chats', {right_saved: true});\n                else\n                    chat.contact.showDetailsRight('all-chats', {right_saved: false});\n            }\n            chat.getMessageContext(this.player.message_unique_id, {message: true});\n        },\n\n        togglePlay: function () {\n            if (!xabber.current_plyr_player)\n                return;\n            if (xabber.current_plyr_player.$audio_elem){\n                if (!xabber.current_plyr_player.$audio_elem.voice_message){\n                    let f_url = $(xabber.current_plyr_player.$audio_elem).find('.file-link-download').attr('href');\n                    $(xabber.current_plyr_player.$audio_elem).find('.mdi-play').removeClass('no-uploaded')\n                    xabber.current_plyr_player.$audio_elem.voice_message = this.content.renderVoiceMessage($(xabber.current_plyr_player.$audio_elem).find('.file-container')[0], f_url);\n                } else {\n                    xabber.current_plyr_player.$audio_elem.voice_message.playPause()\n                }\n            } else\n                xabber.current_plyr_player.togglePlay();\n        },\n\n        toggleMute: function () {\n            if (!xabber.current_plyr_player)\n                return;\n            xabber.current_plyr_player.muted = !xabber.current_plyr_player.muted;\n        },\n\n        updateColorScheme: function () {\n            this.$el.attr('data-color', this.account.settings.get('color'));\n            this.account.settings.once(\"change:color\", this.updateColorScheme, this);\n        },\n    });\n\n    xabber.SettingsView = xabber.BasicView.extend({\n        className: 'settings-panel',\n        template: templates.settings,\n        ps_selector: '.panel-content',\n\n        events: {\n            \"click .settings-tabs-wrap .settings-tab\": \"jumpToBlock\",\n            \"click .btn-add-account\": \"showAddAccountView\",\n            \"click .setting.notifications label\": \"setNotifications\",\n            \"click .setting.private-notifications label\": \"setPrivateNotifications\",\n            \"click .setting.group-notifications label\": \"setGroupNotifications\",\n            \"click .setting.message-preview.private-preview label\": \"setPrivateMessagePreview\",\n            \"click .setting.message-preview.group-preview label\": \"setGroupMessagePreview\",\n            \"click .setting.call-attention label\": \"setCallAttention\",\n            \"click .setting.load-media label\": \"setLoadMedia\",\n            \"click .setting.typing-notifications label\": \"setTypingNotifications\",\n            \"click .setting.mapping-service label\": \"setMappingService\",\n            \"change .sound input[type=radio][name=private_sound]\": \"setPrivateSound\",\n            \"change .sound input[type=radio][name=group_sound]\": \"setGroupSound\",\n            \"change .sound input[type=radio][name=call_sound]\": \"setCallSound\",\n            \"change .sound input[type=radio][name=dialtone_sound]\": \"setDialtoneSound\",\n            \"change .sound input[type=radio][name=attention_sound]\": \"setAttentionSound\",\n            \"change .languages-list input[type=radio][name=language]\": \"changeLanguage\",\n            \"change #vignetting\": \"changeVignetting\",\n            \"change #blur\": \"changeBlur\",\n            \"change #notifications_volume\": \"changeNotificationsVolume\",\n            \"change #transparency\": \"changeTransparency\",\n            \"change #blur_switch\": \"switchBlur\",\n            \"change #vignetting_switch\": \"switchVignetting\",\n            \"click .selected-color-wrap\": \"openColorPicker\",\n            \"click .current-main-color-wrap\": \"openMainColorPicker\",\n            \"change .background input[type=radio][name=background]\": \"setBackground\",\n            \"change .background input[type=radio][name=side-panel]\": \"setSidePanelTheme\",\n            \"change #side_panel_blur_switch\": \"setSidePanelBlur\",\n            \"change #transparency_switch\": \"switchTransparency\",\n            \"click .current-background-wrap\": \"changeBackgroundImage\",\n            \"change .hotkeys input[type=radio][name=hotkeys]\": \"setHotkeys\",\n            \"change .avatar-shape input[type=radio][name=avatar_shape]\": \"setAvatarShape\",\n            \"click .settings-tab.delete-all-accounts\": \"deleteAllAccounts\"\n        },\n\n        _initialize: function () {\n            this.$('.xabber-info-wrap .version').text(xabber.get('version_number'));\n            xabber.on('update_main_color', this.updateMainColor, this);\n        },\n\n        render: function () {\n            let settings = this.model.attributes,\n                lang = settings.language;\n            this.$('.notifications input[type=checkbox]').prop({\n                checked: settings.notifications && xabber._cache.get('notifications')\n            });\n            this.$('.private-notifications input[type=checkbox]')\n                .prop({checked: settings.notifications_private});\n            this.$('.sound input[type=radio][name=private_sound]').prop('disabled', !settings.notifications_private)\n            this.$('.group-notifications input[type=checkbox]')\n                .prop({checked: settings.notifications_group});\n            this.$('.sound input[type=radio][name=group_sound]').prop('disabled', !settings.notifications_group)\n            this.$('.message-preview.private-preview input[type=checkbox]')\n                .prop({checked: settings.message_preview_private});\n            this.$('.message-preview.group-preview input[type=checkbox]')\n                .prop({checked: settings.message_preview_group});\n            this.$('.call-attention input[type=checkbox]')\n                .prop({checked: settings.call_attention});\n            this.$('.load-media input[type=checkbox]')\n                .prop({checked: settings.load_media});\n            this.$('.typing-notifications input[type=checkbox]')\n                .prop({checked: settings.typing_notifications});\n            this.$('.mapping-service input[type=checkbox]')\n                .prop({checked: settings.mapping_service});\n            let sound_private_value = settings.private_sound ? settings.sound_on_private_message : '';\n            this.$(`.sound input[type=radio][name=private_sound][value=\"${sound_private_value}\"]`)\n                    .prop('checked', true);\n            let sound_group_value = settings.group_sound ? settings.sound_on_group_message : '';\n            this.$(`.sound input[type=radio][name=group_sound][value=\"${sound_group_value}\"]`)\n                    .prop('checked', true);\n            this.$(`.sound input[type=radio][name=call_sound][value=\"${settings.sound_on_call}\"]`)\n                    .prop('checked', true);\n            this.$(`.sound input[type=radio][name=dialtone_sound][value=\"${settings.sound_on_dialtone}\"]`)\n                    .prop('checked', true);\n            this.$(`.sound input[type=radio][name=attention_sound][value=\"${settings.sound_on_attention}\"]`)\n                    .prop('checked', true);\n            this.$(`.hotkeys input[type=radio][name=hotkeys][value=${settings.hotkeys}]`)\n                    .prop('checked', true);\n            this.$(`.avatar-shape input[type=radio][name=avatar_shape][value=${settings.avatar_shape}]`)\n                    .prop('checked', true);\n            (lang == xabber.get(\"default_language\")) && (lang = 'default');\n            this.$(`.languages-list input[type=radio][name=language][value=\"${lang}\"]`)\n                .prop('checked', true);\n            let notifications_volume = !isNaN(settings.notifications_volume) ? settings.notifications_volume * 100 : 100;\n            this.$(`#notifications_volume`).val(notifications_volume);\n            this.$('.settings-panel-head span').text(this.$('.settings-block-wrap:not(.hidden)').attr('data-header'))\n            this.updateDescription();\n            this.updateBackgroundSetting();\n            this.updateColor();\n            this.updateMainColor();\n            this.updateSidePanelSetting();\n            this.$('.toolbar-main-color-setting-wrap .dropdown-button').dropdown({\n                inDuration: 100,\n                outDuration: 100,\n                belowOrigin: true,\n                hover: false\n            });\n            return this;\n        },\n\n        updateMainColor: function () {\n            this.$('.toolbar-main-color-setting').attr('data-color', this.model.get('main_color'));\n            this.$('.toolbar-main-color-setting .color-name').text(xabber.getString(`account_color_name_${this.model.get('main_color').replace(/-/g, \"_\")}`).replace(/-/g, \" \"));\n        },\n\n        updateBackgroundSetting: function () {\n            this.$(`.background input[type=radio][name=background][value=${this.model.get('background').type}]`)\n                .prop('checked', true);\n            if (this.model.get('background').image) {\n                this.$('.current-background').css('background-image', `url(${utils.images.getCachedBackground(this.model.get('background').image)})`);\n            }\n            this.$('.current-background-wrap').switchClass('hidden', !this.model.get('background').image);\n            let appearance = this.model.get('appearance'),\n                blur_switched = appearance.blur !== false,\n                vignetting_switched = appearance.vignetting !== false;\n            this.$('#blur_switch')[0].checked = blur_switched;\n            this.$('.blur-setting .disabled').switchClass('hidden', blur_switched);\n            this.$('#blur')[0].value = blur_switched ? appearance.blur : constants.BLUR_VALUE;\n\n            this.$('#vignetting_switch')[0].checked = vignetting_switched;\n            this.$('.vignetting-setting .disabled').switchClass('hidden', vignetting_switched);\n            this.$('#vignetting')[0].value = vignetting_switched ? appearance.vignetting : constants.VIGNETTING_VALUE;\n            this.updateScrollBar();\n        },\n\n        updateColor: function () {\n            let color = this.model.get('appearance').color || '#E0E0E0';\n            this.$('.selected-color-item').css('background-color', color);\n            this.$('.selected-color-hex').text(color);\n            let material_color = xabber.ColorPicker.prototype.materialColors.find(c => c.variations.find(v => v.hex.toLowerCase() == color.toLowerCase()));\n            if (material_color) {\n                let tone = material_color.variations.find(v => v.hex.toLowerCase() == color.toLowerCase());\n                this.$('.selected-color-name').text(xabber.getString(`account_color_name_${material_color.color.replace(/-/g, \"_\")}`).replace(/-/g, \" \") + ` ${tone.weight}`);\n            } else {\n                this.$('.selected-color-name').text(xabber.getString(\"settings__section_appearance__hint_custom_color\"));\n            }\n            xabber.toolbar_view.updateColor(color);\n        },\n\n        updateSidePanelSetting: function () {\n            let side_panel_settings = this.model.get('side_panel'),\n                transparency_switched = side_panel_settings.transparency !== false;\n            this.$('#side_panel_blur_switch')[0].checked = side_panel_settings.blur;\n            this.$('#transparency_switch')[0].checked = transparency_switched;\n            this.$('.transparency-setting .disabled').switchClass('hidden', transparency_switched);\n            this.$('#transparency')[0].value = transparency_switched ? side_panel_settings.transparency : constants.TRANSPARENCY_VALUE;\n            this.$(`#${this.cid}-${side_panel_settings.theme}-side-panel`)[0].checked = true;\n        },\n\n        jumpToBlock: function (ev) {\n            let $tab = $(ev.target).closest('.settings-tab'),\n                $elem = this.$('.settings-block-wrap.' + $tab.data('block-name'));\n            this.$('.btn-add-account').hideIf($tab.data('block-name') != 'xmpp-accounts')\n            if ($tab.hasClass('link-button')) {\n                $tab.parent().siblings().removeClass('active');\n                this.scrollTo(0);\n                return;\n            }\n            this.$('.settings-block-wrap').addClass('hidden');\n            $elem.removeClass('hidden');\n            this.$('.settings-panel-head span').text($elem.attr('data-header'))\n            $tab.addClass('active').siblings().removeClass('active');\n            this.scrollToChild($elem);\n        },\n\n        setNotifications: function (ev) {\n            let value = this.model.get('notifications'),\n                $target = $(ev.target);\n            ev.preventDefault();\n            if (value === null) {\n                utils.callback_popup_message(xabber.getString(\"notifications__toast_notifications_not_supported\"), 1500);\n            } else {\n                value = value && xabber._cache.get('notifications');\n                if (!xabber._cache.get('notifications')) {\n                    window.Notification.requestPermission((permission) => {\n                        xabber._cache.save({'notifications': (permission === 'granted'), 'ignore_notifications_warning': true});\n                        xabber.notifications_placeholder && xabber.notifications_placeholder.close();\n                        value = (permission === 'granted');\n                        this.model.save('notifications', value ? value : this.model.get('notifications'));\n                        $target.closest('.setting.notifications').find('input').prop('checked', value);\n                    });\n                } else {\n                    value = !value;\n                    this.model.save('notifications', value);\n                    $target.closest('.setting.notifications').find('input').prop('checked', value);\n                }\n            }\n        },\n\n        setPrivateNotifications: function (ev) {\n            let value = !this.model.get('notifications_private');\n            this.model.save('notifications_private', value);\n            ev.preventDefault();\n            this.$('.sound input[type=radio][name=private_sound]').prop('disabled', !value)\n            $(ev.target).closest('.setting.private-notifications').find('input').prop('checked', value);\n        },\n\n        setGroupNotifications: function (ev) {\n            let value = !this.model.get('notifications_group');\n            this.model.save('notifications_group', value);\n            ev.preventDefault();\n            this.$('.sound input[type=radio][name=group_sound]').prop('disabled', !value)\n            $(ev.target).closest('.setting.group-notifications').find('input').prop('checked', value);\n        },\n\n        setPrivateMessagePreview: function (ev) {\n            let value = !this.model.get('message_preview_private');\n            this.model.save('message_preview_private', value);\n            ev.preventDefault();\n            $(ev.target).closest('.setting.message-preview').find('input').prop('checked', value);\n        },\n\n        setGroupMessagePreview: function (ev) {\n            let value = !this.model.get('message_preview_group');\n            this.model.save('message_preview_group', value);\n            ev.preventDefault();\n            $(ev.target).closest('.setting.message-preview').find('input').prop('checked', value);\n        },\n\n        setCallAttention: function (ev) {\n            let value = !this.model.get('call_attention');\n            this.model.save('call_attention', value);\n            ev.preventDefault();\n            $(ev.target).closest('.setting.call-attention').find('input').prop('checked', value);\n        },\n\n        setLoadMedia: function (ev) {\n            let value = !this.model.get('load_media');\n            this.model.save('load_media', value);\n            ev.preventDefault();\n            $(ev.target).closest('.setting.load-media').find('input').prop('checked', value);\n        },\n\n        setTypingNotifications: function (ev) {\n            let value = !this.model.get('typing_notifications');\n            this.model.save('typing_notifications', value);\n            ev.preventDefault();\n            $(ev.target).closest('.setting.typing-notifications').find('input').prop('checked', value);\n        },\n\n        setMappingService: function (ev) {\n            let value = !this.model.get('mapping_service');\n            this.model.save('mapping_service', value);\n            ev.preventDefault();\n            $(ev.target).closest('.setting.mapping-service').find('input').prop('checked', value);\n        },\n\n        setPrivateSound: function (ev) {\n            let value = ev.target.value;\n            if (value) {\n                this.current_sound && this.current_sound.pause();\n                this.current_sound = xabber.playAudio(value, false, this.model.get('notifications_volume'));\n                this.model.save({private_sound: true, sound_on_private_message: value});\n            } else {\n                this.model.save('private_sound', false);\n            }\n        },\n\n        setGroupSound: function (ev) {\n            let value = ev.target.value;\n            if (value) {\n                this.current_sound && this.current_sound.pause();\n                this.current_sound = xabber.playAudio(value, false, this.model.get('notifications_volume'));\n                this.model.save({group_sound: true, sound_on_group_message: value});\n            } else {\n                this.model.save('group_sound', false);\n            }\n        },\n\n        setCallSound: function (ev) {\n            let value = ev.target.value;\n            this.current_sound && this.current_sound.pause();\n            this.current_sound = xabber.playAudio(value, false);\n            this.model.save({sound_on_call: value});\n        },\n\n        setDialtoneSound: function (ev) {\n            let value = ev.target.value;\n            this.current_sound && this.current_sound.pause();\n            this.current_sound = xabber.playAudio(value, false);\n            this.model.save({sound_on_dialtone: value});\n        },\n\n        setAttentionSound: function (ev) {\n            let value = ev.target.value;\n            this.current_sound && this.current_sound.pause();\n            this.current_sound = xabber.playAudio(value, false);\n            this.model.save({sound_on_attention: value});\n        },\n\n        setBackground: function (ev) {\n            let value = ev.target.value;\n            if (value == 'default') {\n                this.model.save('background', {type: 'default'});\n                xabber.body.updateBackground();\n                this.updateBackgroundSetting();\n            } else if (value == 'repeating-pattern' || value == 'image') {\n                let background_view = new xabber.SetBackgroundView();\n                background_view.render({type: value, model: this.model});\n            }\n        },\n\n        setSidePanelTheme: function (ev) {\n            let value = ev.target.value,\n                side_panel_settings = this.model.get('side_panel');\n            this.model.save('side_panel', _.extend(side_panel_settings, {theme: value}));\n            xabber.roster_view.updateTheme(value);\n        },\n\n        setSidePanelBlur: function () {\n            let value = this.$('#side_panel_blur_switch')[0].checked,\n                side_panel_settings = this.model.get('side_panel');\n            this.model.save('side_panel', _.extend(side_panel_settings, {blur: value}));\n            xabber.roster_view.updateBlur(value);\n        },\n\n        changeBackgroundImage: function () {\n            let type = this.model.get('background').type;\n            if (type == 'repeating-pattern' || type == 'image') {\n                let background_view = new xabber.SetBackgroundView();\n                background_view.render({type: type, model: this.model});\n            }\n        },\n\n        openColorPicker: function () {\n            if (!this.colorPicker)\n                this.colorPicker = new xabber.ColorPicker({model: this.model});\n            this.colorPicker.render();\n        },\n\n        openMainColorPicker: function () {\n            if (!this.mainColorPicker)\n                this.mainColorPicker = new xabber.mainColorPicker({model: this.model});\n            this.mainColorPicker.render();\n        },\n\n        changeBlur: function () {\n            let value = this.$('#blur')[0].value,\n                appearance = this.model.get('appearance');\n            xabber.body.updateBlur(value);\n            this.model.save('appearance', _.extend(appearance, {blur: value}));\n        },\n\n        switchTransparency: function () {\n            let is_switched = this.$('#transparency_switch')[0].checked,\n                side_panel_settings = this.model.get('side_panel'),\n                value = is_switched ? constants.TRANSPARENCY_VALUE : false;\n            this.$('.transparency-setting .disabled').switchClass('hidden', is_switched);\n            this.$('#transparency')[0].value = constants.TRANSPARENCY_VALUE;\n            this.model.save('side_panel', _.extend(side_panel_settings, {transparency: value}));\n            xabber.roster_view.updateTransparency(value);\n        },\n\n        changeNotificationsVolume: function () {\n            let volume = this.$('#notifications_volume')[0].value / 100,\n                sound = this.$('.sound input[type=radio][name=private_sound]:checked').val() || this.$('.sound input[type=radio][name=group_sound]:checked').val();\n            this.model.save('notifications_volume', volume);\n            if (sound) {\n                this.current_sound && this.current_sound.pause();\n                this.current_sound = xabber.playAudio(sound, false, volume);\n            }\n        },\n\n        changeTransparency: function () {\n            let value = this.$('#transparency')[0].value,\n                side_panel_settings = this.model.get('side_panel');\n            this.model.save('side_panel', _.extend(side_panel_settings, {transparency: value}));\n            xabber.roster_view.updateTransparency(value);\n        },\n\n        changeVignetting: function () {\n            let value = this.$('#vignetting')[0].value,\n                appearance = this.model.get('appearance');\n            xabber.body.updateBoxShadow(value);\n            this.model.save('appearance', _.extend(appearance, {vignetting: value}));\n        },\n\n        switchVignetting: function () {\n            let is_switched = this.$('#vignetting_switch:checked').length,\n                appearance = this.model.get('appearance'),\n                value = is_switched ? constants.VIGNETTING_VALUE : false;\n            this.$('.vignetting-setting .disabled').switchClass('hidden', is_switched);\n            this.$('#vignetting')[0].value = constants.VIGNETTING_VALUE;\n            this.model.save('appearance', _.extend(appearance, {vignetting: value}));\n            xabber.body.updateBoxShadow(value);\n        },\n\n        switchBlur: function () {\n            let is_switched = this.$('#blur_switch:checked').length,\n                appearance = this.model.get('appearance'),\n                value = is_switched ? constants.BLUR_VALUE : false;\n            this.$('.blur-setting .disabled').switchClass('hidden', is_switched);\n            this.$('#blur')[0].value = constants.BLUR_VALUE;\n            this.model.save('appearance', _.extend(appearance, {blur: value}));\n            xabber.body.updateBlur(value);\n        },\n\n        setHotkeys: function (ev) {\n            this.model.save('hotkeys', ev.target.value);\n        },\n\n        setAvatarShape: function (ev) {\n            this.model.save('avatar_shape', ev.target.value);\n            xabber.trigger('update_avatar_shape');\n        },\n\n        deleteAllAccounts: function (ev) {\n            utils.dialogs.ask(xabber.getString(\"button_quit\"), xabber.getString(\"settings__dialog_quit_client__confirm\", [constants.CLIENT_NAME]), null, { ok_button_text: xabber.getString(\"button_quit\")}).done((res) => {\n                res && xabber.trigger('quit');\n            });\n        },\n\n        changeLanguage: function (ev) {\n            let value = ev.target.value;\n            utils.dialogs.ask(xabber.getString(\"settings__dialog_change_language__header\"), xabber.getString(\"settings__dialog_change_language__confirm\"), null, { ok_button_text: xabber.getString(\"settings__dialog_change_language__button_change\")}).done((result) => {\n                if (result) {\n                    this.model.save('language', value);\n                    window.location.reload(true);\n                } else {\n                    this.$(`.languages-list input[type=radio][name=language][value=\"${this.model.get('language')}\"]`)\n                        .prop('checked', true);\n                }\n            });\n        },\n\n        showAddAccountView: function () {\n            xabber.trigger('add_account', {right: null});\n        },\n\n        updateDescription: function () {\n            let lang = window.navigator.language,\n                progress = Object.keys(client_translation_progress).find(key => !lang.indexOf(key)) || constants.languages_another_locales[lang] && Object.keys(client_translation_progress).find(key => !constants.languages_another_locales[lang].indexOf(key));\n            (lang == 'default' || !lang.indexOf('en')) && (progress = 100);\n            if (!_.isUndefined(progress)) {\n                let progress_text, platform_text;\n                if (progress == 100) {\n                    progress_text = xabber.getString(\"settings__interface_language__text_description_full_translation\", [constants.SHORT_CLIENT_NAME, constants.SHORT_CLIENT_NAME]);\n                    platform_text = xabber.getString(\"settings__interface_language__text_description_full_translation_platform\",\n                        [`<a target=\"_blank\" href='${xabber.getString(\"settings__section_interface_language__text_description___link\")}'>${xabber.getString(\"settings__section_interface_language__text_description__text_link\")}</a>`]);\n                } else if (progress == 0) {\n                    progress_text = xabber.getString(\"settings__section_interface_language__text_description_no_translations\", [constants.SHORT_CLIENT_NAME, constants.SHORT_CLIENT_NAME]);\n                    platform_text = xabber.getString(\"settings__interface_language__text_description_no_translation_platform\",\n                            [`<a target=\"_blank\" href='${xabber.getString(\"settings__section_interface_language__text_description___link\")}'>${xabber.getString(\"settings__section_interface_language__text_description__text_link\")}</a>`]);\n                } else {\n                    progress_text = xabber.getString(\"settings__interface_language__text_description_unfull_translation\", [constants.SHORT_CLIENT_NAME, constants.SHORT_CLIENT_NAME]);\n                    platform_text = xabber.getString(\"settings__section_interface_language__text_description_translation_platform\",\n                        [`<a target=\"_blank\" href='${xabber.getString(\"settings__section_interface_language__text_description___link\")}'>${xabber.getString(\"settings__section_interface_language__text_description__text_link\")}</a>`, constants.EMAIL_FOR_JOIN_TRANSLATION]);\n                }\n                this.$('.description').html(`${progress_text}<br><br>${platform_text}`);\n            }\n        }\n    });\n\n    xabber.mainColorPicker = xabber.BasicView.extend({\n        className: 'modal main-modal main-color-picker',\n        template: templates.color_scheme,\n        ps_selector: '.modal-content',\n        ps_settings: {theme: 'item-list'},\n\n        events: {\n            \"click .color-value\": \"setColor\"\n        },\n\n        _initialize: function (options) {\n            this.model = options.model;\n        },\n\n        render: function () {\n            this.$el.openModal({\n                ready: () => {\n                    this.$('.modal-content').css('max-height', Math.min(($(window).height() - 341), 456)).perfectScrollbar({theme: 'item-list'});\n                },\n                complete: this.close.bind(this)\n            });\n        },\n\n        setColor: function (ev) {\n            let color = $(ev.target).closest('.color-value').attr('data-value');\n            this.model.save('main_color', color);\n            xabber.trigger('update_main_color');\n            this.close();\n        },\n\n        close: function () {\n            this.$el.closeModal({ complete: () => {\n                    this.$el.detach();\n                    this.data.set('visible', false);\n                }\n            });\n        }\n\n    });\n\n    xabber.ColorPicker = xabber.BasicView.extend({\n        className: 'modal main-modal color-picker',\n        materialColors: [\n            {\n                color: \"red\",\n                variations: [\n                    {\n                        weight: 50,\n                        hex: \"#FFEBEE\"\n                    },\n                    {\n                        weight: 100,\n                        hex: \"#FFCDD2\"\n                    },\n                    {\n                        weight: 200,\n                        hex: \"#EF9A9A\"\n                    },\n                    {\n                        weight: 300,\n                        hex: \"#E57373\"\n                    },\n                    {\n                        weight: 400,\n                        hex: \"#EF5350\"\n                    },\n                    {\n                        weight: 500,\n                        hex: \"#F44336\"\n                    },\n                    {\n                        weight: 600,\n                        hex: \"#E53935\"\n                    },\n                    {\n                        weight: 700,\n                        hex: \"#D32F2F\"\n                    },\n                    {\n                        weight: 800,\n                        hex: \"#C62828\"\n                    },\n                    {\n                        weight: 900,\n                        hex: \"#B71C1C\"\n                    }\n                ]\n            },\n            {\n                color: \"pink\",\n                variations: [\n                    {\n                        weight: 50,\n                        hex: \"#FCE4EC\"\n                    },\n                    {\n                        weight: 100,\n                        hex: \"#F8BBD0\"\n                    },\n                    {\n                        weight: 200,\n                        hex: \"#F48FB1\"\n                    },\n                    {\n                        weight: 300,\n                        hex: \"#F06292\"\n                    },\n                    {\n                        weight: 400,\n                        hex: \"#EC407A\"\n                    },\n                    {\n                        weight: 500,\n                        hex: \"#E91E63\"\n                    },\n                    {\n                        weight: 600,\n                        hex: \"#D81B60\"\n                    },\n                    {\n                        weight: 700,\n                        hex: \"#C2185B\"\n                    },\n                    {\n                        weight: 800,\n                        hex: \"#AD1457\"\n                    },\n                    {\n                        weight: 900,\n                        hex: \"#880E4F\"\n                    }\n                ]\n            },\n            {\n                color: \"purple\",\n                variations: [\n                    {\n                        weight: 50,\n                        hex: \"#F3E5F5\"\n                    },\n                    {\n                        weight: 100,\n                        hex: \"#E1BEE7\"\n                    },\n                    {\n                        weight: 200,\n                        hex: \"#CE93D8\"\n                    },\n                    {\n                        weight: 300,\n                        hex: \"#BA68C8\"\n                    },\n                    {\n                        weight: 400,\n                        hex: \"#AB47BC\"\n                    },\n                    {\n                        weight: 500,\n                        hex: \"#9C27B0\"\n                    },\n                    {\n                        weight: 600,\n                        hex: \"#8E24AA\"\n                    },\n                    {\n                        weight: 700,\n                        hex: \"#7B1FA2\"\n                    },\n                    {\n                        weight: 800,\n                        hex: \"#6A1B9A\"\n                    },\n                    {\n                        weight: 900,\n                        hex: \"#4A148C\"\n                    }\n                ]\n            },\n            {\n                color: \"deep-purple\",\n                variations: [\n                    {\n                        weight: 50,\n                        hex: \"#EDE7F6\"\n                    },\n                    {\n                        weight: 100,\n                        hex: \"#D1C4E9\"\n                    },\n                    {\n                        weight: 200,\n                        hex: \"#B39DDB\"\n                    },\n                    {\n                        weight: 300,\n                        hex: \"#9575CD\"\n                    },\n                    {\n                        weight: 400,\n                        hex: \"#7E57C2\"\n                    },\n                    {\n                        weight: 500,\n                        hex: \"#673AB7\"\n                    },\n                    {\n                        weight: 600,\n                        hex: \"#5E35B1\"\n                    },\n                    {\n                        weight: 700,\n                        hex: \"#512DA8\"\n                    },\n                    {\n                        weight: 800,\n                        hex: \"#4527A0\"\n                    },\n                    {\n                        weight: 900,\n                        hex: \"#311B92\"\n                    }\n                ]\n            },\n            {\n                color: \"indigo\",\n                variations: [\n                    {\n                        weight: 50,\n                        hex: \"#E8EAF6\"\n                    },\n                    {\n                        weight: 100,\n                        hex: \"#C5CAE9\"\n                    },\n                    {\n                        weight: 200,\n                        hex: \"#9FA8DA\"\n                    },\n                    {\n                        weight: 300,\n                        hex: \"#7986CB\"\n                    },\n                    {\n                        weight: 400,\n                        hex: \"#5C6BC0\"\n                    },\n                    {\n                        weight: 500,\n                        hex: \"#3F51B5\"\n                    },\n                    {\n                        weight: 600,\n                        hex: \"#3949AB\"\n                    },\n                    {\n                        weight: 700,\n                        hex: \"#303F9F\"\n                    },\n                    {\n                        weight: 800,\n                        hex: \"#283593\"\n                    },\n                    {\n                        weight: 900,\n                        hex: \"#1A237E\"\n                    }\n                ]\n            },\n            {\n                color: \"blue\",\n                variations: [\n                    {\n                        weight: 50,\n                        hex: \"#E3F2FD\"\n                    },\n                    {\n                        weight: 100,\n                        hex: \"#BBDEFB\"\n                    },\n                    {\n                        weight: 200,\n                        hex: \"#90CAF9\"\n                    },\n                    {\n                        weight: 300,\n                        hex: \"#64B5F6\"\n                    },\n                    {\n                        weight: 400,\n                        hex: \"#42A5F5\"\n                    },\n                    {\n                        weight: 500,\n                        hex: \"#2196F3\"\n                    },\n                    {\n                        weight: 600,\n                        hex: \"#1E88E5\"\n                    },\n                    {\n                        weight: 700,\n                        hex: \"#1976D2\"\n                    },\n                    {\n                        weight: 800,\n                        hex: \"#1565C0\"\n                    },\n                    {\n                        weight: 900,\n                        hex: \"#0D47A1\"\n                    }\n                ]\n            },\n            {\n                color: \"light-blue\",\n                variations: [\n                    {\n                        weight: 50,\n                        hex: \"#E1F5FE\"\n                    },\n                    {\n                        weight: 100,\n                        hex: \"#B3E5FC\"\n                    },\n                    {\n                        weight: 200,\n                        hex: \"#81D4FA\"\n                    },\n                    {\n                        weight: 300,\n                        hex: \"#4FC3F7\"\n                    },\n                    {\n                        weight: 400,\n                        hex: \"#29B6F6\"\n                    },\n                    {\n                        weight: 500,\n                        hex: \"#03A9F4\"\n                    },\n                    {\n                        weight: 600,\n                        hex: \"#039BE5\"\n                    },\n                    {\n                        weight: 700,\n                        hex: \"#0288D1\"\n                    },\n                    {\n                        weight: 800,\n                        hex: \"#0277BD\"\n                    },\n                    {\n                        weight: 900,\n                        hex: \"#01579B\"\n                    }\n                ]\n            },\n            {\n                color: \"cyan\",\n                variations: [\n                    {\n                        weight: 50,\n                        hex: \"#E0F7FA\"\n                    },\n                    {\n                        weight: 100,\n                        hex: \"#B2EBF2\"\n                    },\n                    {\n                        weight: 200,\n                        hex: \"#80DEEA\"\n                    },\n                    {\n                        weight: 300,\n                        hex: \"#4DD0E1\"\n                    },\n                    {\n                        weight: 400,\n                        hex: \"#26C6DA\"\n                    },\n                    {\n                        weight: 500,\n                        hex: \"#00BCD4\"\n                    },\n                    {\n                        weight: 600,\n                        hex: \"#00ACC1\"\n                    },\n                    {\n                        weight: 700,\n                        hex: \"#0097A7\"\n                    },\n                    {\n                        weight: 800,\n                        hex: \"#00838F\"\n                    },\n                    {\n                        weight: 900,\n                        hex: \"#006064\"\n                    }\n                ]\n            },\n            {\n                color: \"teal\",\n                variations: [\n                    {\n                        weight: 50,\n                        hex: \"#E0F2F1\"\n                    },\n                    {\n                        weight: 100,\n                        hex: \"#B2DFDB\"\n                    },\n                    {\n                        weight: 200,\n                        hex: \"#80CBC4\"\n                    },\n                    {\n                        weight: 300,\n                        hex: \"#4DB6AC\"\n                    },\n                    {\n                        weight: 400,\n                        hex: \"#26A69A\"\n                    },\n                    {\n                        weight: 500,\n                        hex: \"#009688\"\n                    },\n                    {\n                        weight: 600,\n                        hex: \"#00897B\"\n                    },\n                    {\n                        weight: 700,\n                        hex: \"#00796B\"\n                    },\n                    {\n                        weight: 800,\n                        hex: \"#00695C\"\n                    },\n                    {\n                        weight: 900,\n                        hex: \"#004D40\"\n                    }\n                ]\n            },\n            {\n                color: \"green\",\n                variations: [\n                    {\n                        weight: 50,\n                        hex: \"#E8F5E9\"\n                    },\n                    {\n                        weight: 100,\n                        hex: \"#C8E6C9\"\n                    },\n                    {\n                        weight: 200,\n                        hex: \"#A5D6A7\"\n                    },\n                    {\n                        weight: 300,\n                        hex: \"#81C784\"\n                    },\n                    {\n                        weight: 400,\n                        hex: \"#66BB6A\"\n                    },\n                    {\n                        weight: 500,\n                        hex: \"#4CAF50\"\n                    },\n                    {\n                        weight: 600,\n                        hex: \"#43A047\"\n                    },\n                    {\n                        weight: 700,\n                        hex: \"#388E3C\"\n                    },\n                    {\n                        weight: 800,\n                        hex: \"#2E7D32\"\n                    },\n                    {\n                        weight: 900,\n                        hex: \"#1B5E20\"\n                    }\n                ]\n            },\n            {\n                color: \"light-green\",\n                variations: [\n                    {\n                        weight: 50,\n                        hex: \"#F1F8E9\"\n                    },\n                    {\n                        weight: 100,\n                        hex: \"#DCEDC8\"\n                    },\n                    {\n                        weight: 200,\n                        hex: \"#C5E1A5\"\n                    },\n                    {\n                        weight: 300,\n                        hex: \"#AED581\"\n                    },\n                    {\n                        weight: 400,\n                        hex: \"#9CCC65\"\n                    },\n                    {\n                        weight: 500,\n                        hex: \"#8BC34A\"\n                    },\n                    {\n                        weight: 600,\n                        hex: \"#7CB342\"\n                    },\n                    {\n                        weight: 700,\n                        hex: \"#689F38\"\n                    },\n                    {\n                        weight: 800,\n                        hex: \"#558B2F\"\n                    },\n                    {\n                        weight: 900,\n                        hex: \"#33691E\"\n                    }\n                ]\n            },\n            {\n                color: \"lime\",\n                variations: [\n                    {\n                        weight: 50,\n                        hex: \"#F9FBE7\"\n                    },\n                    {\n                        weight: 100,\n                        hex: \"#F0F4C3\"\n                    },\n                    {\n                        weight: 200,\n                        hex: \"#E6EE9C\"\n                    },\n                    {\n                        weight: 300,\n                        hex: \"#DCE775\"\n                    },\n                    {\n                        weight: 400,\n                        hex: \"#D4E157\"\n                    },\n                    {\n                        weight: 500,\n                        hex: \"#CDDC39\"\n                    },\n                    {\n                        weight: 600,\n                        hex: \"#C0CA33\"\n                    },\n                    {\n                        weight: 700,\n                        hex: \"#AFB42B\"\n                    },\n                    {\n                        weight: 800,\n                        hex: \"#9E9D24\"\n                    },\n                    {\n                        weight: 900,\n                        hex: \"#827717\"\n                    }\n                ]\n            },\n            {\n                color: \"yellow\",\n                variations: [\n                    {\n                        weight: 50,\n                        hex: \"#FFFDE7\"\n                    },\n                    {\n                        weight: 100,\n                        hex: \"#FFF9C4\"\n                    },\n                    {\n                        weight: 200,\n                        hex: \"#FFF59D\"\n                    },\n                    {\n                        weight: 300,\n                        hex: \"#FFF176\"\n                    },\n                    {\n                        weight: 400,\n                        hex: \"#FFEE58\"\n                    },\n                    {\n                        weight: 500,\n                        hex: \"#FFEB3B\"\n                    },\n                    {\n                        weight: 600,\n                        hex: \"#FDD835\"\n                    },\n                    {\n                        weight: 700,\n                        hex: \"#FBC02D\"\n                    },\n                    {\n                        weight: 800,\n                        hex: \"#F9A825\"\n                    },\n                    {\n                        weight: 900,\n                        hex: \"#F57F17\"\n                    }\n                ]\n            },\n            {\n                color: \"amber\",\n                variations: [\n                    {\n                        weight: 50,\n                        hex: \"#FFF8E1\"\n                    },\n                    {\n                        weight: 100,\n                        hex: \"#FFECB3\"\n                    },\n                    {\n                        weight: 200,\n                        hex: \"#FFE082\"\n                    },\n                    {\n                        weight: 300,\n                        hex: \"#FFD54F\"\n                    },\n                    {\n                        weight: 400,\n                        hex: \"#FFCA28\"\n                    },\n                    {\n                        weight: 500,\n                        hex: \"#FFC107\"\n                    },\n                    {\n                        weight: 600,\n                        hex: \"#FFB300\"\n                    },\n                    {\n                        weight: 700,\n                        hex: \"#FFA000\"\n                    },\n                    {\n                        weight: 800,\n                        hex: \"#FF8F00\"\n                    },\n                    {\n                        weight: 900,\n                        hex: \"#FF6F00\"\n                    }\n                ]\n            },\n            {\n                color: \"orange\",\n                variations: [\n                    {\n                        weight: 50,\n                        hex: \"#FFF3E0\"\n                    },\n                    {\n                        weight: 100,\n                        hex: \"#FFE0B2\"\n                    },\n                    {\n                        weight: 200,\n                        hex: \"#FFCC80\"\n                    },\n                    {\n                        weight: 300,\n                        hex: \"#FFB74D\"\n                    },\n                    {\n                        weight: 400,\n                        hex: \"#FFA726\"\n                    },\n                    {\n                        weight: 500,\n                        hex: \"#FF9800\"\n                    },\n                    {\n                        weight: 600,\n                        hex: \"#FB8C00\"\n                    },\n                    {\n                        weight: 700,\n                        hex: \"#F57C00\"\n                    },\n                    {\n                        weight: 800,\n                        hex: \"#EF6C00\"\n                    },\n                    {\n                        weight: 900,\n                        hex: \"#E65100\"\n                    }\n                ]\n            },\n            {\n                color: \"deep-orange\",\n                variations: [\n                    {\n                        weight: 50,\n                        hex: \"#FBE9E7\"\n                    },\n                    {\n                        weight: 100,\n                        hex: \"#FFCCBC\"\n                    },\n                    {\n                        weight: 200,\n                        hex: \"#FFAB91\"\n                    },\n                    {\n                        weight: 300,\n                        hex: \"#FF8A65\"\n                    },\n                    {\n                        weight: 400,\n                        hex: \"#FF7043\"\n                    },\n                    {\n                        weight: 500,\n                        hex: \"#FF5722\"\n                    },\n                    {\n                        weight: 600,\n                        hex: \"#F4511E\"\n                    },\n                    {\n                        weight: 700,\n                        hex: \"#E64A19\"\n                    },\n                    {\n                        weight: 800,\n                        hex: \"#D84315\"\n                    },\n                    {\n                        weight: 900,\n                        hex: \"#BF360C\"\n                    }\n                ]\n            },\n            {\n                color: \"brown\",\n                variations: [\n                    {\n                        weight: 50,\n                        hex: \"#EFEBE9\"\n                    },\n                    {\n                        weight: 100,\n                        hex: \"#D7CCC8\"\n                    },\n                    {\n                        weight: 200,\n                        hex: \"#BCAAA4\"\n                    },\n                    {\n                        weight: 300,\n                        hex: \"#A1887F\"\n                    },\n                    {\n                        weight: 400,\n                        hex: \"#8D6E63\"\n                    },\n                    {\n                        weight: 500,\n                        hex: \"#795548\"\n                    },\n                    {\n                        weight: 600,\n                        hex: \"#6D4C41\"\n                    },\n                    {\n                        weight: 700,\n                        hex: \"#5D4037\"\n                    },\n                    {\n                        weight: 800,\n                        hex: \"#4E342E\"\n                    },\n                    {\n                        weight: 900,\n                        hex: \"#3E2723\"\n                    }\n                ]\n            },\n            {\n                color: \"grey\",\n                variations: [\n                    {\n                        weight: 50,\n                        hex: \"#FAFAFA\"\n                    },\n                    {\n                        weight: 100,\n                        hex: \"#F5F5F5\"\n                    },\n                    {\n                        weight: 200,\n                        hex: \"#EEEEEE\"\n                    },\n                    {\n                        weight: 300,\n                        hex: \"#E0E0E0\"\n                    },\n                    {\n                        weight: 400,\n                        hex: \"#BDBDBD\"\n                    },\n                    {\n                        weight: 500,\n                        hex: \"#9E9E9E\"\n                    },\n                    {\n                        weight: 600,\n                        hex: \"#757575\"\n                    },\n                    {\n                        weight: 700,\n                        hex: \"#616161\"\n                    },\n                    {\n                        weight: 800,\n                        hex: \"#424242\"\n                    },\n                    {\n                        weight: 900,\n                        hex: \"#212121\"\n                    }\n                ]\n            },\n            {\n                color: \"blue-grey\",\n                variations: [\n                    {\n                        weight: 50,\n                        hex: \"#ECEFF1\"\n                    },\n                    {\n                        weight: 100,\n                        hex: \"#CFD8DC\"\n                    },\n                    {\n                        weight: 200,\n                        hex: \"#B0BEC5\"\n                    },\n                    {\n                        weight: 300,\n                        hex: \"#90A4AE\"\n                    },\n                    {\n                        weight: 400,\n                        hex: \"#78909C\"\n                    },\n                    {\n                        weight: 500,\n                        hex: \"#607D8B\"\n                    },\n                    {\n                        weight: 600,\n                        hex: \"#546E7A\"\n                    },\n                    {\n                        weight: 700,\n                        hex: \"#455A64\"\n                    },\n                    {\n                        weight: 800,\n                        hex: \"#37474F\"\n                    },\n                    {\n                        weight: 900,\n                        hex: \"#263238\"\n                    }\n                ]\n            }\n        ],\n\n        ps_selector: '.material-color-picker-wrap',\n        events: {\n            \"click .color-palette-item\": \"selectColor\",\n            \"click .selected-color-hex\": \"updateInputField\",\n            \"focusout .selected-color-hex-input\": \"focusoutInputField\",\n            \"keyup .selected-color-hex-input\": \"keyUpInput\",\n            \"click .btn-set\": \"setColor\"\n        },\n\n        _initialize(options) {\n            this.model = options.model;\n            this.$el.html(templates.color_picker({materialColors: this.materialColors}));\n        },\n\n        render: function () {\n            this.$el.openModal({\n                ready: () => {\n                    let $input = this.$('.selected-color-hex-input'),\n                        $color_hex = this.$('.selected-color-hex'),\n                        value = this.model.get('appearance').color || '#E0E0E0';\n                    let material_color = this.materialColors.find(c => c.variations.find(v => v.hex.toLowerCase() == value.toLowerCase()));\n                    if (material_color) {\n                        let tone = material_color.variations.find(v => v.hex.toLowerCase() == value.toLowerCase());\n                        this.$('.selected-color-name').text(xabber.getString(`account_color_name_${material_color.color.replace(/-/g, \"_\")}`).replace(/-/g, \" \") + ` ${tone.weight}`);\n                    } else {\n                        this.$('.selected-color-name').text(xabber.getString(\"settings__section_appearance__hint_custom_color\"));\n                    }\n                    if (value) {\n                        this.$('.selected-color-wrap').removeClass('hidden');\n                        $input.addClass('hidden');\n                        $color_hex.removeClass('hidden').text(value);\n                        value && this.$('.selected-color-item').css('background-color', value);\n                    }\n                },\n                complete: this.close.bind(this)\n            });\n\n        },\n\n        updateInputField: function () {\n            let $input = this.$('.selected-color-hex-input'),\n                $color_hex = this.$('.selected-color-hex');\n            $input.removeClass('hidden');\n            $input[0].value = $color_hex.text();\n            $color_hex.addClass('hidden');\n        },\n\n        keyUpInput: function (ev) {\n            if (ev.keyCode == constants.KEY_ENTER) {\n                ev.preventDefault();\n                this.focusoutInputField();\n            }\n            let $input = this.$('.selected-color-hex-input'),\n                value = $input[0].value.trim();\n            this.$('.selected-color-item').css('background-color', value);\n            let material_color = this.materialColors.find(c => c.variations.find(v => v.hex.toLowerCase() == value.toLowerCase()));\n            if (material_color) {\n                let tone = material_color.variations.find(v => v.hex.toLowerCase() == value.toLowerCase());\n                this.$('.selected-color-name').text(xabber.getString(`account_color_name_${material_color.color.replace(/-/g, \"_\")}`).replace(/-/g, \" \") + ` ${tone.weight}`);\n            } else {\n                this.$('.selected-color-name').text(xabber.getString(\"settings__section_appearance__hint_custom_color\"));\n            }\n        },\n\n        focusoutInputField: function () {\n            let $input = this.$('.selected-color-hex-input'),\n                $color_hex = this.$('.selected-color-hex'),\n                value = $input[0].value.trim();\n            let material_color = this.materialColors.find(c => c.variations.find(v => v.hex.toLowerCase() == value.toLowerCase()));\n            if (material_color) {\n                let tone = material_color.variations.find(v => v.hex.toLowerCase() == value.toLowerCase());\n                this.$('.selected-color-name').text(xabber.getString(`account_color_name_${material_color.color.replace(/-/g, \"_\")}`).replace(/-/g, \" \") + ` ${tone.weight}`);\n            } else {\n                this.$('.selected-color-name').text(xabber.getString(\"settings__section_appearance__hint_custom_color\"));\n            }\n            $input.addClass('hidden');\n            $color_hex.removeClass('hidden').text(value);\n            this.$('.selected-color-item').css('background-color', value);\n        },\n\n        selectColor: function (ev) {\n            let $target = $(ev.target),\n                hex = $target.attr('data-hex'),\n                color_name = $target.closest('.color-palette-wrapper').attr('data-color-name').replace(/-/g, \"_\"),\n                weight = $target.attr('data-weight');\n            this.$('.selected-color-wrap').removeClass('hidden');\n            this.$('.selected-color-item').css('background-color', hex);\n            this.$('.selected-color-name').text(xabber.getString(`account_color_name_${color_name}`).replace(/-/g, \" \").replace(/-/g, \" \") + ` ${weight}`);\n            this.$('.selected-color-hex').text(hex);\n            let $input = this.$('.selected-color-hex-input'),\n                $color_hex = this.$('.selected-color-hex');\n            $input.addClass('hidden');\n            $color_hex.removeClass('hidden');\n        },\n\n        setColor: function () {\n            this.close();\n            let appearance = this.model.get('appearance');\n            this.model.save('appearance', _.extend(appearance, {color: this.$('.selected-color-hex').text()}));\n\n        },\n\n        close: function () {\n            this.$el.closeModal({ complete: () => {\n                    this.$el.detach();\n                    this.data.set('visible', false);\n                    xabber.settings_view.updateColor();\n                }\n            });\n        }\n\n    });\n\n    xabber.SetBackgroundView = xabber.BasicView.extend({\n        className: 'modal main-modal settings-background background-panel',\n        template: templates.backgrounds_gallery,\n        ps_selector: '.modal-content',\n        ps_settings: {theme: 'item-list'},\n\n        events: {\n            \"click .menu-btn\": \"updateActiveMenu\",\n            \"click .library-wrap .image-item\": \"setActiveImage\",\n            'change input[type=\"file\"]': \"onFileInputChanged\",\n            'keyup input.url': \"onInputChanged\",\n            \"click .btn-add\": \"addBackground\",\n            \"click .btn-cancel\": \"close\"\n        },\n\n        _initialize: function () {\n            this.$('input.url')[0].onpaste = this.onPaste.bind(this);\n            this.ps_container.on(\"ps-scroll-y\", this.onScrollY.bind(this));\n        },\n\n        render: function (options) {\n            this.model = options.model;\n            this.type = options.type;\n            this.createLibrary();\n            this.$('.menu-btn').removeClass('active');\n            this.$('.menu-btn[data-screen-name=\"library\"]').addClass('active');\n            if (this.type == 'repeating-pattern')\n                this.$('.modal-header span').text(xabber.getString(\"settings__dialog_background__header_pattern\"));\n            else\n                this.$('.modal-header span').text(xabber.getString(\"settings__dialog_background__header_image\"));\n            this.$el.openModal({\n                ready: () => {\n                    this.$('.modal-content').css('max-height', Math.min(($(window).height() - 341), 456)).perfectScrollbar({theme: 'item-list'});\n                },\n                complete: this.close.bind(this)\n            });\n            let draggable = this.$('.upload-wrap');\n            draggable[0].ondragenter = function (ev) {\n                ev.preventDefault();\n                draggable.addClass('file-drop');\n            };\n            draggable[0].ondragover = function (ev) {\n                ev.preventDefault();\n            };\n            draggable[0].ondragleave = function (ev) {\n                if ($(ev.relatedTarget).closest('.upload-wrap').length)\n                    return;\n                ev.preventDefault();\n                draggable.removeClass('file-drop');\n            };\n            draggable[0].ondrop = (ev) => {\n                ev.preventDefault();\n                ev.stopPropagation();\n                draggable.removeClass('file-drop');\n                let files = ev.dataTransfer.files || [], file;\n                for (let i = 0; i < files.length; i++) {\n                    if (utils.isImageType(files[i].type)) {\n                        file = files[i];\n                        break;\n                    }\n                }\n                file && this.addFile(file);\n            };\n        },\n\n        onScrollY: function () {\n            if (this.$('.screen-wrap:not(.hidden)').attr('data-screen') === 'library' && this.getScrollBottom() < 5) {\n                this.loadMoreImages();\n            }\n        },\n\n        getImagesFromXML: function (callback) {\n            if (this.type == 'repeating-pattern' && this.model.patterns_library || this.type == 'images' && this.model.img_library) {\n                callback && callback();\n                return;\n            }\n            let request = {\n                type: \"GET\",\n                contentType: \"application/xml\",\n                dataType: 'xml',\n                success: (data) => {\n                    if (this.type == 'repeating-pattern') {\n                        this.onGetPatternsCallback(data);\n                    } else {\n                        this.onGetImagesCallback(data);\n                    }\n                    callback && callback();\n                }\n            };\n            if (this.type == 'repeating-pattern') {\n                request.url = './background-patterns.xml';\n            } else {\n                request.url = './background-images.xml';\n            }\n            $.ajax(request);\n        },\n\n        onGetPatternsCallback: function (data) {\n            let images = [];\n            $(data).find('image').each((idx, img) => {\n                images.push({thumbnail: $(img).text()});\n            });\n            this.model.patterns_library = images;\n        },\n\n        onGetImagesCallback: function (data) {\n            let images = [];\n            $(data).find('image').each((idx, img) => {\n                let $img = $(img),\n                    thumbnail = $img.children('thumbnail').text(),\n                    fs_img = $img.children('fullscreen-image').text();\n                images.push({thumbnail, fs_img});\n            });\n            this.model.img_library = images;\n        },\n\n        onPaste: function (ev) {\n            let url = ev.clipboardData.getData('text').trim();\n            this.$('.image-preview img')[0].onload = () => {\n                this.$('.image-preview img').removeClass('hidden');\n                this.updateActiveButton();\n            };\n            this.$('.image-preview img').addClass('hidden')[0].src = url;\n            this.updateActiveButton();\n        },\n\n        updateActiveMenu: function (ev) {\n            let screen_name = ev.target.getAttribute('data-screen-name');\n            this.$('.menu-btn').removeClass('active');\n            this.$(`.menu-btn[data-screen-name=\"${screen_name}\"]`).addClass('active');\n            this.updateScreen(screen_name);\n        },\n\n        updateScreen: function (name) {\n            this.$('.screen-wrap').addClass('hidden');\n            this.$(`.screen-wrap[data-screen=\"${name}\"]`).removeClass('hidden');\n            this.scrollToTop();\n            this.updateActiveButton();\n        },\n\n        updateActiveButton: function () {\n            let $active_screen = this.$('.screen-wrap:not(.hidden)'),\n                non_active = true;\n            if ($active_screen.attr('data-screen') == 'library') {\n                $active_screen.find('div.active').length && (non_active = false);\n            } else {\n                $active_screen.find('img:not(.hidden)').length && (non_active = false);\n            }\n            this.$('.modal-footer .btn-add').switchClass('non-active', non_active);\n        },\n\n        createLibrary: function () {\n            this.getImagesFromXML(() => {\n                this.loadMoreImages(40);\n            });\n        },\n\n        loadMoreImages: function (count) {\n            !count && (count = 20);\n            let current_count = this.$(`.image-item`).length;\n            if (this.type == 'repeating-pattern' && current_count >= this.model.patterns_library.length || this.type == 'images' && current_count >= this.model.img_library.length)\n                return;\n            for (let i = current_count; i < (current_count + count); i++) {\n                let img = $(`<div class=\"image-item\"/>`),\n                    img_sources = this.type == 'repeating-pattern' ? this.model.patterns_library[i] : this.model.img_library[i];\n                if (!img_sources)\n                    break;\n                img.css('background-image', `url(\"${img_sources.thumbnail}\")`);\n                img.attr('data-src', this.type == 'repeating-pattern' ? img_sources.thumbnail : img_sources.fs_img);\n                this.$('.library-wrap').append(img);\n            }\n        },\n\n        setActiveImage: function (ev) {\n            let $target = $(ev.target);\n            if ($target.hasClass('active'))\n                $target.removeClass('active');\n            else {\n                this.$('.library-wrap>div').removeClass('active');\n                $target.addClass('active');\n            }\n            this.updateActiveButton();\n        },\n\n        onFileInputChanged: function (ev) {\n            let target = ev.target, file;\n            for (let i = 0; i < target.files.length; i++) {\n                if (utils.isImageType(target.files[i].type)) {\n                    file = target.files[i];\n                    break;\n                }\n            }\n            file && this.addFile(file);\n            $(target).val('');\n        },\n\n        addFile: function (file) {\n            let reader = new FileReader();\n            reader.onload = (e) => {\n                let image_prev = new Image(),\n                    src = e.target.result;\n                image_prev.src = src;\n                this.$('.screen-wrap[data-screen=\"upload\"] img').detach();\n                this.$('.screen-wrap[data-screen=\"upload\"]').prepend(image_prev);\n                this.updateActiveButton();\n            };\n            reader.readAsDataURL(file);\n        },\n\n        onInputChanged: function (ev) {\n            if (ev.target.value.trim() == this.$('.image-preview img')[0].src)\n                return;\n            if (ev.target.value.trim() && ev.keyCode !== constants.KEY_CTRL && ev.keyCode !== constants.KEY_SHIFT && ev.keyCode !== constants.KEY_ARROW_UP && ev.keyCode !== constants.KEY_ARROW_DOWN && ev.keyCode !== constants.KEY_ARROW_RIGHT && ev.keyCode !== constants.KEY_ARROW_LEFT) {\n                let url = ev.target.value.trim();\n                this.$('.image-preview img')[0].onload = () => {\n                    this.$('.image-preview img').removeClass('hidden');\n                    this.updateActiveButton();\n                };\n                this.$('.image-preview img').addClass('hidden')[0].src = url;\n                this.updateActiveButton();\n            } else {\n                this.$('.image-preview img').addClass('hidden')[0].src = \"\";\n                this.updateActiveButton();\n            }\n        },\n\n        addBackground: function () {\n            if (this.$('.btn-add').hasClass('non-active'))\n                return;\n            let image, dfd = new $.Deferred(), $active_screen = this.$('.screen-wrap:not(.hidden)');\n            dfd.done((img) => {\n                if (img) {\n                    this.model.save('background', {type: this.type, image: img});\n                }\n                else {\n                    this.model.save('background', {type: 'default'});\n                }\n                xabber.body.updateBackground();\n                this.close();\n            });\n            if ($active_screen.attr('data-screen') == 'library') {\n                image = $active_screen.find('div.active').attr('data-src');\n                dfd.resolve(image);\n            } else {\n                image = $active_screen.find('img:not(.hidden)')[0].src;\n                if ($active_screen.attr('data-screen') == 'web-address') {\n                    let request = {\n                        type: \"GET\",\n                        url: image,\n                        headers: {\"Access-Control-Allow-Origin\": \"*\"},\n                        dataType: 'blob',\n                        success: function (data) {\n                            image = data;\n                            dfd.resolve(image);\n                        },\n                        error: () => {\n                            dfd.resolve(image);\n                        }\n                    };\n                    $.ajax(request);\n                } else\n                    dfd.resolve(image);\n            }\n        },\n\n        close: function () {\n            xabber.settings_view.updateBackgroundSetting();\n            this.$el.closeModal({ complete: () => {\n                    this.$el.detach();\n                    this.data.set('visible', false);\n                }\n            });\n        }\n    });\n\n    xabber.AboutView = xabber.BasicView.extend({\n        className: 'settings-panel about-panel',\n        template: templates.about,\n        ps_selector: '.panel-content',\n\n        _initialize: function () {\n            this.$('.xabber-info-wrap .version').text(this.model.get('version_number'));\n        },\n\n        render: function () {\n        }\n    });\n\n    xabber.DragManager = Backbone.Model.extend({\n        initialize: function () {\n            window.document.onmousedown = this.onMouseDown.bind(this);\n            window.document.onmousemove = this.onMouseMove.bind(this);\n            window.document.onmouseup = this.onMouseUp.bind(this);\n        },\n\n        onMouseDown: function (ev) {\n            if (ev.which != 1) {\n                return;\n            }\n            let draghandle_elem = ev.target.closest('.drag-handle'),\n                elem = draghandle_elem && draghandle_elem.closest('.draggable');\n            if (!elem) {\n                return this.resetElem();\n            }\n            this.set({\n                elem: elem,\n                draghandle_elem: draghandle_elem,\n                downX: ev.pageX,\n                downY: ev.pageY\n            });\n        },\n\n        onMouseMove: function (ev) {\n            if (!this.get('elem')) {\n                return;\n            }\n            let avatar = this.get('avatar');\n            if (!avatar) {\n                if (    Math.abs(ev.pageX - this.get('downX')) < 3 &&\n                        Math.abs(ev.pageY - this.get('downY')) < 3) {\n                    return;\n                }\n                avatar = this.createAvatar(ev);\n                if (!avatar) {\n                    return this.resetElem();\n                }\n                this.set('avatar', avatar);\n                let coords = this.getCoords(avatar);\n                this.set({\n                    shiftX: this.get('downX') - coords.left,\n                    shiftY: this.get('downY') - coords.top\n                });\n                this.startDrag(ev);\n            }\n            avatar.style.left = ev.pageX - this.get('shiftX') + 'px';\n            avatar.style.top = ev.pageY - this.get('shiftY') + 'px';\n            let drop_elem = this.findDropElem(ev);\n            this.updateDropElem(drop_elem);\n            return;\n        },\n\n        onMouseUp: function (ev) {\n            let selector = document.querySelector('.recording');\n            if (selector) {\n                $(selector).removeClass('recording');\n                return;\n            }\n            this.get('avatar') && this.finishDrag(ev);\n            this.resetElem();\n        },\n\n        resetElem: function () {\n            this.set({elem: null, draghandle_elem: null, avatar: null});\n        },\n\n        getCoords: function (elem) {\n            let box = elem.getBoundingClientRect();\n            return {\n                top: box.top + window.pageYOffset,\n                left: box.left + window.pageXOffset\n            };\n        },\n\n        createAvatar: function () {\n            let avatar = this.get('elem'),\n                $avatar = $(avatar),\n                draghandle_elem = this.get('draghandle_elem');\n            let old = {\n                parent: avatar.parentNode,\n                nextSibling: avatar.nextSibling,\n                position: avatar.position || '',\n                left: avatar.left || '',\n                top: avatar.top || '',\n                zIndex: avatar.zIndex || '',\n                avatar_cursor: avatar.style.cursor || '',\n                draghandle_elem_cursor: draghandle_elem.style.cursor || ''\n            };\n\n            $avatar.addClass('dragging');\n            avatar.style.cursor = '-webkit-grabbing';\n            draghandle_elem.style.cursor = '-webkit-grabbing';\n\n            avatar.rollback = function () {\n                old.parent.insertBefore(avatar, old.nextSibling);\n                $avatar.removeClass('dragging');\n                avatar.style.position = old.position;\n                avatar.style.left = old.left;\n                avatar.style.top = old.top;\n                avatar.style.zIndex = old.zIndex;\n                avatar.style.cursor = old.avatar_cursor;\n                draghandle_elem.style.cursor = old.draghandle_elem_cursor;\n            };\n\n            return avatar;\n        },\n\n        startDrag: function (ev) {\n            let avatar = this.get('avatar');\n            window.document.body.appendChild(avatar);\n            avatar.style.zIndex = 9999;\n            avatar.style.position = 'absolute';\n        },\n\n        finishDrag: function (ev) {\n            let elem = this.get('elem'),\n                avatar = this.get('avatar'),\n                drop_elem = this.findDropElem(ev);\n            avatar.rollback();\n            this.updateDropElem(null);\n            if (elem && drop_elem) {\n                $(elem).trigger('drag_to', drop_elem);\n                $(drop_elem).trigger('drag_from', elem);\n            }\n        },\n\n        findDropElem: function (ev) {\n            let avatar = this.get('avatar');\n            avatar.hidden = true;\n            let elem = window.document.elementFromPoint(ev.clientX, ev.clientY);\n            avatar.hidden = false;\n            if (!elem) {\n                return null;\n            }\n            return elem.closest('.droppable');\n        },\n\n        updateDropElem: function (drop_elem) {\n            let old_drop_elem = this.get('drop_elem');\n            this.set('drop_elem', drop_elem);\n            old_drop_elem && $(old_drop_elem).removeClass('drag-on');\n            drop_elem && $(drop_elem).addClass('drag-on');\n        }\n    });\n\n    _.extend(xabber, {\n        modal_settings: {\n            open: {\n                in_duration: 50,\n                out_duration: 100,\n                opacity: 0.4\n            },\n            close: {out_duration: 100}\n        },\n\n        ps_settings: {\n            minScrollbarLength: 40,\n            suppressScrollX: true,\n            wheelSpeed: 0.5\n        },\n\n        startBlinkingFavicon: function () {\n            if (this._blink_interval)\n                return;\n            this._blink_interval = setInterval(() => {\n                let $icon = $(\"link[rel='shortcut icon']\"), url;\n                if ($icon.attr('href').indexOf(this.cache.favicon) > -1 || $icon.attr('href').indexOf(constants.FAVICON_DEFAULT) > -1)\n                    url = this.cache.favicon_message || constants.FAVICON_MESSAGE;\n                else\n                    url = this.cache.favicon || constants.FAVICON_DEFAULT;\n                $icon.attr('href', url);\n            }, 1000);\n        },\n\n        stopBlinkingFavicon: function () {\n            if (this._blink_interval) {\n                clearInterval(this._blink_interval);\n                this._blink_interval = null;\n                let url = this.cache.favicon || constants.FAVICON_DEFAULT;\n                $(\"link[rel='shortcut icon']\").attr(\"href\", url);\n            }\n        },\n\n        onChangedAllMessageCounter: function () {\n            if (this.get('all_msg_counter')) {\n                this.startBlinkingFavicon();\n                window.document.title = xabber.getString(\"notofications__desktop_notification__text\", [this.get('all_msg_counter')]);\n            } else {\n                this.stopBlinkingFavicon();\n                window.document.title = constants.CLIENT_NAME;\n            }\n        },\n\n        setAllMessageCounter: function () {\n            let count_msg = 0;\n            xabber.accounts.each((account) => {\n                account.chats.each((chat) => {\n                    if (chat.contact && !chat.isMuted())\n                        count_msg += chat.get('unread') + chat.get('const_unread');\n                });\n            });\n            return count_msg;\n        },\n\n        recountAllMessageCounter: function () {\n            this.set('all_msg_counter', this.setAllMessageCounter());\n        },\n\n        resetMessageCounter: function () {\n            this.set('all_msg_counter', 0);\n        },\n\n        onChangedFocusState: function () {\n            if (this.get('focused')) {\n                this.resetMessageCounter();\n            }\n        },\n\n        openWindow: function (url) {\n            utils.openWindow(url, () => {\n                utils.dialogs.error(xabber.getString(\"notifications__error__text_could_not_open_new_tab\"));\n            });\n        },\n\n        popupNotification: function (params) {\n            let notification = new window.Notification(params.title, {\n                body: params.text,\n                icon: params.icon\n            });\n            setTimeout(notification.close.bind(notification), 5000);\n            return notification;\n        },\n\n        playAudio: function (name, loop, volume) {\n            if (!((volume || volume === 0) && !isNaN(volume)))\n                volume = 1;\n            loop = loop || false;\n            let filename = constants.SOUNDS[name];\n            if (filename) {\n                let audio = new window.Audio(filename);\n                audio.loop = loop;\n                audio.volume = volume;\n                audio.play();\n                return audio;\n            }\n            return;\n        },\n\n        stopAudio: function (audio) {\n            if (audio) {\n                audio.pause();\n                audio.remove();\n            }\n        },\n\n        registerDOMEvents: function () {\n            let self = this;\n\n            $(window).on(\"blur focus\", function (ev) {\n                self.set('focused', ev.type === 'focus');\n            });\n\n            $(window).on(\"resize\", function (ev) {\n                self.set({\n                    width: window.innerWidth,\n                    height: window.innerHeight\n                });\n                self.trigger('update_layout', {size_changed: true});\n            });\n\n            window.document.body.ondragover = (ev) => {\n                ev.preventDefault();\n            };\n\n            window.document.body.ondrop = (ev) => {\n                ev.preventDefault();\n            };\n        }\n    });\n\n    xabber.once(\"start\", function () {\n        this.set('all_msg_counter', 0);\n        this.on(\"change:all_msg_counter\", this.onChangedAllMessageCounter, this);\n        this.on(\"change:focused\", this.onChangedFocusState, this);\n        this.set({\n            focused: window.document.hasFocus(),\n            width: window.innerWidth,\n            height: window.innerHeight\n        });\n        this.registerDOMEvents();\n        Materialize.modalSettings = this.modal_settings;\n\n        this.drag_manager = new this.DragManager();\n\n        this.body = new this.Body({model: this});\n\n        this.login_page = this.body.addChild('login', this.NodeView, {\n            classlist: 'login-page-wrap', el: $(document).find('.login-container')[0]});\n\n        this.toolbar_view = this.body.addChild('toolbar', this.ToolbarView);\n        this.settings.appearance.color && this.toolbar_view.updateColor(this.settings.appearance.color);\n\n        this.blur_overlay = this.body.addChild('blur_overlay', this.NodeView, {\n            classlist: 'blur-overlay'});\n\n        this.main_panel = this.body.addChild('main', this.NodeView, {\n            classlist: 'main-wrap'});\n        this.body.updateBlur(this.settings.appearance.blur);\n        this.left_panel = this.main_panel.addChild(\n            'left', this.NodeView, {classlist: 'panel-wrap left-panel-wrap'});\n        this.right_panel = this.main_panel.addChild(\n            'right', this.NodeView, {classlist: 'panel-wrap right-panel-wrap'});\n        this.right_contact_panel = this.main_panel.addChild(\n            'right_contact', this.NodeView, {classlist: 'panel-wrap right-contact-panel-wrap'});\n        this.wide_panel = this.main_panel.addChild(\n            'wide', this.NodeView, {classlist: 'panel-wrap wide-panel-wrap'});\n        this.placeholders_wrap = this.main_panel.addChild('placeholders', this.NodeView, {classlist: 'wide-placeholders-wrap'});\n        this.settings_view = this.wide_panel.addChild(\n            'settings', this.SettingsView, {model: this._settings});\n    }, xabber);\n\n    return xabber;\n  };\n}).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack://xabber.web/./src/views.js?")},"./src/xabber.js":(module,exports,__webpack_require__)=>{eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    __webpack_require__(/*! xabber-core */ "./src/core.js"),\n    __webpack_require__(/*! xabber-views */ "./src/views.js"),\n    __webpack_require__(/*! xabber-api-service */ "./src/api-service.js"),\n    __webpack_require__(/*! xabber-strophe */ "./src/strophe.js"),\n    __webpack_require__(/*! xabber-vcard */ "./src/vcard.js"),\n    __webpack_require__(/*! xabber-accounts */ "./src/accounts.js"),\n    __webpack_require__(/*! xabber-discovery */ "./src/discovery.js"),\n    __webpack_require__(/*! xabber-contacts */ "./src/contacts.js"),\n    __webpack_require__(/*! xabber-chats */ "./src/chats.js"),\n    __webpack_require__(/*! xabber-searching */ "./src/searching.js"),\n    __webpack_require__(/*! xabber-mentions */ "./src/mentions.js"),\n    __webpack_require__(/*! xabber-ui */ "./src/ui.js"),\n    __webpack_require__(/*! xabber-omemo */ "./src/omemo.js")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function (xabber, views, api_service, strophe, vcard,\n             accounts, discovery, contacts, chats, searching, mentions, ui, omemo) {\n    xabber.extendWith(views, api_service, strophe, vcard,\n        accounts, discovery, contacts, chats, searching, mentions, ui, omemo)\n    __webpack_require__.g.xabber = xabber;\n    return xabber;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack://xabber.web/./src/xabber.js?')},"./templates sync recursive ./node_modules/raw-loader/dist/cjs.js! ^\\.\\/.*\\.html$":(module,__unused_webpack_exports,__webpack_require__)=>{eval('var map = {\n\t"./accounts/add_account.html": "./node_modules/raw-loader/dist/cjs.js!./templates/accounts/add_account.html",\n\t"./accounts/audio_file_waveform.html": "./node_modules/raw-loader/dist/cjs.js!./templates/accounts/audio_file_waveform.html",\n\t"./accounts/avatars_gallery.html": "./node_modules/raw-loader/dist/cjs.js!./templates/accounts/avatars_gallery.html",\n\t"./accounts/change_password.html": "./node_modules/raw-loader/dist/cjs.js!./templates/accounts/change_password.html",\n\t"./accounts/change_status.html": "./node_modules/raw-loader/dist/cjs.js!./templates/accounts/change_status.html",\n\t"./accounts/current_token_item.html": "./node_modules/raw-loader/dist/cjs.js!./templates/accounts/current_token_item.html",\n\t"./accounts/emoji_panel.html": "./node_modules/raw-loader/dist/cjs.js!./templates/accounts/emoji_panel.html",\n\t"./accounts/emoji_picker.html": "./node_modules/raw-loader/dist/cjs.js!./templates/accounts/emoji_picker.html",\n\t"./accounts/emoji_picker_tabs.html": "./node_modules/raw-loader/dist/cjs.js!./templates/accounts/emoji_picker_tabs.html",\n\t"./accounts/existing_groupchat_item.html": "./node_modules/raw-loader/dist/cjs.js!./templates/accounts/existing_groupchat_item.html",\n\t"./accounts/global_settings_item.html": "./node_modules/raw-loader/dist/cjs.js!./templates/accounts/global_settings_item.html",\n\t"./accounts/media_gallery_account.html": "./node_modules/raw-loader/dist/cjs.js!./templates/accounts/media_gallery_account.html",\n\t"./accounts/media_gallery_account_file.html": "./node_modules/raw-loader/dist/cjs.js!./templates/accounts/media_gallery_account_file.html",\n\t"./accounts/resource.html": "./node_modules/raw-loader/dist/cjs.js!./templates/accounts/resource.html",\n\t"./accounts/resource_right.html": "./node_modules/raw-loader/dist/cjs.js!./templates/accounts/resource_right.html",\n\t"./accounts/settings_left.html": "./node_modules/raw-loader/dist/cjs.js!./templates/accounts/settings_left.html",\n\t"./accounts/settings_right.html": "./node_modules/raw-loader/dist/cjs.js!./templates/accounts/settings_right.html",\n\t"./accounts/token_item.html": "./node_modules/raw-loader/dist/cjs.js!./templates/accounts/token_item.html",\n\t"./accounts/toolbar_item.html": "./node_modules/raw-loader/dist/cjs.js!./templates/accounts/toolbar_item.html",\n\t"./accounts/webcam_panel.html": "./node_modules/raw-loader/dist/cjs.js!./templates/accounts/webcam_panel.html",\n\t"./accounts/xmpp_login.html": "./node_modules/raw-loader/dist/cjs.js!./templates/accounts/xmpp_login.html",\n\t"./api_service/add_xabber_account.html": "./node_modules/raw-loader/dist/cjs.js!./templates/api_service/add_xabber_account.html",\n\t"./api_service/linked_email_item.html": "./node_modules/raw-loader/dist/cjs.js!./templates/api_service/linked_email_item.html",\n\t"./api_service/sync_settings.html": "./node_modules/raw-loader/dist/cjs.js!./templates/api_service/sync_settings.html",\n\t"./api_service/sync_settings_account_item.html": "./node_modules/raw-loader/dist/cjs.js!./templates/api_service/sync_settings_account_item.html",\n\t"./api_service/xabber_account.html": "./node_modules/raw-loader/dist/cjs.js!./templates/api_service/xabber_account.html",\n\t"./api_service/xabber_login.html": "./node_modules/raw-loader/dist/cjs.js!./templates/api_service/xabber_login.html",\n\t"./api_service/xabber_login_by_email.html": "./node_modules/raw-loader/dist/cjs.js!./templates/api_service/xabber_login_by_email.html",\n\t"./base/about.html": "./node_modules/raw-loader/dist/cjs.js!./templates/base/about.html",\n\t"./base/backgrounds_gallery.html": "./node_modules/raw-loader/dist/cjs.js!./templates/base/backgrounds_gallery.html",\n\t"./base/color_picker.html": "./node_modules/raw-loader/dist/cjs.js!./templates/base/color_picker.html",\n\t"./base/color_scheme.html": "./node_modules/raw-loader/dist/cjs.js!./templates/base/color_scheme.html",\n\t"./base/dialog.html": "./node_modules/raw-loader/dist/cjs.js!./templates/base/dialog.html",\n\t"./base/fingerprint_item.html": "./node_modules/raw-loader/dist/cjs.js!./templates/base/fingerprint_item.html",\n\t"./base/fingerprints.html": "./node_modules/raw-loader/dist/cjs.js!./templates/base/fingerprints.html",\n\t"./base/input_widget.html": "./node_modules/raw-loader/dist/cjs.js!./templates/base/input_widget.html",\n\t"./base/jingle_message_calling.html": "./node_modules/raw-loader/dist/cjs.js!./templates/base/jingle_message_calling.html",\n\t"./base/omemo_enable.html": "./node_modules/raw-loader/dist/cjs.js!./templates/base/omemo_enable.html",\n\t"./base/plyr_player_popup.html": "./node_modules/raw-loader/dist/cjs.js!./templates/base/plyr_player_popup.html",\n\t"./base/settings.html": "./node_modules/raw-loader/dist/cjs.js!./templates/base/settings.html",\n\t"./base/toolbar.html": "./node_modules/raw-loader/dist/cjs.js!./templates/base/toolbar.html",\n\t"./chats/add_chat_account_item.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/add_chat_account_item.html",\n\t"./chats/chat_bottom.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/chat_bottom.html",\n\t"./chats/chat_content.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/chat_content.html",\n\t"./chats/chat_content_contact.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/chat_content_contact.html",\n\t"./chats/chat_head.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/chat_head.html",\n\t"./chats/chat_item.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/chat_item.html",\n\t"./chats/chat_placeholder.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/chat_placeholder.html",\n\t"./chats/chats_panel.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/chats_panel.html",\n\t"./chats/checkbox.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/checkbox.html",\n\t"./chats/content_encryption_warning.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/content_encryption_warning.html",\n\t"./chats/encryption_warning.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/encryption_warning.html",\n\t"./chats/forward_panel.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/forward_panel.html",\n\t"./chats/group_chats/add_group_chat.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/group_chats/add_group_chat.html",\n\t"./chats/group_chats/invitation_panel_view.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/group_chats/invitation_panel_view.html",\n\t"./chats/group_chats/mention_item.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/group_chats/mention_item.html",\n\t"./chats/group_chats/pinned_message_panel.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/group_chats/pinned_message_panel.html",\n\t"./chats/location_popup.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/location_popup.html",\n\t"./chats/message_item.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/message_item.html",\n\t"./chats/messages/attached_file.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/attached_file.html",\n\t"./chats/messages/audio_file.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/audio_file.html",\n\t"./chats/messages/audio_file_waveform.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/audio_file_waveform.html",\n\t"./chats/messages/auth_request.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/auth_request.html",\n\t"./chats/messages/file.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/file.html",\n\t"./chats/messages/file_loading.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/file_loading.html",\n\t"./chats/messages/file_upload.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/file_upload.html",\n\t"./chats/messages/forwarded.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/forwarded.html",\n\t"./chats/messages/group_request.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/group_request.html",\n\t"./chats/messages/hidden-template-for-2.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/hidden-template-for-2.html",\n\t"./chats/messages/hidden-template-for-3.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/hidden-template-for-3.html",\n\t"./chats/messages/hidden-template-for-4.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/hidden-template-for-4.html",\n\t"./chats/messages/hidden-template-for-5.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/hidden-template-for-5.html",\n\t"./chats/messages/hidden-template-for-6.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/hidden-template-for-6.html",\n\t"./chats/messages/images_details.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/images_details.html",\n\t"./chats/messages/link_reference.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/link_reference.html",\n\t"./chats/messages/link_reference_chat.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/link_reference_chat.html",\n\t"./chats/messages/loading_circle.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/loading_circle.html",\n\t"./chats/messages/location.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/location.html",\n\t"./chats/messages/main.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/main.html",\n\t"./chats/messages/saved_main.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/saved_main.html",\n\t"./chats/messages/searched.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/searched.html",\n\t"./chats/messages/system.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/system.html",\n\t"./chats/messages/template-for-2.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/template-for-2.html",\n\t"./chats/messages/template-for-3.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/template-for-3.html",\n\t"./chats/messages/template-for-4.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/template-for-4.html",\n\t"./chats/messages/template-for-5.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/template-for-5.html",\n\t"./chats/messages/template-for-6.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/template-for-6.html",\n\t"./chats/messages/video.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/video.html",\n\t"./chats/messages/voice_message.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/messages/voice_message.html",\n\t"./chats/saved_chat_head.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/saved_chat_head.html",\n\t"./chats/send_media.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/send_media.html",\n\t"./chats/subscription_buttons.html": "./node_modules/raw-loader/dist/cjs.js!./templates/chats/subscription_buttons.html",\n\t"./contacts/account_roster_left.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/account_roster_left.html",\n\t"./contacts/account_roster_right.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/account_roster_right.html",\n\t"./contacts/add_contact.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/add_contact.html",\n\t"./contacts/add_contact_account_item.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/add_contact_account_item.html",\n\t"./contacts/audio_file_waveform.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/audio_file_waveform.html",\n\t"./contacts/contact_blocked_item.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/contact_blocked_item.html",\n\t"./contacts/contact_details.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/contact_details.html",\n\t"./contacts/contact_details_right.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/contact_details_right.html",\n\t"./contacts/contact_left_item.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/contact_left_item.html",\n\t"./contacts/contact_placeholder.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/contact_placeholder.html",\n\t"./contacts/contact_right_item.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/contact_right_item.html",\n\t"./contacts/edit_contact.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/edit_contact.html",\n\t"./contacts/edit_group.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/edit_group.html",\n\t"./contacts/group_chats/add_blocked_participant_form.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/add_blocked_participant_form.html",\n\t"./contacts/group_chats/badge_edit_view.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/badge_edit_view.html",\n\t"./contacts/group_chats/default_restrictions.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/default_restrictions.html",\n\t"./contacts/group_chats/default_restrictions_right.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/default_restrictions_right.html",\n\t"./contacts/group_chats/description_input_widget.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/description_input_widget.html",\n\t"./contacts/group_chats/file_item.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/file_item.html",\n\t"./contacts/group_chats/group_chat_details.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/group_chat_details.html",\n\t"./contacts/group_chats/group_chat_details_right.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/group_chat_details_right.html",\n\t"./contacts/group_chats/group_chat_properties.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/group_chat_properties.html",\n\t"./contacts/group_chats/group_chat_properties_edit.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/group_chat_properties_edit.html",\n\t"./contacts/group_chats/group_chat_properties_right.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/group_chat_properties_right.html",\n\t"./contacts/group_chats/group_member_item.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/group_member_item.html",\n\t"./contacts/group_chats/group_member_item_right.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/group_member_item_right.html",\n\t"./contacts/group_chats/group_name_input_widget.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/group_name_input_widget.html",\n\t"./contacts/group_chats/group_status.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/group_status.html",\n\t"./contacts/group_chats/group_status_right.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/group_status_right.html",\n\t"./contacts/group_chats/invitation.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/invitation.html",\n\t"./contacts/group_chats/invited_member_item.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/invited_member_item.html",\n\t"./contacts/group_chats/participant_badge_input_widget.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/participant_badge_input_widget.html",\n\t"./contacts/group_chats/participant_details_item.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/participant_details_item.html",\n\t"./contacts/group_chats/participant_details_item_right.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/participant_details_item_right.html",\n\t"./contacts/group_chats/participant_details_right.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/participant_details_right.html",\n\t"./contacts/group_chats/participant_rights.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/participant_rights.html",\n\t"./contacts/group_chats/participants.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/participants.html",\n\t"./contacts/group_chats/participants_right_panel.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/participants_right_panel.html",\n\t"./contacts/group_chats/pinned_message.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/pinned_message.html",\n\t"./contacts/group_chats/private_participant_details.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/private_participant_details.html",\n\t"./contacts/group_chats/private_participant_details_item_right.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/private_participant_details_item_right.html",\n\t"./contacts/group_chats/restriction_item.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/restriction_item.html",\n\t"./contacts/group_chats/right_expire_variants.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/right_expire_variants.html",\n\t"./contacts/group_chats/set_status.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/set_status.html",\n\t"./contacts/group_chats/status_item.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_chats/status_item.html",\n\t"./contacts/group_left.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_left.html",\n\t"./contacts/group_right.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_right.html",\n\t"./contacts/group_settings.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/group_settings.html",\n\t"./contacts/groups.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/groups.html",\n\t"./contacts/groups_checkbox_list.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/groups_checkbox_list.html",\n\t"./contacts/groups_checkbox_list_contact.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/groups_checkbox_list_contact.html",\n\t"./contacts/groups_list.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/groups_list.html",\n\t"./contacts/groups_new_group.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/groups_new_group.html",\n\t"./contacts/media_item.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/media_item.html",\n\t"./contacts/media_items_empty.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/media_items_empty.html",\n\t"./contacts/preloader.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/preloader.html",\n\t"./contacts/roster_left.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/roster_left.html",\n\t"./contacts/roster_right.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/roster_right.html",\n\t"./contacts/roster_settings.html": "./node_modules/raw-loader/dist/cjs.js!./templates/contacts/roster_settings.html",\n\t"./mentions/mention_item.html": "./node_modules/raw-loader/dist/cjs.js!./templates/mentions/mention_item.html",\n\t"./mentions/mentions_panel.html": "./node_modules/raw-loader/dist/cjs.js!./templates/mentions/mentions_panel.html",\n\t"./mentions/mentions_placeholder.html": "./node_modules/raw-loader/dist/cjs.js!./templates/mentions/mentions_placeholder.html",\n\t"./searching/existing_groupchat_details_view.html": "./node_modules/raw-loader/dist/cjs.js!./templates/searching/existing_groupchat_details_view.html",\n\t"./searching/existing_groupchat_item.html": "./node_modules/raw-loader/dist/cjs.js!./templates/searching/existing_groupchat_item.html",\n\t"./searching/searching_account_item.html": "./node_modules/raw-loader/dist/cjs.js!./templates/searching/searching_account_item.html",\n\t"./searching/searching_wide.html": "./node_modules/raw-loader/dist/cjs.js!./templates/searching/searching_wide.html",\n\t"./svg/account-outline.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/account-outline.html",\n\t"./svg/address-outline.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/address-outline.html",\n\t"./svg/bell-off.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/bell-off.html",\n\t"./svg/bell-sleep.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/bell-sleep.html",\n\t"./svg/bell.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/bell.html",\n\t"./svg/birthday-outline.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/birthday-outline.html",\n\t"./svg/blocked-add.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/blocked-add.html",\n\t"./svg/blocked.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/blocked.html",\n\t"./svg/bot-variant.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/bot-variant.html",\n\t"./svg/bot.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/bot.html",\n\t"./svg/call-outline.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/call-outline.html",\n\t"./svg/call.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/call.html",\n\t"./svg/camera-retake.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/camera-retake.html",\n\t"./svg/cancel.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/cancel.html",\n\t"./svg/channel.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/channel.html",\n\t"./svg/chevron-down.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/chevron-down.html",\n\t"./svg/chevron-left-variant.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/chevron-left-variant.html",\n\t"./svg/chevron-right-variant.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/chevron-right-variant.html",\n\t"./svg/circles.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/circles.html",\n\t"./svg/clock-outline.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/clock-outline.html",\n\t"./svg/close.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/close.html",\n\t"./svg/crosshairs-gps.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/crosshairs-gps.html",\n\t"./svg/crosshairs-question.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/crosshairs-question.html",\n\t"./svg/crosshairs.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/crosshairs.html",\n\t"./svg/description-outline.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/description-outline.html",\n\t"./svg/devices.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/devices.html",\n\t"./svg/edit-outline.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/edit-outline.html",\n\t"./svg/edit.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/edit.html",\n\t"./svg/email-outline.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/email-outline.html",\n\t"./svg/file-audio.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/file-audio.html",\n\t"./svg/file-document.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/file-document.html",\n\t"./svg/file-pdf.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/file-pdf.html",\n\t"./svg/file-presentation.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/file-presentation.html",\n\t"./svg/file-video.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/file-video.html",\n\t"./svg/file-zip.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/file-zip.html",\n\t"./svg/file.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/file.html",\n\t"./svg/fullname-outline.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/fullname-outline.html",\n\t"./svg/fullname.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/fullname.html",\n\t"./svg/group-incognito.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/group-incognito.html",\n\t"./svg/group-invite.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/group-invite.html",\n\t"./svg/group-private.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/group-private.html",\n\t"./svg/group-public.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/group-public.html",\n\t"./svg/history.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/history.html",\n\t"./svg/ic-at.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/ic-at.html",\n\t"./svg/ic-jabber.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/ic-jabber.html",\n\t"./svg/ic-searching.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/ic-searching.html",\n\t"./svg/id-outline.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/id-outline.html",\n\t"./svg/image.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/image.html",\n\t"./svg/index.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/index.html",\n\t"./svg/information-outline.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/information-outline.html",\n\t"./svg/invite-outline.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/invite-outline.html",\n\t"./svg/job-outline.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/job-outline.html",\n\t"./svg/link.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/link.html",\n\t"./svg/map-marker-outline.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/map-marker-outline.html",\n\t"./svg/map-marker.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/map-marker.html",\n\t"./svg/membership-outline.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/membership-outline.html",\n\t"./svg/message-bookmark-outline.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/message-bookmark-outline.html",\n\t"./svg/message-group.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/message-group.html",\n\t"./svg/minus.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/minus.html",\n\t"./svg/mobile.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/mobile.html",\n\t"./svg/palette.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/palette.html",\n\t"./svg/pause.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/pause.html",\n\t"./svg/picture-in-picture-bottom-right.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/picture-in-picture-bottom-right.html",\n\t"./svg/picture-in-picture-minimize.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/picture-in-picture-minimize.html",\n\t"./svg/picture-in-picture-top-right.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/picture-in-picture-top-right.html",\n\t"./svg/pinned-circle-small.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/pinned-circle-small.html",\n\t"./svg/pinned.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/pinned.html",\n\t"./svg/play.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/play.html",\n\t"./svg/player-float.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/player-float.html",\n\t"./svg/player-full.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/player-full.html",\n\t"./svg/player-mini-variant.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/player-mini-variant.html",\n\t"./svg/player-mini.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/player-mini.html",\n\t"./svg/plus.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/plus.html",\n\t"./svg/plyr.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/plyr.html",\n\t"./svg/qrcode.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/qrcode.html",\n\t"./svg/restrictions-outline.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/restrictions-outline.html",\n\t"./svg/rss-variant.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/rss-variant.html",\n\t"./svg/rss.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/rss.html",\n\t"./svg/saved-messages.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/saved-messages.html",\n\t"./svg/search.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/search.html",\n\t"./svg/server.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/server.html",\n\t"./svg/status-outline.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/status-outline.html",\n\t"./svg/subscription-from.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/subscription-from.html",\n\t"./svg/subscription-to.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/subscription-to.html",\n\t"./svg/task.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/task.html",\n\t"./svg/translate.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/translate.html",\n\t"./svg/video.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/video.html",\n\t"./svg/volume-high.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/volume-high.html",\n\t"./svg/volume-off-variant.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/volume-off-variant.html",\n\t"./svg/volume-off.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/volume-off.html",\n\t"./svg/xabber-offline.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/xabber-offline.html",\n\t"./svg/xabber-online.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/xabber-online.html",\n\t"./svg/xmpp.html": "./node_modules/raw-loader/dist/cjs.js!./templates/svg/xmpp.html",\n\t"./vcard/vcard.html": "./node_modules/raw-loader/dist/cjs.js!./templates/vcard/vcard.html",\n\t"./vcard/vcard_edit.html": "./node_modules/raw-loader/dist/cjs.js!./templates/vcard/vcard_edit.html",\n\t"./vcard/vcard_right.html": "./node_modules/raw-loader/dist/cjs.js!./templates/vcard/vcard_right.html"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error("Cannot find module \'" + req + "\'");\n\t\te.code = \'MODULE_NOT_FOUND\';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = "./templates sync recursive ./node_modules/raw-loader/dist/cjs.js! ^\\\\.\\\\/.*\\\\.html$";\n\n//# sourceURL=webpack://xabber.web/_^\\.\\/.*\\.html$?./templates/_sync_./node_modules/raw-loader/dist/cjs.js')},"./templates sync recursive ./node_modules/raw-loader/dist/cjs.js! ^\\.\\/.*\\.txt$":(module,__unused_webpack_exports,__webpack_require__)=>{eval('var map = {\n\t"./accounts/emojis.txt": "./node_modules/raw-loader/dist/cjs.js!./templates/accounts/emojis.txt"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error("Cannot find module \'" + req + "\'");\n\t\te.code = \'MODULE_NOT_FOUND\';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = "./templates sync recursive ./node_modules/raw-loader/dist/cjs.js! ^\\\\.\\\\/.*\\\\.txt$";\n\n//# sourceURL=webpack://xabber.web/_^\\.\\/.*\\.txt$?./templates/_sync_./node_modules/raw-loader/dist/cjs.js')},"./translations/translation_progress.js":(module,exports,__webpack_require__)=>{eval('var __WEBPACK_AMD_DEFINE_RESULT__;let client_translation_progress = {"en":100,"ar":27,"az":2,"be":13,"bg":65,"bs":0,"ca":25,"cs":99,"cy":0,"da":0,"de":49,"el":29,"es-ES":34,"es-latin":7,"et":0,"fa":4,"fi":9,"fil":14,"fr":35,"ga-IE":0,"he":21,"hi":0,"hr":0,"hu":14,"hy-AM":8,"id":67,"is":0,"it":72,"ja":20,"ka":0,"kmr":0,"ko":1,"ku":2,"ky":5,"la-LA":0,"lb":0,"lt":4,"me":0,"mk":0,"mn":0,"mr":0,"ms":6,"nb":21,"ne-NP":0,"nl":20,"no":0,"oc":13,"pa-IN":0,"pl":66,"pt-BR":71,"pt-PT":15,"qya-AA":0,"ro":16,"ru":69,"sat":1,"sco":0,"si-LK":37,"sk":20,"sl":28,"sq":3,"sr":13,"sr-Cyrl-ME":0,"sv-SE":38,"sw":1,"ta":1,"te":0,"tg":0,"tk":0,"tlh-AA":0,"tr":66,"uk":27,"uz":0,"vi":13,"yo":0,"zh-CN":38,"zh-TW":11,"zu":0};  true && !(__WEBPACK_AMD_DEFINE_RESULT__ = (() => { return client_translation_progress;}).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceURL=webpack://xabber.web/./translations/translation_progress.js?')},"./version.js":(module,exports,__webpack_require__)=>{eval('var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () { return JSON.parse(\n\'{"version_number":"2.3.2.200","version_description":"changed how presence and sync are sent, removed from attr from output stanzas, added result iq sending function"}\'\n)}).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceURL=webpack://xabber.web/./version.js?')},"?d546":()=>{eval("/* (ignored) */\n\n//# sourceURL=webpack://xabber.web/buffer_(ignored)?")},"?8131":()=>{eval("/* (ignored) */\n\n//# sourceURL=webpack://xabber.web/buffer_(ignored)?")},"?3fc0":()=>{eval("/* (ignored) */\n\n//# sourceURL=webpack://xabber.web/crypto_(ignored)?")},"?cad2":()=>{eval("/* (ignored) */\n\n//# sourceURL=webpack://xabber.web/util_(ignored)?")},"?593c":()=>{eval("/* (ignored) */\n\n//# sourceURL=webpack://xabber.web/util_(ignored)?")},"?4068":()=>{eval("/* (ignored) */\n\n//# sourceURL=webpack://xabber.web/buffer_(ignored)?")},"?e7e4":()=>{eval("/* (ignored) */\n\n//# sourceURL=webpack://xabber.web/buffer_(ignored)?")},"?7bec":()=>{eval("/* (ignored) */\n\n//# sourceURL=webpack://xabber.web/buffer_(ignored)?")},"?802b":()=>{eval("/* (ignored) */\n\n//# sourceURL=webpack://xabber.web/util_(ignored)?")},"?1e44":()=>{eval("/* (ignored) */\n\n//# sourceURL=webpack://xabber.web/util_(ignored)?")},"?0aec":()=>{eval("/* (ignored) */\n\n//# sourceURL=webpack://xabber.web/buffer_(ignored)?")},"?fbf1":()=>{eval("/* (ignored) */\n\n//# sourceURL=webpack://xabber.web/buffer_(ignored)?")},"?3e83":()=>{eval("/* (ignored) */\n\n//# sourceURL=webpack://xabber.web/util_(ignored)?")},"?19e6":()=>{eval("/* (ignored) */\n\n//# sourceURL=webpack://xabber.web/util_(ignored)?")},"?579c":()=>{eval("/* (ignored) */\n\n//# sourceURL=webpack://xabber.web/fs_(ignored)?")}},__webpack_module_cache__={},deferred,inProgress,dataWebpackPrefix;function __webpack_require__(e){var n=__webpack_module_cache__[e];if(void 0!==n)return n.exports;var t=__webpack_module_cache__[e]={id:e,loaded:!1,exports:{}};return __webpack_modules__[e].call(t.exports,t,t.exports,__webpack_require__),t.loaded=!0,t.exports}__webpack_require__.m=__webpack_modules__,__webpack_require__.amdO={},deferred=[],__webpack_require__.O=(e,n,t,i)=>{if(!n){var s=1/0;for(c=0;c<deferred.length;c++){for(var[n,t,i]=deferred[c],a=!0,r=0;r<n.length;r++)(!1&i||s>=i)&&Object.keys(__webpack_require__.O).every((e=>__webpack_require__.O[e](n[r])))?n.splice(r--,1):(a=!1,i<s&&(s=i));if(a){deferred.splice(c--,1);var o=t();void 0!==o&&(e=o)}}return e}i=i||0;for(var c=deferred.length;c>0&&deferred[c-1][2]>i;c--)deferred[c]=deferred[c-1];deferred[c]=[n,t,i]},__webpack_require__.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return __webpack_require__.d(n,{a:n}),n},__webpack_require__.d=(e,n)=>{for(var t in n)__webpack_require__.o(n,t)&&!__webpack_require__.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},__webpack_require__.f={},__webpack_require__.e=e=>Promise.all(Object.keys(__webpack_require__.f).reduce(((n,t)=>(__webpack_require__.f[t](e,n),n)),[])),__webpack_require__.u=e=>"xabber."+e+".js",__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),__webpack_require__.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),inProgress={},dataWebpackPrefix="xabber.web:",__webpack_require__.l=(e,n,t,i)=>{if(inProgress[e])inProgress[e].push(n);else{var s,a;if(void 0!==t)for(var r=document.getElementsByTagName("script"),o=0;o<r.length;o++){var c=r[o];if(c.getAttribute("src")==e||c.getAttribute("data-webpack")==dataWebpackPrefix+t){s=c;break}}s||(a=!0,(s=document.createElement("script")).charset="utf-8",s.timeout=120,__webpack_require__.nc&&s.setAttribute("nonce",__webpack_require__.nc),s.setAttribute("data-webpack",dataWebpackPrefix+t),s.src=e),inProgress[e]=[n];var l=(n,t)=>{s.onerror=s.onload=null,clearTimeout(d);var i=inProgress[e];if(delete inProgress[e],s.parentNode&&s.parentNode.removeChild(s),i&&i.forEach((e=>e(t))),n)return n(t)},d=setTimeout(l.bind(null,void 0,{type:"timeout",target:s}),12e4);s.onerror=l.bind(null,s.onerror),s.onload=l.bind(null,s.onload),a&&document.head.appendChild(s)}},__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},__webpack_require__.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{var e;__webpack_require__.g.importScripts&&(e=__webpack_require__.g.location+"");var n=__webpack_require__.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var t=n.getElementsByTagName("script");t.length&&(e=t[t.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),__webpack_require__.p=e})(),(()=>{var e={main:0};__webpack_require__.f.j=(n,t)=>{var i=__webpack_require__.o(e,n)?e[n]:void 0;if(0!==i)if(i)t.push(i[2]);else{var s=new Promise(((t,s)=>i=e[n]=[t,s]));t.push(i[2]=s);var a=__webpack_require__.p+__webpack_require__.u(n),r=new Error;__webpack_require__.l(a,(t=>{if(__webpack_require__.o(e,n)&&(0!==(i=e[n])&&(e[n]=void 0),i)){var s=t&&("load"===t.type?"missing":t.type),a=t&&t.target&&t.target.src;r.message="Loading chunk "+n+" failed.\n("+s+": "+a+")",r.name="ChunkLoadError",r.type=s,r.request=a,i[1](r)}}),"chunk-"+n,n)}},__webpack_require__.O.j=n=>0===e[n];var n=(n,t)=>{var i,s,[a,r,o]=t,c=0;if(a.some((n=>0!==e[n]))){for(i in r)__webpack_require__.o(r,i)&&(__webpack_require__.m[i]=r[i]);if(o)var l=o(__webpack_require__)}for(n&&n(t);c<a.length;c++)s=a[c],__webpack_require__.o(e,s)&&e[s]&&e[s][0](),e[s]=0;return __webpack_require__.O(l)},t=self.webpackChunkxabber_web=self.webpackChunkxabber_web||[];t.forEach(n.bind(null,0)),t.push=n.bind(null,t.push.bind(t))})();var __webpack_exports__=__webpack_require__.O(void 0,["vendors"],(()=>__webpack_require__("./src/xabber.js")));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();